{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "InvoiceController",
        "isFromBilling": false,
        "isManualChange": false,
        "isSalesCommissionForDatalink": false,
        "isSalesCommissionForRmPro": false,
        "isVip": false,
        "product_billing_rec": [
            "{}"
        ],
        "product_type": "product_rmpro",
        "selectedRetailer": [
            "{}"
        ]
    },
    "configAlternates": {
        "selectedRetailer": "object",
        "product_billing_rec": "object",
        "isManualChange": "boolean",
        "isSalesCommission": "boolean",
        "isSalesCommissionForRmPro": "boolean",
        "isSalesCommissionForDatalink": "boolean",
        "isFromBilling": "boolean",
        "currentInvoice": "array",
        "isVip": "boolean"
    },
    "designerId": "c4879461-875d-492b-aeab-5a090c4ae78a",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "selectedRetailer",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "product_billing_rec",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isManualChange",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isSalesCommissionForRmPro",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isSalesCommissionForDatalink",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isFromBilling",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "currentInvoice",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "product_type",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isVip",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showSubscriptionPage",
                "implHandler": [
                    "    var selectedUserRecord = RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();\r",
                    "          if( !( Object.keys(selectedUserRecord).length  )   ){\r",
                    "                // USER CLICKED ON ADD NEW RETAILER BTN\r",
                    "\r",
                    "                return ;\r",
                    "            }\r",
                    "getSubscriptionSheet().show() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "this.initInvoice( selectedUserRecord.record ) ;\r",
                    "\r",
                    "\r",
                    "var rtDtlsLbl = Ext.ComponentQuery.query('#billingSheetRtDtlsLbl')[0];\r",
                    "\r",
                    "var html = \"<b>\"+ selectedUserRecord.record.data.store_name + \"</b>\" ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "rtDtlsLbl.setHtml(html) ;\r",
                    "\r",
                    "function getSubscriptionSheet(){\r",
                    "\r",
                    "    if(Ext.ComponentQuery.query(\"#billingDetailSheet\")[0])\r",
                    "    {\r",
                    "\r",
                    "     return Ext.ComponentQuery.query(\"#billingDetailSheet\")[0];\r",
                    "\r",
                    "    }else{\r",
                    "\r",
                    "     return Ext.widget('billingDetailSheet');\r",
                    "    }\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "319f4bd6-0d9f-4acf-80d4-e6bc15f4c414"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record",
                    "productName"
                ],
                "fn": "initInvoice",
                "implHandler": [
                    "var executeWithoutProductName = function(){\r",
                    "    var that = this ;\r",
                    "    this.setIsVip(false);\r",
                    "    function msgHandler()\r",
                    "    {\r",
                    "        \r",
                    "        RMdatalink.app.getController('ProductBillingController').config.needToEdit = true ;\r",
                    "        var productSetpBtn = Ext.ComponentQuery.query('#invoiceRMPROProductSetupBtn')[0];\r",
                    "        productSetpBtn.fireEvent('tap',productSetpBtn);\r",
                    "        \r",
                    "    }\r",
                    "    function initRMpro()\r",
                    "    {\r",
                    "        \r",
                    "        \r",
                    "        \r",
                    "        var dataToUpdate = {\r",
                    "            \r",
                    "            product_billng : record.data.product_billng\r",
                    "        };\r",
                    "        that.resetRmproInvoice() ;\r",
                    "        \r",
                    "        if(\r",
                    "            dataToUpdate.product_billng  && dataToUpdate.product_billng.product_rmpro &&\r",
                    "            dataToUpdate.product_billng.product_rmpro.total_payble &&\r",
                    "            dataToUpdate.product_billng.product_rmpro.payment_period &&\r",
                    "            dataToUpdate.product_billng.product_rmpro.due_date\r",
                    "        )\r",
                    "        {\r",
                    "            \r",
                    "            dataToUpdate.product_billng.product_rmpro.payment_status = \"unpaid\" ;\r",
                    "            dataToUpdate.product_billng.product_rmpro.invoice_status = \"active\" ;\r",
                    "            currentInvoices.push(dataToUpdate.product_billng.product_rmpro);\r",
                    "            \r",
                    "            rmProndex = currentInvoices.length -1 ;\r",
                    "            \r",
                    "            \r",
                    "            \r",
                    "        } else{\r",
                    "            \r",
                    "            if(msg){\r",
                    "                msg += \",RMPro \" ;\r",
                    "            }else{\r",
                    "                msg = \"RMPro \" ;\r",
                    "            }\r",
                    "            \r",
                    "            \r",
                    "        }\r",
                    "        \r",
                    "        \r",
                    "    }\r",
                    "    \r",
                    "    \r",
                    "    function initVIP()\r",
                    "    {\r",
                    "        \r",
                    "        \r",
                    "        \r",
                    "        var dataToUpdate = {\r",
                    "            \r",
                    "            product_billng : record.data.product_billng\r",
                    "        };\r",
                    "        \r",
                    "        var key = 'product_vip';\r",
                    "        that.resetRmproInvoice() ;\r",
                    "        \r",
                    "        if(dataToUpdate.product_billng  && dataToUpdate.product_billng[key] &&\r",
                    "           dataToUpdate.product_billng[key].total_payble &&\r",
                    "           dataToUpdate.product_billng[key].payment_period &&\r",
                    "           dataToUpdate.product_billng[key].due_date )\r",
                    "        {\r",
                    "            \r",
                    "            dataToUpdate.product_billng[key].payment_status = \"unpaid\" ;\r",
                    "            dataToUpdate.product_billng[key].invoice_status = \"active\" ;\r",
                    "            currentInvoices.push(dataToUpdate.product_billng[key]);\r",
                    "            \r",
                    "            rmProndex = currentInvoices.length -1 ;\r",
                    "            \r",
                    "            that.setDatalinkBillingModules() ;\r",
                    "            \r",
                    "            \r",
                    "        } else{\r",
                    "            \r",
                    "            if(msg){\r",
                    "                msg += \",VIP \" ;\r",
                    "            }else{\r",
                    "                msg = \"VIP \" ;\r",
                    "            }\r",
                    "            \r",
                    "            \r",
                    "        }\r",
                    "        that.config.product_type = 'product_vip';\r",
                    "        \r",
                    "    }\r",
                    "    \r",
                    "\r",
                    "    \r",
                    "    function initDataLink()\r",
                    "    {\r",
                    "        \r",
                    "        \r",
                    "        var dataToUpdate = {\r",
                    "            \r",
                    "            product_billng : record.data.product_billng\r",
                    "        };\r",
                    "        that.resetDatalinkInvoice() ;\r",
                    "        if(dataToUpdate.product_billng  && dataToUpdate.product_billng.product_datalink ){\r",
                    "            dataToUpdate.product_billng.product_datalink.payment_status = \"unpaid\" ;\r",
                    "            dataToUpdate.product_billng.product_datalink.invoice_status = \"active\" ;\r",
                    "            \r",
                    "            currentInvoices.push(dataToUpdate.product_billng.product_datalink);\r",
                    "            that.setDatalinkBillInVoice() ;\r",
                    "            //setDatalinkBillInVoice\r",
                    "            that.setDatalinkBillingModules() ;\r",
                    "            that.setInvoiceDatalinkDiscount(Ext.ComponentQuery.query('#invoiceDatalinkPaymentPrdSlFld')[0].getValue());\r",
                    "            \r",
                    "        }\r",
                    "        else{\r",
                    "            \r",
                    "            if(msg){\r",
                    "                msg += \",Datalink \" ;\r",
                    "            }else{\r",
                    "                msg = \"Datalink \" ;\r",
                    "            }\r",
                    "            \r",
                    "            \r",
                    "        }\r",
                    "        \r",
                    "        \r",
                    "    }\r",
                    "    \r",
                    "    \r",
                    "    \r",
                    "    RMdatalink.app.getController('InvoiceHistoryController').config.displayGeneratedInvoice = false ;\r",
                    "    this.config.product_billing_rec  = null;\r",
                    "    this.config.selectedRetailer = record ;\r",
                    "    this.config.product_billing_rec =  record.data.product_billng ;\r",
                    "    var store_products = record.get('store_products') ;\r",
                    "    var msg = null ;\r",
                    "    \r",
                    "    that.config.isManualChange = false ;\r",
                    "    var currentInvoices = [] ;\r",
                    "    var rmProndex = 0 ;\r",
                    "    \r",
                    "    if(store_products.datalink_status && store_products.datalink_status == \"ACTIVE\"){\r",
                    "        \r",
                    "        //  this.loadVendorBillingData() ;\r",
                    "        \r",
                    "        //    Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0].setHidden(false);\r",
                    "        \r",
                    "        //  initDataLink() ;\r",
                    "        \r",
                    "        \r",
                    "    }else{\r",
                    "        \r",
                    "        //    Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0].setHidden(true);\r",
                    "    }\r",
                    "    \r",
                    "    \r",
                    "    if( ( store_products.rmpro_status && store_products.rmpro_status == \"ACTIVE\"  ) ||\r",
                    "        ( store_products.vip_status && store_products.vip_status == \"ACTIVE\"  )\r",
                    "      )\r",
                    "    {\r",
                    "        if(  true &&    ( store_products.vip_status && store_products.vip_status == \"ACTIVE\"  ) )\r",
                    "        {\r",
                    "            this.setIsVip(true);\r",
                    "            initVIP();\r",
                    "        }else\r",
                    "        {\r",
                    "            initRMpro() ;\r",
                    "        }\r",
                    "        \r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        that.resetRmproInvoice() ;\r",
                    "        function allProductSetup(){\r",
                    "            \r",
                    "            var rtBillingSheetCancelBtn = Ext.ComponentQuery.query('#rtBillingSheetCancelBtn')[0];\r",
                    "            rtBillingSheetCancelBtn.fireEvent('tap',rtBillingSheetCancelBtn);\r",
                    "            \r",
                    "        }\r",
                    "        \r",
                    "        Ext.Msg.alert(\"Alert\", \" Please do product setup first. \",allProductSetup);\r",
                    "    }\r",
                    "    \r",
                    "    \r",
                    "    if(msg){\r",
                    "        \r",
                    "        \r",
                    "        Ext.Msg.alert(\"Alert\", \" Please do product setup for \"+ msg,msgHandler);\r",
                    "        \r",
                    "    }\r",
                    "    \r",
                    "    that.config.isManualChange = true ;\r",
                    "    \r",
                    "    \r",
                    "    \r",
                    "    \r",
                    "    \r",
                    "    RMdatalink.app.getController('InvoiceHistoryController').initInvoiceHistory() ;\r",
                    "    \r",
                    "    \r",
                    "    \r",
                    "    var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "    rmProInvoicePanel.down('#InvoiceToNameLbl').setHtml(record.data.store_name );\r",
                    "    \r",
                    "    var currentInvoiceStr = Ext.getStore('CurrentInvoiceStore') ;\r",
                    "    currentInvoiceStr.removeAll() ;\r",
                    "    currentInvoiceStr.sync() ;\r",
                    "    \r",
                    "    currentInvoiceStr.setData(currentInvoices);\r",
                    "    currentInvoiceStr.sync() ;\r",
                    "    \r",
                    "    that.config.currentInvoice = [];// currentInvoices ;\r",
                    "    \r",
                    "    // var currentInvoiceLst = Ext.ComponentQuery.query('#invoiceCurrentSubscriptionsListPanel')[0].down('#mainList');\r",
                    "    \r",
                    "    \r",
                    "    //currentInvoiceLst.select(rmProndex,false,false) ;\r",
                    "};\r",
                    "\r",
                    "// IF PRODUCT NAME IS NOT DEFINED THAN CALL INIT INOVICE AS IT IS.\r",
                    "\r",
                    "\r",
                    "var executeWithProcutName = function(){\r",
                    "    var that = this ;\r",
                    "    this.setIsVip(false);\r",
                    "    function msgHandler(){\r",
                    "        \r",
                    "        RMdatalink.app.getController('ProductBillingController').config.needToEdit = true ;\r",
                    "        var productSetpBtn = Ext.ComponentQuery.query('#invoiceRMPROProductSetupBtn')[0];\r",
                    "        productSetpBtn.fireEvent('tap',productSetpBtn);\r",
                    "        \r",
                    "    }\r",
                    "    function initRMpro()\r",
                    "    {\r",
                    "        \r",
                    "        \r",
                    "        \r",
                    "        var dataToUpdate = {\r",
                    "            \r",
                    "            product_billng : record.data.product_billng\r",
                    "        };\r",
                    "        that.resetRmproInvoice() ;\r",
                    "        \r",
                    "        if(\r",
                    "            dataToUpdate.product_billng  && dataToUpdate.product_billng.product_rmpro &&\r",
                    "            dataToUpdate.product_billng.product_rmpro.total_payble &&\r",
                    "            dataToUpdate.product_billng.product_rmpro.payment_period &&\r",
                    "            dataToUpdate.product_billng.product_rmpro.due_date\r",
                    "        )\r",
                    "        {\r",
                    "            \r",
                    "            dataToUpdate.product_billng.product_rmpro.payment_status = \"unpaid\" ;\r",
                    "            dataToUpdate.product_billng.product_rmpro.invoice_status = \"active\" ;\r",
                    "            currentInvoices.push(dataToUpdate.product_billng.product_rmpro);\r",
                    "            \r",
                    "            rmProndex = currentInvoices.length -1 ;\r",
                    "            \r",
                    "            /*    that.setRMProBillInVoice() ;\r",
                    "\r",
                    "        that.setRMProBillingModules() ;\r",
                    "\r",
                    "        that.setInvoiceRmproDiscount(Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].getValue());\r",
                    "*/\r",
                    "            \r",
                    "        } else{\r",
                    "            \r",
                    "            if(msg){\r",
                    "                msg += \",RMPro \" ;\r",
                    "            }else{\r",
                    "                msg = \"RMPro \" ;\r",
                    "            }\r",
                    "            \r",
                    "            \r",
                    "        }\r",
                    "        \r",
                    "        \r",
                    "    }\r",
                    "    \r",
                    "    \r",
                    "    function initVIP()\r",
                    "    {\r",
                    "        \r",
                    "        \r",
                    "        \r",
                    "        var dataToUpdate = {\r",
                    "            \r",
                    "            product_billng : record.data.product_billng\r",
                    "        };\r",
                    "        \r",
                    "        var key = 'product_vip';\r",
                    "        that.resetRmproInvoice() ;\r",
                    "        \r",
                    "        if(dataToUpdate.product_billng  && dataToUpdate.product_billng[key] &&\r",
                    "           dataToUpdate.product_billng[key].total_payble &&\r",
                    "           dataToUpdate.product_billng[key].payment_period &&\r",
                    "           dataToUpdate.product_billng[key].due_date )\r",
                    "        {\r",
                    "            \r",
                    "            dataToUpdate.product_billng[key].payment_status = \"unpaid\" ;\r",
                    "            dataToUpdate.product_billng[key].invoice_status = \"active\" ;\r",
                    "            currentInvoices.push(dataToUpdate.product_billng[key]);\r",
                    "            \r",
                    "            rmProndex = currentInvoices.length -1 ;\r",
                    "            \r",
                    "            that.setDatalinkBillingModules() ;\r",
                    "            \r",
                    "            \r",
                    "        } else{\r",
                    "            \r",
                    "            if(msg){\r",
                    "                msg += \",VIP \" ;\r",
                    "            }else{\r",
                    "                msg = \"VIP \" ;\r",
                    "            }\r",
                    "            \r",
                    "            \r",
                    "        }\r",
                    "        that.config.product_type = 'product_vip';\r",
                    "        \r",
                    "    }\r",
                    "    \r",
                    "    \r",
                    "    \r",
                    "    \r",
                    "    ///////////////////////init datalink\r",
                    "    \r",
                    "    \r",
                    "    function initDataLink(){\r",
                    "        \r",
                    "        \r",
                    "        var dataToUpdate = {\r",
                    "            \r",
                    "            product_billng : record.data.product_billng\r",
                    "        };\r",
                    "        that.resetDatalinkInvoice() ;\r",
                    "        if(dataToUpdate.product_billng  && dataToUpdate.product_billng.product_datalink ){\r",
                    "            dataToUpdate.product_billng.product_datalink.payment_status = \"unpaid\" ;\r",
                    "            dataToUpdate.product_billng.product_datalink.invoice_status = \"active\" ;\r",
                    "            \r",
                    "            currentInvoices.push(dataToUpdate.product_billng.product_datalink);\r",
                    "            that.setDatalinkBillInVoice() ;\r",
                    "            //setDatalinkBillInVoice\r",
                    "            that.setDatalinkBillingModules() ;\r",
                    "            that.setInvoiceDatalinkDiscount(Ext.ComponentQuery.query('#invoiceDatalinkPaymentPrdSlFld')[0].getValue());\r",
                    "            \r",
                    "        }\r",
                    "        else{\r",
                    "            \r",
                    "            if(msg){\r",
                    "                msg += \",Datalink \" ;\r",
                    "            }else{\r",
                    "                msg = \"Datalink \" ;\r",
                    "            }\r",
                    "            \r",
                    "            \r",
                    "        }\r",
                    "        \r",
                    "        \r",
                    "    }\r",
                    "    \r",
                    "    \r",
                    "    \r",
                    "    RMdatalink.app.getController('InvoiceHistoryController').config.displayGeneratedInvoice = false ;\r",
                    "    \r",
                    "    this.config.product_billing_rec  = null;\r",
                    "    \r",
                    "    this.config.selectedRetailer = record ;\r",
                    "    \r",
                    "    this.config.product_billing_rec =  record.data.product_billng ;\r",
                    "    \r",
                    "    var store_products = record.get('store_products') ;\r",
                    "    var msg = null ;\r",
                    "    \r",
                    "    that.config.isManualChange = false ;\r",
                    "    var currentInvoices = [] ;\r",
                    "    var rmProndex = 0 ;\r",
                    "    \r",
                    "    if(store_products.datalink_status && store_products.datalink_status == \"ACTIVE\" && productName ==\"Datalink\")\r",
                    "    {\r",
                    "        \r",
                    "        //  this.loadVendorBillingData() ;\r",
                    "        \r",
                    "        //    Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0].setHidden(false);\r",
                    "        \r",
                    "        //  initDataLink() ;\r",
                    "        \r",
                    "        \r",
                    "    }else   if( ( store_products.rmpro_status && store_products.rmpro_status == \"ACTIVE\"  && productName ==\"RMPro\") ||\r",
                    "               ( store_products.vip_status && store_products.vip_status == \"ACTIVE\" && productName ==\"VIP\" )\r",
                    "              )\r",
                    "    {\r",
                    "        \r",
                    "        \r",
                    "        //  Ext.ComponentQuery.query('#productRmproInvoicePanel')[0].setHidden(false);\r",
                    "        \r",
                    "        \r",
                    "        if(  true &&    ( store_products.vip_status && store_products.vip_status == \"ACTIVE\"  ) )\r",
                    "        {\r",
                    "            this.setIsVip(true);\r",
                    "            initVIP();\r",
                    "        }else\r",
                    "        {\r",
                    "            initRMpro() ;\r",
                    "        }\r",
                    "        \r",
                    "        \r",
                    "        \r",
                    "        \r",
                    "    }else{\r",
                    "        return false;\r",
                    "    }\r",
                    "    \r",
                    "    that.config.isManualChange = true ;\r",
                    "    RMdatalink.app.getController('InvoiceHistoryController').initInvoiceHistory() ;\r",
                    "    var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "    rmProInvoicePanel.down('#InvoiceToNameLbl').setHtml(record.data.store_name );\r",
                    "    var currentInvoiceStr = Ext.getStore('CurrentInvoiceStore') ;\r",
                    "    currentInvoiceStr.removeAll() ;\r",
                    "    currentInvoiceStr.sync() ;\r",
                    "    currentInvoiceStr.setData(currentInvoices);\r",
                    "    currentInvoiceStr.sync() ;\r",
                    "    that.config.currentInvoice = [];// currentInvoices ;\r",
                    "    return true;\r",
                    "    \r",
                    "    // var currentInvoiceLst = Ext.ComponentQuery.query('#invoiceCurrentSubscriptionsListPanel')[0].down('#mainList');\r",
                    "    \r",
                    "    \r",
                    "    //currentInvoiceLst.select(rmProndex,false,false) ;\r",
                    "    \r",
                    "};\r",
                    "if( productName &&  false){\r",
                    "    \r",
                    "    var wasExecuted = executeWithProcutName.call(this);\r",
                    "    if(wasExecuted){\r",
                    "        \r",
                    "    }else{\r",
                    "        executeWithoutProductName.call(this);\r",
                    "    }\r",
                    "    debugger;\r",
                    "}else{\r",
                    "    executeWithoutProductName.call(this);\r",
                    "}\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "66214cc8-04df-4d54-a528-2063ac57dbbc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRMProBillingModules",
                "implHandler": [
                    "\r",
                    "console.log(this.config.selectedRetailer) ;\r",
                    "\r",
                    "///debugger;\r",
                    "\r",
                    "//var rmProBilling = this.config.selectedRetailer.data.product_billng.product_rmpro ;\r",
                    "\r",
                    "var rmProBilling = this.config.product_billing_rec.product_rmpro ;\r",
                    "\r",
                    "var selectedPackageValue = rmProBilling.selected_package ;\r",
                    "\r",
                    "var selectedPackage = null ;\r",
                    "\r",
                    "var billingController =  RMdatalink.app.getController('BillingDetailsController') ;\r",
                    "\r",
                    "if(billingController.config.pricingData){\r",
                    "\r",
                    "   var packages = billingController.config.pricingData[3].pricing_policy ;\r",
                    "\r",
                    "    for(var i = 0 ;i < packages.length; i++){\r",
                    "\r",
                    "        if(packages[i].value == selectedPackageValue){\r",
                    "\r",
                    "            selectedPackage = packages[i];\r",
                    "            break;\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "Ext.ComponentQuery.query('#invoiceRmProBundelPriceLbl')[0].setHtml(selectedPackage.rm_pro_bundle_price);\r",
                    "Ext.ComponentQuery.query('#invoiceRmProPackNameLbl')[0].setHtml(selectedPackage.text);\r",
                    "\r",
                    "var subTotal = 0;\r",
                    "subTotal += parseFloat(selectedPackage.rm_pro_bundle_price) ;\r",
                    "var actualTotal = 0 ;\r",
                    "//rm_pro_bundle_price\r",
                    "\r",
                    "var allSelectedModules = rmProBilling.product_modules ;\r",
                    "console.log(\"****\");\r",
                    "console.log(selectedPackage);\r",
                    "console.log(allSelectedModules);\r",
                    "\r",
                    "\r",
                    "var selectedRate = rmProBilling.selected_rate ;\r",
                    "\r",
                    "this.showHidePromoPrice(selectedRate);\r",
                    "\r",
                    "var rmProStore = Ext.getStore('products.RMProStore') ;\r",
                    "var packageStore = Ext.getStore('products.BillingFromPackages') ;\r",
                    "var addOnsStore = Ext.getStore('products.BillingModuleAddons') ;\r",
                    "\r",
                    "var allRecStr = Ext.getStore('printInvoice.subscribedModulesStore') ;\r",
                    "\r",
                    "allRecStr.removeAll();\r",
                    "allRecStr.sync();\r",
                    "\r",
                    "addOnsStore.removeAll();\r",
                    "addOnsStore.sync();\r",
                    "\r",
                    "packageStore.removeAll();\r",
                    "packageStore.sync();\r",
                    "\r",
                    "for(var i= 0 ; i < allSelectedModules.length; i++){\r",
                    "\r",
                    "    var stdPromoPrice = getPackageStdPromoPrice(allSelectedModules[i].module_id) ;\r",
                    "    var rmProRecIndex = rmProStore.findExact('_id',allSelectedModules[i].module_id);\r",
                    "    if(rmProRecIndex == -1){\r",
                    "         continue;\r",
                    "    }\r",
                    "    var rmProRec = rmProStore.getAt(rmProRecIndex) ;\r",
                    "    actualTotal += parseFloat(allSelectedModules[i].quantity * stdPromoPrice[selectedRate]) ;\r",
                    "    var dataToAdd = {\r",
                    "            _id:allSelectedModules[i].module_id,\r",
                    "            module_name:rmProRec.get('module_name'),\r",
                    "            module_listed_order:rmProRec.get('module_listed_order'),\r",
                    "            trial:allSelectedModules[i].trial,\r",
                    "            remark_val:allSelectedModules[i].remark_val,\r",
                    "            quantity:allSelectedModules[i].quantity,\r",
                    "            per_month:(allSelectedModules[i].quantity * stdPromoPrice[selectedRate]),\r",
                    "            module_standard_price :stdPromoPrice.module_standard_price,\r",
                    "            module_promotional_price:stdPromoPrice.module_promotional_price\r",
                    "\r",
                    "        };\r",
                    "\r",
                    "    allRecStr.addData(dataToAdd);\r",
                    "    if(checkForInPackage(allSelectedModules[i].module_id)){\r",
                    "        packageStore.addData(dataToAdd);\r",
                    "    }else{\r",
                    "\r",
                    "        subTotal += parseFloat(allSelectedModules[i].quantity * stdPromoPrice[selectedRate]) ;\r",
                    "        addOnsStore.addData(dataToAdd);\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "addOnsStore.sync();\r",
                    "\r",
                    "\r",
                    "packageStore.sync();\r",
                    "\r",
                    "allRecStr.sync();\r",
                    "\r",
                    "\r",
                    "    console.error(allRecStr);\r",
                    "\r",
                    "this.setRmProPacksAddonsHeight() ;\r",
                    "\r",
                    "function checkForInPackage(module_id){\r",
                    "\r",
                    "    var packageModules = selectedPackage.rm_pro_modules;\r",
                    "\r",
                    "    for(var i =0 ;i < packageModules.length; i++){\r",
                    "\r",
                    "        if(packageModules[i].module_id == module_id){\r",
                    "\r",
                    "            return true;\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    return false ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function getPackageStdPromoPrice(module_id){\r",
                    "\r",
                    "     var packageModules = selectedPackage.data;\r",
                    "\r",
                    "\r",
                    "    for(var i =0 ;i < packageModules.length; i++){\r",
                    "\r",
                    "        if(packageModules[i].product_id == module_id){\r",
                    "\r",
                    "            return {\r",
                    "                 module_promotional_price: packageModules[i].promotional_price,\r",
                    "                 module_standard_price: packageModules[i].standard_price\r",
                    "            };\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    return {\r",
                    "        module_promotional_price: \"0\",\r",
                    "        module_standard_price: \"0\"\r",
                    "    } ;\r",
                    "}\r",
                    "\r",
                    "// /data:\r",
                    "\r",
                    "Ext.ComponentQuery.query('#invoiceRmproSubtotal')[0].setValue( formatNum(subTotal));\r",
                    "Ext.ComponentQuery.query('#invoiceRmproSaving')[0].setValue( formatNum(actualTotal - subTotal));\r",
                    "\r",
                    "this.setCommisionRmproFlds(rmProBilling);\r",
                    "this.setInvoiceRmproDiscount(\"1\");"
                ]
            },
            "designerId": "2b4cc61b-a3bd-445b-81bf-a00f19a02639"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDatalinkBillingModules",
                "implHandler": [
                    "var product_type = this.config.product_type ;\r",
                    "\r",
                    "\r",
                    "if(false && this.getIsVip(true))\r",
                    "{\r",
                    "\r",
                    "    var rec =  RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();\r",
                    "        product_type = rec.record.data.product_billng.product_vip;\r",
                    "\r",
                    "}\r",
                    "console.log(this.config.selectedRetailer) ;\r",
                    "\r",
                    "\r",
                    "//var rmProBilling = this.config.selectedRetailer.data.product_billng.product_datalink ;\r",
                    "var rmProBilling;\r",
                    "        if( this.getIsVip())\r",
                    "        {\r",
                    "\r",
                    "            var rec =  RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();\r",
                    "                //rmProBilling = rec.record.data.product_billng.product_vip;\r",
                    "                product_type = 'product_vip';\r",
                    "\r",
                    "        }\r",
                    " rmProBilling = this.config.product_billing_rec[product_type] ;\r",
                    "\r",
                    "\r",
                    "var billingController =  RMdatalink.app.getController('BillingDetailsController') ;\r",
                    "\r",
                    "var allRecStr = Ext.getStore('printInvoice.subscribedModulesStore') ;\r",
                    "\r",
                    "allRecStr.removeAll();\r",
                    "allRecStr.sync();\r",
                    "\r",
                    "\r",
                    "var subTotal = 0;\r",
                    "\r",
                    "var actualTotal = 0 ;\r",
                    "\r",
                    "var allSelectedModules = rmProBilling.product_modules ;\r",
                    "\r",
                    "console.log(allSelectedModules);\r",
                    "\r",
                    "   allRecStr.setData(allSelectedModules);\r",
                    "this.setRmProPacksAddonsHeight() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "for(var i=0; i < allSelectedModules.length ; i++){\r",
                    "    subTotal += parseFloat(allSelectedModules[i].per_month);\r",
                    "    actualTotal += parseFloat(allSelectedModules[i].standard_total);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "Ext.ComponentQuery.query('#invoiceRmproSubtotal')[0].setValue( formatNum(subTotal));\r",
                    "Ext.ComponentQuery.query('#invoiceRmproSaving')[0].setValue( formatNum(actualTotal - subTotal));\r",
                    "\r",
                    "//this.setCommisionRmproFlds(rmProBilling);\r",
                    " this.setInvoiceDatalinkDiscount(\"1\");\r",
                    "//this.setInvoiceRmproDiscount(\"1\");"
                ]
            },
            "designerId": "15f567c3-7175-42aa-8c74-d560c4da38bf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "selectedRate"
                ],
                "fn": "showHidePromoPrice",
                "implHandler": [
                    "var  packListPanel = Ext.ComponentQuery.query('#invoiceRmProPackageListPanel')[0] ;\r",
                    "var  addOnsListPanel = Ext.ComponentQuery.query('#invoiceRmProAddOnsListPanel')[0] ;\r",
                    "\r",
                    "  var packList = packListPanel.down('#billingDetList') ;\r",
                    "  var addOnsList = addOnsListPanel.down('#billingDetList') ;\r",
                    "\r",
                    "  var addOnsheaderList = addOnsListPanel.down('#billingDetListHeader') ;\r",
                    " var packheaderList =    packListPanel.down('#billingDetListHeader') ;\r",
                    "\r",
                    "if(selectedRate == \"module_standard_price\"){\r",
                    "    addOnsheaderList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '        <div style=\"width: 20px;\" data-name=\"all\"></div>',\r",
                    "               '    </div>',\r",
                    "\r",
                    "               '    <div style=\"width: 20%;\" data-name=\"module_name\">',\r",
                    "               '        Product Name&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 12%;\" data-name=\"quantity\">',\r",
                    "               '        Qty&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_standard_price\">',\r",
                    "               '        Unit Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_promotional_price\">',\r",
                    "               '        ',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"per_month\">',\r",
                    "               '        Amount&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "addOnsheaderList.refresh();\r",
                    "\r",
                    "addOnsList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main pointerCursor\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '    </div>',\r",
                    "               '    <div style=\"width: 20%;\">{module_name}</div>',\r",
                    "               '    <div style=\"width: 12%;\">{quantity}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\">{module_standard_price}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\"></div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;text-align: center;\">{per_month}</div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "\r",
                    "  addOnsList.refresh() ;\r",
                    "\r",
                    "    //////////////////////////////\r",
                    "        packheaderList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '        <div style=\"width: 20px;\" data-name=\"all\"></div>',\r",
                    "               '    </div>',\r",
                    "\r",
                    "               '    <div style=\"width: 20%;\" data-name=\"module_name\">',\r",
                    "               '        Product Name&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 12%;\" data-name=\"quantity\">',\r",
                    "               '        Qty&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_standard_price\">',\r",
                    "               '        Unit Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_promotional_price\">',\r",
                    "               '        ',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"per_month\">',\r",
                    "               '        Amount&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "packheaderList.refresh();\r",
                    "\r",
                    "packList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main pointerCursor\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '    </div>',\r",
                    "               '    <div style=\"width: 20%;\">{module_name}</div>',\r",
                    "               '    <div style=\"width: 12%;\">{quantity}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\">{module_standard_price}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\"></div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\"></div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "\r",
                    "  packList.refresh() ;\r",
                    "\r",
                    "    //////////////////////////////\r",
                    "\r",
                    "\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "\r",
                    "    addOnsheaderList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '        <div style=\"width: 20px;\" data-name=\"all\"></div>',\r",
                    "               '    </div>',\r",
                    "\r",
                    "               '    <div style=\"width: 20%;\" data-name=\"module_name\">',\r",
                    "               '        Product Name&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 12%;\" data-name=\"quantity\">',\r",
                    "               '        Qty&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_standard_price\">',\r",
                    "               '        Unit Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_promotional_price\">',\r",
                    "               '        Promotional Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"per_month\">',\r",
                    "               '        Amount&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "addOnsheaderList.refresh();\r",
                    "\r",
                    "addOnsList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main pointerCursor\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '    </div>',\r",
                    "               '    <div style=\"width: 20%;\">{module_name}</div>',\r",
                    "               '    <div style=\"width: 12%;\">{quantity}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\">{module_standard_price}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\">{module_promotional_price}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;text-align: center;\">{per_month}</div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "\r",
                    "    addOnsList.refresh() ;\r",
                    "    //////////////////////////////\r",
                    "\r",
                    "        packheaderList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '        <div style=\"width: 20px;\" data-name=\"all\"></div>',\r",
                    "               '    </div>',\r",
                    "\r",
                    "               '    <div style=\"width: 20%;\" data-name=\"module_name\">',\r",
                    "               '        Product Name&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 12%;\" data-name=\"quantity\">',\r",
                    "               '        Qty&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_standard_price\">',\r",
                    "               '        Unit Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_promotional_price\">',\r",
                    "               '        Promotional Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"per_month\">',\r",
                    "               '        Amount&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "packheaderList.refresh();\r",
                    "\r",
                    "packList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main pointerCursor\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '    </div>',\r",
                    "               '    <div style=\"width: 20%;\">{module_name}</div>',\r",
                    "               '    <div style=\"width: 12%;\">{quantity}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\">{module_standard_price}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\">{module_promotional_price}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\"></div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "\r",
                    "    packList.refresh() ;\r",
                    "}"
                ]
            },
            "designerId": "95813673-6641-4d48-a8c8-d21068b01936"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "selectedRate"
                ],
                "fn": "showHideDatalinkPromoPrice",
                "implHandler": [
                    "\r",
                    "var  addOnsListPanel = Ext.ComponentQuery.query('#invoiceDatalinkAddOnsListPanel')[0] ;\r",
                    "\r",
                    "  var addOnsList = addOnsListPanel.down('#billingDetList') ;\r",
                    "\r",
                    "  var addOnsheaderList = addOnsListPanel.down('#billingDetListHeader') ;\r",
                    "if(selectedRate == \"module_standard_price\"){\r",
                    "    addOnsheaderList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '        <div style=\"width: 20px;\" data-name=\"all\"></div>',\r",
                    "               '    </div>',\r",
                    "\r",
                    "               '    <div style=\"width: 20%;\" data-name=\"module_name\">',\r",
                    "               '        Product Name&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 12%;\" data-name=\"quantity\">',\r",
                    "               '        Qty&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_standard_price\">',\r",
                    "               '        Unit Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_promotional_price\">',\r",
                    "               '        ',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"per_month\">',\r",
                    "               '        Amount&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "addOnsheaderList.refresh();\r",
                    "\r",
                    "addOnsList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main pointerCursor\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '    </div>',\r",
                    "               '    <div style=\"width: 20%;\">{module_name}</div>',\r",
                    "               '    <div style=\"width: 12%;\">{quantity}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\">{module_standard_price}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\"></div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;text-align: center;\">{per_month}</div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "\r",
                    "  addOnsList.refresh() ;\r",
                    "\r",
                    "    //////////////////////////////\r",
                    "\r",
                    "\r",
                    "    //////////////////////////////\r",
                    "\r",
                    "\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "\r",
                    "    addOnsheaderList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '        <div style=\"width: 20px;\" data-name=\"all\"></div>',\r",
                    "               '    </div>',\r",
                    "\r",
                    "               '    <div style=\"width: 20%;\" data-name=\"module_name\">',\r",
                    "               '        Product Name&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 12%;\" data-name=\"quantity\">',\r",
                    "               '        Qty&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_standard_price\">',\r",
                    "               '        Unit Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"module_promotional_price\">',\r",
                    "               '        Promotional Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "                '    <div style=\"width: 20%;\" data-name=\"per_month\">',\r",
                    "               '        Amount&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "               '    </div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "addOnsheaderList.refresh();\r",
                    "\r",
                    "addOnsList.setItemTpl(\r",
                    "    Ext.create('Ext.XTemplate',\r",
                    "               '<div class=\"x-rm-listtpl-main pointerCursor\">',\r",
                    "               '    <div style=\"width: 6%;\">',\r",
                    "               '    </div>',\r",
                    "               '    <div style=\"width: 20%;\">{module_name}</div>',\r",
                    "               '    <div style=\"width: 12%;\">{quantity}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\">{module_standard_price}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;\">{module_promotional_price}</div>',\r",
                    "               '    <div style=\"width: 20%;padding-right: 1%;text-align: center;\">{per_month}</div>',\r",
                    "               '</div>'\r",
                    "              )\r",
                    ");\r",
                    "\r",
                    "    addOnsList.refresh() ;\r",
                    "    //////////////////////////////\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "52397717-f04e-4123-b4b4-09463ec5e011"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "rmProBilling"
                ],
                "fn": "setCommisionRmproFlds",
                "implHandler": [
                    "//commissionable_ammount\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceCommissionableAmtFld').setValue(rmProBilling.commissionable_ammount);\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceCommissionPercentFld').setValue(rmProBilling.commission_percent);\r",
                    "\r",
                    "\r",
                    "//rmProInvoicePanel.down('#invoiceAmmountFld').setValue(rmProBilling.commissionable_ammount);\r",
                    "\r",
                    "var commisson = parseFloat(rmProBilling.commissionable_ammount) * (parseFloat(rmProBilling.commission_percent)/100) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceCommissionFld').setValue(commisson);\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "7547cd01-4136-4894-97be-4e6314d1f68f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "selectfield[itemId=invoiceRmProPaymentPrdSlFld]",
                "designer|targetType": "Ext.field.Select",
                "fn": "oninvoiceRmProPaymentPrdSlFldChange",
                "implHandler": [
                    "\r",
                    "\r",
                    "if(!newValue){\r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "var that = this ;\r",
                    "var product_key = this.config.product_type ;\r",
                    "\r",
                    "\r",
                    "if(product_key == \"product_rmpro\")\r",
                    "{\r",
                    "    this.setInvoiceRmproDiscount(newValue);\r",
                    "}\r",
                    "else{\r",
                    "    this.setInvoiceDatalinkDiscount(newValue);\r",
                    "}\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "rmProSubscrPaymentStartDateFld\r",
                    "rmProSubscrPaymentEndDateFld\r",
                    "\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "if( ! this.config.isManualChange ){\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "var strtDate = new Date(rmProInvoicePanel.down('#rmProSubscrPaymentStartDateFld').getValue()) ;\r",
                    "var endDate ;\r",
                    "if(strtDate){\r",
                    "\r",
                    "    endDate = strtDate.setMonth(strtDate.getMonth() + parseInt(newValue,0)) ;\r",
                    "\r",
                    "    rmProInvoicePanel.down('#rmProSubscrPaymentEndDateFld').setValue(RMdatalink.util.globalMethods.getAMDate(endDate)) ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng :that.config.product_billing_rec  ///n\r",
                    "};\r",
                    "\r",
                    "\r",
                    "var product_rmpro = dataToUpdate.product_billng[product_key] ;   //.product_rmpro ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "rmProInvoicePanel.down('#billingLiscencePrdLbl').setHtml(\"<b>Subscription License for \" + newValue + \" Month(s) From: \"+ product_rmpro.payment_period_start + \"   To: \"+ RMdatalink.util.globalMethods.getAMDate(endDate) +\"</b>\") ;\r",
                    "\r",
                    "  this.handleAmountPaid() ;\r",
                    "\r",
                    "var ratio = parseInt(newValue) / parseInt(product_rmpro.payment_period) ;\r",
                    "var commisionableAmt =rmProInvoicePanel.down('#invoiceCommissionableAmtFld').getValue() ;\r",
                    "if(commisionableAmt && commisionableAmt != \"\"){\r",
                    "\r",
                    "    commisionableAmt = parseFloat(commisionableAmt) ;\r",
                    "    commisionableAmt = ratio * commisionableAmt ;\r",
                    "\r",
                    "    rmProInvoicePanel.down('#invoiceCommissionableAmtFld').setValue(commisionableAmt);\r",
                    "}"
                ],
                "name": "change"
            },
            "designerId": "336e2cd7-123e-43ca-bd53-c2eca2f7a576"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "selectfield[itemId=invoiceDatalinkPaymentPrdSlFld]",
                "designer|targetType": "Ext.field.Select",
                "fn": "oninvoiceDatalinkPaymentPrdSlFldChange",
                "implHandler": [
                    "this.setInvoiceDatalinkDiscount(newValue);\r",
                    ""
                ],
                "name": "change"
            },
            "designerId": "e9b23ca3-15c6-40e5-ad60-788e90c85e75"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "rmProBilling"
                ],
                "fn": "setCommisionDatalinkFlds",
                "implHandler": [
                    "//commissionable_ammount\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceDatalinkCommissionableAmtFld').setValue(rmProBilling.commissionable_ammount);\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceDatalinkCommissionPercentFld').setValue(rmProBilling.commission_percent);\r",
                    "\r",
                    "\r",
                    "//rmProInvoicePanel.down('#invoiceAmmountFld').setValue(rmProBilling.commissionable_ammount);\r",
                    "\r",
                    "var commisson = parseFloat(rmProBilling.commissionable_ammount) * (parseFloat(rmProBilling.commission_percent)/100) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceDatalinkCommissionFld').setValue(commisson);\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "ab610681-49da-4bac-9c1b-39f1554421d6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "duration",
                    "isHistoryInvoice"
                ],
                "fn": "setInvoiceRmproDiscount",
                "implHandler": [
                    "var that = this ;\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec //rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "var product_rmpro = dataToUpdate.product_billng.product_rmpro ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var paymntDurationYr = parseFloat(duration) / 12 ;\r",
                    "\r",
                    "\r",
                    "var billingController =  RMdatalink.app.getController('BillingDetailsController') ;\r",
                    "\r",
                    "\r",
                    "var discounts = billingController.config.pricingData[3].discount_policy ;\r",
                    "var discountValue = 0 ;\r",
                    "\r",
                    "console.log(paymntDurationYr) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "discountValue = getPercentDiscount() ;\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceDiscountAppliedFld').setValue(discountValue || 0);\r",
                    "\r",
                    "var subTotal = rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue() ;\r",
                    "subTotal = subTotal.replace(\",\",\"\");\r",
                    "subTotal = parseFloat(subTotal) ;\r",
                    "\r",
                    "\r",
                    "var totalPayble = parseFloat(product_rmpro.monthly_membership) *   parseFloat(duration)  ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(discountValue > 0){\r",
                    "\r",
                    "    totalPayble = ((totalPayble * (100-discountValue)) / 100) ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "var totalSaving = (subTotal*  parseFloat(duration)  ) - totalPayble ;\r",
                    "\r",
                    "var tempSaving = rmProInvoicePanel.down('#invoiceRmproSaving').getValue();\r",
                    "\r",
                    "tempSaving = tempSaving.replace(\",\",\"\");\r",
                    "totalSaving += parseFloat(tempSaving) ;\r",
                    "\r",
                    "\r",
                    "totalSaving = totalSaving.toFixed(2) ;\r",
                    "totalPayble = totalPayble.toFixed(2) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(formatNum(totalPayble));\r",
                    "rmProInvoicePanel.down('#invoiceTotalSavingFld').setValue( formatNum(totalSaving || 0));\r",
                    "\r",
                    "//rmProInvoicePanel.down('#invoiceAmmountFld').setValue(totalPayble);\r",
                    "\r",
                    "var headerHtml = \"\" ;\r",
                    "if(isHistoryInvoice){\r",
                    "\r",
                    "    headerHtml = \"Due Date :\"+product_rmpro.due_date+\" invoice_no: \"+product_rmpro.invoice_number+\" <b>Total Payble $ : \"+ formatNum(totalPayble) + \"</b> <span style='color:red;'> PAID</span>\"  ;\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    headerHtml = \"Due Date :\"+product_rmpro.due_date+\" invoice_no: \"+product_rmpro.invoice_number+\" <b>Total Payble $ : \"+ formatNum(totalPayble) + \"$</b>\"  ;\r",
                    "}\r",
                    "\r",
                    "Ext.ComponentQuery.query('#billingRMProDtlsLbl')[0].setHtml(headerHtml);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getPercentDiscount(){\r",
                    "\r",
                    "    var discoutToReturn = 0 ;\r",
                    "    for(var i = discounts.length -1  ; i >= 0 ; i-- ){\r",
                    "\r",
                    "       var lowerDuration = 0 ;\r",
                    "\r",
                    "        if(i > 0){\r",
                    "\r",
                    "            lowerDuration = discounts[i-1].discount_duration ;\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "       if( paymntDurationYr > lowerDuration && paymntDurationYr >= discounts[i].discount_duration ){\r",
                    "\r",
                    "           discoutToReturn = discounts[i].discount_value ;\r",
                    "           return discoutToReturn ;\r",
                    "       }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    return discoutToReturn ;\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "2bfe2724-b1b9-4ede-94b3-7f8d43ef4214"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "duration",
                    "isHistoryInvoice"
                ],
                "fn": "setInvoiceDatalinkDiscount",
                "implHandler": [
                    "\r",
                    "var product_key = this.config.product_type ;\r",
                    "\r",
                    " duration = Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].getValue() || 12;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var that = this ;\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec //rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "var product_rmpro = dataToUpdate.product_billng[product_key] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var paymntDurationYr = parseFloat(duration) / 12 ;\r",
                    "\r",
                    "\r",
                    "var billingController =  RMdatalink.app.getController('BillingDetailsController') ;\r",
                    "\r",
                    "\r",
                    "var discounts = billingController.config.pricingData[3].discount_policy ;\r",
                    "var discountValue = 0 ;\r",
                    "\r",
                    "console.log(paymntDurationYr) ;\r",
                    "\r",
                    "\r",
                    "if(product_key == \"product_rmpro\"){\r",
                    "\r",
                    "            discountValue = getPercentDiscount() ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceDiscountAppliedFld').setValue(discountValue || 0);\r",
                    "\r",
                    "var subTotal = parseFloat(rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue()  || 0) ;\r",
                    "\r",
                    "\r",
                    "var totalPayble = parseFloat(  rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()    ||\r",
                    "                              (subTotal  )      \r",
                    "                             \r",
                    "                            )  ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "//var totalSaving = (subTotal*  parseFloat(duration)  ) - totalPayble ;\r",
                    "var totalSaving = (subTotal   ) - totalPayble ;\r",
                    "\r",
                    "totalSaving += parseFloat(rmProInvoicePanel.down('#invoiceRmproSaving').getValue()) ;\r",
                    "\r",
                    "\r",
                    "totalSaving = totalSaving.toFixed(2) ;\r",
                    "totalPayble = totalPayble.toFixed(2) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(totalPayble);\r",
                    "rmProInvoicePanel.down('#invoiceTotalSavingFld').setValue(totalSaving || 0);\r",
                    "\r",
                    "//rmProInvoicePanel.down('#invoiceAmmountFld').setValue(totalPayble);\r",
                    "\r",
                    "\r",
                    "this.handleAmountPaid() ;\r",
                    "var due_date = rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "try{\r",
                    "    Ext.ComponentQuery.query('#billingRMProDtlsLbl')[0].setHtml(\"Due Date :\"+ due_date +\" invoice_no: \"+product_rmpro.invoice_number+\" <b>Total Payble : \"+totalPayble + \"$</b>\" );\r",
                    "}catch(e){\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getPercentDiscount(){\r",
                    "\r",
                    "    var discoutToReturn = 0 ;\r",
                    "    for(var i = discounts.length -1  ; i >= 0 ; i-- ){\r",
                    "\r",
                    "       var lowerDuration = 0 ;\r",
                    "\r",
                    "        if(i > 0){\r",
                    "\r",
                    "            lowerDuration = discounts[i-1].discount_duration ;\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "       if( paymntDurationYr > lowerDuration && paymntDurationYr >= discounts[i].discount_duration ){\r",
                    "\r",
                    "           discoutToReturn = discounts[i].discount_value ;\r",
                    "           return discoutToReturn ;\r",
                    "       }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    return discoutToReturn ;\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "e01dc653-a118-449d-82c6-b34cf39135c4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "inputFld",
                    "record_key"
                ],
                "fn": "updateSalesPersonsList",
                "implHandler": [
                    "\r",
                    "var _id = inputFld.attributes['data-id'].value ;\r",
                    "var value = inputFld.value ;\r",
                    "\r",
                    "var rmProBillingStore = Ext.getStore('products.RtSalesPersonStore') ;\r",
                    "var recIndex = rmProBillingStore.findExact('_id',_id) ;\r",
                    "\r",
                    "if(recIndex == -1){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var record = rmProBillingStore.getAt(recIndex) ;\r",
                    "\r",
                    "record.set(record_key,value) ;\r",
                    "\r",
                    "//rearrangeSalesCommission(rmProBillingStore,value,_id) ;\r",
                    "\r",
                    "\r",
                    "function rearrangeSalesCommission(customersStore,value,updated_id){\r",
                    "\r",
                    "    var updatedRecIndex = customersStore.findExact('_id',updated_id) ;\r",
                    "\r",
                    "    var cStoreLength = customersStore.getData().all.length ;\r",
                    "\r",
                    "    var maxCommission = 100 - parseFloat(value,0);\r",
                    "\r",
                    "    var priorRecIndex = 0 ;\r",
                    "\r",
                    "    if(cStoreLength == 1 ){\r",
                    "        customersStore.getAt(0).set('salesperson_commission',( 100 )) ;\r",
                    "        return ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    if(updatedRecIndex == 0){\r",
                    "\r",
                    "        priorRecIndex = 1 ;\r",
                    "    }\r",
                    "\r",
                    "    var equalDivision = (maxCommission / (cStoreLength - 1)).toFixed(2) ;\r",
                    "\r",
                    "    equalDivision = parseFloat(equalDivision , 0 ) ;\r",
                    "\r",
                    "    for(var i= (cStoreLength  - 1) ; i >= 0; i-- ){\r",
                    "\r",
                    "        if(i != updatedRecIndex )\r",
                    "        {\r",
                    "                if(i == priorRecIndex)\r",
                    "                {\r",
                    "                    customersStore.getAt(i).set('salesperson_commission',(maxCommission - (equalDivision * (cStoreLength - 2 )) )) ;\r",
                    "                }else\r",
                    "                {\r",
                    "                    customersStore.getAt(i).set('salesperson_commission',( equalDivision )) ;\r",
                    "                }\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "41362cb9-8c34-4c56-a589-5988c01cbaf6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "inputFld",
                    "record_key"
                ],
                "fn": "updateDatalinkSalesPersonsList",
                "implHandler": [
                    "\r",
                    "var _id = inputFld.attributes['data-id'].value ;\r",
                    "var value = inputFld.value ;\r",
                    "\r",
                    "var rmProBillingStore = Ext.getStore('invoice.RtDatalinkSalesPersonStore') ;\r",
                    "var recIndex = rmProBillingStore.findExact('_id',_id) ;\r",
                    "\r",
                    "if(recIndex == -1){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var record = rmProBillingStore.getAt(recIndex) ;\r",
                    "\r",
                    "record.set(record_key,value) ;\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "775acfbe-e54d-4933-a783-cd280e8a1909"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRmProPacksAddonsHeight",
                "implHandler": [
                    "\r",
                    "\r",
                    "var  packListPanel = Ext.ComponentQuery.query('#invoiceRmProPackageListPanel')[0] ;\r",
                    "var  addOnsListPanel = Ext.ComponentQuery.query('#invoiceRmProAddOnsListPanel')[0] ;\r",
                    "\r",
                    "//var allRecrdsPanel = Ext.ComponentQuery.query('#allBillingModuleLstPanel')[0];\r",
                    "\r",
                    "var allRecrdsPanel = Ext.ComponentQuery.query('#InvoiceSubscriptionListPanel')[0];\r",
                    "var allReList = allRecrdsPanel.down('#mainList') ;\r",
                    "\r",
                    "  var packList = packListPanel.down('#billingDetList') ;\r",
                    "  var addOnsList = addOnsListPanel.down('#billingDetList') ;\r",
                    "//getItemHeight()\r",
                    "\r",
                    "\r",
                    "var packPanelHeight =  packList.getStore().getData().all.length * (packList.getItemHeight() +6 )+ 50 ;\r",
                    "var addonsPanelHeight =  addOnsList.getStore().getData().all.length * addOnsList.getItemHeight() + 100 ;\r",
                    "\r",
                    "var allRecPanelHeight =  allReList.getStore().getData().all.length * allReList.getItemHeight() + 50 ;\r",
                    "allRecrdsPanel.setHeight(allRecPanelHeight);\r",
                    "Ext.ComponentQuery.query('#allBillingModuleLstPanel')[0].setHeight(allRecPanelHeight);\r",
                    "var  packListSubPanel = Ext.ComponentQuery.query('#invoiceRmProPackageListSubPanel')[0] ;\r",
                    "var  addOnsListSubPanel = Ext.ComponentQuery.query('#invoiceRmProAddOnsListSubPanel')[0] ;\r",
                    "\r",
                    "packListSubPanel.setHeight(packPanelHeight);\r",
                    "addOnsListSubPanel.setHeight(addonsPanelHeight);\r",
                    "\r",
                    "\r",
                    "var defaultText = \"\" ; // \"width: 100% !important; margin: 10px 0px 0px 20px !important;\" ;\r",
                    "\r",
                    "if(addOnsList.getStore().getData().all.length == 0){\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#invoiceRmProAddOnsListPanel')[0].getEl().dom.style.cssText = defaultText+\"visibility: collapse;\" ;\r",
                    "}else{\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#invoiceRmProAddOnsListPanel')[0].getEl().dom.style.cssText = defaultText+\"visibility: visible;\" ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "//this.hiedeAllProductsPanel();\r",
                    "\r",
                    "var billingDtlForm = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "\r",
                    "var finalTotalHeight = billingDtlForm.down('#invoiceRmproBillingFldsPanel').getHeight() +  billingDtlForm.down('#rmProextradtl').getHeight() + billingDtlForm.down('#InvoiceSubscriptionListPanel').getHeight() ;\r",
                    "\r",
                    "finalTotalHeight += 520 ;\r",
                    "\r",
                    "billingDtlForm.setHeight(finalTotalHeight) ;"
                ]
            },
            "designerId": "a23612f4-ed8c-4655-a6b9-91b5b77990a6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[action=invoiceRMproCommission]",
                "designer|targetType": "Ext.field.Text",
                "fn": "oninvoiceRMproCommissionFldChange",
                "implHandler": [
                    "this.onRmproCommissionChange() ;"
                ],
                "name": "change"
            },
            "designerId": "b12ea7c0-f260-4e04-bd3f-40f2a710bc8b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[action=invoiceDatalinkCommission]",
                "designer|targetType": "Ext.field.Text",
                "fn": "oninvoiceDatalinkCommissionFldChange",
                "implHandler": [
                    "this.onDatalinkCommissionChange() ;"
                ],
                "name": "change"
            },
            "designerId": "4e2872ef-6706-41b0-8871-c50c9a4e8dbf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[action=invoiceDatalinkCommission]",
                "designer|targetType": "Ext.field.Text",
                "fn": "invoiceDatalinkCommissionKeyUp",
                "implHandler": [
                    "this.onDatalinkCommissionChange() ;"
                ],
                "name": "keyup"
            },
            "designerId": "70832437-6073-405c-ba78-dc37cbe90eae"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDatalinkPacksAddonsHeight",
                "implHandler": [
                    "\r",
                    "\r",
                    "var  addOnsListPanel = Ext.ComponentQuery.query('#invoiceDatalinkAddOnsListPanel')[0] ;\r",
                    "\r",
                    "  var addOnsList = addOnsListPanel.down('#billingDetList') ;\r",
                    "//getItemHeight( )\r",
                    "\r",
                    "\r",
                    "var addonsPanelHeight =  addOnsList.getStore().getData().all.length * addOnsList.getItemHeight() + 100 ;\r",
                    "\r",
                    "var  addOnsListSubPanel = Ext.ComponentQuery.query('#invoiceDatalinkAddOnsListSubPanel')[0] ;\r",
                    "\r",
                    "\r",
                    "addOnsListSubPanel.setHeight(addonsPanelHeight);\r",
                    ""
                ]
            },
            "designerId": "7ba2b642-2d11-4540-96a5-bc77c9e205f9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onRmproCommissionChange",
                "implHandler": [
                    "\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "var amount = rmProInvoicePanel.down('#invoiceCommissionableAmtFld').getValue();\r",
                    "var commission = rmProInvoicePanel.down('#invoiceCommissionPercentFld').getValue();\r",
                    "\r",
                    "\r",
                    "var commissionValue = parseFloat(amount) * parseFloat(commission)/100 ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceCommissionFld').setValue(commissionValue.toFixed(2) );"
                ]
            },
            "designerId": "172fc04d-cb9a-4da9-95c1-fd1f58c75aa0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDatalinkCommissionChange",
                "implHandler": [
                    "\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;\r",
                    "\r",
                    "var amount = rmProInvoicePanel.down('#invoiceDatalinkCommissionableAmtFld').getValue();\r",
                    "var commission = rmProInvoicePanel.down('#invoiceDatalinkCommissionPercentFld').getValue();\r",
                    "\r",
                    "\r",
                    "var commissionValue = parseFloat(amount) * parseFloat(commission)/100 ;\r",
                    "rmProInvoicePanel.down('#invoiceDatalinkCommissionFld').setValue(commissionValue.toFixed(2) );"
                ]
            },
            "designerId": "cbe5b576-0ce1-41d6-9036-564ac9f053e8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetRmproInvoice",
                "implHandler": [
                    " Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].setValue(null) ;\r",
                    " var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "\r",
                    " var txtFlds = rmProInvoicePanel.query('textfield');\r",
                    "\r",
                    " for(var i=0; i<txtFlds.length ; i++){\r",
                    "\r",
                    "    txtFlds[i].setValue(\"\");\r",
                    " }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    " Ext.ComponentQuery.query('#billingRMProDtlsLbl')[0].setHtml(\"Total Payble : 0$\" );\r",
                    "\r",
                    " rmProInvoicePanel.down('#InvoicemonthlySubscriptionLbl').setHtml(\" $ \") ;\r",
                    " rmProInvoicePanel.down('#billingLiscencePrdLbl').setHtml(\"<b>Subscription License for </b>\") ;\r",
                    "\r",
                    " Ext.getStore('printInvoice.subscribedModulesStore').removeAll() ;\r",
                    "\r",
                    " rmProInvoicePanel.down('#InvoiceDueDateNoLbl').setHtml(\"Due Date:&nbsp;&nbsp;\" );\r",
                    " rmProInvoicePanel.down('#InvoiceNoLbl').setHtml(\"Invoice #:&nbsp;&nbsp;\" );\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceTopDateNoLbl').setHtml(\"Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" ) ;\r",
                    "\r",
                    " rmProInvoicePanel.down('#rtInvoiceCreatedUserDtlsLbl').setHtml(\"\") ;\r",
                    " rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHtml(\"\") ;\r",
                    "\r",
                    " Ext.getStore('products.RtSalesPersonStore').removeAll() ;\r",
                    " Ext.getStore('InvoicePaymentsStore').removeAll() ;"
                ]
            },
            "designerId": "e10ab19e-46c1-4046-8af1-de430ba86a35"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetDatalinkInvoice",
                "implHandler": [
                    "Ext.ComponentQuery.query('#invoiceDatalinkPaymentPrdSlFld')[0].setValue(1) ;\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;\r",
                    "\r",
                    "\r",
                    "var txtFlds = rmProInvoicePanel.query('textfield');\r",
                    "\r",
                    "for(var i=0; i<txtFlds.length ; i++){\r",
                    "\r",
                    "    txtFlds[i].setValue(\"\");\r",
                    "}\r",
                    "\r",
                    "\r",
                    "Ext.ComponentQuery.query('#billingDatalinkDtlsLbl')[0].setHtml(\"Total Payble : 0$\" );\r",
                    ""
                ]
            },
            "designerId": "a6028c8a-7272-4d1b-8231-fe132b5b3189"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "isGenerateInvoice",
                    "product_name"
                ],
                "fn": "saveRmProInvoice",
                "implHandler": [
                    "\r",
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "if(rtRecord.data.store_products.rmpro_status && rtRecord.data.store_products.rmpro_status == \"ACTIVE\" && rtRecord.data.product_billng.product_rmpro){\r",
                    "    //Continue execution\r",
                    "\r",
                    "}else{\r",
                    "    //check for datalink and break execution\r",
                    "\r",
                    "     that.saveDatalinkInvoice(isGenerateInvoice,product_name) ;\r",
                    "     return ;\r",
                    "}\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec   //rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "var product_rmpro = dataToUpdate.product_billng.product_rmpro ;\r",
                    "\r",
                    "\r",
                    "product_rmpro.commission_percent = rmProInvoicePanel.down('#invoiceCommissionPercentFld').getValue() ;\r",
                    "product_rmpro.commissionable_ammount = rmProInvoicePanel.down('#invoiceCommissionableAmtFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.sales_persons = getSalesPersons() ;\r",
                    "\r",
                    "product_rmpro.total_payble = rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue() ;\r",
                    "product_rmpro.payment_period = rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "product_rmpro.past_due = rmProInvoicePanel.down('#invoicePastDueFld').getValue() ;\r",
                    "product_rmpro.balance_due = rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.pay_date = rmProInvoicePanel.down('#invoicePayDateFld').getValue() ;\r",
                    "product_rmpro.paid_by = rmProInvoicePanel.down('#invoicePaidByFld').getValue() ;\r",
                    "product_rmpro.payment_method_detail = rmProInvoicePanel.down('#invoicePaymentDetailFld').getValue() ;\r",
                    "product_rmpro.cc_approval = rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.proccessed_by = rmProInvoicePanel.down('#invoiceProcessedByFld').getValue() ;\r",
                    "product_rmpro.date = rmProInvoicePanel.down('#invoiceRMProDateFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.ammount_paying = rmProInvoicePanel.down('#invoiceAmmountFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "product_rmpro.payment_note = rmProInvoicePanel.down('#rmProPaymentNoteFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.payment_period_start = rmProInvoicePanel.down('#rmProSubscrPaymentStartDateFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.payment_period_end  =  rmProInvoicePanel.down('#rmProSubscrPaymentEndDateFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.due_date  = rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "product_rmpro.payments= getArrayDataFromStore(Ext.getStore('InvoicePaymentsStore'));\r",
                    "\r",
                    "\r",
                    "\r",
                    "var printInvoicePaidStampImg = Ext.ComponentQuery.query('#printInvoicePaidStampImg')[0] ;\r",
                    "\r",
                    "if(printInvoicePaidStampImg.getHidden()){\r",
                    "\r",
                    "    product_rmpro.payment_status = \"unpaid\" ;\r",
                    "}else{\r",
                    "\r",
                    "    product_rmpro.payment_status = \"paid\" ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "dataToUpdate.product_billng.product_rmpro = product_rmpro ;\r",
                    "\r",
                    "\r",
                    "console.error(dataToUpdate) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "Ext.Viewport.setMasked( {\r",
                    "                xtype: 'loadmask'\r",
                    "            });\r",
                    "\r",
                    "   RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);\r",
                    "\r",
                    "\r",
                    "            function suc(){\r",
                    "\r",
                    "                that.config.product_billing_rec   =  dataToUpdate.product_billng ;\r",
                    "\r",
                    "                rtRecord.set('product_billng',dataToUpdate.product_billng);\r",
                    "\r",
                    "                if(isGenerateInvoice && that.config.isSalesCommissionForRmPro){\r",
                    "\r",
                    "                   that.config.isSalesCommissionForRmPro = false ;\r",
                    "                   that.updateSalesPersonCommission(\"product_rmpro\") ;\r",
                    "                }\r",
                    "              debugger;\r",
                    "              that.saveDatalinkInvoice(isGenerateInvoice,product_name) ;\r",
                    "\r",
                    "                //  Ext.Viewport.setMasked(false);\r",
                    "               //  RMdatalink.app.getController('UINav').onBackTextTap() ;\r",
                    "\r",
                    "            }\r",
                    "            function err(){\r",
                    "                    Ext.Viewport.setMasked(false);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getSalesPersons(){\r",
                    "    return getArrayDataFromStore(Ext.getStore('products.RtSalesPersonStore'));\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "  function getArrayDataFromStore(store){\r",
                    "\r",
                    "        var data = new Array();\r",
                    "        data = store.getData().items;\r",
                    "\r",
                    "        var dataToReturn = new Array();\r",
                    "\r",
                    "        for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "            dataToReturn.push(data[i].data);\r",
                    "        }\r",
                    "\r",
                    "        return dataToReturn ;\r",
                    "\r",
                    "    }"
                ]
            },
            "designerId": "25e66002-e7a0-43fd-affe-4f302b45c43c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "isGenerateInvoice",
                    "product_name"
                ],
                "fn": "saveDatalinkInvoice",
                "implHandler": [
                    "\r",
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "\r",
                    "if(rtRecord.data.store_products.datalink_status && rtRecord.data.store_products.datalink_status == \"ACTIVE\" && rtRecord.data.product_billng.product_datalink){\r",
                    "    //Continue execution\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "                Ext.Viewport.setMasked(false);\r",
                    "                   if(isGenerateInvoice)\r",
                    "                   {\r",
                    "                        generateInvoice() ;\r",
                    "                   }\r",
                    "                else{\r",
                    "\r",
                    "                    var billSheet = Ext.ComponentQuery.query(\"#billingDetailSheet\")[0];\r",
                    "\r",
                    "                    billSheet.hide();\r",
                    "\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "\r",
                    "\r",
                    "     return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec // rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "var product_datalink = dataToUpdate.product_billng.product_datalink ;\r",
                    "\r",
                    "\r",
                    "product_datalink.commission_percent = rmProInvoicePanel.down('#invoiceDatalinkCommissionPercentFld').getValue() ;\r",
                    "product_datalink.commissionable_ammount = rmProInvoicePanel.down('#invoiceDatalinkCommissionableAmtFld').getValue() ;\r",
                    "\r",
                    "product_datalink.sales_persons = getSalesPersons() ;\r",
                    "\r",
                    "product_datalink.total_payble = rmProInvoicePanel.down('#invoiceDatalinkTotalPaybleFld').getValue() ;\r",
                    "product_datalink.payment_period = rmProInvoicePanel.down('#invoiceDatalinkPaymentPrdSlFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "product_datalink.past_due = rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').getValue() ;\r",
                    "product_datalink.balance_due = rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').getValue() ;\r",
                    "\r",
                    "product_datalink.pay_date = rmProInvoicePanel.down('#invoiceDatalinkPayDateFld').getValue() ;\r",
                    "product_datalink.paid_by = rmProInvoicePanel.down('#invoiceDatalinkPaidByFld').getValue() ;\r",
                    "product_datalink.payment_method_detail = rmProInvoicePanel.down('#invoiceDatalinkPaymentDetailFld').getValue() ;\r",
                    "product_datalink.cc_approval = rmProInvoicePanel.down('#invoiceDatalinkCCApprovalFld').getValue() ;\r",
                    "\r",
                    "product_datalink.proccessed_by = rmProInvoicePanel.down('#invoiceDatalinkProcessedByFld').getValue() ;\r",
                    "product_datalink.date = rmProInvoicePanel.down('#invoiceDatalinkDateFld').getValue() ;\r",
                    "\r",
                    "product_datalink.ammount_paying = rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "product_datalink.payment_note = rmProInvoicePanel.down('#datalinkPaymentNoteFld').getValue() ;\r",
                    "\r",
                    "product_datalink.payment_period_start = rmProInvoicePanel.down('#datalinkSubscrPaymentStartDateFld').getValue() ;\r",
                    "\r",
                    "product_datalink.payment_period_end  =  rmProInvoicePanel.down('#datalinkSubscrPaymentEndDateFld').getValue() ;\r",
                    "\r",
                    "product_datalink.due_date  = rmProInvoicePanel.down('#datalinkSubscrPaymentDueDateFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "dataToUpdate.product_billng.product_datalink = product_datalink ;\r",
                    "\r",
                    "\r",
                    "console.error(dataToUpdate) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "Ext.Viewport.setMasked( {\r",
                    "                xtype: 'loadmask'\r",
                    "            });\r",
                    "\r",
                    "   RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);\r",
                    "\r",
                    "\r",
                    "            function suc(){\r",
                    "\r",
                    "                that.config.product_billing_rec   =  dataToUpdate.product_billng ;\r",
                    "\r",
                    "                rtRecord.set('product_billng',dataToUpdate.product_billng);\r",
                    "\r",
                    "                if(isGenerateInvoice  && that.config.isSalesCommissionForDatalink ){\r",
                    "\r",
                    "                     that.config.isSalesCommissionForDatalink = false ;\r",
                    "                    that.updateSalesPersonCommission(\"product_datalink\") ;\r",
                    "                }\r",
                    "\r",
                    "                Ext.Viewport.setMasked(false);\r",
                    "                   if(isGenerateInvoice){\r",
                    "                        generateInvoice() ;\r",
                    "                   }\r",
                    "                else{\r",
                    "\r",
                    "                    var billSheet = Ext.ComponentQuery.query(\"#billingDetailSheet\")[0];\r",
                    "\r",
                    "                   // billSheet.hide();\r",
                    "\r",
                    "                   // billSheet.destroy() ;\r",
                    "\r",
                    "                        //RMdatalink.app.getController('UINav').onBackTextTap() ;\r",
                    "                }\r",
                    "\r",
                    "\r",
                    "            }\r",
                    "            function err(){\r",
                    "                    Ext.Viewport.setMasked(false);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getSalesPersons(){\r",
                    "    return getArrayDataFromStore(Ext.getStore('invoice.RtDatalinkSalesPersonStore'));\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "  function getArrayDataFromStore(store){\r",
                    "\r",
                    "        var data = new Array();\r",
                    "        data = store.getData().items;\r",
                    "\r",
                    "        var dataToReturn = new Array();\r",
                    "\r",
                    "        for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "            dataToReturn.push(data[i].data);\r",
                    "        }\r",
                    "\r",
                    "        return dataToReturn ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    function generateInvoice(){\r",
                    "\r",
                    "        if(isGenerateInvoice){\r",
                    "\r",
                    "\r",
                    "              RMdatalink.app.getController('InvoiceHistoryController').validateInvoiceForGenerarion(product_name);\r",
                    "\r",
                    "        }\r",
                    "    }"
                ]
            },
            "designerId": "913c919b-b536-4670-aebc-cefbd4515862"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRMProBillInVoice",
                "implHandler": [
                    "\r",
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "that.setRMproProductBilling() ;\r",
                    "\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "var accNo = rtRecord.data.account_no ;\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng :that.config.product_billing_rec  ///n\r",
                    "};\r",
                    "\r",
                    "var product_rmpro = dataToUpdate.product_billng.product_rmpro ;\r",
                    "\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceCommissionPercentFld').setValue(product_rmpro.commission_percent) ;\r",
                    " rmProInvoicePanel.down('#invoiceCommissionableAmtFld').setValue(product_rmpro.commissionable_ammount) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').setValue(product_rmpro.payment_period) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#billingLiscencePrdLbl').setHtml(\"<b>Subscription License for \" + product_rmpro.payment_period + \" Month(s) From: \"+ product_rmpro.payment_period_start + \"   To: \"+product_rmpro.payment_period_end +\"</b>\") ;\r",
                    "\r",
                    "\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoicePastDueFld').setValue(product_rmpro.past_due) ;\r",
                    " rmProInvoicePanel.down('#invoiceBalanceDueFld').setValue(product_rmpro.balance_due) ;\r",
                    "\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoicePaidByFld').setValue(product_rmpro.paid_by ) ;\r",
                    " rmProInvoicePanel.down('#invoicePaymentDetailFld').setValue(product_rmpro.payment_method_detail) ;\r",
                    " rmProInvoicePanel.down('#invoiceCCApprovalFld').setValue(product_rmpro.cc_approval ) ;\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceProcessedByFld').setValue(product_rmpro.proccessed_by) ;\r",
                    " rmProInvoicePanel.down('#invoiceRMProDateFld').setValue(product_rmpro.date ) ;\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceAmmountFld').setValue(product_rmpro.ammount_paying ) ;\r",
                    "\r",
                    "//product_rmpro.monthly_membership printinvoiceDueDateFld\r",
                    "var totalPayble = parseFloat(product_rmpro.monthly_membership) * (product_rmpro.payment_period ? parseInt(product_rmpro.payment_period) : 1) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(formatNum(totalPayble)) ;\r",
                    "\r",
                    "var salesPersonsStore = Ext.getStore('products.RtSalesPersonStore') ;\r",
                    "\r",
                    "salesPersonsStore.removeAll();\r",
                    "salesPersonsStore.sync();\r",
                    "\r",
                    "salesPersonsStore.setData(product_rmpro.sales_persons);\r",
                    "salesPersonsStore.sync();\r",
                    "\r",
                    "\r",
                    " console.log(\"********************************\");\r",
                    " console.log(product_rmpro);\r",
                    "\r",
                    " rmProInvoicePanel.down('#rmProPaymentNoteFld').setValue(product_rmpro.payment_note ) ;\r",
                    "\r",
                    " rmProInvoicePanel.down('#rmProSubscrPaymentStartDateFld').setValue(product_rmpro.payment_period_start ) ;\r",
                    "\r",
                    " rmProInvoicePanel.down('#rmProSubscrPaymentEndDateFld').setValue(product_rmpro.payment_period_end ) ;\r",
                    "\r",
                    " rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').setValue(product_rmpro.due_date ) ;\r",
                    "\r",
                    "\r",
                    " rmProInvoicePanel.down('#InvoiceDueDateNoLbl').setHtml(\"Due Date:&nbsp;&nbsp;\"+ product_rmpro.due_date );\r",
                    " rmProInvoicePanel.down('#InvoiceNoLbl').setHtml(\"Invoice #:&nbsp;&nbsp;\"+ accNo + \"-\" + product_rmpro.invoice_number );\r",
                    "\r",
                    "var pDt =  product_rmpro.due_date ; //product_rmpro.invoice_id ;\r",
                    "/* if(product_rmpro.pay_date && product_rmpro.pay_date !=\"\"){\r",
                    "    pDt = product_rmpro.pay_date ;\r",
                    "} */\r",
                    " rmProInvoicePanel.down('#invoiceTopDateNoLbl').setHtml(\"Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+ pDt ) ;\r",
                    "rmProInvoicePanel.down('#invoicePayDateFld').setValue(pDt) ;\r",
                    " rmProInvoicePanel.down('#InvoicemonthlySubscriptionLbl').setHtml(\" $ \" + formatNum(product_rmpro.monthly_membership) ) ;\r",
                    "\r",
                    " var ddTime = product_rmpro.created_date_stamp  ;\r",
                    " var user =  product_rmpro.created_by  ;\r",
                    " if(ddTime && user)\r",
                    " {\r",
                    "    rmProInvoicePanel.down('#rtInvoiceCreatedUserDtlsLbl').setHtml(user + \" - \" +ddTime ) ;\r",
                    " }\r",
                    "\r",
                    " var lastUpdatedDdTime = product_rmpro.last_created_date_stamp  ;\r",
                    " var lastUpdatedUser =  product_rmpro.last_created_by  ;\r",
                    " if(lastUpdatedDdTime && lastUpdatedUser)\r",
                    " {\r",
                    "    rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHtml(lastUpdatedUser + \" - \" +lastUpdatedDdTime ) ;\r",
                    " }\r",
                    "\r",
                    "if(!product_rmpro.payments ||  product_rmpro.payments.length == 0){\r",
                    "\r",
                    "    rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHidden(true)  ;\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHidden(false)  ;\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "00b59ac0-8444-4157-b6f8-5f9dfc212e3a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDatalinkBillInVoice",
                "implHandler": [
                    "\r",
                    "var product_type = this.config.product_type ;\r",
                    "var that = this ;\r",
                    "\r",
                    "that.setDatalinkProductBilling();\r",
                    "\r",
                    "\r",
                    "\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "var accNo = rtRecord.data.account_no ;\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng :that.config.product_billing_rec  ///n\r",
                    "};\r",
                    "\r",
                    "var product_rmpro = dataToUpdate.product_billng[product_type] ;\r",
                    "var totalPayble = parseFloat(product_rmpro.monthly_membership) * (product_rmpro.payment_period ? parseInt(product_rmpro.payment_period) : 1) ;\r",
                    "\r",
                    "var salesPersonsStore = Ext.getStore('products.RtSalesPersonStore') ;\r",
                    "\r",
                    "salesPersonsStore.removeAll();\r",
                    "salesPersonsStore.sync();\r",
                    "\r",
                    "salesPersonsStore.setData(product_rmpro.sales_persons);\r",
                    "salesPersonsStore.sync();\r",
                    "\r",
                    "\r",
                    "var pDt =  product_rmpro.due_date ; //product_rmpro.invoice_id ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceCommissionPercentFld').setValue(product_rmpro.commission_percent) ;\r",
                    "rmProInvoicePanel.down('#invoiceCommissionableAmtFld').setValue(product_rmpro.commissionable_ammount) ;\r",
                    "rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').setValue(product_rmpro.payment_period) ;\r",
                    "rmProInvoicePanel.down('#billingLiscencePrdLbl').setHtml(\"<b>Subscription License for \" + product_rmpro.payment_period + \" Month(s) From: \"+ product_rmpro.payment_period_start + \"   To: \"+product_rmpro.payment_period_end +\"</b>\") ;\r",
                    "rmProInvoicePanel.down('#invoicePastDueFld').setValue(product_rmpro.past_due) ;\r",
                    "rmProInvoicePanel.down('#invoiceBalanceDueFld').setValue(product_rmpro.balance_due) ;\r",
                    "rmProInvoicePanel.down('#invoicePaidByFld').setValue(product_rmpro.paid_by ) ;\r",
                    "rmProInvoicePanel.down('#invoicePaymentDetailFld').setValue(product_rmpro.payment_method_detail) ;\r",
                    "rmProInvoicePanel.down('#invoiceCCApprovalFld').setValue(product_rmpro.cc_approval ) ;\r",
                    "rmProInvoicePanel.down('#invoiceProcessedByFld').setValue(product_rmpro.proccessed_by) ;\r",
                    "rmProInvoicePanel.down('#invoiceRMProDateFld').setValue(product_rmpro.date ) ;\r",
                    "rmProInvoicePanel.down('#invoiceAmmountFld').setValue(product_rmpro.ammount_paying ) ;\r",
                    "//product_rmpro.monthly_membership printinvoiceDueDateFld\r",
                    "rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(formatNum(totalPayble)) ;\r",
                    "rmProInvoicePanel.down('#rmProPaymentNoteFld').setValue(product_rmpro.payment_note ) ;\r",
                    "rmProInvoicePanel.down('#rmProSubscrPaymentStartDateFld').setValue(product_rmpro.payment_period_start ) ;\r",
                    "rmProInvoicePanel.down('#rmProSubscrPaymentEndDateFld').setValue(product_rmpro.payment_period_end ) ;\r",
                    "rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').setValue(product_rmpro.due_date ) ;\r",
                    "rmProInvoicePanel.down('#InvoiceDueDateNoLbl').setHtml(\"Due Date:&nbsp;&nbsp;\"+ product_rmpro.due_date );\r",
                    "rmProInvoicePanel.down('#InvoiceNoLbl').setHtml(\"Invoice #:&nbsp;&nbsp;\"+ accNo + \"-\" + product_rmpro.invoice_number );\r",
                    "rmProInvoicePanel.down('#invoiceTopDateNoLbl').setHtml(\"Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+ pDt ) ;\r",
                    "rmProInvoicePanel.down('#invoicePayDateFld').setValue(pDt) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#InvoicemonthlySubscriptionLbl').setHtml(\" $ \" + formatNum(product_rmpro.monthly_membership) ) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "console.log(\"********************************\");\r",
                    "console.log(product_rmpro);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "/* if(product_rmpro.pay_date && product_rmpro.pay_date !=\"\"){\r",
                    "    pDt = product_rmpro.pay_date ;\r",
                    "} */\r",
                    "\r",
                    "var ddTime = product_rmpro.created_date_stamp  ;\r",
                    "var user =  product_rmpro.created_by  ;\r",
                    "if(ddTime && user)\r",
                    "{\r",
                    "    rmProInvoicePanel.down('#rtInvoiceCreatedUserDtlsLbl').setHtml(user + \" - \" +ddTime ) ;\r",
                    "}\r",
                    "\r",
                    "var lastUpdatedDdTime = product_rmpro.last_created_date_stamp  ;\r",
                    "var lastUpdatedUser =  product_rmpro.last_created_by  ;\r",
                    "if(lastUpdatedDdTime && lastUpdatedUser)\r",
                    "{\r",
                    "    rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHtml(lastUpdatedUser + \" - \" +lastUpdatedDdTime ) ;\r",
                    "}\r",
                    "\r",
                    "if(!product_rmpro.payments ||  product_rmpro.payments.length == 0){\r",
                    "\r",
                    "    rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHidden(true)  ;\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHidden(false)  ;\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "734b1273-f6a9-43ed-aef9-88f13e8c383c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDatalinkBillInVoice_",
                "implHandler": [
                    "\r",
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "that.setDatalinkProductBilling();\r",
                    "\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec  //rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "var product_datalink = dataToUpdate.product_billng.product_datalink ;\r",
                    "\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkCommissionPercentFld').setValue(product_datalink.commission_percent) ;\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkCommissionableAmtFld').setValue(product_datalink.commissionable_ammount) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkPaymentPrdSlFld').setValue(product_datalink.payment_period) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').setValue(product_datalink.past_due) ;\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').setValue(product_datalink.balance_due) ;\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkPayDateFld').setValue(product_datalink.pay_date ) ;\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkPaidByFld').setValue(product_datalink.paid_by ) ;\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkPaymentDetailFld').setValue(product_datalink.payment_method_detail) ;\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkCCApprovalFld').setValue(product_datalink.cc_approval ) ;\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkProcessedByFld').setValue(product_datalink.proccessed_by) ;\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkDateFld').setValue(product_datalink.date ) ;\r",
                    "\r",
                    "var salesPersonsStore = Ext.getStore('invoice.RtDatalinkSalesPersonStore') ;\r",
                    "\r",
                    "var totalPayble = parseFloat(product_datalink.monthly_membership) * (product_datalink.payment_period ? parseFloat(product_datalink.payment_period) : 1) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').setValue(totalPayble) ;\r",
                    "\r",
                    "\r",
                    " rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').setValue(product_datalink.ammount_paying ) ;\r",
                    "\r",
                    "salesPersonsStore.removeAll();\r",
                    "salesPersonsStore.sync();\r",
                    "\r",
                    "salesPersonsStore.setData(product_datalink.sales_persons);\r",
                    "salesPersonsStore.sync();\r",
                    "\r",
                    "\r",
                    "rmProInvoicePanel.down('#datalinkPaymentNoteFld').setValue(product_datalink.payment_note ) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#datalinkSubscrPaymentStartDateFld').setValue(product_datalink.payment_period_start ) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#datalinkSubscrPaymentEndDateFld').setValue(product_datalink.payment_period_end ) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#datalinkSubscrPaymentDueDateFld').setValue(product_datalink.due_date ) ;\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "54c52262-4dd9-4362-93a8-4e42ca949ea0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRMProTotalPayble",
                "implHandler": [
                    "//monthly_membership"
                ]
            },
            "designerId": "6c0d44d7-92c9-4c6c-a74f-ba8389d9ce0e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "type"
                ],
                "fn": "displayInvoice",
                "implHandler": [
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    if(Ext.ComponentQuery.query('#InvoicePage')[0]){\r",
                    "\r",
                    "        Ext.ComponentQuery.query('#InvoicePage')[0].destroy() ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    var printTimeout = setTimeout(function(){\r",
                    "\r",
                    "\r",
                    "                                   Ext.widget('InvoicePage').show();\r",
                    "\r",
                    "                                    clearTimeout(printTimeout);\r",
                    "\r",
                    "\r",
                    "    },100);"
                ]
            },
            "designerId": "4bcbffc6-8bce-4988-bbfb-931b7dde0509"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setPrintInvoiceListHeight",
                "implHandler": [
                    "\r",
                    "\r",
                    "var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;\r",
                    "\r",
                    "\r",
                    "var rtlr = this.config.selectedRetailer.data ;\r",
                    "\r",
                    "\r",
                    "var addr = \"\";\r",
                    "var cityZip = \"\" ;\r",
                    "var strPhone = \"\" ;\r",
                    "if(rtlr.locations && rtlr.locations.length > 0 && rtlr.locations[0].address){\r",
                    "\r",
                    "       cityZip = rtlr.locations[0].city + \", \"+rtlr.locations[0].state + \" \" + rtlr.locations[0].zip ;\r",
                    "    addr = rtlr.locations[0].address ;\r",
                    "\r",
                    "    if(rtlr.locations[0].phone && rtlr.locations[0].phone !=\"\")\r",
                    "    {\r",
                    "         strPhone = \"Phone :\"+ rtlr.locations[0].phone  ;\r",
                    "    }else{\r",
                    "         strPhone = \"Phone :\"+rtlr.store_phone ;\r",
                    "    }\r",
                    "\r",
                    "}else{\r",
                    "    cityZip = rtlr.store_city + \", \"+rtlr.store_state + \" \" + rtlr.store_zip ;\r",
                    "    addr = rtlr.store_address_line1 ;\r",
                    "    strPhone = \"Phone :\"+rtlr.store_phone ;\r",
                    "}\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceToNameLbl').setHtml(rtlr.store_name);\r",
                    "invoiceForm.down('#printInvoiceToAddr1Lbl').setHtml(addr);\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceToCityStZipLbl').setHtml(cityZip);\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceToPhoneLbl').setHtml(strPhone);\r",
                    "\r",
                    "\r",
                    "return ;\r",
                    "\r",
                    "\r",
                    "var  packListPanel =invoiceForm.down('#printInvoicePackageListPanel') ;\r",
                    "var  addOnsListPanel = invoiceForm.down('#printInvoiceAddOnsListPanel') ;\r",
                    "\r",
                    "var subListPanel = invoiceForm.down('#printInvoiceSubscriptionListPanel') ;\r",
                    "\r",
                    "  var packList = packListPanel.down('#mainList') ;\r",
                    "  var addOnsList = addOnsListPanel.down('#mainList') ;\r",
                    "\r",
                    "var subList = subListPanel.down('#mainList') ;\r",
                    "//getItemHeight( )\r",
                    "\r",
                    "\r",
                    "var packPanelHeight = ( packList.getStore().getData().all.length * (packList.getItemHeight() +  6 ) )+ 62 ;\r",
                    "var addonsPanelHeight =  addOnsList.getStore().getData().all.length * (addOnsList.getItemHeight() + 5) + 32 ;\r",
                    "\r",
                    "\r",
                    "var  packListSubPanel = invoiceForm.down('#printInvoicePackgsList') ;\r",
                    "var  addOnsListSubPanel = invoiceForm.down('#printInvoiceAddonsList');\r",
                    "\r",
                    "packListSubPanel.setHeight(packPanelHeight);\r",
                    "addOnsListSubPanel.setHeight(addonsPanelHeight);\r",
                    "\r",
                    "subListPanel.setHeight(packPanelHeight + addonsPanelHeight);\r",
                    "\r",
                    "var divs = Ext.DomQuery.select('div[class=\"x-list-item-first x-list-header-wrap x-list-item x-stretched x-list-item-tpl x-list-item-relative\"]') ;\r",
                    "\r",
                    "\r",
                    "for(var i=0; i< divs.length; i++)\r",
                    "{\r",
                    "    divs[i].style[\"cssText\"]= \"min-height: 22px !important;\";\r",
                    "}\r",
                    "\r",
                    "divs = [] ;\r",
                    "\r",
                    "divs = Ext.DomQuery.select('div[class=\"x-list-item x-stretched x-list-item-tpl x-list-item-relative\"]') ;\r",
                    "\r",
                    "\r",
                    "for(var i=0; i< divs.length; i++)\r",
                    "{\r",
                    "   divs[i].style[\"cssText\"]= \"min-height: 22px !important;\";\r",
                    "}\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "06e7a1a8-0f80-4d72-90ae-ec2368cb0abc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRMproInvoiceToPrint",
                "implHandler": [
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "var packModuleStore = Ext.getStore('printInvoice.packModulesStore');\r",
                    "var addOnsModuleStore = Ext.getStore('printInvoice.addOnsModulesStore');\r",
                    "\r",
                    "var rmProPackModuleStore = Ext.getStore('products.BillingFromPackages');\r",
                    "var rmProAddOnsModuleStore = Ext.getStore('products.BillingModuleAddons');\r",
                    "\r",
                    "var invoiceModulesStore = Ext.getStore('printInvoice.subscribedModulesStore');\r",
                    "\r",
                    "\r",
                    "packModuleStore.removeAll();\r",
                    "packModuleStore.sync();\r",
                    "\r",
                    "addOnsModuleStore.removeAll();\r",
                    "addOnsModuleStore.sync();\r",
                    "\r",
                    "invoiceModulesStore.removeAll();\r",
                    "invoiceModulesStore.sync();\r",
                    "\r",
                    "\r",
                    "var modules = [] ;\r",
                    "\r",
                    "modules = modules.concat(getArrayDataFromStore(rmProPackModuleStore)) ;\r",
                    "\r",
                    "modules = modules.concat(getArrayDataFromStore(rmProAddOnsModuleStore)) ;\r",
                    "\r",
                    "console.error(modules);\r",
                    "\r",
                    "invoiceModulesStore.setData( modules );\r",
                    "invoiceModulesStore.sync();\r",
                    "\r",
                    "\r",
                    "\r",
                    "packModuleStore.setData(getArrayDataFromStore(rmProPackModuleStore));\r",
                    "packModuleStore.sync();\r",
                    "\r",
                    "\r",
                    "\r",
                    "addOnsModuleStore.setData(getArrayDataFromStore(rmProAddOnsModuleStore));\r",
                    "addOnsModuleStore.sync();\r",
                    "\r",
                    "*/\r",
                    "var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;\r",
                    "\r",
                    "//invoiceForm.down('#productPackageNameLabel').setHtml(Ext.ComponentQuery.query('#invoiceRmProPackNameLbl')[0].getHtml()) ;\r",
                    "\r",
                    "//invoiceForm.down('#productPackageBundlePriceLbl').setMargin(\"0 100 0 0\");\r",
                    "//invoiceForm.down('#productPackageBundlePriceLbl').setHtml(Ext.ComponentQuery.query('#invoiceRmProBundelPriceLbl')[0].getHtml()) ;\r",
                    "\r",
                    "var product_key = this.config.product_type ;\r",
                    "if(product_key == \"product_rmpro\")\r",
                    "{\r",
                    "   this.setRmProPrintInvoiceDetails() ;\r",
                    "   invoiceForm.down('#printInvoiceProductModulesLbl').setHtml(Ext.ComponentQuery.query('#invoiceRmProPackNameLbl')[0].getHtml() + \" + \"+getArrayDataFromStore(rmProAddOnsModuleStore).length +\" Add ons\") ;\r",
                    "\r",
                    "}\r",
                    "else{\r",
                    "\r",
                    "    this.setDatalinkPrintInvoiceDetails() ;\r",
                    "  //  invoiceForm.down('#printInvoiceProductModulesLbl').setHtml(Ext.ComponentQuery.query('#invoiceRmProPackNameLbl')[0].getHtml() + \" + \"+ getArrayDataFromStore(rmProAddOnsModuleStore).length +\" Add ons\") ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    " Ext.Function.defer(setHeight, 100, that);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function setHeight(){\r",
                    "\r",
                    "    that.setPrintInvoiceListHeight();\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "  function getArrayDataFromStore(store){\r",
                    "\r",
                    "        var data = new Array();\r",
                    "        data = store.getData().items;\r",
                    "\r",
                    "        var dataToReturn = new Array();\r",
                    "\r",
                    "        for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "            dataToReturn.push(data[i].data);\r",
                    "        }\r",
                    "\r",
                    "        return dataToReturn ;\r",
                    "\r",
                    "    }"
                ]
            },
            "designerId": "c3f7f396-f23d-4025-87fa-d73f7284a845"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDatalinkInvoiceToPrint",
                "implHandler": [
                    "var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;\r",
                    "var that = this ;\r",
                    "\r",
                    "var packModuleStore = Ext.getStore('printInvoice.packModulesStore');\r",
                    "var addOnsModuleStore = Ext.getStore('printInvoice.addOnsModulesStore');\r",
                    "\r",
                    "var invoiceModulesStore = Ext.getStore('printInvoice.subscribedModulesStore');\r",
                    "\r",
                    "var datalinkAddOnsModuleStore = Ext.getStore('invoice.DatalinkModuleAddons');\r",
                    "\r",
                    "packModuleStore.removeAll();\r",
                    "packModuleStore.sync();\r",
                    "\r",
                    "addOnsModuleStore.removeAll();\r",
                    "addOnsModuleStore.sync();\r",
                    "\r",
                    "invoiceModulesStore.removeAll();\r",
                    "invoiceModulesStore.sync();\r",
                    "\r",
                    "var modules = [] ;\r",
                    "\r",
                    "modules.push(getArrayDataFromStore(datalinkAddOnsModuleStore)) ;\r",
                    "\r",
                    "addOnsModuleStore.setData(getArrayDataFromStore(datalinkAddOnsModuleStore));\r",
                    "addOnsModuleStore.sync();\r",
                    "\r",
                    "\r",
                    "//Ext.ComponentQuery.query('#printInvoicePackageListPanel')[0].setHidden(true);\r",
                    "\r",
                    "this.setDatalinkPrintInvoiceDetails() ;\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceProductModulesLbl').setHtml(getArrayDataFromStore(datalinkAddOnsModuleStore).length +\" Modules\") ;\r",
                    "\r",
                    "\r",
                    " Ext.Function.defer(setHeight, 100, that);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function setHeight(){\r",
                    "\r",
                    "    that.setPrintInvoiceListHeight();\r",
                    "     invoiceForm.down('#printInvoicePackgsList').setHeight(32) ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "  function getArrayDataFromStore(store){\r",
                    "\r",
                    "        var data = new Array();\r",
                    "        data = store.getData().items;\r",
                    "\r",
                    "        var dataToReturn = new Array();\r",
                    "\r",
                    "        for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "            dataToReturn.push(data[i].data);\r",
                    "        }\r",
                    "\r",
                    "        return dataToReturn ;\r",
                    "\r",
                    "    }"
                ]
            },
            "designerId": "37d40b0d-3f65-4674-9c19-66ad22957eeb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDatalinkPrintInvoiceDetails",
                "implHandler": [
                    "\r",
                    "var product_type = this.config.product_type ;\r",
                    "\r",
                    "var rmProBilling = this.config.product_billing_rec[product_type] ; // this.config.selectedRetailer.data.product_billng.product_rmpro ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "\r",
                    "var subTotal = parseInt(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue()) ;\r",
                    " subTotal = subTotal + parseInt(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    " invoiceForm.down('#printinvoiceIdTxtfld').setValue( this.getMMYYYY(rmProBilling.due_date) );\r",
                    "\r",
                    " invoiceForm.down('#printinvoiceDueDateFld').setValue( rmProBilling.due_date );\r",
                    "\r",
                    "//invoiceForm.down('#printinvoiceIdTxtfld').setValue( rmProBilling.invoice_id );\r",
                    "\r",
                    "invoiceForm.down('#printinvoiceNofld').setValue( rmProBilling.invoice_number );\r",
                    "invoiceForm.down('#printinvoiceTopDateFld').setValue(  rmProInvoicePanel.down('#invoicePayDateFld').getValue() ) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    " invoiceForm.down('#printInvoiceTotalAmtFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) );\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#printInvoicePaymentMethodLbl').setHtml(\"Payment Method : \" + rmProInvoicePanel.down('#invoicePaidByFld').getValue() );\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceCCApprovalLbl').setHtml(\"CC Approval #: \" +  rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue()  );\r",
                    "\r",
                    "\r",
                    " invoiceForm.down('#printinvoiceBottomDateFld').setValue(rmProInvoicePanel.down('#invoicePayDateFld').getValue() );//rmProInvoicePanel.down('#invoiceRMProDateFld').getValue()) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#invoicePrintSavingFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue())) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceProductLbl').setHtml(\"<b>RM-PRO</b>\") ; //invoiceTotalPaybleFld\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceTotalPaybleLbl').setHtml('<center><b>Invoice Amount : $ '+ formatNum(rmProInvoicePanel.down('#invoiceAmmountFld').getValue()) +'</b><br/> Balance Due : $ '+\r",
                    "\r",
                    "                                                        formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue()) +'<center>') ;\r",
                    "\r",
                    "\r",
                    " //invoiceForm.down('#printInvoiceSubTotalAmtFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue()) );\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceSubTotalAmtFld').setValue( formatNum(subTotal) );\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceFromLbl').setValue( rmProBilling.payment_period_start ) ;\r",
                    "invoiceForm.down('#printInvoiceToLbl').setValue(rmProBilling.payment_period_end) ;;\r",
                    "\r",
                    "//\r",
                    "//invoiceForm.down('#printInvoiceProductDurationLbl').setHtml( rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() + ' Month ( ' + rmProBilling.payment_period_start + ' to '+ rmProBilling.payment_period_end + ' )') ;\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceProductDurationLbl').setHtml( rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() + ' Month(s) ') ;\r",
                    "\r",
                    "if(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())\r",
                    "{\r",
                    " invoiceForm.down('#printInvoiceBalanceDueFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue()) );\r",
                    "}else{\r",
                    "    invoiceForm.down('#printInvoiceBalanceDueFld').setValue(\"0.00\");\r",
                    "}\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceAmtPaidFld').setValue(  formatNum(rmProInvoicePanel.down('#invoiceAmmountFld').getValue()) ) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    " invoiceForm.down('#printIDueDateNoLbl').setHtml(\"Due Date:&nbsp;\"+ rmProBilling.due_date );\r",
                    "  invoiceForm.down('#printInvoiceNoLbl').setHtml(\"Invoice #:&nbsp;&nbsp;\"+rmProBilling.invoice_number );\r",
                    "invoiceForm.down('#printITopDateNoLbl').setHtml(\"Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+ rmProInvoicePanel.down('#invoicePayDateFld').getValue() ) ;\r",
                    "\r",
                    "\r",
                    "                        if(! rmProBilling.payment_status){\r",
                    "\r",
                    "                            invoiceForm.down('#printInvoicePaidStampImg').setHidden(false) ;\r",
                    "                       }\r",
                    "\r",
                    "                       if( rmProBilling.payment_status == \"paid\"){\r",
                    "                           invoiceForm.down('#printInvoicePaidStampImg').setHidden(false) ;\r",
                    "                       }else{\r",
                    "                           invoiceForm.down('#printInvoicePaidStampImg').setHidden(true) ;\r",
                    "                       }\r",
                    "\r",
                    "\r",
                    "\r",
                    "var allRecrdsPanel = Ext.ComponentQuery.query('#printInvoiceSubscriptionListPanel')[0];\r",
                    "var allReList = allRecrdsPanel.down('#mainList') ;\r",
                    "\r",
                    "\r",
                    "var allRecPanelHeight =  allReList.getStore().getData().all.length * allReList.getItemHeight() + 50 ;\r",
                    "allRecrdsPanel.setHeight(allRecPanelHeight);\r",
                    "\r",
                    "\r",
                    "// invoiceForm.down('#printInvoiceSubTotalAmtFldLbl').setHtml(\"Total:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$\" + formatNum(subTotal) );\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceSubTotalAmtFldLbl').setHtml('Total:<div style=\"text-align:right;margin-top: -14px;\"> $' + formatNum(subTotal) + '</div>' );\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#invoicePrintSavingFldLbl').setHtml('Discount:<div style=\"text-align:right;margin-top: -14px;\"> $'+ formatNum(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue()) + '</div>') ;\r",
                    " invoiceForm.down('#printInvoiceTotalAmtFldLbl').setHtml('Amount Due:<div style=\"text-align:right;margin-top: -14px;\"> $' + formatNum(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue())  + '</div>');\r",
                    "\r",
                    "if(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())\r",
                    "{\r",
                    "    invoiceForm.down('#printInvoiceBalanceDueFldLbl').setHtml('Balance Due:<div style=\"text-align:right;margin-top: -14px;\"> $'+ formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())  + '</div>');\r",
                    "}else{\r",
                    "    invoiceForm.down('#printInvoiceBalanceDueFldLbl').setHtml('Balance Due:<div style=\"text-align:right;margin-top: -14px;\"> $0.00' + '</div>');\r",
                    "}\r",
                    "\r",
                    "var note = rmProInvoicePanel.down('#rmProPaymentNoteFld').getValue() ;\r",
                    "\r",
                    "if(note && note != \"\"){\r",
                    "    invoiceForm.down('#printInvoiceNoteFld').setHidden(false) ;\r",
                    "    invoiceForm.down('#printInvoiceNoteFld').setValue(note) ;\r",
                    "}else{\r",
                    "    invoiceForm.down('#printInvoiceNoteFld').setHidden(true) ;\r",
                    "}\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "6df5d6fd-e6ce-404d-b427-8c32be6b80b3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRmProPrintInvoiceDetails",
                "implHandler": [
                    "var rmProBilling = this.config.product_billing_rec.product_rmpro ; // this.config.selectedRetailer.data.product_billng.product_rmpro ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "\r",
                    "var subTotal = parseInt(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue()) ;\r",
                    " subTotal = subTotal + parseInt(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    " invoiceForm.down('#printinvoiceIdTxtfld').setValue( this.getMMYYYY(rmProBilling.due_date) );\r",
                    "\r",
                    " invoiceForm.down('#printinvoiceDueDateFld').setValue( rmProBilling.due_date );\r",
                    "\r",
                    "//invoiceForm.down('#printinvoiceIdTxtfld').setValue( rmProBilling.invoice_id );\r",
                    "\r",
                    "invoiceForm.down('#printinvoiceNofld').setValue( rmProBilling.invoice_number );\r",
                    "invoiceForm.down('#printinvoiceTopDateFld').setValue(  rmProInvoicePanel.down('#invoicePayDateFld').getValue() ) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    " invoiceForm.down('#printInvoiceTotalAmtFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) );\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#printInvoicePaymentMethodLbl').setHtml(\"Payment Method : \" + rmProInvoicePanel.down('#invoicePaidByFld').getValue() );\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceCCApprovalLbl').setHtml(\"CC Approval #: \" +  rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue()  );\r",
                    "\r",
                    "\r",
                    " invoiceForm.down('#printinvoiceBottomDateFld').setValue(rmProInvoicePanel.down('#invoicePayDateFld').getValue() );//rmProInvoicePanel.down('#invoiceRMProDateFld').getValue()) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#invoicePrintSavingFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue())) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceProductLbl').setHtml(\"<b>RM-PRO</b>\") ; //invoiceTotalPaybleFld\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceTotalPaybleLbl').setHtml('<center><b>Invoice Amount : $ '+ formatNum(rmProInvoicePanel.down('#invoiceAmmountFld').getValue()) +'</b><br/> Balance Due : $ '+\r",
                    "\r",
                    "                                                        formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue()) +'<center>') ;\r",
                    "\r",
                    "\r",
                    " //invoiceForm.down('#printInvoiceSubTotalAmtFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue()) );\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceSubTotalAmtFld').setValue( formatNum(subTotal) );\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceFromLbl').setValue( rmProBilling.payment_period_start ) ;\r",
                    "invoiceForm.down('#printInvoiceToLbl').setValue(rmProBilling.payment_period_end) ;;\r",
                    "\r",
                    "//\r",
                    "//invoiceForm.down('#printInvoiceProductDurationLbl').setHtml( rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() + ' Month ( ' + rmProBilling.payment_period_start + ' to '+ rmProBilling.payment_period_end + ' )') ;\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceProductDurationLbl').setHtml( rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() + ' Month(s) ') ;\r",
                    "\r",
                    "if(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())\r",
                    "{\r",
                    " invoiceForm.down('#printInvoiceBalanceDueFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue()) );\r",
                    "}else{\r",
                    "    invoiceForm.down('#printInvoiceBalanceDueFld').setValue(\"0.00\");\r",
                    "}\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceAmtPaidFld').setValue(  formatNum(rmProInvoicePanel.down('#invoiceAmmountFld').getValue()) ) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    " invoiceForm.down('#printIDueDateNoLbl').setHtml(\"Due Date:&nbsp;\"+ rmProBilling.due_date );\r",
                    "  invoiceForm.down('#printInvoiceNoLbl').setHtml(\"Invoice #:&nbsp;&nbsp;\"+rmProBilling.invoice_number );\r",
                    "invoiceForm.down('#printITopDateNoLbl').setHtml(\"Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+ rmProInvoicePanel.down('#invoicePayDateFld').getValue() ) ;\r",
                    "\r",
                    "\r",
                    "                        if(! rmProBilling.payment_status){\r",
                    "\r",
                    "                            invoiceForm.down('#printInvoicePaidStampImg').setHidden(false) ;\r",
                    "                       }\r",
                    "\r",
                    "                       if( rmProBilling.payment_status == \"paid\"){\r",
                    "                           invoiceForm.down('#printInvoicePaidStampImg').setHidden(false) ;\r",
                    "                       }else{\r",
                    "                           invoiceForm.down('#printInvoicePaidStampImg').setHidden(true) ;\r",
                    "                       }\r",
                    "\r",
                    "\r",
                    "\r",
                    "var allRecrdsPanel = Ext.ComponentQuery.query('#printInvoiceSubscriptionListPanel')[0];\r",
                    "var allReList = allRecrdsPanel.down('#mainList') ;\r",
                    "\r",
                    "\r",
                    "var allRecPanelHeight =  allReList.getStore().getData().all.length * allReList.getItemHeight() + 50 ;\r",
                    "allRecrdsPanel.setHeight(allRecPanelHeight);\r",
                    "\r",
                    "\r",
                    "// invoiceForm.down('#printInvoiceSubTotalAmtFldLbl').setHtml(\"Total:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$\" + formatNum(subTotal) );\r",
                    "\r",
                    "invoiceForm.down('#printInvoiceSubTotalAmtFldLbl').setHtml('Total:<div style=\"text-align:right;margin-top: -14px;\"> $' + formatNum(subTotal) + '</div>' );\r",
                    "\r",
                    "\r",
                    "invoiceForm.down('#invoicePrintSavingFldLbl').setHtml('Discount:<div style=\"text-align:right;margin-top: -14px;\"> $'+ formatNum(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue()) + '</div>') ;\r",
                    " invoiceForm.down('#printInvoiceTotalAmtFldLbl').setHtml('Amount Due:<div style=\"text-align:right;margin-top: -14px;\"> $' + formatNum(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue())  + '</div>');\r",
                    "\r",
                    "if(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())\r",
                    "{\r",
                    "    invoiceForm.down('#printInvoiceBalanceDueFldLbl').setHtml('Balance Due:<div style=\"text-align:right;margin-top: -14px;\"> $'+ formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())  + '</div>');\r",
                    "}else{\r",
                    "    invoiceForm.down('#printInvoiceBalanceDueFldLbl').setHtml('Balance Due:<div style=\"text-align:right;margin-top: -14px;\"> $0.00' + '</div>');\r",
                    "}\r",
                    "\r",
                    "var note = rmProInvoicePanel.down('#rmProPaymentNoteFld').getValue() ;\r",
                    "\r",
                    "if(note && note != \"\"){\r",
                    "    invoiceForm.down('#printInvoiceNoteFld').setHidden(false) ;\r",
                    "    invoiceForm.down('#printInvoiceNoteFld').setValue(note) ;\r",
                    "}else{\r",
                    "    invoiceForm.down('#printInvoiceNoteFld').setHidden(true) ;\r",
                    "}\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "d24ce6ba-0cca-4e22-8858-5e97aeec602b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "hiedeAllProductsPanel",
                "implHandler": [
                    "return ;\r",
                    "  var component = Ext.ComponentQuery.query('#invoiceRMPROHideShowImg')[0] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "    var rmProBillngPanel =  component.getParent().getParent().down('#invoiceRmproBillingFldsPanel');\r",
                    "  if(! rmProBillngPanel.getHidden())\r",
                    "  {\r",
                    "    var childs = component.getParent().getParent().getItems().items ;\r",
                    "    for(var i=0;i< childs.length; i++){\r",
                    "\r",
                    "        if(childs[i].config.xtype ==\"panel\" ){\r",
                    "                var child = childs[i] ;\r",
                    "                child.setHidden(! child.getHidden());\r",
                    "                if( child.getHidden()){\r",
                    "\r",
                    "                   component.setSrc('resources/images/labelHeader/rightArrow.png');\r",
                    "                }else{\r",
                    "                    component.setSrc('resources/images/labelHeader/downArrow.png') ;\r",
                    "                }\r",
                    "\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "  }\r",
                    " rmProBillngPanel.setHidden(true);\r",
                    "     if(rmProBillngPanel.getHidden())\r",
                    "    {\r",
                    "        Ext.ComponentQuery.query('#productRmproInvoicePanel')[0].setHeight(30);\r",
                    "    }else{\r",
                    "\r",
                    "        Ext.ComponentQuery.query('#productRmproInvoicePanel')[0].setHeight(600);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "this.hideDatalinkPanels() ;"
                ]
            },
            "designerId": "8c0d1c98-c67e-40ef-a783-dc66bf3063a7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "hideDatalinkPanels",
                "implHandler": [
                    "return ;\r",
                    "\r",
                    "  var component = Ext.ComponentQuery.query('#invoiceDatalinkHideShowImg')[0] ;\r",
                    "\r",
                    "\r",
                    "   var rmProBillngPanel =  component.getParent().getParent().down('#invoiceDatalinkBillingFldsPanel');\r",
                    "\r",
                    "  if(! rmProBillngPanel.getHidden())\r",
                    "  {\r",
                    "\r",
                    "\r",
                    "    var childs = component.getParent().getParent().getItems().items ;\r",
                    "    for(var i=0;i< childs.length; i++){\r",
                    "\r",
                    "        if(childs[i].config.xtype ==\"panel\"){\r",
                    "                var child = childs[i] ;\r",
                    "               if(child.getItemId() != 'invoiceDatalinkPackageListPanel'){\r",
                    "                child.setHidden(! child.getHidden());\r",
                    "                if( child.getHidden()){\r",
                    "\r",
                    "                   component.setSrc('resources/images/labelHeader/rightArrow.png');\r",
                    "                }else{\r",
                    "                    component.setSrc('resources/images/labelHeader/downArrow.png') ;\r",
                    "                }\r",
                    "               }\r",
                    "\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    rmProBillngPanel.setHidden(! rmProBillngPanel.getHidden());\r",
                    "  //   rmProBillngPanel.setScrollable(! rmProBillngPanel.getHidden()) ;\r",
                    "\r",
                    "    if(rmProBillngPanel.getHidden())\r",
                    "    {\r",
                    "        Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0].setHeight(30);\r",
                    "    }else{\r",
                    "\r",
                    "        Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0].setHeight(750);\r",
                    "    }\r",
                    "  }"
                ]
            },
            "designerId": "0872843d-904f-4085-b5cd-6fd6a66df3b9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRMProPanelHeight",
                "implHandler": [
                    "\r",
                    "var mainPanel = Ext.ComponentQuery.query('#billingDetailsMainTabPanel')[0] ;\r",
                    "\r",
                    "var rmProPanel = mainPanel.down('#productRmproInvoicePanel');\r",
                    "\r",
                    "var height = 0 ;\r",
                    "\r",
                    "height += rmProPanel.down('#invoiceRMProHideShowFldSet').getHeight();\r",
                    "height += rmProPanel.down('#invoiceRmProPackageListPanel').getHeight();\r",
                    "height += rmProPanel.down('#invoiceRmProAddOnsListPanel').getHeight();\r",
                    "height += rmProPanel.down('#invoiceRmproBillingFldsPanel').getHeight();\r",
                    "\r",
                    "rmProPanel.setHeight(height);"
                ]
            },
            "designerId": "ad1fe461-5e06-4c52-b961-44fd30acccd9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDataLinkPanelHeight",
                "implHandler": [
                    "/*\r",
                    "productDatalinkInvoicePanel\r",
                    "\r",
                    "invoiceDatalinkHideShowFldSet\r",
                    "invoiceDatalinkPackageListPanel\r",
                    "invoiceDatalinkAddOnsListPanel\r",
                    "invoiceDatalinkBillingFldsPanel\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "var mainPanel = Ext.ComponentQuery.query('#billingDetailsMainTabPanel')[0] ;\r",
                    "\r",
                    "var datalinkPanel = mainPanel.down('#productDatalinkInvoicePanel');\r",
                    "\r",
                    "var height = 0 ;\r",
                    "\r",
                    "height += datalinkPanel.down('#invoiceDatalinkHideShowFldSet').getHeight();\r",
                    "height += datalinkPanel.down('#invoiceDatalinkPackageListPanel').getHeight();\r",
                    "height += datalinkPanel.down('#invoiceDatalinkAddOnsListPanel').getHeight();\r",
                    "height += datalinkPanel.down('#invoiceDatalinkBillingFldsPanel').getHeight();\r",
                    "\r",
                    "datalinkPanel.setHeight(height);"
                ]
            },
            "designerId": "daeb39af-82d7-41fe-88ae-081aed618f1a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[action=calRmproBalDue]",
                "designer|targetType": "Ext.field.Text",
                "fn": "oninvoiceAmmountFldTextfieldChange",
                "implHandler": [
                    "//this.calculateRMPROBalanceDue() ;"
                ],
                "name": "change"
            },
            "designerId": "00a9db86-8298-4602-801e-562007a3c57c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[action=calRmproBalDue]",
                "designer|targetType": "Ext.field.Text",
                "fn": "calRmproBalDueKeyUp",
                "implHandler": [
                    "this.calculateRMPROBalanceDue() ;"
                ],
                "name": "keyup"
            },
            "designerId": "7bdc6c4c-ccf1-46f2-8aaa-3ed4384e7112"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "calculateRMPROBalanceDue",
                "implHandler": [
                    "return ;\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "var totalPayble = parseFloat(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) ;\r",
                    "\r",
                    "var pastDue = rmProInvoicePanel.down('#invoicePastDueFld').getValue() ? parseFloat(rmProInvoicePanel.down('#invoicePastDueFld').getValue(),0) : 0 ;\r",
                    "\r",
                    "var ammountPaying = rmProInvoicePanel.down('#invoiceAmmountFld').getValue() ? parseFloat(rmProInvoicePanel.down('#invoiceAmmountFld').getValue(),0) : 0;\r",
                    "\r",
                    "var prevPaidAmt = 0 ;\r",
                    "\r",
                    "var payments =  this.config.product_billing_rec.product_rmpro.payments ;\r",
                    "\r",
                    "if(payments){\r",
                    "\r",
                    "    for(var i =0 ; i < payments.length ; i ++){\r",
                    "\r",
                    "        prevPaidAmt += parseFloat( payments[i].ammount_paying , 0 ) ;\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var balanceDue = ( totalPayble + pastDue) - (ammountPaying + prevPaidAmt );\r",
                    "if(balanceDue)\r",
                    "{\r",
                    "    balanceDue = balanceDue.toFixed(2) ;\r",
                    "\r",
                    "    rmProInvoicePanel.down('#invoiceBalanceDueFld').setValue(balanceDue) ;\r",
                    "}else{\r",
                    "\r",
                    "    rmProInvoicePanel.down('#invoiceBalanceDueFld').setValue(null) ;\r",
                    "}"
                ]
            },
            "designerId": "ad3ce800-7e3a-446b-bb99-54229389de1f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "calculateDatalinkBalanceDue",
                "implHandler": [
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;\r",
                    "\r",
                    "var totalPayble = parseFloat(rmProInvoicePanel.down('#invoiceDatalinkTotalPaybleFld').getValue()) ;\r",
                    "\r",
                    "var pastDue = rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').getValue() ? parseFloat(rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').getValue(),0) : 0;\r",
                    "\r",
                    "var ammountPaying = rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').getValue()? parseFloat(rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').getValue(),0) : 0 ;\r",
                    "\r",
                    "\r",
                    "var prevPaidAmt = 0 ;\r",
                    "\r",
                    "var payments =  this.config.product_billing_rec.product_datalink.payments ;\r",
                    "\r",
                    "if(payments){\r",
                    "\r",
                    "    for(var i =0 ; i < payments.length ; i ++){\r",
                    "\r",
                    "        prevPaidAmt += parseFloat( payments[i].ammount_paying , 0 ) ;\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "var balanceDue = ( totalPayble + pastDue) - ( ammountPaying + prevPaidAmt );\r",
                    "\r",
                    "if(balanceDue)\r",
                    "{\r",
                    "    balanceDue = balanceDue.toFixed(2) ;\r",
                    "\r",
                    "    rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').setValue(balanceDue) ;\r",
                    "}else{\r",
                    "    rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').setValue(null) ;\r",
                    "}"
                ]
            },
            "designerId": "ef01f856-5192-4a01-9fc3-7998d5ae5e7a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[action=calDatalinkBalDue]",
                "designer|targetType": "Ext.field.Text",
                "fn": "oninvoiceDatalinkAmmountFldTextfieldChange",
                "implHandler": [
                    "\r",
                    "this.calculateDatalinkBalanceDue() ;"
                ],
                "name": "change"
            },
            "designerId": "da95a9e7-ee47-42ed-8a11-3f44b6c17077"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[action=calDatalinkBalDue]",
                "designer|targetType": "Ext.field.Text",
                "fn": "oncalDatalinkBalDueKeyup",
                "implHandler": [
                    "\r",
                    "this.calculateDatalinkBalanceDue() ;"
                ],
                "name": "keyup"
            },
            "designerId": "064a47f8-72b5-4d64-987a-5883ea5a9eed"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "flag"
                ],
                "fn": "hideShowPrintPaymentInfo",
                "implHandler": [
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;\r",
                    "\r",
                    "invoiceForm.down('#printInvoicePaidStampImg').setHidden(flag);\r",
                    "invoiceForm.down('#printInoicePaymentDtlsPanel').setHidden(flag);"
                ]
            },
            "designerId": "5cad4cf5-38ac-44e7-9bc5-a91ed0701388"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadVendorBillingData",
                "implHandler": [
                    "//  RMdatalink.util.globalConfig.setDataToShowInSettingWindow(\r",
                    "\r",
                    "//      {\r",
                    "\r",
                    "//          record:this.config.selectedRetailer\r",
                    "\r",
                    "//      }\r",
                    "//  );\r",
                    "\r",
                    "\r",
                    "\r",
                    "//RMdatalink.app.getController('RetailerDeatilsDataSet').loadActiveVendorsForRetailers() ;\r",
                    "\r",
                    "RMdatalink.app.getController('ProductBillingController').setDatalinkModules() ;"
                ]
            },
            "designerId": "7f53a745-685f-4213-8578-3f88a0fbf6ec"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=rtDetlViewSubscriptionsBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onrtDetlViewSubscriptionsBtnTap",
                "implHandler": [
                    "\r",
                    "var RDStoreProductsList= Ext.ComponentQuery.query(\"#RDStoreProductsList\")[0];\r",
                    "var selection = RDStoreProductsList.getSelection();\r",
                    "var selectedItem ;\r",
                    "\r",
                    "try{\r",
                    "    if( selection.length){\r",
                    "        \r",
                    "        selectedItem = selection[0].data.ProductName;\r",
                    "    }\r",
                    "    \r",
                    "\r",
                    "}\r",
                    "catch(e){\r",
                    "    console.log(\"ERROR THROWN\" , e);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    " RMdatalink.app.getController('RetailerDeatilsDataSet').saveRTProductSetup();\r",
                    "\r",
                    "        var selectedUserRecord = RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();\r",
                    "          if( !( Object.keys(selectedUserRecord).length  )   ){\r",
                    "                // USER CLICKED ON ADD NEW RETAILER BTN\r",
                    "\r",
                    "                return ;\r",
                    "            }\r",
                    "getSubscriptionSheet().show() ;\r",
                    "\r",
                    "this.initInvoice( selectedUserRecord.record , selectedItem) ;\r",
                    "\r",
                    "\r",
                    "var rtDtlsLbl = Ext.ComponentQuery.query('#billingSheetRtDtlsLbl')[0];\r",
                    "\r",
                    "var html = \"<b>\"+ selectedUserRecord.record.data.store_name + \"</b>\" ;\r",
                    "\r",
                    "rtDtlsLbl.setHtml(html) ;\r",
                    "\r",
                    "function getSubscriptionSheet(){\r",
                    "\r",
                    "    if(Ext.ComponentQuery.query(\"#billingDetailSheet\")[0])\r",
                    "    {\r",
                    "\r",
                    "     return Ext.ComponentQuery.query(\"#billingDetailSheet\")[0];\r",
                    "\r",
                    "    }else{\r",
                    "\r",
                    "     return Ext.widget('billingDetailSheet');\r",
                    "    }\r",
                    "\r",
                    "}"
                ],
                "name": "tap"
            },
            "designerId": "4949a00c-b4ea-42c7-90fa-432b905e4743"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=rtBillingSheetSaveBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onrtBillingSheetSaveBtnTap",
                "implHandler": [
                    "                if(RMdatalink.app.getController('InvoiceHistoryController').config.displayGeneratedInvoice )\r",
                    "                {\r",
                    "                      RMdatalink.app.getController('InvoiceHistoryController').updateInvoice() ;\r",
                    "                }\r",
                    "                else{\r",
                    "\r",
                    "                    RMdatalink.app.getController('InvoiceController').saveRmProInvoice();\r",
                    "                }\r",
                    "\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "64f2cd0a-d853-4ebc-aa21-a7f3cdcf9b08"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=rtBillingSheetCancelBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onrtBillingSheetCancelBtnTap",
                "implHandler": [
                    "\r",
                    "var that = this ;\r",
                    "var edtViewBtn = Ext.ComponentQuery.query('#rtBillingSheetEditCancelBtn')[0];\r",
                    "\r",
                    "if(edtViewBtn.getText() != \"Edit\" )\r",
                    "{\r",
                    "  Ext.Msg.confirm(\"Confirm\",\"View in edit mode, do you want to continue ?.\",onMessageAns ,this);\r",
                    "\r",
                    "\r",
                    "    function onMessageAns(action,opt,confirmBox){\r",
                    "\r",
                    "\r",
                    "        if(action == \"yes\"){\r",
                    "\r",
                    "         goBack() ;\r",
                    "\r",
                    "        }else{\r",
                    "\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    goBack() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function  goBack(){\r",
                    "    if(that.config.isFromBilling)\r",
                    "    {\r",
                    "        RMdatalink.app.getController('UINav').onBackTextTap() ;\r",
                    "    }\r",
                    "    var billSheet = Ext.ComponentQuery.query(\"#billingDetailSheet\")[0];\r",
                    "\r",
                    "    billSheet.hide();\r",
                    "\r",
                    "\r",
                    "    //billSheet.destroy() ;\r",
                    "}"
                ],
                "name": "tap"
            },
            "designerId": "50d36317-545e-49c5-9141-356727d5251b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "date"
                ],
                "fn": "getMMYYYY",
                "implHandler": [
                    "if(date)\r",
                    "{\r",
                    "    var dObj = new Date(date) ;\r",
                    "\r",
                    "    return (dObj.getMonth()+1) + \"/\"+ dObj.getFullYear() ;\r",
                    "}else{\r",
                    "\r",
                    "    return \"\" ;\r",
                    "}"
                ]
            },
            "designerId": "2bb731a0-3f17-40b6-a1fc-60575b103a50"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveRMPROPartialPayment",
                "implHandler": [
                    "\r",
                    "\r",
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "if(rtRecord.data.store_products.rmpro_status && rtRecord.data.store_products.rmpro_status == \"ACTIVE\" && rtRecord.data.product_billng.product_rmpro){\r",
                    "    //Continue execution\r",
                    "\r",
                    "}else{\r",
                    "    //check for datalink and break execution\r",
                    "     that.saveDatalinkInvoice(isGenerateInvoice,product_name) ;\r",
                    "     return ;\r",
                    "}\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec   //rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "var product_rmpro = dataToUpdate.product_billng.product_rmpro ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "product_rmpro.past_due = rmProInvoicePanel.down('#invoicePastDueFld').getValue() ;\r",
                    "product_rmpro.balance_due = rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.pay_date = rmProInvoicePanel.down('#invoicePayDateFld').getValue() ;\r",
                    "product_rmpro.paid_by = rmProInvoicePanel.down('#invoicePaidByFld').getValue() ;\r",
                    "product_rmpro.payment_method_detail = rmProInvoicePanel.down('#invoicePaymentDetailFld').getValue() ;\r",
                    "product_rmpro.cc_approval = rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.proccessed_by = rmProInvoicePanel.down('#invoiceProcessedByFld').getValue() ;\r",
                    "product_rmpro.date = rmProInvoicePanel.down('#invoiceRMProDateFld').getValue() ;\r",
                    "\r",
                    "product_rmpro.ammount_paying = rmProInvoicePanel.down('#invoiceAmmountFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "dataToUpdate.product_billng.product_rmpro = product_rmpro ;\r",
                    "\r",
                    "\r",
                    "console.error(dataToUpdate) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "Ext.Viewport.setMasked( {\r",
                    "                xtype: 'loadmask'\r",
                    "            });\r",
                    "\r",
                    "   RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);\r",
                    "\r",
                    "\r",
                    "            function suc(){\r",
                    "\r",
                    "                rtRecord.set('product_billng',dataToUpdate.product_billng);\r",
                    "\r",
                    "\r",
                    "            }\r",
                    "            function err(){\r",
                    "                    Ext.Viewport.setMasked(false);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "  function getArrayDataFromStore(store){\r",
                    "\r",
                    "        var data = new Array();\r",
                    "        data = store.getData().items;\r",
                    "\r",
                    "        var dataToReturn = new Array();\r",
                    "\r",
                    "        for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "            dataToReturn.push(data[i].data);\r",
                    "        }\r",
                    "\r",
                    "        return dataToReturn ;\r",
                    "\r",
                    "    }"
                ]
            },
            "designerId": "bd0d5997-d6cb-48e3-b278-bd1907d55fd5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[eventAction=RMPROsubscriptionEdited]",
                "designer|targetType": "Ext.field.Text",
                "fn": "RMPROsubscriptionEditedChange",
                "implHandler": [
                    "\r",
                    "if( ! this.config.isManualChange){\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var product_key = this.config.product_type ;\r",
                    "\r",
                    "var duration = Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].getValue() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var that = this ;\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec //rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "var product_rmpro = dataToUpdate.product_billng[product_key] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var paymntDurationYr = parseFloat(duration) / 12 ;\r",
                    "\r",
                    "\r",
                    "var billingController =  RMdatalink.app.getController('BillingDetailsController') ;\r",
                    "\r",
                    "\r",
                    "var discounts = billingController.config.pricingData[3].discount_policy ;\r",
                    "var discountValue = 0 ;\r",
                    "\r",
                    "console.log(paymntDurationYr) ;\r",
                    "\r",
                    "\r",
                    "if(product_key == \"product_rmpro\"){\r",
                    "\r",
                    "            discountValue = getPercentDiscount() ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceDiscountAppliedFld').setValue(discountValue || 0);\r",
                    "\r",
                    "\r",
                    "var subTotal = parseFloat(rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue()) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var totalPayble = parseFloat(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue())  ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var totalSaving = (subTotal*  parseFloat(duration)  ) - totalPayble ;\r",
                    "\r",
                    "totalSaving += parseFloat(rmProInvoicePanel.down('#invoiceRmproSaving').getValue()) ;\r",
                    "\r",
                    "\r",
                    "totalSaving = totalSaving.toFixed(2) ;\r",
                    "totalPayble = totalPayble.toFixed(2) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(totalPayble);\r",
                    "rmProInvoicePanel.down('#invoiceTotalSavingFld').setValue(totalSaving || 0);\r",
                    "\r",
                    "//rmProInvoicePanel.down('#invoiceAmmountFld').setValue(totalPayble);\r",
                    "\r",
                    "var due_date = rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "Ext.ComponentQuery.query('#billingRMProDtlsLbl')[0].setHtml(\"Due Date :\"+ due_date +\" invoice_no: \"+product_rmpro.invoice_number+\" <b>Total Payble : \"+totalPayble + \"$</b>\" );\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getPercentDiscount(){\r",
                    "\r",
                    "    var discoutToReturn = 0 ;\r",
                    "    for(var i = discounts.length -1  ; i >= 0 ; i-- ){\r",
                    "\r",
                    "       var lowerDuration = 0 ;\r",
                    "\r",
                    "        if(i > 0){\r",
                    "\r",
                    "            lowerDuration = discounts[i-1].discount_duration ;\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "       if( paymntDurationYr > lowerDuration && paymntDurationYr >= discounts[i].discount_duration ){\r",
                    "\r",
                    "           discoutToReturn = discounts[i].discount_value ;\r",
                    "           return discoutToReturn ;\r",
                    "       }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    return discoutToReturn ;\r",
                    "}\r",
                    ""
                ],
                "name": "change"
            },
            "designerId": "35626da7-ad6c-4488-8974-c395f4c3f04f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[eventAction=DatalinkSubscriptionEdited]",
                "designer|targetType": "Ext.field.Text",
                "fn": "onDatalinkSubscriptionEditedChange",
                "implHandler": [
                    "\r",
                    "if( ! this.config.isManualChange){\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var duration = Ext.ComponentQuery.query('#invoiceDatalinkPaymentPrdSlFld')[0].getValue() ;\r",
                    "\r",
                    "var that = this ;\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec //rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "var product_datalink = dataToUpdate.product_billng.product_datalink ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var paymntDurationYr = parseInt(duration) / 12 ;\r",
                    "\r",
                    "\r",
                    "var billingController =  RMdatalink.app.getController('BillingDetailsController') ;\r",
                    "\r",
                    "\r",
                    "var discounts = billingController.config.pricingData[0].advance_payment_discounts ;\r",
                    "var discountValue = 0 ;\r",
                    "\r",
                    "console.log(paymntDurationYr) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "discountValue = getPercentDiscount() ;\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceDatalinkDiscountAppliedFld').setValue(discountValue);\r",
                    "\r",
                    "\r",
                    "var subTotal = parseFloat(rmProInvoicePanel.down('#invoiceDatalinkSubtotal').getValue()) ;\r",
                    "\r",
                    "var totalPayble = parseFloat(product_datalink.monthly_membership) *  parseFloat(duration) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(discountValue > 0){\r",
                    "\r",
                    "    totalPayble = ((totalPayble * (100-discountValue)) / 100) ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "var totalSaving = (subTotal*  parseFloat(duration)  ) - totalPayble ;\r",
                    "totalSaving += parseFloat(rmProInvoicePanel.down('#invoiceDatalinkSaving').getValue()) ;\r",
                    "\r",
                    "totalSaving = totalSaving.toFixed(2) ;\r",
                    "totalPayble = totalPayble.toFixed(2) ;\r",
                    "\r",
                    "rmProInvoicePanel.down('#invoiceDatalinkTotalPaybleFld').setValue(totalPayble);\r",
                    "rmProInvoicePanel.down('#invoiceDatalinkTotalSavingFld').setValue(totalSaving);\r",
                    "\r",
                    "//rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').setValue(totalPayble);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#billingDatalinkDtlsLbl')[0].setHtml(\"Due Date : \"+product_datalink.due_date+\" invoice_no: \"+product_datalink.invoice_number+\" <b>Total Payble : \"+totalPayble + \"$</b>\" );\r",
                    "\r",
                    "function getPercentDiscount(){\r",
                    "\r",
                    "    var discoutToReturn = 0 ;\r",
                    "    for(var i = discounts.length -1  ; i >= 0 ; i-- ){\r",
                    "\r",
                    "       var lowerDuration = 0 ;\r",
                    "\r",
                    "        if(i > 0){\r",
                    "\r",
                    "            lowerDuration = discounts[i-1].discount_duration ;\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "       if( paymntDurationYr > lowerDuration && paymntDurationYr >= discounts[i].discount_duration ){\r",
                    "\r",
                    "           discoutToReturn = discounts[i].discount_value ;\r",
                    "           return discoutToReturn ;\r",
                    "       }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    return discoutToReturn ;\r",
                    "}\r",
                    ""
                ],
                "name": "change"
            },
            "designerId": "04a89aae-70b1-4abd-be97-4a3bc53470b7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "addRmProPartialPayment",
                "implHandler": [
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec   //rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "\r",
                    "var product_rmpro = dataToUpdate.product_billng.product_rmpro ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var temp = {} ;\r",
                    "\r",
                    "temp.past_due = rmProInvoicePanel.down('#invoicePastDueFld').getValue() ;\r",
                    "temp.balance_due = rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue() ;\r",
                    "\r",
                    "temp.pay_date = rmProInvoicePanel.down('#invoicePayDateFld').getValue() ;\r",
                    "temp.paid_by = rmProInvoicePanel.down('#invoicePaidByFld').getValue() ;\r",
                    "temp.payment_method_detail = rmProInvoicePanel.down('#invoicePaymentDetailFld').getValue() ;\r",
                    "temp.cc_approval = rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue() ;\r",
                    "\r",
                    "temp.proccessed_by = rmProInvoicePanel.down('#invoiceProcessedByFld').getValue() ;\r",
                    "temp.date = rmProInvoicePanel.down('#invoiceRMProDateFld').getValue() ;\r",
                    "\r",
                    "temp.ammount_paying = rmProInvoicePanel.down('#invoiceAmmountFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "var payments = dataToUpdate.product_billng.product_rmpro.payments ;\r",
                    "\r",
                    "if(payments && payments instanceof Array){\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    payments = [] ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "payments.push(temp);\r",
                    "\r",
                    "dataToUpdate.product_billng.product_rmpro.payments = payments ;\r",
                    "\r",
                    "/*\r",
                    "        var prevBalanceDue =  rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue() ;\r",
                    "\r",
                    "        if(prevBalanceDue && prevBalanceDue != \"\"){\r",
                    "\r",
                    "            prevBalanceDue = parseFloat(prevBalanceDue,0) ;\r",
                    "        }else{\r",
                    "\r",
                    "            prevBalanceDue = 0 ;\r",
                    "        }\r",
                    "        console.error(temp.ammount_paying) ;\r",
                    "        prevBalanceDue = prevBalanceDue - parseFloat(temp.ammount_paying,0) ;\r",
                    "\r",
                    "        dataToUpdate.product_billng.product_rmpro.balance_due = prevBalanceDue ;\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "\r",
                    "console.error(dataToUpdate) ;\r",
                    "\r",
                    "\r",
                    "Ext.Viewport.setMasked( {\r",
                    "                xtype: 'loadmask'\r",
                    "            });\r",
                    "\r",
                    "   RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);\r",
                    "\r",
                    "\r",
                    "            function suc(){\r",
                    "\r",
                    "                rtRecord.set('product_billng',dataToUpdate.product_billng);\r",
                    "\r",
                    "\r",
                    "                that.config.product_billing_rec = dataToUpdate.product_billng ;\r",
                    "\r",
                    "                that.setRMproProductBilling() ;\r",
                    "\r",
                    "                Ext.Viewport.setMasked(false);\r",
                    "\r",
                    "            }\r",
                    "            function err(){\r",
                    "                    Ext.Viewport.setMasked(false);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "4861d6dd-909c-4b23-b835-8f6d866cf301"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRMproProductBilling",
                "implHandler": [
                    "var that = this ;\r",
                    "\r",
                    "var paymentsStore = Ext.getStore('InvoicePaymentsStore') ;\r",
                    "\r",
                    "paymentsStore.removeAll();\r",
                    "paymentsStore.sync() ;\r",
                    "\r",
                    "var payments =  that.config.product_billing_rec.product_rmpro.payments ;\r",
                    "\r",
                    "\r",
                    "if(payments){\r",
                    "\r",
                    "    paymentsStore.setData(payments);\r",
                    "    paymentsStore.sync() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "this.handleAmountPaid() ;"
                ]
            },
            "designerId": "05915359-c5f3-4ba0-aac3-27f2ef74a48c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "addDatalinkProductBilling",
                "implHandler": [
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;\r",
                    "\r",
                    "\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var dataToUpdate = {\r",
                    "\r",
                    "    product_billng : that.config.product_billing_rec   //rtRecord.data.product_billng\r",
                    "};\r",
                    "\r",
                    "\r",
                    "var product_datalink = dataToUpdate.product_billng.product_datalink ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var temp = {} ;\r",
                    "\r",
                    "\r",
                    "temp.past_due = rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').getValue() ;\r",
                    "temp.balance_due = rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').getValue() ;\r",
                    "\r",
                    "temp.pay_date = rmProInvoicePanel.down('#invoiceDatalinkPayDateFld').getValue() ;\r",
                    "temp.paid_by = rmProInvoicePanel.down('#invoiceDatalinkPaidByFld').getValue() ;\r",
                    "temp.payment_method_detail = rmProInvoicePanel.down('#invoiceDatalinkPaymentDetailFld').getValue() ;\r",
                    "temp.cc_approval = rmProInvoicePanel.down('#invoiceDatalinkCCApprovalFld').getValue() ;\r",
                    "\r",
                    "temp.proccessed_by = rmProInvoicePanel.down('#invoiceDatalinkProcessedByFld').getValue() ;\r",
                    "temp.date = rmProInvoicePanel.down('#invoiceDatalinkDateFld').getValue() ;\r",
                    "\r",
                    "temp.ammount_paying = rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').getValue() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var payments = dataToUpdate.product_billng.product_datalink.payments ;\r",
                    "\r",
                    "if(payments && payments instanceof Array){\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    payments = [] ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "payments.push(temp);\r",
                    "\r",
                    "dataToUpdate.product_billng.product_datalink.payments = payments ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "console.error(dataToUpdate) ;\r",
                    "\r",
                    "\r",
                    "Ext.Viewport.setMasked( {\r",
                    "                xtype: 'loadmask'\r",
                    "            });\r",
                    "\r",
                    "   RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);\r",
                    "\r",
                    "\r",
                    "            function suc(){\r",
                    "\r",
                    "                rtRecord.set('product_billng',dataToUpdate.product_billng);\r",
                    "\r",
                    "\r",
                    "                that.config.product_billing_rec = dataToUpdate.product_billng ;\r",
                    "\r",
                    "                that.setDatalinkProductBilling() ;\r",
                    "\r",
                    "                Ext.Viewport.setMasked(false);\r",
                    "\r",
                    "            }\r",
                    "            function err(){\r",
                    "                    Ext.Viewport.setMasked(false);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "1bd90507-ecef-4e80-ae1b-3257f11197b6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDatalinkProductBilling",
                "implHandler": [
                    "\r",
                    "var product_type =  this.config.product_type;\r",
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "var paymentsStore = Ext.getStore('InvoicePaymentsStore') ;\r",
                    "\r",
                    "paymentsStore.removeAll();\r",
                    "paymentsStore.sync() ;\r",
                    "\r",
                    "var payments =  that.config.product_billing_rec[product_type].payments ;\r",
                    "\r",
                    "\r",
                    "if(payments){\r",
                    "\r",
                    "    paymentsStore.setData(payments);\r",
                    "    paymentsStore.sync() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "this.handleAmountPaid() ;"
                ]
            },
            "designerId": "2ecc150c-249b-4d44-ad52-dc023d634bf3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "product"
                ],
                "fn": "updateSalesPersonCommission",
                "implHandler": [
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "var productBilling = that.config.product_billing_rec ;\r",
                    "\r",
                    "var productRecord  =  productBilling[product] ;\r",
                    "\r",
                    "var salesPersons =  productRecord.sales_persons ;\r",
                    "\r",
                    "var rtRecord = this.config.selectedRetailer ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var totalCommission = 0 ;\r",
                    "var commissionableAmt = productRecord.commissionable_ammount ;\r",
                    "var commissionPercent = productRecord.commission_percent ;\r",
                    "\r",
                    "\r",
                    "if(! commissionableAmt || ! commissionPercent  || commissionableAmt==\"\" ||  commissionPercent == \"\" ){\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "totalCommission = (parseFloat(commissionableAmt,0) / 100 ) * parseFloat(commissionPercent,0) ;\r",
                    "\r",
                    "var inhouseMasterStore = Ext.getStore('inhouseMasterStore');\r",
                    "var index = -1 ;\r",
                    "\r",
                    "doUpdateSalesCommission() ;\r",
                    "\r",
                    "function doUpdateSalesCommission(){\r",
                    "\r",
                    "    index++ ;\r",
                    "\r",
                    "    if(index < salesPersons.length){\r",
                    "\r",
                    "        findInhouseUser() ;\r",
                    "\r",
                    "    }else{\r",
                    "\r",
                    "        console.log(\"update success.\");\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function updateSalesPerson(prevCommissionData){\r",
                    "\r",
                    "\r",
                    "          var finalCommission = (parseFloat(totalCommission,0) / 100 ) * parseFloat(salesPersons[index].salesperson_commission,0) ;\r",
                    "\r",
                    "          finalCommission = finalCommission.toFixed(2);\r",
                    "\r",
                    "          var dataToAdd =\r",
                    "          {\r",
                    "\r",
                    "                commissionable_ammount\t: commissionableAmt ,\r",
                    "                pay_date\t\t\t\t: productRecord.pay_date,\r",
                    "                invoice_number\t\t\t: productRecord.invoice_number,\r",
                    "                store_name\t\t\t\t: rtRecord.data.store_name,\r",
                    "                store_id\t\t\t\t: rtRecord.data._id,\r",
                    "                salesperson_commission  : salesPersons[index].salesperson_commission,\r",
                    "                commisson\t\t\t\t: finalCommission,\r",
                    "                product\t\t\t\t\t: product\r",
                    "\r",
                    "          };\r",
                    "\r",
                    "    if(! prevCommissionData || ! prevCommissionData.push ){\r",
                    "\r",
                    "        prevCommissionData = [] ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "          prevCommissionData.push(dataToAdd) ;\r",
                    "          var dataToUpdate =\r",
                    "          {\r",
                    "              commission_data :  prevCommissionData\r",
                    "          };\r",
                    "\r",
                    "\r",
                    "          RMdatalink.iwa.rdl.doUpdateCollection(inhouseMasterStore, dataToUpdate , salesPersons[index]._id , updateSuccess, updateError ) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "function updateSuccess(){\r",
                    "\r",
                    "    doUpdateSalesCommission() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function updateError(){\r",
                    "\r",
                    "    doUpdateSalesCommission() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function findInhouseUser(){\r",
                    "\r",
                    "\r",
                    "    RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_inhouserecords\",pageNo:1,pageSize: 50 ,sortBy:{},\r",
                    "                                query:{\r",
                    "                                        _id:salesPersons[index]._id\r",
                    "                                },\r",
                    "                                fields:{username:1,commission_data:1}},findSuccess,finderror);\r",
                    "\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function findSuccess(){\r",
                    "\r",
                    "    if(arguments[0].items.length > 0 ){\r",
                    "\r",
                    "\r",
                    "        if(arguments[0].items[0].commission_data){\r",
                    "\r",
                    "            updateSalesPerson(arguments[0].items[0].commission_data);\r",
                    "\r",
                    "        }else{\r",
                    "\r",
                    "             updateSalesPerson([]);\r",
                    "        }\r",
                    "\r",
                    "    }else{\r",
                    "\r",
                    "        finderror();\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "function finderror(){\r",
                    "\r",
                    "    doUpdateSalesCommission() ;\r",
                    "}"
                ]
            },
            "designerId": "cfd68055-ad5e-49cb-b90c-86b9b1eaf7dd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=rtBillingSheetCreateNewInvoiceBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onCreateNewInvoiceButtonTap",
                "implHandler": [
                    "\r",
                    "var invoiceType = Ext.ComponentQuery.query('#subscriptionScreenInvoiceTypeSlFld')[0].getValue() ;\r",
                    "var retailer = RMdatalink.app.getController('InvoiceController').config.selectedRetailer ;\r",
                    "var product_name = invoiceType;\r",
                    "var product_billng =  retailer.get(\"product_billng\");\r",
                    "var product_info = product_billng[product_name];\r",
                    "\r",
                    "// PRODUCT SETUP IS ABSENT FOR PARTICULAR SELECTED PRODUCT FOR THIS RETAILER\r",
                    "// SHOW ALERT AND THEN RETURN\r",
                    "if(product_info){\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    Ext.Msg.alert(\"Alert\" , \"Please Do Product Setup for the selected product\");\r",
                    "\r",
                    "}\r",
                    "\r",
                    "          RMdatalink.app.getController('InvoiceController').config.isSalesCommissionForRmPro = true ;\r",
                    "\r",
                    "RMdatalink.app.getController('InvoiceHistoryController').validateInvoiceForGenerarion(invoiceType) ; //(\"product_rmpro\");"
                ],
                "name": "tap"
            },
            "designerId": "60785984-5e25-4e0a-b61d-66afb56a4338"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "inputFld",
                    "record_key"
                ],
                "fn": "updateMultiplePaymentList",
                "implHandler": [
                    "console.log(inputFld.attributes['data-id'].value) ;\r",
                    "\r",
                    "var _id = inputFld.attributes['data-id'].value ;\r",
                    "var value = inputFld.value ;\r",
                    "\r",
                    "value = value.replace(\",\",\"\");\r",
                    "var rmProBillingStore = Ext.getStore('InvoicePaymentsStore') ;\r",
                    "var recIndex = rmProBillingStore.findExact('id',_id) ;\r",
                    "\r",
                    "if(recIndex == -1){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var record = rmProBillingStore.getAt(recIndex) ;\r",
                    "\r",
                    "record.set(record_key,value) ;\r",
                    "\r",
                    "if(record_key == \"ammount_paying\")\r",
                    "{\r",
                    "    this.handleAmountPaid() ;\r",
                    "}"
                ]
            },
            "designerId": "ce75b8fc-1166-45ea-8a95-68d71f05ad93"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "handleAmountPaid",
                "implHandler": [
                    "var paymentStr = Ext.getStore('InvoicePaymentsStore') ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var totalAmtPaid = 0 ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var i = 0 ;\r",
                    "for( i = 0 ; i < paymentStr.getData().all.length ; i++ ){\r",
                    "\r",
                    "    var tempAmt =  paymentStr.getAt(i).get('ammount_paying') ;\r",
                    "\r",
                    "    if(tempAmt && tempAmt !=\"\"){\r",
                    "        totalAmtPaid += parseFloat(tempAmt) ;\r",
                    "    }\r",
                    "\r",
                    "     var re = paymentStr.getAt(i) ;\r",
                    "    if(re){\r",
                    "        re.set('commission',\"0.00\");\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "Ext.ComponentQuery.query('#invoiceAmmountFld')[0].setValue(formatNum(totalAmtPaid)) ;\r",
                    "var balance = Ext.ComponentQuery.query('#invoiceTotalPaybleFld')[0].getValue() - totalAmtPaid ;\r",
                    "Ext.ComponentQuery.query('#invoiceBalanceDueFld')[0].setValue( formatNum(balance)) ;\r",
                    "\r",
                    "\r",
                    "var printInvoicePaidStampImg = Ext.ComponentQuery.query('#printInvoicePaidStampImg')[0] ;\r",
                    "\r",
                    "if( balance <= 0){\r",
                    "\r",
                    "    printInvoicePaidStampImg.setHidden(false);\r",
                    "\r",
                    "    var re = paymentStr.getAt(i-1) ;\r",
                    "    if(re){\r",
                    "        re.set('commission',getCommisionableAmt());\r",
                    "    }\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "     printInvoicePaidStampImg.setHidden(true);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function getCommisionableAmt(){\r",
                    "\r",
                    "    var form = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;\r",
                    "\r",
                    "\r",
                    "                       var cAmt =  form.down('#invoiceCommissionableAmtFld').getValue()  ;\r",
                    "                       var cAmtPerc =  form.down('#invoiceCommissionPercentFld').getValue()  ;\r",
                    "\r",
                    "                       if(cAmt && cAmtPerc && cAmt != \"\" && cAmtPerc != \"\"  ){\r",
                    "\r",
                    "                           cAmt = parseFloat(cAmt);\r",
                    "                           cAmtPerc = parseFloat(cAmtPerc);\r",
                    "\r",
                    "                           var finalamt = cAmt * cAmtPerc ;\r",
                    "\r",
                    "                           finalamt = finalamt / 100 ;\r",
                    "\r",
                    "\r",
                    "                           finalamt = finalamt.toFixed(2) ;\r",
                    "\r",
                    "                           return formatNum(finalamt) ;\r",
                    "\r",
                    "\r",
                    "                       }else{\r",
                    "                           return \"0.00\";\r",
                    "                       }\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "7f8ee36e-933f-47b4-841e-775526ce7935"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=rtBillingSheetEditCancelBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onEditCancelButtonTap",
                "implHandler": [
                    "if(button.getText() == \"Edit\"){\r",
                    "    button.setText(\"Cancel\");\r",
                    "    Ext.ComponentQuery.query('#rtBillingSheetSaveBtn')[0].setHidden(false) ;\r",
                    "RMdatalink.app.getController('InvoiceController').disableEnableInvoice(false) ;\r",
                    "}else{\r",
                    "    button.setText(\"Edit\");\r",
                    "    Ext.ComponentQuery.query('#rtBillingSheetSaveBtn')[0].setHidden(true) ;\r",
                    "    RMdatalink.app.getController('InvoiceController').disableEnableInvoice(true) ;\r",
                    "\r",
                    "    var historyList = Ext.ComponentQuery.query('#billingDtHistoryListPanel')[0].down('#mainList') ;\r",
                    "\r",
                    "    var selection = historyList.getSelection() ;\r",
                    "\r",
                    "    if(selection.length > 0){\r",
                    "        historyList.deselectAll() ;\r",
                    "\r",
                    "        historyList.select(selection[0],false,false) ;\r",
                    "    }\r",
                    "\r",
                    "}"
                ],
                "name": "tap"
            },
            "designerId": "7ac7fa80-66cb-4ad7-946e-91bcd2b3bf7a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "status"
                ],
                "fn": "disableEnableInvoice",
                "implHandler": [
                    "var selectFlds = document.getElementsByClassName('billingDisable');\r",
                    "\r",
                    "for( var i = 0 ; i< selectFlds.length ; i++ ){\r",
                    "\r",
                    "    selectFlds[i].disabled = status  ;\r",
                    "\r",
                    "  /*  if(status){\r",
                    "\r",
                    "        selectFlds[i].style.setProperty(\"background-color\", \"rgb(235, 235, 228)\", \"important\");\r",
                    "\r",
                    "    }else{\r",
                    "        selectFlds[i].style.setProperty(\"background-color\", \"white\", \"important\");\r",
                    "\r",
                    "    }\r",
                    "    */\r",
                    "\r",
                    "}\r",
                    "\r",
                    "Ext.ComponentQuery.query('#billingGotoLicenseBtn')[0].setDisabled(!status);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#invoiceRmProPrintBtn')[0].setDisabled(!status);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#invoiceRMPROProductSetupBtn')[0].setDisabled(!status);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#billingInvoiceAddPaymentsBtn')[0].setDisabled(status);\r",
                    "Ext.ComponentQuery.query('#invoiceTotalPaybleFld')[0].setDisabled(status);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#invoiceCommissionableAmtFld')[0].setDisabled(status);\r",
                    "Ext.ComponentQuery.query('#rtSalesPersonSearchFld')[0].setDisabled(status);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#invoiceCommissionPercentFld')[0].setDisabled(status);\r",
                    "Ext.ComponentQuery.query('#rmProPaymentNoteFld')[0].setDisabled(status);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rtBillingSheetCreateNewInvoiceBtn')[0].setDisabled(!status);\r",
                    "Ext.ComponentQuery.query('#biilingInvoiceDeleteBtn')[0].setDisabled( status );\r",
                    "\r",
                    "Ext.ComponentQuery.query('#billingInvoiceEditingLbl')[0].setHidden(status);\r",
                    "\r",
                    "  Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].setDisabled(status);\r",
                    "\r",
                    "\r",
                    "var productList = Ext.ComponentQuery.query('#rmProInvoiceSalesPersonsPanel')[0].down('#mainList');\r",
                    "productList.setDisableSelection(status) ;\r",
                    "\r",
                    "\r",
                    "var prevPay  = Ext.ComponentQuery.query('#rtBillingRmproPrevPaymntsView')[0].getEl() ;\r",
                    "var multiPayDtFlds = prevPay.query('div[multipleBillFld=\"pay_date\"]') ;\r",
                    "\r",
                    "for( var i = 0 ; i< multiPayDtFlds.length ; i++ ){\r",
                    "\r",
                    "\r",
                    "\r",
                    "  if(status){\r",
                    "\r",
                    "        multiPayDtFlds[i].style.setProperty(\"background-color\", \"rgb(235, 235, 228)\", \"important\");\r",
                    "        multiPayDtFlds[i].style.setProperty(\"border\", \"\", \"important\");\r",
                    "    }else{\r",
                    "        multiPayDtFlds[i].style.setProperty(\"background-color\", \"white\", \"important\");\r",
                    "        multiPayDtFlds[i].style.setProperty(\"border\", \"1px solid #9b9b9b\", \"important\");\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "5ba47a30-d01e-4889-b43c-7e87239f0128"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSubscriptionMngProductSetup",
                "implHandler": [
                    ""
                ]
            },
            "designerId": "29e1ae0e-89d0-4abc-a9c5-83ab0c0944e7"
        }
    ]
}