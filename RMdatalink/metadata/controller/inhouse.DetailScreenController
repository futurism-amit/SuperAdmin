{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "inhouse.DetailScreenController",
        "isNewRecordBtnTapped": true,
        "isUpdatingInhouse": false,
        "permissionsForNewUser": [
            "[]"
        ],
        "selectedInhouseUser": [
            "{}"
        ],
        "userType": "usersTab"
    },
    "configAlternates": {
        "selectedInhouseUser": "object",
        "isNewRecordBtnTapped": "boolean",
        "permissionsForNewUser": "array",
        "isUpdatingInhouse": "boolean"
    },
    "designerId": "06ff6ea5-a39c-445d-81f8-3ec2b4e93bd5",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "selectedInhouseUser",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isNewRecordBtnTapped",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "userType",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "permissionsForNewUser",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isUpdatingInhouse",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDataForInHouseDetailedScreen",
                "implHandler": [
                    "   var userData = this.selectedInhouseUser.data ;\r",
                    "\r",
                    "var that =this ;\r",
                    "this.resetInhouseDetailedPage();\r",
                    "\r",
                    "setVlauesForRetailersDetailCard() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function setVlauesForRetailersDetailCard(){\r",
                    "\r",
                    "\r",
                    "\r",
                    "    fillUserData();\r",
                    "    fillUserRelationData( );\r",
                    "    fillTipsSideBar();\r",
                    "    fillInhouseNotes();\r",
                    "    fillBlueNote();\r",
                    "    fillCommissionStructure() ;\r",
                    "    fillCommissionData() ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "function fillCommissionData(){\r",
                    "\r",
                    "    var InhouseCommissionStore = Ext.getStore('InhouseCommissionStore') ;\r",
                    "    var commissionData = [] ;\r",
                    "\r",
                    "    if(userData.commission_data){\r",
                    "\r",
                    "        commissionData = userData.commission_data ;\r",
                    "    }\r",
                    "\r",
                    "    InhouseCommissionStore.setData(commissionData) ;\r",
                    "    InhouseCommissionStore.sync() ;\r",
                    "\r",
                    "    var totalCommission = 0 ;\r",
                    "\r",
                    "    for(var i =0 ; i < commissionData.length ; i++ ){\r",
                    "\r",
                    "        totalCommission += parseFloat(commissionData[i].commisson,0) ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    var html = \"Total : $ \" + totalCommission ;\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseTotalCommistionAmtLbl')[0].setHtml(html) ;\r",
                    "\r",
                    "    //inhouseTotalCommistionAmtLbl\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillCommissionStructure(){\r",
                    "\r",
                    "\r",
                    "    if(!userData.commission_structure){\r",
                    "\r",
                    "        userData.commission_structure = RMdatalink.util.ServerAPI.getDefaultCommissionStructure().commission_structure ;\r",
                    "    }\r",
                    "\r",
                    "    var monthlyStructureList = Ext.ComponentQuery.query('#inhouseDtlCommStruMontlyPanel')[0].down('#mainList');\r",
                    "    var yearlyStructureList = Ext.ComponentQuery.query('#inhouseDtlCommStruYearlyPanel')[0].down('#mainList');\r",
                    "\r",
                    "    RMdatalink.util.globalMethods.fillListDataByListObject(monthlyStructureList,userData.commission_structure.monthly);\r",
                    "    RMdatalink.util.globalMethods.fillListDataByListObject(yearlyStructureList,userData.commission_structure.yearly);\r",
                    "}\r",
                    "\r",
                    "function fillUserData(){\r",
                    "\r",
                    "\r",
                    "    var mangerForm = Ext.ComponentQuery.query('#inhouseUserProfileFormPanel')[0];\r",
                    "    mangerForm.setDisabled(true) ;\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideRelationDetailsForm')[0].setDisabled(true);\r",
                    "\r",
                    "    var profilePicView = Ext.ComponentQuery.query('#inhouseProfileAddPhotoImage')[0];\r",
                    "    profilePicView.setSrc(userData.image_url).setHidden(false) ;\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileAddPhoto')[0].setHidden(true);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileStoreName')[0].setValue(userData.username);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileFirstName')[0].setValue(userData.firstname);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileLastName')[0].setValue(userData.lastname);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileEmail')[0].setValue(userData.email);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfilePhone')[0].setValue(userData.phone);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileLinkedInField')[0].setValue(userData.linkedin);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileFacebookField')[0].setValue(userData.facebook);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileTwitterField')[0].setValue(userData.twitter);\r",
                    "\r",
                    "    RMdatalink.util.globalMethods.fillListData('#inhouseProfileActivityList',userData.recent_activity);\r",
                    "\r",
                    "\r",
                    "    var recentActivityListStore = Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore() ;\r",
                    "    if(recentActivityListStore)\r",
                    "    {\r",
                    "        recentActivityListStore.sort('activity_date',\"DESC\");\r",
                    "    }\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileMobile')[0].setValue(userData.cell_phone);\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfilePosition')[0].setValue(userData.position);\r",
                    "\r",
                    "\r",
                    "\r",
                    "      Ext.ComponentQuery.query('#inhouseProfilePersonalEmail')[0].setValue(userData.personal_email);\r",
                    "      Ext.ComponentQuery.query('#inhouseProfilePcNumberFld')[0].setValue(userData.pc_number);\r",
                    "      Ext.ComponentQuery.query('#inhouseProfilePhoneExt')[0].setValue(userData.phone_ext);\r",
                    "\r",
                    "      Ext.ComponentQuery.query('#InhouseUserAddress')[0].setValue(userData.address);\r",
                    "      Ext.ComponentQuery.query('#InhouseUserSuite')[0].setValue(userData.suite);\r",
                    "      Ext.ComponentQuery.query('#InhouseUserCity')[0].setValue(userData.city);\r",
                    "      Ext.ComponentQuery.query('#InhouseUserState')[0].setValue(userData.state);\r",
                    "      Ext.ComponentQuery.query('#InhouseUserZip')[0].setValue(userData.zip);\r",
                    "\r",
                    "\r",
                    "   if(userData.user_role ){\r",
                    "            Ext.ComponentQuery.query('#inhouseUserProfileDirectPermissionFld')[0].setValue(userData.user_role);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    if( userData.type == \"users\"){\r",
                    "        Ext.ComponentQuery.query('#inhouseProfilePosition')[0].setLabel(\"Position\");\r",
                    "        Ext.DomQuery.select('input[name=division-checkbox]')[0].checked =true ;\r",
                    "    }else{\r",
                    "        Ext.ComponentQuery.query('#inhouseProfilePosition')[0].setLabel(\"Territory\");\r",
                    "        Ext.DomQuery.select('input[name=division-checkbox]')[1].checked =true ;\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillListData(itemId,data){\r",
                    "    var list = Ext.ComponentQuery.query('#'+itemId)[0] ;\r",
                    "    var listStore = list.getStore();\r",
                    "    if(listStore){\r",
                    "        listStore.removeAll();\r",
                    "        listStore.sync();\r",
                    "    }\r",
                    "\r",
                    "    list.setData(data);\r",
                    "    list.refresh();\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "// inhouseProfileSideUserAniversaryMonth\r",
                    "// inhouseProfileSideUserAniversaryDay\r",
                    "// inhouseProfileSideUserDOBMonth\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillUserRelationData(){\r",
                    "\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideMRDYrsAtStore')[0].setValue(userData.years_at_store);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserWife')[0].setValue(userData.relationalDetails.wife);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserRelatives')[0].setValue(userData.relationalDetails.relatives);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserHobbies')[0].setValue(userData.relationalDetails.hobbies);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserCarOfChoice')[0].setValue(userData.relationalDetails.car_of_choice);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone')[0].setValue(userData.relationalDetails.alt_phone);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0].setValue(userData.relationalDetails.alt_email);\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0].setValue(userData.website);\r",
                    "\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Name')[0].setValue(userData.relationalDetails.childs[0].child_name);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Name')[0].setValue(userData.relationalDetails.childs[1].child_name);\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Age')[0].setValue(userData.relationalDetails.childs[0].child_age);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Age')[0].setValue(userData.relationalDetails.childs[1].child_age);\r",
                    "    if(userData.relationalDetails.childs[2]){\r",
                    "\r",
                    "        Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Name')[0].setValue(userData.relationalDetails.childs[2].child_name);\r",
                    "\r",
                    "        Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Age')[0].setValue(userData.relationalDetails.childs[2].child_age);\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserPartner1')[0].setValue(userData.relationalDetails.partners[0].partner_name);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserPartner2')[0].setValue(userData.relationalDetails.partners[1].partner_name);\r",
                    "\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserDOBMonth')[0].setValue(userData.relationalDetails.dob);\r",
                    "\r",
                    "\r",
                    "\r",
                    "    if(userData.emergency_contacts){\r",
                    "\r",
                    "             Ext.ComponentQuery.query('#inhouseEmergencyNameFld')[0].setValue(userData.emergency_contacts.name);\r",
                    "             Ext.ComponentQuery.query('#inhouseEmergencyPhoneFld')[0].setValue(userData.emergency_contacts.phone);\r",
                    "             Ext.ComponentQuery.query('#inhouseEmergencyEmailFld')[0].setValue(userData.emergency_contacts.email);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    if(userData.other_relational_data){\r",
                    "        that.addNewFldsForExistingData(userData.other_relational_data);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillTipsSideBar(){\r",
                    "\r",
                    "\r",
                    "  //  RMdatalink.util.globalMethods.fillListDataByListObject(dataLinkList,discountsData.datalink);\r",
                    " //dos_and_donts\r",
                    "    var dos_and_donts = Ext.getStore('inhouseDoDontsStore') ;\r",
                    "\r",
                    "\r",
                    "    if(userData.dos_and_donts && userData.dos_and_donts.length > 1)\r",
                    "    {\r",
                    "        dos_and_donts.setData(userData.dos_and_donts);\r",
                    "        dos_and_donts.sync() ;\r",
                    "    }\r",
                    "\r",
                    "    //follow_ups\r",
                    "\r",
                    "        var follow_ups = Ext.getStore('inhousefollowUpsStore') ;\r",
                    "\r",
                    "\r",
                    "    if(userData.follow_ups && userData.follow_ups.length > 1)\r",
                    "    {\r",
                    "        follow_ups.setData(userData.follow_ups);\r",
                    "        follow_ups.sync() ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillInhouseNotes(){\r",
                    "\r",
                    "  var inhouseNotesList = Ext.ComponentQuery.query('#inhouseNotesTab')[0].down('#mainList');\r",
                    "\r",
                    "\r",
                    "    RMdatalink.util.globalMethods.fillListDataByListObject(inhouseNotesList,userData.notes);\r",
                    "\r",
                    "  var inhouseProfileNotesPhotosView = Ext.ComponentQuery.query('#inhouseProfileNotesPhotosView')[0];\r",
                    "     RMdatalink.util.globalMethods.fillListDataByListObject(inhouseProfileNotesPhotosView,userData.photos);\r",
                    "\r",
                    "    var inhouseDetailsNotesAttachments  =  Ext.getStore('inhouseDetailsNotesAttachments');\r",
                    "    inhouseDetailsNotesAttachments.removeAll();\r",
                    "    inhouseDetailsNotesAttachments.sync();\r",
                    "\r",
                    "    inhouseDetailsNotesAttachments.setData(userData.attachments);\r",
                    "    inhouseDetailsNotesAttachments.sync();\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function fillBlueNote(){\r",
                    "\r",
                    "    if(userData.customers){\r",
                    "        var customersStore = Ext.getStore('inhouse.CustomersStore') ;\r",
                    "\r",
                    "        customersStore.setData(userData.customers);\r",
                    "        customersStore.sync() ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "   Ext.ComponentQuery.query('#inhouseProfileSideBlueStickyTextArea')[0].setValue(userData.blue_note);\r",
                    "   Ext.ComponentQuery.query('#inhouseProfileNotesBlueStickyTextArea')[0].setValue(userData.blue_note);\r",
                    "\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "f381e508-c5f5-4a27-85fc-6017c6f15622"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "list",
                    "record",
                    "eOpts"
                ],
                "fn": "onInhouseUsersListSelect",
                "implHandler": [
                    "console.log(record);\r",
                    "//list.deselect(record,false);\r",
                    "this.isNewRecordBtnTapped = false ;\r",
                    "this.selectedInhouseUser = record ;\r",
                    "\r",
                    "Ext.ComponentQuery.query('#inhouseMainContentPanel')[0].fireEvent('inhouseAddNewTap',  Ext.ComponentQuery.query('#inhouseMainContentPanel')[0]);\r",
                    "this.setDataForInHouseDetailedScreen();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(Ext.ComponentQuery.query('#inhouseTabPanel')[0].getActiveItem().getItemId() == 'inHouseUsersTab'){\r",
                    "    Ext.DomQuery.select('input[name=division-checkbox]')[0].checked = true ;\r",
                    "}\r",
                    "else{\r",
                    "    Ext.DomQuery.select('input[name=division-checkbox]')[0].checked =false;\r",
                    "}\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "6e496a96-a283-44f7-8761-b7e0f2b7f9b3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "sendPasswordToUser",
                "implHandler": [
                    "// console.log(record);\r",
                    "// //list.deselect(record,false);\r",
                    "// this.isNewRecordBtnTapped = false ;\r",
                    "// this.selectedInhouseUser = record ;\r",
                    "\r",
                    "// Ext.ComponentQuery.query('#inhouseMainContentPanel')[0].fireEvent('inhouseAddNewTap',  Ext.ComponentQuery.query('#inhouseMainContentPanel')[0]);\r",
                    "// this.setDataForInHouseDetailedScreen();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "// if(Ext.ComponentQuery.query('#inhouseTabPanel')[0].getActiveItem().getItemId() == 'inHouseUsersTab'){\r",
                    "//     Ext.DomQuery.select('input[name=division-checkbox]')[0].checked = true ;\r",
                    "// }\r",
                    "// else{\r",
                    "//     Ext.DomQuery.select('input[name=division-checkbox]')[0].checked =false;\r",
                    "// }\r",
                    "\r",
                    "\r",
                    "console.log('SEND PASSWORD');\r",
                    "\r",
                    "var that = this ;\r",
                    "var newPwd = \"\" ;\r",
                    "var username = \"\" ;\r",
                    "var emailText = this.selectedInhouseUser.data.email;\r",
                    "getInhouseUser( this.selectedInhouseUser.data.email ) ;\r",
                    "\r",
                    "function generatePassword(length)\r",
                    "{\r",
                    "\r",
                    "    if(!length){\r",
                    "        length = 6 ;\r",
                    "    }\r",
                    "    var str = \"\" ;\r",
                    "\r",
                    "    for(var i =0 ; i < length ; i++ ){\r",
                    "\r",
                    "        str +=  String.fromCharCode(getRandomInt(65,90)) ;\r",
                    "    }\r",
                    "\r",
                    "    return str ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function getRandomInt(min, max)\r",
                    "{\r",
                    "\r",
                    "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getInhouseUser(emailText)\r",
                    "{\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    function suc(){\r",
                    "\r",
                    "        if(arguments[0].items.length ==0 ){\r",
                    "            err() ;\r",
                    "        }else{\r",
                    "            username = arguments[0].items[0].username ;\r",
                    "            \r",
                    "          \r",
                    "            updatePassword(arguments[0].items[0]._id);\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    function err(){\r",
                    "         \r",
                    "         \r",
                    "\r",
                    "    }\r",
                    "    RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_inhouserecords\",pageNo:1,pageSize:50,sortBy:{},query:{\"email\":emailText},fields:{username:1}},suc,err);    \r",
                    "}\r",
                    "\r",
                    "function updatePassword(_id){\r",
                    "    var store = Ext.getStore('inhouseMasterStore') ;\r",
                    "    var newPwd = generatePassword() ;\r",
                    "      \r",
                    "    var dataToUpdate = {\r",
                    "\r",
                    "        temp_password : newPwd,\r",
                    "        is_password_reset : true\r",
                    "    };\r",
                    "     RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id , suc, err);\r",
                    "\r",
                    "    function suc(){\r",
                    "        sendEmail() ;\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    function err(){\r",
                    "\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "function sendEmail(){\r",
                    "    var LoginHandler = RMdatalink.app.getController('LoginHandler');\r",
                    "        LoginHandler.sendEmail(newPwd,emailText,username) ;\r",
                    "\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "3d282dcb-a5d5-4903-8174-aedc6aef8dc6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetInhouseDetailedPage",
                "implHandler": [
                    "this.removeErrorCls();\r",
                    "this.removeNewlyAddedRelFlds() ;\r",
                    "\r",
                    "resetVlauesForRetailersDetailCard();\r",
                    "\r",
                    "\r",
                    "function resetVlauesForRetailersDetailCard(){\r",
                    "    unfillUserData();\r",
                    "    unfillUserRelationData();\r",
                    "    unfillTipsSideBar();\r",
                    "    unfillInhouseNotes();\r",
                    "    umfillBlueNote();\r",
                    "    unFillCommissionData() ;\r",
                    "}\r",
                    "\r",
                    "function unFillCommissionData(){\r",
                    "    \r",
                    "    var InhouseCommissionStore = Ext.getStore('InhouseCommissionStore') ;\r",
                    "    InhouseCommissionStore.removeAll();\r",
                    "    InhouseCommissionStore.sync() ;\r",
                    "}\r",
                    " \r",
                    "\r",
                    "function unfillUserData(){\r",
                    "\r",
                    "    var mangerForm = Ext.ComponentQuery.query('#inhouseUserProfileFormPanel ')[0];\r",
                    "    mangerForm.setDisabled(false) ;\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideRelationDetailsForm')[0].setDisabled(false);\r",
                    "\r",
                    "    var profilePicView = Ext.ComponentQuery.query('#inhouseProfileAddPhotoImage')[0];\r",
                    "    profilePicView.setSrc('').setHidden(true) ;\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileAddPhoto')[0].setHidden(false);\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileStoreName')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileFirstName')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileLastName')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileEmail')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfilePhone')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileMobile')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfilePosition')[0].setValue('');\r",
                    "\r",
                    "\r",
                    "      Ext.ComponentQuery.query('#inhouseProfilePersonalEmail')[0].setValue('');\r",
                    "      Ext.ComponentQuery.query('#inhouseProfilePcNumberFld')[0].setValue('');\r",
                    "      Ext.ComponentQuery.query('#inhouseProfilePhoneExt')[0].setValue('');\r",
                    "\r",
                    "      Ext.ComponentQuery.query('#InhouseUserAddress')[0].setValue('');\r",
                    "      Ext.ComponentQuery.query('#InhouseUserSuite')[0].setValue('');\r",
                    "      Ext.ComponentQuery.query('#InhouseUserCity')[0].setValue('');\r",
                    "      Ext.ComponentQuery.query('#InhouseUserState')[0].setValue('');\r",
                    "      Ext.ComponentQuery.query('#InhouseUserZip')[0].setValue('');\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    if(Ext.ComponentQuery.query('#selectUserRoleSelectFld')[0]){\r",
                    "            Ext.ComponentQuery.query('#selectUserRoleSelectFld')[0].setValue(null);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "    if(Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore()){\r",
                    "\r",
                    "        Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore().removeAll() ;\r",
                    "        Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore().sync() ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function unfillUserRelationData(){\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideMRDYrsAtStore')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserWife')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserRelatives ')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserHobbies')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserCarOfChoice')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone ')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Name')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Name')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Age')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Age')[0].setValue('');\r",
                    "\r",
                    "      Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Name')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Age')[0].setValue('');\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserPartner1')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserPartner2')[0].setValue('');\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideUserDOBMonth')[0].setValue('');\r",
                    "\r",
                    "\r",
                    "     Ext.ComponentQuery.query('#inhouseEmergencyNameFld')[0].setValue('');\r",
                    "     Ext.ComponentQuery.query('#inhouseEmergencyPhoneFld')[0].setValue('');\r",
                    "     Ext.ComponentQuery.query('#inhouseEmergencyEmailFld')[0].setValue('');\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function unfillTipsSideBar(){\r",
                    "\r",
                    "    var dos_and_donts = Ext.getStore('inhouseDoDontsStore') ;\r",
                    "\r",
                    "    dos_and_donts.removeAll();\r",
                    "    dos_and_donts.sync();\r",
                    "\r",
                    "    dos_and_donts.setData([\r",
                    "        {\"notification\":\"\"},\r",
                    "        {\"notification\":\"\"},\r",
                    "        {\"notification\":\"\"},\r",
                    "        {\"notification\":\"\"}\r",
                    "    ]);\r",
                    "    dos_and_donts.sync();\r",
                    "\r",
                    "    //follow_ups\r",
                    "\r",
                    "    var follow_ups = Ext.getStore('inhousefollowUpsStore') ;\r",
                    "\r",
                    "    follow_ups.removeAll();\r",
                    "    follow_ups.sync();\r",
                    "\r",
                    "    follow_ups.setData([\r",
                    "        {\"notification\":\"\"},\r",
                    "        {\"notification\":\"\"},\r",
                    "        {\"notification\":\"\"},\r",
                    "        {\"notification\":\"\"}\r",
                    "    ]);\r",
                    "    follow_ups.sync();\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function unfillInhouseNotes(){\r",
                    "\r",
                    "    var inhouseNotesList = Ext.ComponentQuery.query('#inhouseNotesTab')[0].down('#mainList');\r",
                    "\r",
                    "    RMdatalink.util.globalMethods.fillListDataByListObject(inhouseNotesList,[]);\r",
                    "\r",
                    "    var inhouseProfileNotesPhotosView = Ext.ComponentQuery.query('#inhouseProfileNotesPhotosView')[0];\r",
                    "    RMdatalink.util.globalMethods.fillListDataByListObject(inhouseProfileNotesPhotosView,[]);\r",
                    "\r",
                    "    var inhouseDetailsNotesAttachments  =  Ext.getStore('inhouseDetailsNotesAttachments');\r",
                    "    inhouseDetailsNotesAttachments.removeAll();\r",
                    "    inhouseDetailsNotesAttachments.sync();\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function umfillBlueNote(){\r",
                    "\r",
                    "    Ext.getStore('inhouse.CustomersStore').removeAll();\r",
                    "    Ext.getStore('inhouse.CustomersStore').sync();\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileSideBlueStickyTextArea')[0].setValue('');\r",
                    "    Ext.ComponentQuery.query('#inhouseProfileNotesBlueStickyTextArea')[0].setValue('');\r",
                    "\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "ec22cda5-61bf-4cb9-a1ad-1261d94480b0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "data"
                ],
                "fn": "exportToCSV",
                "implHandler": [
                    "function JSON2CSV(objArray) {\r",
                    "    var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\r",
                    "\r",
                    "    var str = '';\r",
                    "    var line = '';\r",
                    "\r",
                    "\r",
                    "        var head = array[0];\r",
                    "\r",
                    "            for (var index in array[0]) {\r",
                    "                var value = index + \"\";\r",
                    "                line += '\"' + value.replace(/\"/g, '\"\"') + '\",';\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "\r",
                    "        line = line.slice(0, -1);\r",
                    "        str += line + '\\r\\n';\r",
                    "\r",
                    "\r",
                    "    for (var i = 0; i < array.length; i++) {\r",
                    "        var line = '';\r",
                    "\r",
                    "\r",
                    "            for (var index in array[i]) {\r",
                    "                if(Array.isArray(array[i][index])){\r",
                    "                   line += '\"' + JSON2CSV(array[i][index]).replace(/\"/g, '\"\"')  + '\",';\r",
                    "                }\r",
                    "                else{\r",
                    "                    var value = array[i][index] + \"\";\r",
                    "                    line += '\"' + value.replace(/\"/g, '\"\"') + '\",';\r",
                    "                }\r",
                    "            }\r",
                    "\r",
                    "        line = line.slice(0, -1);\r",
                    "        str += line + '\\r\\n';\r",
                    "    }\r",
                    "    return str;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "    var json = data;\r",
                    "    var csv = JSON2CSV(json);\r",
                    "    window.open(\"data:text/csv;charset=utf-8,\" + escape(csv));\r",
                    ""
                ]
            },
            "designerId": "db7c790f-4315-4d77-860c-55b1466ff32f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "store"
                ],
                "fn": "getArrayDataFromStore",
                "implHandler": [
                    "var data = new Array();\r",
                    "data = store.getData().items;\r",
                    "\r",
                    "var dataToReturn = new Array();\r",
                    "\r",
                    "for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "    dataToReturn.push(data[i].data);\r",
                    "}\r",
                    "\r",
                    "return dataToReturn ;"
                ]
            },
            "designerId": "03e81af7-2cc0-4e3b-a4b2-e6918b893895"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field"
                ],
                "fn": "saveDoDonts",
                "implHandler": [
                    "\r",
                    "        var id = field.getAttribute('data-id') ;\r",
                    "        var notification = field.value ;\r",
                    "\r",
                    "        var store = Ext.getStore('inhouseDoDontsStore');\r",
                    "        var record = store.findRecord('id',id);\r",
                    "        record.set('notification',notification);\r",
                    "        store.sync();\r",
                    ""
                ]
            },
            "designerId": "de56063e-a5ea-4658-bad4-c70c3c6faea9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field"
                ],
                "fn": "saveFollowUps",
                "implHandler": [
                    "\r",
                    "        var id = field.getAttribute('data-id') ;\r",
                    "        var notification = field.value ;\r",
                    "\r",
                    "        var store = Ext.getStore('inhousefollowUpsStore');\r",
                    "        var record = store.findRecord('id',id);\r",
                    "        record.set('notification',notification);\r",
                    "        store.sync();\r",
                    ""
                ]
            },
            "designerId": "358c3079-f234-4e87-ae11-a439dafb0d02"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveUpdateInhouseStore",
                "implHandler": [
                    "// ***  FIRST  CHECK MANDATORY FIELDS  *******\r",
                    "if(!this.validationForNewRecord())\r",
                    "{\r",
                    "    Ext.Msg.alert('Error', 'Marked Fields Are Mandatory.', Ext.emptyFn);\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "else if(!this.validationOfInputFields())\r",
                    "{\r",
                    "    Ext.Msg.alert('Error', 'Invalid Inputs For Marked Fields.', Ext.emptyFn);\r",
                    "    return;\r",
                    "\r",
                    "}\r",
                    "// AFTER CHAECKED ALL VALIDATION\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(! this.isNewRecordBtnTapped ){\r",
                    "   var userData = this.selectedInhouseUser.data ;\r",
                    "\r",
                    "}   else{\r",
                    "\r",
                    "    var userData ={\r",
                    "\r",
                    "        'access': \"\",\r",
                    "        'attachments': new Array(),\r",
                    "        'blue_note': '',\r",
                    "        'city': \"\",\r",
                    "        'comments': \"Comment Here.\",\r",
                    "        \"permissions\":new Array(),\r",
                    "        'dos_and_donts': new Array(),\r",
                    "        'email': \"\",\r",
                    "        'facebook': \"\",\r",
                    "        'firstname': \"\",\r",
                    "        'follow_ups':new Array(),\r",
                    "        'id': '',\r",
                    "        'image_url': \"resources/images/logos/1.jpg\",\r",
                    "        'lastname': \"\",\r",
                    "        'linkedin': \"\",\r",
                    "        'notes': new Array(),\r",
                    "        'phone': \"\",\r",
                    "        'photos':new Array(),\r",
                    "        'position': \"\",\r",
                    "        'recent_activity': new Array(),\r",
                    "        'relationalDetails': new Object(),\r",
                    "        'twitter': \"\",\r",
                    "        'username': \"\",\r",
                    "        'website': \"\",\r",
                    "        'years_at_store': \"\",\r",
                    "        'zip': \"\"\r",
                    "    };\r",
                    "\r",
                    "    userData.permissions = new Array() ;\r",
                    "     //  userData.permissions = this.getPermissionsForNewUser() ;\r",
                    "    this.setPermissionsForNewUser(new Array()) ;\r",
                    "}\r",
                    "\r",
                    "          userData.emergency_contacts = new Object() ;\r",
                    "          userData.emergency_contacts.name =   Ext.ComponentQuery.query('#inhouseEmergencyNameFld')[0].getValue();\r",
                    "          userData.emergency_contacts.phone =   Ext.ComponentQuery.query('#inhouseEmergencyPhoneFld')[0].getValue();\r",
                    "          userData.emergency_contacts.email =   Ext.ComponentQuery.query('#inhouseEmergencyEmailFld')[0].getValue();\r",
                    "\r",
                    "\r",
                    "userData.other_relational_data = this.getOtherInhoseUserDetails() ;\r",
                    "\r",
                    "var profilePicView = Ext.ComponentQuery.query('#inhouseProfileAddPhotoImage')[0];\r",
                    "userData.image_url = profilePicView.getSrc();\r",
                    "\r",
                    "         var customersStore = Ext.getStore('inhouse.CustomersStore') ;\r",
                    "\r",
                    "            userData.customers = this.getArrayDataFromStore(customersStore) ;\r",
                    "\r",
                    "\r",
                    "userData.username =  Ext.ComponentQuery.query('#inhouseProfileStoreName')[0].getValue();\r",
                    "userData.firstname = Ext.ComponentQuery.query('#inhouseProfileFirstName')[0].getValue();\r",
                    "userData.lastname = Ext.ComponentQuery.query('#inhouseProfileLastName')[0].getValue();\r",
                    "userData.email = Ext.ComponentQuery.query('#inhouseProfileEmail')[0].getValue();\r",
                    "userData.phone =  Ext.ComponentQuery.query('#inhouseProfilePhone')[0].getValue();\r",
                    "    userData.linkedin = Ext.ComponentQuery.query('#inhouseProfileLinkedInField')[0].getValue();\r",
                    "    userData.facebook = Ext.ComponentQuery.query('#inhouseProfileFacebookField')[0].getValue();\r",
                    "    userData.twitter = Ext.ComponentQuery.query('#inhouseProfileTwitterField')[0].getValue();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var permissionsStore =  Ext.getStore('PermisstionsStore') ;\r",
                    "\r",
                    "var newUserRole  = Ext.ComponentQuery.query('#inhouseUserProfileDirectPermissionFld')[0].getValue() ;\r",
                    "\r",
                    "\r",
                    "            var recIndex = permissionsStore.findExact(\"user_role\",newUserRole);\r",
                    "\r",
                    "            var permissionRecord = permissionsStore.getAt(recIndex);\r",
                    "\r",
                    "  userData.permissions = permissionRecord.data.permissions ;\r",
                    "   userData.user_role =newUserRole ;\r",
                    "\r",
                    "\r",
                    "///////////////////////////////////////////////\r",
                    "\r",
                    "\r",
                    "      userData.personal_email =Ext.ComponentQuery.query('#inhouseProfilePersonalEmail')[0].getValue();\r",
                    "     userData.pc_number= Ext.ComponentQuery.query('#inhouseProfilePcNumberFld')[0].getValue();\r",
                    "     userData.phone_ext= Ext.ComponentQuery.query('#inhouseProfilePhoneExt')[0].getValue();\r",
                    "\r",
                    "      userData.address =Ext.ComponentQuery.query('#InhouseUserAddress')[0].getValue();\r",
                    "     userData.suite= Ext.ComponentQuery.query('#InhouseUserSuite')[0].getValue();\r",
                    "     userData.city= Ext.ComponentQuery.query('#InhouseUserCity')[0].getValue();\r",
                    "    userData.state=  Ext.ComponentQuery.query('#InhouseUserState')[0].getValue();\r",
                    "     userData.zip= Ext.ComponentQuery.query('#InhouseUserZip')[0].getValue();\r",
                    "\r",
                    "//////////////////////////////////////\r",
                    "\r",
                    "\r",
                    "console.log(RMdatalink.app.getController('discount.DiscountTabHandler').getDivisionSelection() + \"  this.getUserType() \",this.getUserType());\r",
                    "\r",
                    "userData.cell_phone =  Ext.ComponentQuery.query('#inhouseProfileMobile')[0].getValue();\r",
                    "\r",
                    "userData.position =Ext.ComponentQuery.query('#inhouseProfilePosition')[0].getValue();\r",
                    "\r",
                    "userData.recent_activity = Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore() ? this.getArrayDataFromStore(Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore()): new Array() ;\r",
                    "\r",
                    "\r",
                    "userData.years_at_store = Ext.ComponentQuery.query('#inhouseProfileSideMRDYrsAtStore')[0].getValue();\r",
                    "userData.relationalDetails.wife =   Ext.ComponentQuery.query('#inhouseProfileSideUserWife')[0].getValue();\r",
                    "userData.relationalDetails.relatives = Ext.ComponentQuery.query('#inhouseProfileSideUserRelatives ')[0].getValue();\r",
                    "userData.relationalDetails.hobbies = Ext.ComponentQuery.query('#inhouseProfileSideUserHobbies')[0].getValue();\r",
                    "userData.relationalDetails.car_of_choice = Ext.ComponentQuery.query('#inhouseProfileSideUserCarOfChoice')[0].getValue();\r",
                    "userData.relationalDetails.alt_phone= Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone ')[0].getValue();\r",
                    "userData.relationalDetails.alt_email= Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0].getValue();\r",
                    "\r",
                    "userData.relationalDetails.dob= Ext.ComponentQuery.query('#inhouseProfileSideUserDOBMonth')[0].getValue();\r",
                    "\r",
                    "\r",
                    "\r",
                    "userData.website = Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0].getValue();\r",
                    "\r",
                    "\r",
                    "userData.relationalDetails.childs = new Array() ;\r",
                    "userData.relationalDetails.childs.push(\r",
                    "    {\r",
                    "        'child_name' : Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Name')[0].getValue(),\r",
                    "        'child_age' :Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Age')[0].getValue()\r",
                    "    }\r",
                    ");\r",
                    "userData.relationalDetails.childs.push(\r",
                    "    {\r",
                    "        'child_name' : Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Name')[0].getValue(),\r",
                    "        'child_age' :Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Age')[0].getValue()\r",
                    "    }\r",
                    ");\r",
                    "\r",
                    "\r",
                    "userData.relationalDetails.childs.push(\r",
                    "    {\r",
                    "        'child_name' : Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Name')[0].getValue(),\r",
                    "        'child_age' :Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Age')[0].getValue()\r",
                    "    }\r",
                    ");\r",
                    "\r",
                    "userData.relationalDetails.partners = new Array();\r",
                    "userData.relationalDetails.partners.push({\r",
                    "\r",
                    "    'partner_name':Ext.ComponentQuery.query('#inhouseProfileSideUserPartner1')[0].getValue()\r",
                    "});\r",
                    "userData.relationalDetails.partners.push({\r",
                    "\r",
                    "    'partner_name':Ext.ComponentQuery.query('#inhouseProfileSideUserPartner2')[0].getValue()\r",
                    "});\r",
                    "\r",
                    "userData.blue_note = Ext.ComponentQuery.query('#inhouseProfileSideBlueStickyTextArea')[0].getValue();\r",
                    "\r",
                    "var dos_and_donts = Ext.getStore('inhouseDoDontsStore') ;\r",
                    "userData.dos_and_donts = this.getArrayDataFromStore(dos_and_donts) ;\r",
                    "\r",
                    "\r",
                    "//follow_ups\r",
                    "\r",
                    "var follow_ups = Ext.getStore('inhousefollowUpsStore') ;\r",
                    "\r",
                    "userData.follow_ups = this.getArrayDataFromStore(follow_ups) ;\r",
                    "\r",
                    "var inhouseNotesList = Ext.ComponentQuery.query('#inhouseNotesTab')[0].down('#mainList');\r",
                    "\r",
                    "userData.notes = inhouseNotesList.getStore() ? this.getArrayDataFromStore(inhouseNotesList.getStore()):new Array() ;\r",
                    "\r",
                    "\r",
                    "var inhouseProfileNotesPhotosView = Ext.ComponentQuery.query('#inhouseProfileNotesPhotosView')[0];\r",
                    "\r",
                    "userData.photos = inhouseProfileNotesPhotosView.getStore() ? this.getArrayDataFromStore(inhouseProfileNotesPhotosView.getStore()) : new Array();\r",
                    "\r",
                    "var inhouseDetailsNotesAttachments  =  Ext.getStore('inhouseDetailsNotesAttachments');\r",
                    "\r",
                    "userData.attachments =this.getArrayDataFromStore(inhouseDetailsNotesAttachments) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var userType  =  RMdatalink.app.getController('discount.DiscountTabHandler').getDivisionSelection();\r",
                    "\r",
                    " var inhouseMasterStore = Ext.getStore('inhouseMasterStore');\r",
                    "\r",
                    "if(this.isNewRecordBtnTapped ){\r",
                    "    userData.id = inhouseMasterStore.getAllCount()+1 ;\r",
                    "}\r",
                    "\r",
                    "// inhouseMasterStore.load();\r",
                    "if(Ext.DomQuery.select('input[name=division-checkbox]')[0].checked ){\r",
                    "    userType = 'users' ;\r",
                    "    var listToRefresh = Ext.ComponentQuery.query('#inHouseUsersTab')[0].down('#inhouseList') ;\r",
                    "    var storeForList = Ext.ComponentQuery.query('#inHouseUsersTab')[0].down('#inhouseList').getStore();\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    userType = 'reps' ;\r",
                    "    var listToRefresh = Ext.ComponentQuery.query('#inHouseRepsTab')[0].down('#inhouseList') ;\r",
                    "    var storeForList = Ext.ComponentQuery.query('#inHouseRepsTab')[0].down('#inhouseList').getStore();\r",
                    "\r",
                    "}\r",
                    "\r",
                    " userData.type = userType ;\r",
                    "\r",
                    "var msg =\"\";\r",
                    "\r",
                    "if(! this.isNewRecordBtnTapped ){\r",
                    "\r",
                    "\r",
                    "    this.selectedInhouseUser.setData( userData ) ;\r",
                    "   var recordToUpdate = inhouseMasterStore.find(\"id\",userData.id) ;\r",
                    "    if(recordToUpdate != -1){\r",
                    "\r",
                    "        this.config.isUpdatingInhouse = true ;\r",
                    "    var inhouseRec =  inhouseMasterStore.getAt(recordToUpdate)  ;\r",
                    "       inhouseRec.set(userData);\r",
                    "        inhouseRec.dirty= true;\r",
                    "\r",
                    "        inhouseMasterStore.sync();\r",
                    "    }\r",
                    "\r",
                    "    /*\r",
                    "    var inhouseRecord = inhouseMasterStore.findRecord(userType,{});\r",
                    "    var records = new Array() ;\r",
                    "    for(var i=0; i < storeForList.getData().all.length; i++){\r",
                    "        records.push(storeForList.getData().all[i].data);\r",
                    "    }\r",
                    "    inhouseRecord.set(userType,records);\r",
                    "    */\r",
                    "    msg = \"Record Updated Successfully\";\r",
                    "    listToRefresh.refresh();\r",
                    "\r",
                    "    RMdatalink.app.getController('UINav').onBackTextTap() ;\r",
                    "\r",
                    "    Ext.Msg.alert('Success.', msg, Ext.emptyFn);\r",
                    "\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    RMdatalink.util.DataLoader.sendNewRecordForInHouseToServer(userData, inhouseMasterStore, successCall, errorCall) ;\r",
                    "\r",
                    "          Ext.ComponentQuery.query('#inhouseDetailPageScreenPanel')[0].setMasked( {\r",
                    "                xtype: 'loadmask'\r",
                    "            });\r",
                    "//successCall() ;\r",
                    "     function errorCall(){\r",
                    "\r",
                    "\r",
                    "         console.error(\"Error\") ;\r",
                    "          console.error(arguments) ;\r",
                    "     }\r",
                    "\r",
                    "    function successCall(){\r",
                    "       console.error(\"Success\") ;\r",
                    "        console.error(arguments) ;\r",
                    "              Ext.ComponentQuery.query('#inhouseDetailPageScreenPanel')[0].setMasked( false );\r",
                    "\r",
                    "\r",
                    "       /* //For Static JSON\r",
                    "        if(storeForList){\r",
                    "            storeForList.add(userData) ;\r",
                    "            storeForList.sync();\r",
                    "        }\r",
                    "        else{\r",
                    "            Ext.ComponentQuery.query('#inHouseRepsTab')[0].down('#inhouseList').setData([userData]) ;\r",
                    "            storeForList = Ext.ComponentQuery.query('#inHouseRepsTab')[0].down('#inhouseList').getStore();\r",
                    "        }\r",
                    "\r",
                    "        inhouseMasterStore.add(userData);\r",
                    "        inhouseMasterStore.sync();\r",
                    "\r",
                    "\r",
                    "        listToRefresh.refresh();\r",
                    "        */\r",
                    "         msg = \"Record Added Successfully. Please Wait to update the List\";\r",
                    "        RMdatalink.app.getController('UINav').onBackTextTap() ;\r",
                    "\r",
                    "     //   Ext.Msg.alert('Success.', msg, Ext.emptyFn);\r",
                    "\r",
                    "         RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('inhouseMasterStore') ;\r",
                    "         RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),RMdatalink.util.DataLoader.getEnableCachig());\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "1ce9502d-e3b5-454a-be3b-3dd73f92784d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "titlebar[itemId=inhouseUserPermissionsTtlBar]",
                "designer|targetType": "Ext.TitleBar",
                "fn": "onTitlebarPermissionsByAdminInitialize",
                "implHandler": [
                    "var that = this;\r",
                    "\r",
                    "component.element.on(\"tap\",function(){\r",
                    "\r",
                    "    RMdatalink.app.getController('PermissionsConroller').showPermissions() ;\r",
                    "\r",
                    "\r",
                    "});\r",
                    ""
                ],
                "name": "initialize"
            },
            "designerId": "adc00d04-90c5-4d8b-a717-9fb5059d1f07"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=permissionSelectorCancelBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onPermissionCancelButtonTap",
                "implHandler": [
                    " permissionsPanel = Ext.ComponentQuery.query('#PermissionsSelectorPage')[0] ;\r",
                    "    permissionsPanel.hide();"
                ],
                "name": "tap"
            },
            "designerId": "33f2b1ee-9086-4d66-b733-3326302f6d86"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=permissionSelectorSaveBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onPermissionsSaveBtnTap",
                "implHandler": [
                    "var permissions = [\r",
                    "    {\r",
                    "\r",
                    "        \"name\":\"Dashboard\",\r",
                    "        \"type\":\"Dashboard\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "   {\r",
                    "\r",
                    "        name:\"Retailers\",\r",
                    "        type:\"Retailers\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "\r",
                    "\r",
                    "   {\r",
                    "\r",
                    "        name:\"Billing\",\r",
                    "        type:\"Billing\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "\r",
                    "\r",
                    "\r",
                    "   {\r",
                    "\r",
                    "        name:\"Vendors\",\r",
                    "        type:\"Vendors\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "\r",
                    "   {\r",
                    "\r",
                    "        name:\"In house\",\r",
                    "        type:\"Inhouse\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "              {\r",
                    "\r",
                    "        \"name\":\"Notification\",\r",
                    "        \"type\":\"Notification\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "\r",
                    "      {\r",
                    "\r",
                    "        \"name\":\"Notepad\",\r",
                    "        \"type\":\"Notepad\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "        {\r",
                    "\r",
                    "        \"name\":\"Products\",\r",
                    "        \"type\":\"Products\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "\r",
                    "\r",
                    "       {\r",
                    "\r",
                    "        name:\"Products-Datalink\",\r",
                    "        type:\"Products_Datalink\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Products-Ecatalog\",\r",
                    "        type:\"Products_Ecatalog\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Products-SMART CART\",\r",
                    "        type:\"Products_SMART_CART\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Products-RM PLC\",\r",
                    "        type:\"Products_RM_PLC\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Products-IRUGZ\",\r",
                    "        type:\"Products_IRUGZ\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "\r",
                    "\r",
                    "    {\r",
                    "\r",
                    "        \"name\":\"Pricing\",\r",
                    "        \"type\":\"Pricing\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "\r",
                    "\r",
                    "       {\r",
                    "\r",
                    "        name:\"Pricing-Datalink\",\r",
                    "        type:\"Pricing_Datalink\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Pricing-Ecatalog\",\r",
                    "        type:\"Pricing_Ecatalog\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Pricing-SMART CART\",\r",
                    "        type:\"Pricing_SMART_CART\",\r",
                    "       value:\"-1\"\r",
                    "\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Pricing-RM PLC\",\r",
                    "        type:\"Pricing_RM_PLC\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Pricing-IRUGZ\",\r",
                    "        type:\"Pricing_IRUGZ\",\r",
                    "       value:\"-1\"\r",
                    "    },\r",
                    "\r",
                    "\r",
                    "\r",
                    "    {\r",
                    "\r",
                    "        \"name\":\"Discounts\",\r",
                    "        \"type\":\"Discounts\",\r",
                    "         value:\"-1\"\r",
                    "    },\r",
                    "\r",
                    "\r",
                    "       {\r",
                    "\r",
                    "        name:\"Discounts-Datalink\",\r",
                    "        type:\"Discounts_Datalink\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Discounts-Ecatalog\",\r",
                    "        type:\"Discounts_Ecatalog\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Discounts-SMART CART\",\r",
                    "        type:\"Discounts_SMART_CART\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Discounts-RM PLC\",\r",
                    "        type:\"Discounts_RM_PLC\",\r",
                    "        value:\"-1\"\r",
                    "    },\r",
                    "{\r",
                    "\r",
                    "        name:\"Discounts-IRUGZ\",\r",
                    "        type:\"Discounts_IRUGZ\",\r",
                    "        value:\"-1\"\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "];\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "         var permissionsPanel = Ext.ComponentQuery.query('#PermissionsSelectorPage')[0] ;\r",
                    "\r",
                    "          var slectFields = permissionsPanel.query('[xtype=selectfield]');\r",
                    "\r",
                    "               for(var i =0 ; i< permissions.length ; i++){\r",
                    "\r",
                    "                     val = permissionsPanel.down(\"#permistions\"+permissions[i].type).getValue();\r",
                    "                   if(val != null){\r",
                    "                       permissions[i].value = val ;\r",
                    "                   }\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "var userRole = Ext.ComponentQuery.query('#selectUserRoleSelectFld')[0].getValue() ;\r",
                    "\r",
                    "RMdatalink.app.getController('PermissionsConroller').updateUserRole(userRole,permissions);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "         if(!  this.isNewRecordBtnTapped){\r",
                    "                this.selectedInhouseUser.data.permissions  = permissions ;\r",
                    "         }else{\r",
                    "\r",
                    "             this.setPermissionsForNewUser(permissions) ;\r",
                    "         }\r",
                    "\r",
                    "    permissionsPanel.hide();\r",
                    "*/"
                ],
                "name": "tap"
            },
            "designerId": "34e26957-5806-4df4-b384-891da5bb1714"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "validationForNewRecord",
                "implHandler": [
                    "this.removeErrorCls();\r",
                    "var inhouseDetailsMainTabPanel = Ext.ComponentQuery.query('#inhouseDetailsMainTabPanel')[0];\r",
                    "var validationForProfile = true;\r",
                    "\r",
                    "\r",
                    "var inhouseProfileFirstName = Ext.ComponentQuery.query('#inhouseProfileFirstName')[0];\r",
                    "var inhouseProfileLastName = Ext.ComponentQuery.query('#inhouseProfileLastName')[0];\r",
                    "var inhouseProfilePosition = Ext.ComponentQuery.query('#inhouseProfilePosition')[0];\r",
                    "\r",
                    "var inhouseUsernameFld =  Ext.ComponentQuery.query('#inhouseProfileStoreName')[0];\r",
                    "var inhouseUsername = inhouseUsernameFld.getValue() ;\r",
                    "\r",
                    "var inhouseProfileFirstNameText = inhouseProfileFirstName.getValue();\r",
                    "var inhouseProfileLastNameText = inhouseProfileLastName.getValue();\r",
                    "var inhouseProfilePositionText = inhouseProfilePosition.getValue();\r",
                    "\r",
                    "\r",
                    "var inhouseEmailFld =  Ext.ComponentQuery.query('#inhouseProfileEmail')[0];\r",
                    "var inhouseEmail = inhouseUsernameFld.getValue() ;\r",
                    "\r",
                    "if(inhouseEmail.length === 0)\r",
                    "{\r",
                    "    inhouseEmailFld.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(inhouseUsername.length === 0)\r",
                    "{\r",
                    "    inhouseUsernameFld.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(inhouseProfileFirstNameText.length === 0)\r",
                    "{\r",
                    "    inhouseProfileFirstName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "}\r",
                    "if(inhouseProfileLastNameText.length === 0)\r",
                    "{\r",
                    "    inhouseProfileLastName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "}\r",
                    "if(inhouseProfilePositionText.length === 0)\r",
                    "{\r",
                    "    inhouseProfilePosition.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(!validationForProfile)\r",
                    "{\r",
                    "    inhouseDetailsMainTabPanel.setActiveItem(0);\r",
                    "    return false;\r",
                    "}\r",
                    "\r",
                    "return true;\r",
                    ""
                ]
            },
            "designerId": "f8339fb3-3f7a-45ae-bc44-f9c6ae8f34f7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "validationOfInputFields",
                "implHandler": [
                    "this.removeErrorCls();\r",
                    "\r",
                    "var phoneRegex = /^\\(?\\d{3}\\)?-? *\\d{3}-? *-?\\d{4}$/;\r",
                    "\r",
                    "var inhouseDetailsMainTabPanel = Ext.ComponentQuery.query('#inhouseDetailsMainTabPanel')[0];\r",
                    "var validationForProfile = true;\r",
                    "var validationForProfileDetails = true;\r",
                    "\r",
                    "var inhouseProfileEmail = Ext.ComponentQuery.query('#inhouseProfileEmail')[0];\r",
                    "var inhouseProfilePhone = Ext.ComponentQuery.query('#inhouseProfilePhone')[0];\r",
                    "var inhouseProfileMobile = Ext.ComponentQuery.query('#inhouseProfileMobile')[0];\r",
                    "\r",
                    "var inhouseProfileSideUserAltPhone = Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone')[0];\r",
                    "var inhouseProfileSideUserAltEmail = Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0];\r",
                    "var inhouseProfileSideUserWebsite = Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0];\r",
                    "\r",
                    "\r",
                    "var inhouseProfileEmailText = inhouseProfileEmail.getValue();\r",
                    "var inhouseProfilePhoneText = inhouseProfilePhone.getValue();\r",
                    "var inhouseProfileMobileText = inhouseProfileMobile.getValue();\r",
                    "\r",
                    "var inhouseProfileSideUserAltPhoneText = inhouseProfileSideUserAltPhone.getValue();\r",
                    "var inhouseProfileSideUserAltEmailText = inhouseProfileSideUserAltEmail.getValue();\r",
                    "var inhouseProfileSideUserWebsiteText = inhouseProfileSideUserWebsite.getValue();\r",
                    "\r",
                    "if(inhouseProfileSideUserWebsiteText.substr(0,3) === 'www')\r",
                    "{\r",
                    "    inhouseProfileSideUserWebsiteText   = inhouseProfileSideUserWebsiteText.replace('www.' ,'https://');\r",
                    "}\r",
                    "\r",
                    "\r",
                    "inhouseProfilePhoneText = inhouseProfilePhoneText.trim() ;\r",
                    "inhouseProfileMobileText = inhouseProfilePhoneText.trim() ;\r",
                    "inhouseProfileSideUserAltPhoneText = inhouseProfilePhoneText.trim() ;\r",
                    "\r",
                    "//  *****  VALIDATION  FOR  PHONE  NUMBER  *****\r",
                    "//if(  inhouseProfilePhoneText.length !== 0  && (!Ext.isNumeric(inhouseProfilePhoneText) || inhouseProfilePhoneText.length < 10))\r",
                    "\r",
                    "if( inhouseProfilePhoneText.length !== 0 && !phoneRegex.test(inhouseProfilePhoneText))\r",
                    "\r",
                    "{\r",
                    "    //console.log(phoneText);\r",
                    "    inhouseProfilePhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "}\r",
                    "//if(  inhouseProfileMobileText.length !== 0  && (!Ext.isNumeric(inhouseProfileMobileText) || inhouseProfileMobileText.length < 10))\r",
                    "if( inhouseProfileMobileText.length !== 0 && !phoneRegex.test(inhouseProfileMobileText))\r",
                    "{\r",
                    "    //console.log(phoneText);\r",
                    "    inhouseProfileMobile.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "//if(  inhouseProfileSideUserAltPhoneText.length !== 0  && (!Ext.isNumeric(inhouseProfileSideUserAltPhoneText) || inhouseProfileSideUserAltPhoneText.length < 10))\r",
                    "\r",
                    "if( inhouseProfileSideUserAltPhoneText.length !== 0 && !phoneRegex.test(inhouseProfileSideUserAltPhoneText))\r",
                    "{\r",
                    "    //console.log(phoneText);\r",
                    "    inhouseProfileSideUserAltPhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "    validationForProfileDetails = false;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "//  ***   VALIDATION  FPOR EMAIL  *****\r",
                    "\r",
                    "if( inhouseProfileEmailText.length == 0 || !Ext.data.Validations.email(inhouseProfileEmail, inhouseProfileEmailText))\r",
                    "{\r",
                    "    inhouseProfileEmail.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "}\r",
                    "\r",
                    "if( inhouseProfileSideUserAltEmailText.length !== 0 && !Ext.data.Validations.email(inhouseProfileSideUserAltEmail, inhouseProfileSideUserAltEmailText))\r",
                    "{\r",
                    "    inhouseProfileSideUserAltEmail.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "    validationForProfileDetails = false;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if( inhouseProfileSideUserWebsiteText.length !== 0 && !RMdatalink.util.globalMethods.isValidWebsite(inhouseProfileSideUserWebsiteText))\r",
                    "{\r",
                    "    //console.log(websiteText);\r",
                    "    inhouseProfileSideUserWebsite.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "    validationForProfile = false;\r",
                    "    validationForProfileDetails = false;\r",
                    "}\r",
                    "\r",
                    "if(!validationForProfile || ! validationForProfileDetails)\r",
                    "{\r",
                    "    inhouseDetailsMainTabPanel.setActiveItem(0);\r",
                    "\r",
                    "    //FOR SIDE PANEL\r",
                    "    if(!validationForProfileDetails)\r",
                    "    {\r",
                    "        var inhouseProfileSideTabPanel = Ext.ComponentQuery.query('#inhouseProfileSideTabPanel')[0];\r",
                    "        inhouseProfileSideTabPanel.setActiveItem(1);\r",
                    "    }\r",
                    "    return false;\r",
                    "}\r",
                    "\r",
                    "return true;\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "ec87bc80-f35e-4a7d-b02d-6f4bd90e6d3e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "removeErrorCls",
                "implHandler": [
                    "var inhouseProfileEmail = Ext.ComponentQuery.query('#inhouseProfileEmail')[0];\r",
                    "var inhouseProfilePhone = Ext.ComponentQuery.query('#inhouseProfilePhone')[0];\r",
                    "var inhouseProfileMobile = Ext.ComponentQuery.query('#inhouseProfileMobile')[0];\r",
                    "\r",
                    "var inhouseProfileSideUserAltPhone = Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone')[0];\r",
                    "var inhouseProfileSideUserAltEmail = Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0];\r",
                    "var inhouseProfileSideUserWebsite = Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0];\r",
                    "\r",
                    "inhouseProfileEmail.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseProfileEmail.addCls('x-rm-rdformpanel');\r",
                    "inhouseProfilePhone.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseProfilePhone.addCls('x-rm-rdformpanel');\r",
                    "inhouseProfileMobile.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseProfileMobile.addCls('x-rm-rdformpanel');\r",
                    "\r",
                    "inhouseProfileSideUserAltPhone.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseProfileSideUserAltPhone.addCls('x-rm-rdformpanel');\r",
                    "inhouseProfileSideUserAltEmail.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseProfileSideUserAltEmail.addCls('x-rm-rdformpanel');\r",
                    "inhouseProfileSideUserWebsite.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseProfileSideUserWebsite.addCls('x-rm-rdformpanel');\r",
                    "\r",
                    "\r",
                    "var inhouseProfileFirstName = Ext.ComponentQuery.query('#inhouseProfileFirstName')[0];\r",
                    "var inhouseProfileLastName = Ext.ComponentQuery.query('#inhouseProfileLastName')[0];\r",
                    "var inhouseProfilePosition = Ext.ComponentQuery.query('#inhouseProfilePosition')[0];\r",
                    "\r",
                    "var inhouseUsernameFld =  Ext.ComponentQuery.query('#inhouseProfileStoreName')[0];\r",
                    "\r",
                    "inhouseUsernameFld.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseUsernameFld.addCls('x-rm-rdformpanel');\r",
                    "\r",
                    "\r",
                    "inhouseProfileFirstName.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseProfileFirstName.addCls('x-rm-rdformpanel');\r",
                    "\r",
                    "inhouseProfileLastName.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseProfileLastName.addCls('x-rm-rdformpanel');\r",
                    "\r",
                    "inhouseProfilePosition.removeCls('x-rm-rdformErrorPanel');\r",
                    "inhouseProfilePosition.addCls('x-rm-rdformpanel');"
                ]
            },
            "designerId": "018e0f6f-621f-40aa-9f34-b67baf6e0c0d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "selectfield[action=permissionSelectFld]",
                "designer|targetType": "Ext.field.Select",
                "fn": "onpermissionSelectFldChange",
                "implHandler": [
                    " var selectFldItemId = selectfield.getItemId();\r",
                    "\r",
                    "switch(selectFldItemId){\r",
                    "\r",
                    "    case \"permistionsProducts\":\r",
                    "\r",
                    "\r",
                    "        if(selectfield.getValue() == 'none' || selectfield.getValue()== null )\r",
                    "        {\r",
                    "            Ext.ComponentQuery.query('#permistionsProducts_Datalink')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsProducts_Ecatalog')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsProducts_SMART_CART')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsProducts_RM_PLC')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsProducts_IRUGZ')[0].setDisabled(true);\r",
                    "        }else{\r",
                    "             Ext.ComponentQuery.query('#permistionsProducts_Datalink')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsProducts_Ecatalog')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsProducts_SMART_CART')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsProducts_RM_PLC')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsProducts_IRUGZ')[0].setDisabled(false);\r",
                    "        }\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "            case \"permistionsPricing\":\r",
                    "\r",
                    "\r",
                    "        if(selectfield.getValue() == 'none' || selectfield.getValue()== null )\r",
                    "        {\r",
                    "            Ext.ComponentQuery.query('#permistionsPricing_Datalink')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsPricing_Ecatalog')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsPricing_SMART_CART')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsPricing_RM_PLC')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsPricing_IRUGZ')[0].setDisabled(true);\r",
                    "        }else{\r",
                    "             Ext.ComponentQuery.query('#permistionsPricing_Datalink')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsPricing_Ecatalog')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsPricing_SMART_CART')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsPricing_RM_PLC')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsPricing_IRUGZ')[0].setDisabled(false);\r",
                    "        }\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "\r",
                    "            case \"permistionsDiscounts\":\r",
                    "\r",
                    "\r",
                    "        if(selectfield.getValue() == 'none' || selectfield.getValue()== null )\r",
                    "        {\r",
                    "            Ext.ComponentQuery.query('#permistionsDiscounts_Datalink')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsDiscounts_Ecatalog')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsDiscounts_SMART_CART')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsDiscounts_RM_PLC')[0].setDisabled(true);\r",
                    "             Ext.ComponentQuery.query('#permistionsDiscounts_IRUGZ')[0].setDisabled(true);\r",
                    "        }else{\r",
                    "             Ext.ComponentQuery.query('#permistionsDiscounts_Datalink')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsDiscounts_Ecatalog')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsDiscounts_SMART_CART')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsDiscounts_RM_PLC')[0].setDisabled(false);\r",
                    "             Ext.ComponentQuery.query('#permistionsDiscounts_IRUGZ')[0].setDisabled(false);\r",
                    "         }\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "}"
                ],
                "name": "change"
            },
            "designerId": "96b78d09-3b4a-444b-a2d6-902b417b367d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "customerlist",
                    " record",
                    " eOpts"
                ],
                "fn": "onInhouseCustomerSelect",
                "implHandler": [
                    "console.log(record) ;\r",
                    "\r",
                    "var vendorStore = Ext.getStore('vendors.Master');\r",
                    "\r",
                    "/*\r",
                    "    customer_name: \"Karastan\"\r",
                    "    customer_type: \"vendor\"\r",
                    "\r",
                    "*/\r",
                    "var recIndex = vendorStore.findExact(\"vendor_name\",record.data.customer_name) ;\r",
                    "\r",
                    "\r",
                    "var vendorRecord = vendorStore.getAt(recIndex);\r",
                    "\r",
                    "if(vendorRecord){\r",
                    "\r",
                    "    var vendorList = Ext.ComponentQuery.query('#allVendorTab')[0].down('#vendorList');\r",
                    "\r",
                    "\r",
                    "\r",
                    "                        var varibleToSet = setVariable();\r",
                    "                        var vendorsMainContentPanel = Ext.ComponentQuery.query('#vendorsMainContentPanel')[0];\r",
                    "                        Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDStoresTab');\r",
                    "                        RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);\r",
                    "\r",
                    "                        RMdatalink.app.getController('UINav').onPanelAddretailertapped(vendorsMainContentPanel);\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function setVariable(){\r",
                    "\r",
                    "    return {\r",
                    "\r",
                    "        placeClicked:  \"\",\r",
                    "        record:vendorRecord,\r",
                    "        index:recIndex\r",
                    "    };\r",
                    "}"
                ]
            },
            "designerId": "b5b41579-927c-49aa-a392-bdafa9fd8ff9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "list[itemId=inhouseProfileActivityList]",
                "designer|targetType": "Ext.dataview.List",
                "fn": "oninhouseProfileActivityListItemTap",
                "implHandler": [
                    "console.log(record);\r",
                    "\r",
                    "/*\r",
                    "activity_date: \"2014-04-29 16:27:50\"\r",
                    "activity_description: \"TechLog :HomeFires::test\"\r",
                    "company: \"HomeFires\"\r",
                    "id: \"ext-record-467\"\r",
                    "searchvalue: \"2014-04-29 16:27:50\"\r",
                    "type: \"tech_support_log\"\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "if(record.data.type == \"tech_support_log\")\r",
                    "{\r",
                    "        var vendorStore = Ext.getStore('vendors.Master');\r",
                    "\r",
                    "        /*\r",
                    "            customer_name: \"Karastan\"\r",
                    "            customer_type: \"vendor\"\r",
                    "\r",
                    "        */\r",
                    "        var recIndex = vendorStore.findExact(\"vendor_name\",record.data.company) ;\r",
                    "\r",
                    "\r",
                    "        var vendorRecord = vendorStore.getAt(recIndex);\r",
                    "\r",
                    "        if(vendorRecord){\r",
                    "\r",
                    "            var vendorList = Ext.ComponentQuery.query('#allVendorTab')[0].down('#vendorList');\r",
                    "\r",
                    "\r",
                    "\r",
                    "                                var varibleToSet = setVariable();\r",
                    "                                var vendorsMainContentPanel = Ext.ComponentQuery.query('#vendorsMainContentPanel')[0];\r",
                    "\r",
                    "                                RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);\r",
                    "                                                Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDCRMTab');\r",
                    "                                RMdatalink.app.getController('UINav').onPanelAddretailertapped(vendorsMainContentPanel);\r",
                    "\r",
                    "                                var searchFld = Ext.ComponentQuery.query('#vendorTechLogSearchContentPanel')[0].down('#RMSearchField');\r",
                    "                                searchFld.setValue(record.data.searchvalue);\r",
                    "                               // searchFld.fireEvent(\"keyup\") ;//keyup( this, e, eOpts )\r",
                    "\r",
                    "                                Ext.getStore('CompanySpecificTechSupportStore').filter(\"time_start\",record.data.searchvalue);\r",
                    "                               // store.filter(\"email\", /\\.com$/);\r",
                    "\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "\r",
                    "        function setVariable(){\r",
                    "\r",
                    "            return {\r",
                    "\r",
                    "                placeClicked:  \"\",\r",
                    "                record:vendorRecord,\r",
                    "                index:recIndex\r",
                    "            };\r",
                    "        }\r",
                    "}"
                ],
                "name": "itemtap"
            },
            "designerId": "50076d29-48c3-4632-bee1-0ce77139e78a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "validationForRelationNewField",
                "implHandler": [
                    "        var newFieldName = Ext.ComponentQuery.query('#newFieldName')[0];\r",
                    "        var newFieldKey = Ext.ComponentQuery.query('#newFieldKey')[0];\r",
                    "\r",
                    "        var FieldLabel = newFieldName.getValue()+\"\";\r",
                    "        var newFieldKeyText = newFieldKey.getValue()+\"\";\r",
                    "\r",
                    "\r",
                    "        newFieldName.removeCls('x-rm-rdformErrorPanel');\r",
                    "        newFieldName.addCls('x-rm-rdformpanel');\r",
                    "\r",
                    "        newFieldKey.removeCls('x-rm-rdformErrorPanel');\r",
                    "        newFieldKey.addCls('x-rm-rdformpanel');\r",
                    "\r",
                    "\r",
                    "        //  ***   VALIDATION  FPOR EMAIL  *****\r",
                    "\r",
                    "        if( FieldLabel.length === 0)\r",
                    "        {\r",
                    "            newFieldName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "           return false;\r",
                    "        }\r",
                    "\r",
                    "        if( newFieldKeyText.length === 0)\r",
                    "        {\r",
                    "            newFieldKey.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');\r",
                    "           return false;\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "        return true;\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "28fc0180-8dd8-4b78-aa4b-8c0dfcf39098"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getOtherInhoseUserDetails",
                "implHandler": [
                    "\r",
                    "var isrtdAddfld = RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var otherRelData = [] ;\r",
                    "\r",
                    "if(isrtdAddfld){\r",
                    "    \r",
                    "    var otheRelFlds = Ext.ComponentQuery.query('#addRtdOtherFlds');\r",
                    "    \r",
                    "}else{\r",
                    "\r",
                    "    var otheRelFlds = Ext.ComponentQuery.query('#inhouseRelOtherFlds');\r",
                    "}\r",
                    "\r",
                    "\r",
                    "for(var i=0; i< otheRelFlds.length; i++){\r",
                    "\r",
                    "    var key =  otheRelFlds[i].fieldKey ;\r",
                    "\r",
                    "    var objectTOPush = {};\r",
                    "    objectTOPush.value = otheRelFlds[i].getValue() ;\r",
                    "    objectTOPush.key = key;\r",
                    "    objectTOPush.label  = otheRelFlds[i].getLabel();\r",
                    "\r",
                    "    otherRelData.push(objectTOPush);\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "console.log(otherRelData);\r",
                    "\r",
                    "\r",
                    "return otherRelData;\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "\r",
                    "        label: FieldLabel,\r",
                    "        labelWidth: \"100px\",\r",
                    "        fieldKey:\"\",\r",
                    "        itemId:\"inhouseRelOtherFlds\"\r",
                    "\r",
                    "\r",
                    "\r",
                    "*/"
                ]
            },
            "designerId": "2806ef56-b2e1-4a84-bda7-dfd4a49154bd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "addNewRelFldBtnTaped",
                "implHandler": [
                    "\r",
                    "var isrtdAddfld = RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap ;\r",
                    "\r",
                    "\r",
                    "if(isrtdAddfld){\r",
                    "\r",
                    "    var inhouseProfileSideRelationDetailsForm = Ext.ComponentQuery.query('#rtAdditionalInfoForm')[0];\r",
                    "\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "        var inhouseProfileSideRelationDetailsForm = Ext.ComponentQuery.query('#inhouseProfileSideRelationDetailsForm')[0];\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var flag  = RMdatalink.app.getController('inhouse.DetailScreenController').validationForRelationNewField();\r",
                    "\r",
                    "if(flag)\r",
                    "{\r",
                    "    var FieldLabel = Ext.ComponentQuery.query('#newFieldName')[0].getValue()+\"\";\r",
                    "    var newFieldKey = Ext.ComponentQuery.query('#newFieldKey')[0].getValue()+\"\";\r",
                    "\r",
                    "    newFieldKey = newFieldKey.replace(/\\s+/g,\"\").toLowerCase();\r",
                    "\r",
                    "\r",
                    "    if(this.checkForAvailableFields(FieldLabel,newFieldKey)){\r",
                    "\r",
                    "\r",
                    "        var newLabelTextField = new Ext.field.Text( {\r",
                    "            label: FieldLabel,\r",
                    "            labelWidth: isrtdAddfld ? \"110px\" : \"100px\", \r",
                    "            fieldKey:newFieldKey,\r",
                    "            itemId: isrtdAddfld ? \"addRtdOtherFlds\" :\"inhouseRelOtherFlds\"\r",
                    "\r",
                    "        });\r",
                    "\r",
                    "        inhouseProfileSideRelationDetailsForm.add(newLabelTextField);\r",
                    "\r",
                    "        Ext.getCmp(\"addNewField\").hide() ;\r",
                    "\r",
                    "    }else{\r",
                    "\r",
                    "        Ext.Msg.alert(\"Alert\",\"Please enter another key and value.\",Ext.emptyFn);\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap = false ;\r",
                    ""
                ]
            },
            "designerId": "859f8f35-0fbf-40fb-8f29-c713cf74e182"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "fldLabel",
                    "fldKey"
                ],
                "fn": "checkForAvailableFields",
                "implHandler": [
                    "var flds = this.getOtherInhoseUserDetails() ;\r",
                    "\r",
                    "var fldValidation = true ;\r",
                    "\r",
                    "for(var i =0; i <flds.length ; i++){\r",
                    "\r",
                    "    if(flds[i].key == fldKey || flds[i].label == fldLabel || fldKey == \"key\"){\r",
                    "\r",
                    "\r",
                    "\r",
                    "        fldValidation = false ;\r",
                    "\r",
                    "        break ;\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "return fldValidation ;"
                ]
            },
            "designerId": "6703afa4-97e9-41aa-82cd-4a02d14b9dde"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "removeNewlyAddedRelFlds",
                "implHandler": [
                    "   \r",
                    "var isrtdAddfld = RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap ;\r",
                    "\r",
                    "if(isrtdAddfld){\r",
                    "     var otheRelFlds = Ext.ComponentQuery.query('#addRtdOtherFlds');\r",
                    "    \r",
                    "}else{\r",
                    "   var otheRelFlds = Ext.ComponentQuery.query('#inhouseRelOtherFlds');\r",
                    "}\r",
                    "    for(var i=0; i< otheRelFlds.length; i++){\r",
                    "\r",
                    "        otheRelFlds[i].destroy() ;\r",
                    "\r",
                    "    }"
                ]
            },
            "designerId": "c50d85f3-dd69-4aa2-97cc-947b6de8ddf5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "otheRelFlds"
                ],
                "fn": "addNewFldsForExistingData",
                "implHandler": [
                    "/*\r",
                    "  objectTOPush.value = otheRelFlds[i].getValue() ;\r",
                    "    objectTOPush.key = key;\r",
                    "    objectTOPush.label  = otheRelFlds[i].getLabel();\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "var isrtdAddfld = RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap ;\r",
                    "\r",
                    "\r",
                    "if(isrtdAddfld){\r",
                    "\r",
                    "    var inhouseProfileSideRelationDetailsForm = Ext.ComponentQuery.query('#rtAdditionalInfoForm')[0];\r",
                    "\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "        var inhouseProfileSideRelationDetailsForm = Ext.ComponentQuery.query('#inhouseProfileSideRelationDetailsForm')[0];\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    for(var i=0 ; i<otheRelFlds.length ; i++)\r",
                    "    {\r",
                    "            var FieldLabel = otheRelFlds[i].label ;\r",
                    "            var newFieldKey = otheRelFlds[i].key ;\r",
                    "            var fldValue = otheRelFlds[i].value ;\r",
                    "\r",
                    "\r",
                    "            var newLabelTextField = new Ext.field.Text( {\r",
                    "                label: FieldLabel,\r",
                    "                labelWidth: isrtdAddfld ? \"110px\" : \"100px\", \r",
                    "                fieldKey:newFieldKey,\r",
                    "                itemId: isrtdAddfld ? \"addRtdOtherFlds\" :\"inhouseRelOtherFlds\",\r",
                    "                value:fldValue\r",
                    "\r",
                    "            });\r",
                    "\r",
                    "            inhouseProfileSideRelationDetailsForm.add(newLabelTextField);\r",
                    "\r",
                    "    }"
                ]
            },
            "designerId": "5c1d91d5-38d6-4954-a5cd-7f4c733375da"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "inputFld",
                    "record_key"
                ],
                "fn": "onMontlyCommTxtFldLostFocus",
                "implHandler": [
                    "\r",
                    "var id = inputFld.attributes['data-id'].value ;\r",
                    "var value = inputFld.value ;\r",
                    "\r",
                    "var monthlyStructureList = Ext.ComponentQuery.query('#inhouseDtlCommStruMontlyPanel')[0].down('#mainList');\r",
                    "var store = monthlyStructureList.getStore() ;\r",
                    "var recIndex = store.findExact('id',id) ;\r",
                    "\r",
                    "if(recIndex == -1){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var record = store.getAt(recIndex) ;\r",
                    "\r",
                    "record.set(record_key,value) ;\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "ad678995-70b6-406a-9bc9-146d1a7d5014"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "inputFld",
                    "record_key"
                ],
                "fn": "onYearlyCommTxtFldLostFocus",
                "implHandler": [
                    "\r",
                    "var id = inputFld.attributes['data-id'].value ;\r",
                    "var value = inputFld.value ;\r",
                    "\r",
                    "var yearlyStructureList = Ext.ComponentQuery.query('#inhouseDtlCommStruYearlyPanel')[0].down('#mainList');\r",
                    "\r",
                    "\r",
                    "var store = yearlyStructureList.getStore() ;\r",
                    "var recIndex = store.findExact('id',id) ;\r",
                    "\r",
                    "if(recIndex == -1){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var record = store.getAt(recIndex) ;\r",
                    "\r",
                    "record.set(record_key,value) ;"
                ]
            },
            "designerId": "812199fe-6836-49bf-ab9b-d50c8d11f7a0"
        }
    ]
}