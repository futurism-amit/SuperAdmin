{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "BillingReportController"
    },
    "designerId": "a45ffe8d-24de-4f80-bf1e-b480db67b8b5",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initBillingReport",
                "implHandler": [
                    "\r",
                    "\r",
                    "var reportStore = Ext.getStore('billing.MonthlyReportStore') ;\r",
                    "\r",
                    "if(reportStore.getData().all.length == 0){\r",
                    "\r",
                    "\r",
                    "this.loadRetailers(\"\",1,50);\r",
                    "\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "710c11bb-0c6a-40b4-b666-aeb5e60bdc1d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=billingGenerateReportBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onbillingGenerateReportBtnTap",
                "implHandler": [
                    "\r",
                    "\r",
                    "this.generateMonthlyReport() ;"
                ],
                "name": "tap"
            },
            "designerId": "7386883e-711d-4e42-9711-dd74f9a3fae9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=billingGenerateYearlyReportBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onBillingGenerateYearlyReportBtnTap",
                "implHandler": [
                    "\r",
                    "\r",
                    "this.generateYearlyReport() ;"
                ],
                "name": "tap"
            },
            "designerId": "7fcc836d-f8d6-4a95-aeb9-08b619949557"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "searchText",
                    "page_no",
                    "pageSize"
                ],
                "fn": "loadRetailers",
                "implHandler": [
                    "var store_status= \"ACTIVE\" ;\r",
                    " var reportScreen = Ext.ComponentQuery.query('#billingReportScreen')[0] ;\r",
                    "\r",
                    "\r",
                    "reportScreen.setMasked( {\r",
                    "                xtype: 'loadmask',message:'Loading Retailers'\r",
                    "            });\r",
                    "\r",
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "    if(store_status && store_status !== \"\")\r",
                    "     {\r",
                    "\r",
                    "         var tStatus = store_status ;\r",
                    "         if(store_status==\"PROSPECTS\"){\r",
                    "             tStatus = \"PROSPECT\" ;\r",
                    "         }else if(store_status == \"HOT_PROSPECTS\"){\r",
                    "               tStatus = \"HOT_PROSPECT\" ;\r",
                    "         }\r",
                    "\r",
                    "         var pStatus = null ;\r",
                    "         if(store_status == \"INACTIVE\"){\r",
                    "             pStatus =  {'$and':\r",
                    "              [\r",
                    "                 {\"store_products.datalink_status\" : tStatus},\r",
                    "                 {\"store_products.ecatalog_status\" : tStatus},\r",
                    "                 {\"store_products.ecommerce_status\" :tStatus},\r",
                    "                 {\"store_products.irugs_status\" : tStatus},\r",
                    "                 {\"store_products.rmpro_status\" : tStatus}\r",
                    "              ]} ;\r",
                    "         }else\r",
                    "         {\r",
                    "             pStatus =  {'$or':\r",
                    "                [\r",
                    "                 {\"store_products.datalink_status\" : tStatus},\r",
                    "                 {\"store_products.ecatalog_status\" : tStatus},\r",
                    "                 {\"store_products.ecommerce_status\" :tStatus},\r",
                    "                 {\"store_products.irugs_status\" : tStatus},\r",
                    "                 {\"store_products.rmpro_status\" : tStatus}\r",
                    "                 ]} ;\r",
                    "         }\r",
                    "\r",
                    "         var searchQuery =\r",
                    "\r",
                    "              {'$or':[\r",
                    "                                            { \"store_name\": { $regex: searchText  , $options: 'i' } },\r",
                    "                                            { \"store_state\": { $regex: searchText  , $options: 'i' } },\r",
                    "                                            { \"store_city\": { $regex: searchText  , $options: 'i' } },\r",
                    "                                            { \"store_zip\": { $regex: searchText  , $options: 'i' } }\r",
                    "                     ]} ;\r",
                    "\r",
                    "         var tquery = {'$and':[\r",
                    "            searchQuery,\r",
                    "             pStatus\r",
                    "\r",
                    "        ]} ;\r",
                    "\r",
                    "\r",
                    "         RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_masterretailerrecords\",pageNo:page_no ,pageSize: 50 ,sortBy:{\"store_name\":1},\r",
                    "         query:tquery,\r",
                    "        fields:{\"store_name\":1}},success,error);\r",
                    "     }else{\r",
                    "\r",
                    "        var searchQuery =  that.getSearchQuery(store_status) ;\r",
                    "         var tquery = {\r",
                    "             '$and':\r",
                    "             [\r",
                    "\r",
                    "            searchQuery\r",
                    "\r",
                    "        ]} ;\r",
                    "\r",
                    "\r",
                    "         RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_masterretailerrecords\",pageNo:page_no ,pageSize: 50 ,sortBy:{\"store_name\":1},\r",
                    "         query:tquery,\r",
                    "        fields:{}},success,error);\r",
                    "\r",
                    "     }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    function success(){\r",
                    "\r",
                    "\r",
                    "\r",
                    "           reportScreen.setMasked(false);\r",
                    "\r",
                    "        if(page_no > 1 && arguments[0].items.length ==0 ){\r",
                    "\r",
                    "\r",
                    "          //  rollBackStorePageNo() ;\r",
                    "\r",
                    "            Ext.Msg.alert(\"Alert\",\"Next page is not available.\",Ext.emptyFn);\r",
                    "            return;\r",
                    "        }\r",
                    "           setRetailersList(arguments[0].items) ;\r",
                    "          //  setTotalList(arguments[0].count);\r",
                    "\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    function error(){\r",
                    "\r",
                    "          reportScreen.setMasked(false);\r",
                    "    }\r",
                    "\r",
                    "    function rollBackStorePageNo(){\r",
                    "\r",
                    "        var activeListStore =   Ext.getStore('billing.MonthlyReportStore');\r",
                    "\r",
                    "\r",
                    "        if(activeListStore)\r",
                    "        {\r",
                    "            activeListStore.setPageNo( parseInt(page_no) - 1 ) ;\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    function setTotalList(count){\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    function setRetailersList(data){\r",
                    "\r",
                    "        var rtsStore = getStoreByRemovePreviousRetailers();\r",
                    "        rtsStore.setData(data);\r",
                    "        rtsStore.sync();\r",
                    "        \r",
                    "        \r",
                    "        var reportStore = Ext.getStore('billing.YearlyReportStore') ;\r",
                    "        reportStore.setData(data);\r",
                    "        reportStore.sync();\r",
                    "    // RMdatalink.app.getController('PaginationController').loadDependentStoresonMaster('retailersMaster');\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getStoreByRemovePreviousRetailers(){\r",
                    "\r",
                    "     var rtStore =  Ext.getStore('billing.MonthlyReportStore');\r",
                    "\r",
                    "\r",
                    "    rtStore.removeAll();\r",
                    "    rtStore.sync();\r",
                    "\r",
                    "     var reportStore = Ext.getStore('billing.YearlyReportStore') ;\r",
                    "        reportStore.removeAll();\r",
                    "        reportStore.sync();\r",
                    "    \r",
                    "    return rtStore;\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "e388d771-e262-4c14-939c-207138970afb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "generateMonthlyReport",
                "implHandler": [
                    " var reportScreen = Ext.ComponentQuery.query('#billingReportScreen')[0] ;\r",
                    "var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var reportStore = Ext.getStore('billing.MonthlyReportStore') ;\r",
                    "\r",
                    "var reportForm = Ext.ComponentQuery.query('#billingMonthlyReportForm')[0] ;\r",
                    "\r",
                    "var product_name = reportForm.down('#billingReportSelectProductFld').getValue();\r",
                    "var from = reportForm.down('#billingReportFromDateFld').getValue();\r",
                    "var to = reportForm.down('#billingReportToDateFld').getValue();\r",
                    "\r",
                    "\r",
                    "getMonthlyReport();\r",
                    "\r",
                    "return ;\r",
                    "\r",
                    "\r",
                    "var today = new Date();\r",
                    "var month = today.getMonth() +1 ;\r",
                    "var year = today.getFullYear() ;\r",
                    "if(! from && ! to){\r",
                    "\r",
                    " var appendZeroM = month.toString() ;\r",
                    "    if(month < 10){\r",
                    "\r",
                    "        appendZeroM = \"0\"+month ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    from = (appendZeroM + \"/01/\" + year) ;\r",
                    "    to = (appendZeroM + \"/30/\" + year) ;\r",
                    "}else\r",
                    "if( from && ! to)\r",
                    "{\r",
                    "//      from = new Date(from) ;\r",
                    "     month = from.getMonth() +1 ;\r",
                    "     year = from.getYear() ;\r",
                    "\r",
                    "     to = (month + \"/30/\" + year) ;\r",
                    "}else\r",
                    "if( !from && to)\r",
                    "{\r",
                    "//       to = new Date(to) ;\r",
                    "     month = to.getMonth() +1 ;\r",
                    "     year = to.getYear() ;\r",
                    "\r",
                    "     from = (month + \"/01/\" + year) ;\r",
                    "}else{\r",
                    "\r",
                    "\r",
                    "    var period = RMdatalink.util.globalMethods.getDateDifferenceInDays(from,to);\r",
                    "\r",
                    "    if(period > 240){\r",
                    "\r",
                    "        Ext.Msg.alert(\"Alert\",\"Please Enter Period less than 8 Month\");\r",
                    "        return ;\r",
                    "    }\r",
                    "//       from = new Date(from) ;\r",
                    "//       to = new Date(to) ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "reportScreen.setMasked( {\r",
                    "                xtype: 'loadmask',message:'Generating Report'\r",
                    "            });\r",
                    "var searchQuery1 = {} ;\r",
                    "var searchQuery2 = {} ;\r",
                    "\r",
                    "searchQuery1.due_date = { $gte : from }  ;\r",
                    "searchQuery2.due_date = { $lte : to }  ;\r",
                    "\r",
                    "var index = 0 ;\r",
                    "var maxIndex = reportStore.getData().all.length ;\r",
                    "var rtRec = null ;\r",
                    "\r",
                    "var tFrom = new Date(from);\r",
                    "var dataToLoad = {\r",
                    "\r",
                    "\r",
                    "} ;\r",
                    "\r",
                    "var startMonth = tFrom.getMonth() ;\r",
                    "\r",
                    "for(var i =0 ; i < 1 ;i++){\r",
                    "\r",
                    "    var tempMonth =  0;\r",
                    "    tempMonth =  (startMonth + i) % 12 ;\r",
                    "\r",
                    "    dataToLoad[\"month\" + i] = monthNames[tempMonth] ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var headerStore = Ext.getStore('billing.ListHeaderStore') ;\r",
                    "headerStore.removeAll();\r",
                    "headerStore.sync();\r",
                    "\r",
                    "headerStore.setData([dataToLoad]) ;\r",
                    "headerStore.sync() ;\r",
                    "\r",
                    "\r",
                    "//loadSearch() ;\r",
                    "\r",
                    "function loadSearch(){\r",
                    "\r",
                    "    if(index < maxIndex){\r",
                    "\r",
                    "        rtRec = reportStore.getAt(index) ;\r",
                    "\r",
                    "        var tquery = {'$and':\r",
                    "              [\r",
                    "                 { \"retailer_id\" : rtRec.get('_id') },\r",
                    "                 { \"invoice_product\":product_name } ,\r",
                    "                  searchQuery1,\r",
                    "                  searchQuery2\r",
                    "               ]\r",
                    "            };\r",
                    "        console.log(tquery);\r",
                    "        doSearch(tquery) ;\r",
                    "    }else{\r",
                    "\r",
                    "         reportScreen.setMasked(false);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "function doSearch(query){\r",
                    "\r",
                    "\r",
                    "    RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_invoice_history\",pageNo:1 ,pageSize: 50 ,sortBy:{'due_date':1},\r",
                    "         query:query,\r",
                    "         fields:{}},success,error);\r",
                    "}\r",
                    "\r",
                    "function success(){\r",
                    "    // reportScreen.setMasked(false);\r",
                    "    console.log(arguments);\r",
                    "\r",
                    "    if(arguments[0].items.length > 0){\r",
                    "        var temp = 1 ;\r",
                    "        for(var i =0 ; i < arguments[0].items.length ; i++) {\r",
                    "            temp = i ;\r",
                    "            rtRec.set(\"month\"+temp,arguments[0].items[i].total_payble);\r",
                    "\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    index ++;\r",
                    "    loadSearch() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function error(){\r",
                    "        index ++;\r",
                    "        loadSearch() ;\r",
                    "     //reportScreen.setMasked(false);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getMonthlyReport(){\r",
                    "\r",
                    "    function successCallback(){\r",
                    "        console.log(arguments);\r",
                    "\r",
                    "        var total = 0 ;\r",
                    "\r",
                    "        for(var i=0 ; i < reportStore.getData().all.length; i++){\r",
                    "\r",
                    "\r",
                    "            var idx = i % 5 ;\r",
                    "\r",
                    "            var record = reportStore.getAt(i);\r",
                    "\r",
                    "            total += parseInt(arguments[0].items[idx].total_payble, 0) ;\r",
                    "            record.set('month0',arguments[0].items[idx].total_payble);\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "        // reportForm.down('#billingReportTotalAmtFild')[0].setValue(arguments[0].sum_of_total_payble);\r",
                    "         reportForm.down('#billingReportTotalAmtFild').setValue(total);\r",
                    "\r",
                    "        var avg =  total/reportStore.getData().all.length ;\r",
                    "\r",
                    "        avg = Math.round((avg * 100 )) / 100 ;\r",
                    "         reportForm.down('#billingReportAvgAmtFild').setValue(avg);\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "    function failuerCallback(){\r",
                    "\r",
                    "    }\r",
                    "    var today = new Date();\r",
                    "    var month = today.getMonth() +1 ;\r",
                    "\r",
                    "    RMdatalink.util.ServerAPI.getReportForMonth(product_name,month,50,successCallback,failuerCallback) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    var dataToLoad = {\r",
                    "        month0:monthNames[today.getMonth()]\r",
                    "    };\r",
                    "\r",
                    "\r",
                    "\r",
                    "    var headerStore = Ext.getStore('billing.ListHeaderStore') ;\r",
                    "    headerStore.removeAll();\r",
                    "    headerStore.sync();\r",
                    "\r",
                    "    headerStore.setData([dataToLoad]) ;\r",
                    "    headerStore.sync() ;\r",
                    "\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "36f33964-106c-4f60-b66b-85944276bab6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[itemId=billingReportTargetAmtFild]",
                "designer|targetType": "Ext.field.Text",
                "fn": "onbillingReportTargetAmtFildChange",
                "implHandler": [
                    "\r",
                    "\r",
                    "var reportStore = Ext.getStore('billing.MonthlyReportStore') ;\r",
                    "\r",
                    "var reportForm = Ext.ComponentQuery.query('#billingMonthlyReportForm')[0] ;\r",
                    "\r",
                    "var avg = reportForm.down('#billingReportAvgAmtFild').getValue() ;\r",
                    "\r",
                    "var accountsReq = newValue/avg ;\r",
                    "\r",
                    "accountsReq =Math.round(accountsReq) ;\r",
                    "\r",
                    "reportForm.down('#billingReportNewAccToBeAddedFild').setValue(accountsReq) ;"
                ],
                "name": "change"
            },
            "designerId": "d19eab7d-3e84-47c0-8f99-d9f6a0c495f6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "generateYearlyReport",
                "implHandler": [
                    " var reportScreen = Ext.ComponentQuery.query('#billingReportScreen')[0] ;\r",
                    "var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var reportStore = Ext.getStore('billing.YearlyReportStore') ;\r",
                    "\r",
                    "var reportForm = Ext.ComponentQuery.query('#billingYearlyReportForm')[0] ;\r",
                    "\r",
                    "var product_name = reportForm.down('#billingReportSelectProductFld').getValue();\r",
                    "var from = reportForm.down('#billingReportFromDateFld').getValue();\r",
                    "var to = reportForm.down('#billingReportToDateFld').getValue();\r",
                    "\r",
                    "\r",
                    "getYearlyReport();\r",
                    "\r",
                    "function getYearlyReport(){\r",
                    "\r",
                    "    function successCallback(){\r",
                    "        console.log(arguments);\r",
                    "\r",
                    "        var total = {} ; //new Array(12);\r",
                    "        var growth = {} ; //new Array(12);\r",
                    "        var growthInPercent = {} ; //new Array(12);\r",
                    "\r",
                    "            total.title =  \"Total Existing Contracts\" ;\r",
                    "            \r",
                    "            growth.title= \"Monthly Dollar Growth\" ;\r",
                    "            \r",
                    "            growthInPercent.title = \"Monthly Percent Growth\" ;\r",
                    "        \r",
                    "        \r",
                    "        \r",
                    "        for(var j= 0 ; j < 12 ; j++){\r",
                    "            total[\"month\"+j] = 0 ;\r",
                    "            \r",
                    "            growth[\"month\"+j] = 0 ;\r",
                    "            \r",
                    "            growthInPercent[\"month\"+j] = 0 ;\r",
                    "        }\r",
                    "\r",
                    "        for(var i=0 ; i < reportStore.getData().all.length; i++){\r",
                    "\r",
                    "\r",
                    "            var idx = i % 5 ;\r",
                    "\r",
                    "            var record = reportStore.getAt(i);\r",
                    "\r",
                    "            var dataToset = {} ;\r",
                    "\r",
                    "            for(var k=0 ; k < arguments[0].items[idx].total_paybles.length ; k++){\r",
                    "\r",
                    "                dataToset[\"month\"+k] = arguments[0].items[idx].total_paybles[k].total_payble ;\r",
                    "\r",
                    "                 total[\"month\"+k] += parseInt(arguments[0].items[idx].total_paybles[k].total_payble, 0) ;;\r",
                    "            \r",
                    "                 if(k > 0)\r",
                    "                 {    \r",
                    "                     growth[\"month\"+k] = total[\"month\"+k] - total[\"month\"+ (k-1)]   ;\r",
                    "                     \r",
                    "                     growthInPercent[\"month\"+k] = ( 100*growth[\"month\"+k] ) / total[\"month\"+ (k-1)] ;\r",
                    "                    \r",
                    "                      growthInPercent[\"month\"+k] =  (Math.round(  growthInPercent[\"month\"+k] * 100) / 100 )+ \"%\";\r",
                    "                 \r",
                    "                 }else{\r",
                    "                     growth[\"month\"+k] = 0 ;\r",
                    "                     \r",
                    "                     growthInPercent[\"month\"+k] = 0  + \"%\" ;\r",
                    "                 }\r",
                    "            }\r",
                    "            \r",
                    "            \r",
                    "            \r",
                    "\r",
                    "            record.set(dataToset);\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "  console.log(total);\r",
                    "\r",
                    "\r",
                    "  RMdatalink.util.globalMethods.fillListDataByListObject(reportForm.down('#totalList'),[total,growth,growthInPercent]);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "    function failuerCallback(){\r",
                    "\r",
                    "    }\r",
                    "    var today = new Date();\r",
                    "    var year = today.getFullYear() ;\r",
                    "\r",
                    "    RMdatalink.util.ServerAPI.getReportForYear(product_name,year,50,successCallback,failuerCallback) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "eb4b5760-790c-486a-9554-cafba480a158"
        }
    ]
}