{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "activeDiscountPolicyStore": " pricing.datalink_discount",
        "activeFunctionalityStore": "pricing.datalink_functionality",
        "activePricingPolicyStore": "pricing.datalink_pricing",
        "billingRecord": [
            "{}"
        ],
        "designer|userClassName": "BillingDetailsController",
        "doNotSaveStoreData": false,
        "isNoActionToChangePolicy": false,
        "isPricingDataloaded": false,
        "pricingData": [
            "null"
        ]
    },
    "configAlternates": {
        "billingRecord": "object",
        "pricingData": "object",
        "doNotSaveStoreData": "boolean",
        "isPricingDataloaded": "boolean",
        "isNoActionToChangePolicy": "boolean"
    },
    "designerId": "35d9afcd-ca31-4850-b881-5ffbcab1b59c",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "billingRecord",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "pricingData",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "activePricingPolicyStore",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "activeDiscountPolicyStore",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "activeFunctionalityStore",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "doNotSaveStoreData",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isPricingDataloaded",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isNoActionToChangePolicy",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "tabpanel[itemId=billingTabPanel]",
                "designer|targetType": "Ext.tab.Panel",
                "fn": "onBillingTabpanelActiveItemChange",
                "implHandler": [
                    "return ;\r",
                    "\r",
                    "var list = null;\r",
                    "var billingMasterStore =  Ext.getStore(\"billingMasterStore\");\r",
                    "var  retailersMaster = Ext.getStore(\"retailersMaster\");\r",
                    "\r",
                    "billingMasterStore.clearFilter();\r",
                    "\r",
                    "\r",
                    "switch(value._itemId) {\r",
                    "    case 'allTab':\r",
                    "        list = Ext.ComponentQuery.query(\"#allListContainerItemID\")[0].down('#billingList');\r",
                    "        break;\r",
                    "    case 'paidTab':\r",
                    "        list = (Ext.ComponentQuery.query(\"#paidListContainerItemID\")[0].down('#billingList'));\r",
                    "        billingMasterStore.filter('status','Paid');\r",
                    "\r",
                    "        break;\r",
                    "    case 'pastDueTab':\r",
                    "        list = (Ext.ComponentQuery.query(\"#pastDueListContainerItemID\")[0].down('#billingList'));\r",
                    "        billingMasterStore.filter('status','Past');\r",
                    "\r",
                    "        break;\r",
                    "    case 'reviewTab':\r",
                    "        list = (Ext.ComponentQuery.query(\"#reviewListContainerItemID\")[0].down('#billingList'));\r",
                    "        billingMasterStore.filter('status','Review');\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "}\r",
                    "\r",
                    " //  *********  CLEAR  LIST  FILTER  ***********\r",
                    "\r",
                    "if(list.getStore())\r",
                    "{\r",
                    "    list.getStore().clearFilter();\r",
                    "}\r",
                    "\r",
                    "//**********   SET DATA TO THE LIST   ********************\r",
                    "var listData = [];\r",
                    "\r",
                    "for(var i = 0; i<retailersMaster.getCount() ;i++)\r",
                    "{\r",
                    "    var retailerRecord =  retailersMaster.getAt(i).data;\r",
                    "    var billingIndex = billingMasterStore.findExact('id', retailerRecord.id);\r",
                    "    var billingRecord = billingMasterStore.getAt(billingIndex);\r",
                    "    if(billingRecord)\r",
                    "    {\r",
                    "        billingRecord = billingRecord.data;\r",
                    "\r",
                    "\r",
                    "\r",
                    "        var oneRowRecord =\r",
                    "            {\r",
                    "                \"order_no\" : retailerRecord.order_no,\r",
                    "                \"store_name\" : retailerRecord.store_name,\r",
                    "                \"manager_lastname\" : retailerRecord.manager_lastname,\r",
                    "                \"manager_firstname\" : retailerRecord.manager_firstname,\r",
                    "                \"store_products_datalink\" : retailerRecord.store_products_datalink,\r",
                    "                \"store_products_ecatalog\" : retailerRecord.store_products_ecatalog,\r",
                    "                \"store_products_smart_cart\" : retailerRecord.store_products_smart_cart,\r",
                    "                \"store_products_rm_plc\" : retailerRecord.store_products_rm_plc,\r",
                    "                \"store_products_irugs\" : retailerRecord.store_products_irugs,\r",
                    "                \"store_monthly_subscription\" : retailerRecord.store_monthly_subscription,\r",
                    "                \"status\" : billingRecord.status,\r",
                    "                \"overDue\" : billingRecord.overDue,\r",
                    "                \"owed\" : billingRecord.owed,\r",
                    "                \"store_online_vendors\":retailerRecord.store_online_vendors,\r",
                    "                \"store_in_store_vendors\":retailerRecord.store_in_store_vendors\r",
                    "            };\r",
                    "\r",
                    "\r",
                    "        listData.push(oneRowRecord);\r",
                    "    }\r",
                    "}\r",
                    "RMdatalink.util.globalMethods.fillListDataByListObject(list,listData);\r",
                    "list.refresh();"
                ],
                "name": "activeitemchange"
            },
            "designerId": "aef1448a-8bc8-43d7-8297-6a658a7c0d21"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container[actionInit=containerInit]",
                "designer|targetType": "Ext.Container",
                "fn": "onTabPanelContainerInitialize",
                "implHandler": [
                    "// *********  FOR  BILLING TAB  ***********************\r",
                    "/*\r",
                    "if(component.down(\"#billingListHeader\"))\r",
                    "{\r",
                    "    var headers = component.down(\"#billingListHeader\");\r",
                    "    headers.setData([{}]);\r",
                    "    headers.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\">',\r",
                    "\r",
                    "                   '    <div style=\"width: 10%;\" data-name=\"store_order\">',\r",
                    "                   '        Order&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 12%;\" data-name=\"store_name\">',\r",
                    "                   '        Store&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 10%;\" data-name=\"manager_lastname\">',\r",
                    "                   '        LastName&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 10%;\" data-name=\"manager_firstname\">',\r",
                    "                   '        FirstName&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 5%;\" data-name=\"store_products_datalink\">',\r",
                    "                   '        Data&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 5%;\" data-name=\"store_products_ecatalog\">',\r",
                    "                   '        eCat&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 5%;\" data-name=\"store_products_smart_cart\">',\r",
                    "                   '        Cart&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 5%;\" data-name=\"store_products_rm_plc\">',\r",
                    "                   '        RMPro&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 10%;\" data-name=\"status\">',\r",
                    "                   '        Status&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 10%;\" data-name=\"overDue\">',\r",
                    "                   '        Overdue&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 10%;\" data-name=\"owed\">',\r",
                    "                   '        Owed&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 8%;\" data-name=\"store_monthly_subscription\">',\r",
                    "                   '        Monthly&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "    headers.refresh();\r",
                    "    var list = component.down('#billingList');\r",
                    "\r",
                    "    list.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\">',\r",
                    "                   '    <div style=\"width: 10%;\" class=\"pointerCursor\" >{order_no}{[this.setImageExclamationMark(values.status)]}</div>',\r",
                    "                   '    <div style=\"width: 12%;\" class=\"pointerCursor\" {[RMdatalink.util.globalConfig.getListAttrForDelHandling()]} = \"{[RMdatalink.util.globalConfig.getStore_nameDelegateClassForTap()]}\" >{store_name}</div>',\r",
                    "                   '    <div style=\"width: 10%;\" class=\"pointerCursor\" {[RMdatalink.util.globalConfig.getListAttrForDelHandling()]} = \"{[RMdatalink.util.globalConfig.getManager_LastNameDelegateClassForTap()]}\" >{manager_lastname}</div>',\r",
                    "                   '    <div style=\"width: 10%;\" class=\"pointerCursor\" {[RMdatalink.util.globalConfig.getListAttrForDelHandling()]} = \"{[RMdatalink.util.globalConfig.getManager_LastNameDelegateClassForTap()]}\">{manager_firstname}</div>',\r",
                    "                   '    <div style=\"width: 5%;\" class=\"checkRound\">',\r",
                    "                   '        <div style=\"width: 9px; height:9px;background-color:{[this.getCheckBoxRound(values.store_products_datalink)]}\"></div>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 5%;\" class=\"checkRound\">',\r",
                    "                   '        <div style=\"width: 9px; height:9px;background-color:{[this.getCheckBoxRound(values.store_products_ecatalog)]}\"></div>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 5%;\" class=\"checkRound\">',\r",
                    "                   '        <div style=\"width: 9px; height:9px;background-color:{[this.getCheckBoxRound(values.store_products_smart_cart)]}\"></div>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 5%;\" class=\"checkRound\">',\r",
                    "                   '        <div style=\"width: 9px; height:9px;background-color:{[this.getCheckBoxRound(values.store_products_rm_plc)]}\"></div>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 10%;\" >{status}</div>',\r",
                    "                   '    <div style=\"width: 10%;\" >{overDue}</div>',\r",
                    "                   '    <div style=\"width: 10%;\" >${[this.setOwedMonthlyField(values.owed)]}</div>',\r",
                    "                   '    <div style=\"width: 8%;\">${[this.setOwedMonthlyField(values.store_monthly_subscription)]}</div>',\r",
                    "                   '</div>',\r",
                    "                   {\r",
                    "                       getCheckBoxRound: function(value){\r",
                    "                           if(value)\r",
                    "                               return '#2EC1DA';\r",
                    "                           else\r",
                    "                               return '#F3F3F4';\r",
                    "\r",
                    "                       }\r",
                    "\r",
                    "                   },\r",
                    "                   {\r",
                    "                       setImageExclamationMark: function(status){\r",
                    "                           if(status === 'Review')\r",
                    "                               return '<img src=\"resources/images/retailerDetail/exclamation_mark.PNG\" style=\"margin-left:10px;width: 5px;height: 17px;\"/>';\r",
                    "                           else\r",
                    "                               return '';\r",
                    "\r",
                    "                       }\r",
                    "\r",
                    "                   },\r",
                    "                   {\r",
                    "                       setOwedMonthlyField: function(value){\r",
                    "                           if(value === 0)\r",
                    "                               return \"0.00\";\r",
                    "                           else\r",
                    "                           {\r",
                    "                               var sumStr = \"\"+ value;\r",
                    "                               var sumStrSplit0 = sumStr.split('.')[0];\r",
                    "\r",
                    "                               var len = sumStrSplit0.length;\r",
                    "                               if(len > 3)\r",
                    "                               {\r",
                    "                                   sumStr1 = sumStrSplit0.substr(0,(len-3));\r",
                    "                                   sumStr2 = sumStrSplit0.substr((len-3),(len-1));\r",
                    "                                   sumStrSplit0 =  sumStr1 + ',' + sumStr2 ;\r",
                    "                               }\r",
                    "\r",
                    "                               if(sumStr.split('.')[1])\r",
                    "                               return sumStrSplit0 + '.' +sumStr.split('.')[1];\r",
                    "                               else\r",
                    "                               {\r",
                    "                                 return  sumStrSplit0;\r",
                    "                               }\r",
                    "                           }\r",
                    "\r",
                    "\r",
                    "                       }\r",
                    "\r",
                    "                   }\r",
                    "                  )\r",
                    "    );\r",
                    "}*/\r",
                    "// *********  FOR  PRICING TAB  ***********************\r",
                    "if (component.down(\"#pricingListHeader\"))\r",
                    "{\r",
                    "    /*\r",
                    "\r",
                    "    dataLinkTab\r",
                    "    ecataLogTab\r",
                    "    smartCartTab\r",
                    "    rmPLCTab\r",
                    "    iRugsTab\r",
                    "\r",
                    "    */\r",
                    "\r",
                    "    switch(component.getItemId()){\r",
                    "\r",
                    "        case \"dataLinkTab\":\r",
                    "        case \"ecataLogTab\":\r",
                    "        case \"smartCartTab\":\r",
                    "\r",
                    "    var headers = component.down(\"#pricingListHeader\");\r",
                    "    headers.setData([{}]);\r",
                    "\r",
                    "    headers.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 95%;\">',\r",
                    "\r",
                    "                   '    <div style=\"width: 20%;margin-left:10px;\" data-name=\"vendor_name\">',\r",
                    "                   '        Vendor&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 12%;\" data-name=\"collections\">',\r",
                    "                   '        Collection&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 14%;\" data-name=\"design\">',\r",
                    "                   '        Design&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 10%;\" data-name=\"sku\">',\r",
                    "                   '        SKU&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 15%;\" data-name=\"standard_price\">',\r",
                    "                   '        Standard Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 18%;\" data-name=\"promotional_price\">',\r",
                    "                   '        Promotional Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 18%;\" data-name=\"\">',\r",
                    "                   '        Value Calculator&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "\r",
                    "\r",
                    "\r",
                    "    headers.refresh();\r",
                    "    var list = component.down('#pricingList');\r",
                    "\r",
                    "   list.setStore('vendors.Master');\r",
                    "\r",
                    " //   list.setStore('vendorTempRecordStore');//'vendors.Master'\r",
                    "//      '    <div style=\"width: 10%;\" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(SKU)]}</div>',\r",
                    "\r",
                    "\r",
                    "    if(component.getItemId() == \"dataLinkTab\")\r",
                    "    {\r",
                    "     list.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "                   '    <div style=\"width: 20%;margin-left:10px;\" >{vendor_name}</div>',\r",
                    "                   '    <div style=\"width: 12%;\" >{collections}</div>',\r",
                    "                   '    <div style=\"width: 11%;\" >{design}</div>',\r",
                    "                 '    <div style=\"width: 10%;\" >{SKU}</div>',\r",
                    "                   '    <input type=\"text\" style=\"width: 15%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"standard\" value=\"{product_price.datalink.standard_price}\"  maxlength=\"8\"',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'vendorDetailRecords\\');\" onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <input type=\"text\" style=\"width: 18%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"promotional\" value=\"{product_price.datalink.promotional_price}\"  maxlength=\"8\" ',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'vendorDetailRecords\\');\" ',\r",
                    "                   ' onkeypress=\" return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <div style=\"width: 15%;\" >{[this.getCalculatedValue(values.SKU)]}</div>',\r",
                    "                   '</div>',\r",
                    "                    {\r",
                    "                       getCalculatedValue: function(sku){\r",
                    "                           if(sku)\r",
                    "                           {\r",
                    "                               var  result = (sku * 5)/60 ;\r",
                    "                               result =    Math.round(result * 100) / 100 ;\r",
                    "                               return result ;\r",
                    "                           }\r",
                    "\r",
                    "                               return 0 ;\r",
                    "\r",
                    "                       }\r",
                    "\r",
                    "                   }\r",
                    "\r",
                    "                  )\r",
                    "    );\r",
                    "\r",
                    "\r",
                    "    }else if(component.getItemId() == \"ecataLogTab\"){\r",
                    "\r",
                    "\r",
                    "           list.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "                   '    <div style=\"width: 20%;margin-left:10px;\" >{vendor_name}</div>',\r",
                    "                   '    <div style=\"width: 12%;\" >{collections}</div>',\r",
                    "                   '    <div style=\"width: 11%;\" >{design}</div>',\r",
                    "                 '    <div style=\"width: 10%;\" >{SKU}</div>',\r",
                    "                   '    <input type=\"text\" style=\"width: 15%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"standard\" value=\"{product_price.ecatalog.standard_price}\"  maxlength=\"8\"',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'vendorDetailRecords\\');\" onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <input type=\"text\" style=\"width: 18%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"promotional\" value=\"{product_price.ecatalog.promotional_price}\"  maxlength=\"8\" ',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'vendorDetailRecords\\');\" ',\r",
                    "                   ' onkeypress=\" return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <div style=\"width: 15%;\" >{[this.getCalculatedValue(values.SKU)]}</div>',\r",
                    "                   '</div>',\r",
                    "                    {\r",
                    "                       getCalculatedValue: function(sku){\r",
                    "                           if(sku)\r",
                    "                           {\r",
                    "                               var  result = (sku * 5)/60 ;\r",
                    "                               result =    Math.round(result * 100) / 100 ;\r",
                    "                               return result ;\r",
                    "                           }\r",
                    "\r",
                    "                               return 0 ;\r",
                    "\r",
                    "                       }\r",
                    "\r",
                    "                   }\r",
                    "\r",
                    "                  )\r",
                    "    );\r",
                    "\r",
                    "\r",
                    "    }else if(component.getItemId() == \"smartCartTab\"){\r",
                    "\r",
                    "\r",
                    "               list.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "                   '    <div style=\"width: 20%;margin-left:10px;\" >{vendor_name}</div>',\r",
                    "                   '    <div style=\"width: 12%;\" >{collections}</div>',\r",
                    "                   '    <div style=\"width: 11%;\" >{design}</div>',\r",
                    "                 '    <div style=\"width: 10%;\" >{SKU}</div>',\r",
                    "                   '    <input type=\"text\" style=\"width: 15%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"standard\" value=\"{product_price.ecommerce.standard_price}\"  maxlength=\"8\"',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'vendorDetailRecords\\');\" onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <input type=\"text\" style=\"width: 18%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"promotional\" value=\"{product_price.ecommerce.promotional_price}\"  maxlength=\"8\" ',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'vendorDetailRecords\\');\" ',\r",
                    "                   ' onkeypress=\" return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <div style=\"width: 15%;\" >{[this.getCalculatedValue(values.SKU)]}</div>',\r",
                    "                   '</div>',\r",
                    "                    {\r",
                    "                       getCalculatedValue: function(sku){\r",
                    "                           if(sku)\r",
                    "                           {\r",
                    "                               var  result = (sku * 5)/60 ;\r",
                    "                               result =    Math.round(result * 100) / 100 ;\r",
                    "                               return result ;\r",
                    "                           }\r",
                    "\r",
                    "                               return 0 ;\r",
                    "\r",
                    "                       }\r",
                    "\r",
                    "                   }\r",
                    "\r",
                    "                  )\r",
                    "    );\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    //  ****  FOR TOTAL LIST  ***********\r",
                    "\r",
                    "    var totalsList = component.down('#pricingTotalsList');\r",
                    "    totalsList.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "                   '    <div style=\"width: 8%;\">TOTALS</div>',\r",
                    "                   '    <div style=\"width: 15%;\">{vendor_count}&nbsp; Vendors</div>',\r",
                    "                   '    <div style=\"width: 12%;\">{collection_count}&nbsp; </div>',\r",
                    "                   '    <div style=\"width: 12%;\">{design_count}&nbsp; </div>',\r",
                    "                   '    <div style=\"width: 12%;\">{sku_count}&nbsp;</div>',\r",
                    "                    '    <div style=\"width: 16%;\">{total_std_price}&nbsp; </div>',\r",
                    "                    '    <div style=\"width: 16%;\">{total_promo_price}&nbsp; </div>',\r",
                    "                    '    <div style=\"width: 12%;\">{total_calculated_value}&nbsp; </div>',\r",
                    "                   '</div>'\r",
                    "                   \r",
                    "                  )\r",
                    "    );\r",
                    "\r",
                    "\r",
                    "            break;\r",
                    "        case \"rmPLCTab\":\r",
                    "\r",
                    "            component.down('#pricingListHeaderLabel').setHtml(\"RM-PRO Pricing\");\r",
                    "\r",
                    "  /*******************************************RM-PRO-PRICING*********************************************/\r",
                    "            var headers = component.down(\"#pricingListHeader\");\r",
                    "    headers.setData([{}]);\r",
                    "   /* headers.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 95%;\">',\r",
                    "\r",
                    "                   '    <div style=\"width: 20%;margin-left:10px;\" data-name=\"name\">',\r",
                    "                   '        Vendor&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 12%;\" data-name=\"collection\">',\r",
                    "                   '        Collection&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 14%;\" data-name=\"design\">',\r",
                    "                   '        Design&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 10%;\" data-name=\"sku\">',\r",
                    "                   '        SKU&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 15%;\" data-name=\"standard_price\">',\r",
                    "                   '        Standard Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 18%;\" data-name=\"promotional_price\">',\r",
                    "                   '        Promotional Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 18%;\" data-name=\"\">',\r",
                    "                   '        Calculated Value&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );*/\r",
                    "\r",
                    "    headers.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 95%;\">',\r",
                    "\r",
                    "                   '    <div style=\"width: 20%;margin-left:10px;\" data-name=\"module_name\">',\r",
                    "                   '        Product&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 30%;\" data-name=\"module_description\">',\r",
                    "                   '        Description&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "\r",
                    "                   '    <div style=\"width: 15%;\" data-name=\"module_standard_price\">',\r",
                    "                   '        Standard Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 18%;\" data-name=\"module_promotional_price\">',\r",
                    "                   '        Promotional Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "\r",
                    "\r",
                    "\r",
                    "    headers.refresh();\r",
                    "    var list = component.down('#pricingList');\r",
                    "    list.setStore('products.RMProStore');\r",
                    "//      '    <div style=\"width: 10%;\" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(SKU)]}</div>',\r",
                    "\r",
                    "     list.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "                   '    <div style=\"width: 20%;margin-left:10px;\" >{module_name}</div>',\r",
                    "                   '    <div style=\"width: 30%;\" >{module_description}</div>',\r",
                    "                   '    <input type=\"text\" style=\"width: 15%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"standard\" value=\"{module_standard_price}\"  maxlength=\"8\"',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'RMPRODetailRecords\\');\" onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <input type=\"text\" style=\"width: 18%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"promotional\" value=\"{module_promotional_price}\"  maxlength=\"8\" ',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'RMPRODetailRecords\\');\" ',\r",
                    "                   ' onkeypress=\" return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <div style=\"width: 15%;\" >{[this.getCalculatedValue(values.SKU)]}</div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "  /*  list.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "                   '    <div style=\"width: 20%;margin-left:10px;\" >{name}</div>',\r",
                    "                   '    <div style=\"width: 12%;\" >{collection}</div>',\r",
                    "                   '    <div style=\"width: 11%;\" >{design}</div>',\r",
                    "                   '    <div style=\"width: 10%;\" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(values.sku)]}</div>',\r",
                    "                   '    <input type=\"text\" style=\"width: 15%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"standard\" value=\"{standard_price}\"  maxlength=\"8\"',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'vendorDetailRecords\\');\" onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <input type=\"text\" style=\"width: 18%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" field=\"promotional\" value=\"{promotional_price}\"  maxlength=\"8\" ',\r",
                    "                   '        onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'vendorDetailRecords\\');\" ',\r",
                    "                   ' onkeypress=\" return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" />',\r",
                    "                   '    <div style=\"width: 15%;\" >{[this.getCalculatedValue(values.sku)]}</div>',\r",
                    "                   '</div>',\r",
                    "                    {\r",
                    "                       getCalculatedValue: function(sku){\r",
                    "                           if(sku)\r",
                    "                           {\r",
                    "                               var  result = (sku * 5)/60 ;\r",
                    "                               result =    Math.round(result * 100) / 100 ;\r",
                    "                               return result ;\r",
                    "                           }\r",
                    "\r",
                    "                               return 0 ;\r",
                    "\r",
                    "                       }\r",
                    "\r",
                    "                   }\r",
                    "\r",
                    "                  )\r",
                    "    );\r",
                    "*/\r",
                    "    //  ****  FOR TOTAL LIST  ***********\r",
                    "\r",
                    "//     var totalsList = component.down('#pricingTotalsList');\r",
                    "//     totalsList.setItemTpl(\r",
                    "//         Ext.create('Ext.XTemplate',\r",
                    "//                    '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "//                    '    <div style=\"width: 10%;\">TOTALS</div>',\r",
                    "//                    '    <div style=\"width: 12%;\">{name}&nbsp; Vendors</div>',\r",
                    "//                    '    <div style=\"width: 15%;\">{collection}&nbsp; Collections</div>',\r",
                    "//                    '    <div style=\"width: 15%;\">{design}&nbsp; Designs</div>',\r",
                    "//                    '    <div style=\"width: 15%;\">{sku}&nbsp; SKUs</div>',\r",
                    "//                    '</div>'\r",
                    "//                   )\r",
                    "//     );\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "            break;\r",
                    "        case \"iRugsTab\":\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "// *********  FOR  PRICING TAB SIDE CONTAINER  ***********************\r",
                    "\r",
                    "if(component.title === 'PRICING POLICY')\r",
                    "{\r",
                    "    // **********  FOR 1ST LIST  ***************\r",
                    "\r",
                    "    /*\r",
                    "        pricingPolicy1stList\r",
                    "        pricingPolicy2ndList\r",
                    "*/\r",
                    "    var headers =  Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down(\"#headerList\"); //   //(this is bad coding thats why i removed it (From Yury))component.innerItems[0].innerItems[0];\r",
                    "    headers.setData([{}]);\r",
                    "    headers.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 98%;\">',\r",
                    "                   '    <div style=\"width: 22%;margin-left:10px;\" data-name=\"from_sku\">',\r",
                    "                   '        FROM SKU&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 22%;\" data-name=\"to_sku\">',\r",
                    "                   '        TO SKU&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 27%;\" data-name=\"standard\">',\r",
                    "                   '        STANDARD&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 27%;\" data-name=\"promotional\">',\r",
                    "                   '        PROMOTIONAL&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "    headers.refresh();\r",
                    "    // ** MAIN LIST ****\r",
                    "    var list =   Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down(\"#mainList\");//component.innerItems[0].innerItems[1];\r",
                    "    list.setStore(Ext.getStore(\"pricing.datalink_pricing\"));\r",
                    "\r",
                    "    list.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "                   '    <div style=\"width: 22%;margin-left:10px;\" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(values.from_sku)]}</div>',\r",
                    "                   '    <div style=\"width: 22%;\" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(values.to_sku)]}</div>',\r",
                    "                   '    <input type=\"text\" style=\"width: 27%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" value=\"{standard}\" field=\"standardPricingPolicy\" maxlength=\"8\"',\r",
                    "                   '     onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" ',\r",
                    "                   '      onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'productDetailRecords\\');\" />',\r",
                    "                   '    <input type=\"text\" style=\"width: 27%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" value=\"{promotional}\" field=\"promotionalPricingPolicy\" maxlength=\"8\"',\r",
                    "                   '      onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" ',\r",
                    "                   '      onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'productDetailRecords\\');\" />',\r",
                    "                   '</div>'\r",
                    "\r",
                    "                  )\r",
                    "    );\r",
                    "\r",
                    "    // **********  FOR 2nd LIST  ***************\r",
                    "    var headers1 =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down(\"#headerList\"); //component.innerItems[1].innerItems[0];\r",
                    "    headers1.setData([{}]);\r",
                    "    headers1.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 98%;\">',\r",
                    "                   '    <div style=\"width: 35%;margin-left:10px;\" data-name=\"of_vendors\">',\r",
                    "                   '        #OF VENDORS&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 35%;\" data-name=\"discount_level\">',\r",
                    "                   '       DISCOUNT LEVEL&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "    headers1.refresh();\r",
                    "    // ** MAIN LIST ****\r",
                    "    var list1 =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down(\"#mainList\"); //component.innerItems[1].innerItems[1];\r",
                    "    list1.setStore(Ext.getStore(\"pricing.datalink_discount\"));\r",
                    "\r",
                    "    list1.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "\r",
                    "                   '    <input type=\"text\" style=\"width: 35%;margin-left:10px;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" value=\"{of_vendors}\" field=\"vendorsPricingPolicy\" maxlength=\"4\"',\r",
                    "                   '         onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" ',\r",
                    "                   '      onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'productDetailRecords\\');\" />',\r",
                    "                   '    <input type=\"text\" style=\"width: 10%;padding-left:7px;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" value=\"{discount_level}\" field=\"discountPricingPolicy\" maxlength=\"4\"',\r",
                    "                   '        onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" ',\r",
                    "                   '      onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'productDetailRecords\\');\"  />',\r",
                    "                   '    <div style=\"margin-top: 2px;\">%</div>',\r",
                    "                   '</div>'\r",
                    "\r",
                    "                  )\r",
                    "    );\r",
                    "}\r",
                    "else if(component.title === 'FUNCTIONALITY')\r",
                    "{\r",
                    "\r",
                    "    var headers =   Ext.ComponentQuery.query('#fuctionalityList')[0].down(\"#headerList\"); //component.innerItems[0].innerItems[0];\r",
                    "    headers.setData([{}]);\r",
                    "    headers.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 98%;\">',\r",
                    "                   '    <div style=\"width: 35%;margin-left:10px;\" data-name=\"pricing_function\">',\r",
                    "                   '        Function&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\"width: 30%;\" data-name=\"standard_price\">',\r",
                    "                   '        Standard Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style=\" width: 35%;\" data-name=\"promotional_price\">',\r",
                    "                   '        Promotional Price&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "    /*        '    <div style=\"width: 35%;margin-left:10px;\" >{pricing_function}</div>',\r",
                    "\r",
                    "                   */\r",
                    "    headers.refresh();\r",
                    "    // ** MAIN LIST ****\r",
                    "    var list5 = Ext.ComponentQuery.query('#functionalityTab')[0].down(\"#mainList\"); // component.innerItems[0].innerItems[1];\r",
                    "    list5.setStore('pricing.datalink_functionality');\r",
                    "    list5.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-listtpl-main\" style=\"width: 100%;\">',\r",
                    "\r",
                    "                   '    <input type=\"text\" style=\"width: 35%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" value=\"{pricing_function}\" field=\"pricing_function\" maxlength=\"30\"',\r",
                    "\r",
                    "                   '      onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'productDetailRecords\\');\" />',\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "                   '    <input type=\"text\" style=\"width: 30%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" value=\"{standard_price}\" field=\"standardFunctionality\" maxlength=\"8\"',\r",
                    "                   '     onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\"',\r",
                    "                   '      onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'productDetailRecords\\');\" />',\r",
                    "\r",
                    "                   '    <input type=\"text\" style=\"width: 30%;\"  class=\"x-rm-pricing-input-field\" data-id=\"{id}\" value=\"{promotional_price}\" field=\"promotionalFunctionality\" maxlength=\"8\"',\r",
                    "                   '     onkeypress=\"return RMdatalink.app.getController(\\'BillingDetailsController\\').isNumberKey(event,this);\" ',\r",
                    "                   '      onchange=\"RMdatalink.app.getController(\\'BillingDetailsController\\').savePricingEditableFieldsData(this,\\'productDetailRecords\\');\" />',\r",
                    "\r",
                    "                   '</div>'\r",
                    "\r",
                    "                  )\r",
                    "    );\r",
                    "}\r",
                    "    else if(component.title === 'PERMISSION')\r",
                    "    {\r",
                    "\r",
                    "\r",
                    "        var headers =  component.innerItems[0].innerItems[0];\r",
                    "        headers.setData([{}]);\r",
                    "        headers.setItemTpl(\r",
                    "            Ext.create('Ext.XTemplate',\r",
                    "                       '<div class=\"x-rm-listtpl-main\" style=\"width: 90%;\">',\r",
                    "                       '    <div style=\"width: 30%;margin-left:10px;\" data-name=\"name\">',\r",
                    "                       '        Name&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                       '    </div>',\r",
                    "                       '    <div style=\"width: 30%;\" data-name=\"design\">',\r",
                    "                       '        Design&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                       '    </div>',\r",
                    "                       '    <div style=\" width: 30%;\" data-name=\"sku\">',\r",
                    "                       '        SKU&nbsp;<img src=\"resources/images/button_icons/downArrow.png\"/>',\r",
                    "                       '    </div>',\r",
                    "                       '</div>'\r",
                    "                      )\r",
                    "        );\r",
                    "        headers.refresh();\r",
                    "        // ** MAIN LIST ****\r",
                    "        var list =  component.innerItems[0].innerItems[1];\r",
                    "\r",
                    "        list.setItemHeight(22);\r",
                    "\r",
                    "        list.setMode('MULTI');\r",
                    "        list.addCls('x-rm-rdvendorslist');\r",
                    "        list.addCls('x-rm-rdvendorsPermissionlist');\r",
                    "        var  vendorDetailsRecodsStore = Ext.getStore(\"vendorDetailsRecodsStore\");\r",
                    "        list.setStore(vendorDetailsRecodsStore);\r",
                    "\r",
                    "\r",
                    "\r",
                    "        var listTpl = Ext.create('Ext.XTemplate',\r",
                    "                                 '<div class=\"x-rm-listtpl-main pointerCursor\" style=\"width: 90%;\">',\r",
                    "                                 '    <div style=\"width: 30%;margin-left:10px;\">{name}</div>',\r",
                    "                                 '    <div style=\"width: 30%;\">{design}</div>',\r",
                    "                                 '    <div style=\"width: 30%;\">{[RMdatalink.util.globalMethods.SetCommaForNumericField(values.sku)]}</div>',\r",
                    "                                 '    <div style=\"width: 10%;\">',\r",
                    "                                 '        <div style=\"width: 22px; height:17px;\"></div>',\r",
                    "                                 '    </div>',\r",
                    "                                 '</div>'\r",
                    "                                );\r",
                    "\r",
                    "        list.setItemTpl(listTpl);\r",
                    "    }\r",
                    "\r",
                    ""
                ],
                "name": "initialize"
            },
            "designerId": "94fe50df-895e-447a-a80c-ab3445387c0b"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "tabpanel[action=onActiveItemChanged]",
                "designer|targetType": "Ext.tab.Panel",
                "fn": "onPricingTabpanelActiveItemChange",
                "implHandler": [
                    "if(container._itemId === 'pricingDetailsMainTabPanel')\r",
                    "{\r",
                    "    var totalsList = null ;\r",
                    "    var list = null ;\r",
                    "\r",
                    "    switch(value.title) {\r",
                    "\r",
                    "        case 'DATALINK':\r",
                    "\r",
                    "            list = Ext.ComponentQuery.query(\"#dataLinkListItemID\")[0].down('#pricingList');\r",
                    "            totalsList = Ext.ComponentQuery.query(\"#dataLinkListItemID\")[0].down('#pricingTotalsList');\r",
                    "\r",
                    "            this.setDataForPricingSideContainer(1);\r",
                    "            this.setDataForPricingList(list,0,1,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'ECATALOG':\r",
                    "            list = (Ext.ComponentQuery.query(\"#eCatalogListItemID\")[0].down('#pricingList'));\r",
                    "            totalsList = Ext.ComponentQuery.query(\"#eCatalogListItemID\")[0].down('#pricingTotalsList');\r",
                    "            this.setDataForPricingSideContainer(2);\r",
                    "            this.setDataForPricingList(list,1,2,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'E-COMMERCE':\r",
                    "            list = (Ext.ComponentQuery.query(\"#smartCartListItemID\")[0].down('#pricingList'));\r",
                    "            totalsList = Ext.ComponentQuery.query(\"#smartCartListItemID\")[0].down('#pricingTotalsList');\r",
                    "            this.setDataForPricingSideContainer(3);\r",
                    "            this.setDataForPricingList(list,2,3,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'RM PRO':\r",
                    "            list = (Ext.ComponentQuery.query(\"#rmPLCListItemID\")[0].down('#pricingList'));\r",
                    "            totalsList = Ext.ComponentQuery.query(\"#rmPLCListItemID\")[0].down('#pricingTotalsList');\r",
                    "            this.setDataForPricingSideContainer(4);\r",
                    "            this.setDataForPricingList(list,3,4,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'IRUGZ':\r",
                    "            list = (Ext.ComponentQuery.query(\"#iRugzListItemID\")[0].down('#pricingList'));\r",
                    "            totalsList = Ext.ComponentQuery.query(\"#iRugzListItemID\")[0].down('#pricingTotalsList');\r",
                    "            this.setDataForPricingSideContainer(5);\r",
                    "            this.setDataForPricingList(list,4,5,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(container._itemId === 'discountsTabPanel')\r",
                    "{\r",
                    "\r",
                    "    RMdatalink.app.getController('discount.DiscountTabHandler').clearAddNewDiscountForm();\r",
                    "\r",
                    "\r",
                    "    switch(value.title) {\r",
                    "\r",
                    "        case 'DATALINK':\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'ECATALOG':\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'E-COMMERCE':\r",
                    "\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'RM PRO':\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'IRUGZ':\r",
                    "\r",
                    "\r",
                    "            break;\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "activeitemchange"
            },
            "designerId": "0ff30589-f5ea-47a4-acc8-14ba620e3a31"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "list",
                    "productIndexInStore",
                    "productID",
                    "totalsList"
                ],
                "fn": "setDataForPricingList",
                "implHandler": [
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "console.log(productIndexInStore) ;\r",
                    "var store = list.getStore() ;\r",
                    "\r",
                    "switch(productIndexInStore.toString()){\r",
                    "\r",
                    "     case \"4\":\r",
                    "\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "\r",
                    "    case \"3\":\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "        break;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "var productDetailsRecordsStore =  Ext.getStore(\"productDetailsRecordsStore\");\r",
                    "var  vendorDetailsRecodsStore = Ext.getStore(\"vendorDetailsRecodsStore\");\r",
                    "var listDiscount = null;\r",
                    "var listPermission = null;\r",
                    "var listData = [];\r",
                    "var listDataDiscount = [];\r",
                    "\r",
                    "\r",
                    "// ******  DESELECT ALL VENDORS IN PERMISSION LIST *******\r",
                    "listPermission = Ext.ComponentQuery.query(\"#permissionList\")[0].down('#mainList');\r",
                    "listPermission.deselectAll();\r",
                    "\r",
                    "\r",
                    "//  ***********   FILTER RECORD BY DATA LINK PRODUCT  **********\r",
                    "vendorDetailsRecodsStore.filterBy(function(record){\r",
                    "\r",
                    "    for(var i = 0 ; i < record.data.products.length ; i ++ )\r",
                    "    {\r",
                    "        if(record.data.products[i].id === productID)\r",
                    "        {\r",
                    "            return record;\r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "//   ************   SET  LIST DATA  ***********\r",
                    "listData = [];\r",
                    "var standard_priceValue = null;\r",
                    "var promotional_priceValue = null;\r",
                    "for(var i = 0; i<vendorDetailsRecodsStore.getCount();i++)\r",
                    "{\r",
                    "    var vendorRecord = vendorDetailsRecodsStore.getAt(i).data;\r",
                    "\r",
                    "    for(var j = 0; j < vendorRecord.products.length ; j++)\r",
                    "    {\r",
                    "        if(vendorRecord.products[j].id === productID)\r",
                    "        {\r",
                    "            standard_priceValue = vendorRecord.products[j].standard_price;\r",
                    "            promotional_priceValue = vendorRecord.products[j].promotional_price;\r",
                    "            listPermission.select(vendorDetailsRecodsStore.getAt(i) , true, true);\r",
                    "\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    var oneRowRecord =\r",
                    "        {\r",
                    "            \"id\" : vendorRecord.id,\r",
                    "            \"name\" : vendorRecord.name,\r",
                    "            \"collection\" : vendorRecord.collection,\r",
                    "            \"design\" : vendorRecord.design,\r",
                    "            \"sku\" : vendorRecord.sku,\r",
                    "            \"standard_price\" : standard_priceValue,\r",
                    "            \"promotional_price\" : promotional_priceValue\r",
                    "        };\r",
                    "\r",
                    "    listData.push(oneRowRecord);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "RMdatalink.util.globalMethods.fillListDataByListObject(list,listData);\r",
                    "list.refresh();\r",
                    "\r",
                    "//  ***  RSET STORE  ******\r",
                    "vendorDetailsRecodsStore.clearFilter();\r",
                    "Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].setActiveItem(0);\r",
                    "listData = [];\r",
                    "\r",
                    "//  ****  FOR TOTAL LIST  ***********\r",
                    "\r",
                    "var storeList = list.getStore();\r",
                    "var totalCollection = 0 , totalSku = 0 , totalDesign = 0;\r",
                    "\r",
                    "if(!storeList)\r",
                    "{\r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "storeList.each(function(record,id)\r",
                    "               {\r",
                    "\r",
                    "                   totalCollection += parseFloat(record.get('collection'));\r",
                    "                   totalSku += parseFloat(record.get('sku').replace(\",\",''));\r",
                    "                   totalDesign += parseFloat(record.get('design'));\r",
                    "               });\r",
                    "\r",
                    "var oneRowRecord =\r",
                    "    {\r",
                    "        \"name\" : storeList.getCount(),\r",
                    "        \"collection\" : RMdatalink.util.globalMethods.SetCommaForNumericField(totalCollection),\r",
                    "        \"design\" :  RMdatalink.util.globalMethods.SetCommaForNumericField(totalDesign),\r",
                    "        \"sku\" :RMdatalink.util.globalMethods.SetCommaForNumericField(totalSku)\r",
                    "    };\r",
                    "\r",
                    "listData.push(oneRowRecord);\r",
                    "\r",
                    "if(totalsList){\r",
                    "    RMdatalink.util.globalMethods.fillListDataByListObject(totalsList,listData);\r",
                    "    totalsList.refresh();\r",
                    "}\r",
                    "\r",
                    "*/"
                ]
            },
            "designerId": "99eba1a5-e5d3-4eaf-ae06-1135ef947487"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "evt",
                    "inputField"
                ],
                "fn": "isNumberKey",
                "implHandler": [
                    "\r",
                    "var value = inputField.value;\r",
                    "var charCode = (evt.which) ? evt.which : event.keyCode ;\r",
                    "console.log(value);\r",
                    "if((value.indexOf('.') !=-1 || value === '' )&& charCode == 46)\r",
                    "{\r",
                    "  return false;\r",
                    "}\r",
                    "if (charCode > 31 && (charCode != 46 &&(charCode < 48 || charCode > 57)))\r",
                    "{\r",
                    "   return false;\r",
                    "}\r",
                    "\r",
                    "return true;\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "e67c15a0-e759-4d2b-989c-e8c57cf7377b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "list"
                ],
                "fn": "savePricingEditableFieldsData",
                "implHandler": [
                    "if(this.config.doNotSaveStoreData){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "var productDetailsRecordsStore =  Ext.getStore(\"productDetailsRecordsStore\");\r",
                    "var  vendorDetailsRecodsStore = Ext.getStore(\"vendorDetailsRecodsStore\");\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "var pricingPolicyStore =     Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down(\"#mainList\").getStore() ;        //Ext.getStore(\"pricing.datalink_pricing\");\r",
                    "var pricingDiscountPolicyStore =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down(\"#mainList\").getStore(); //Ext.getStore(\"pricing.datalink_discount\");\r",
                    "var pricingFunctionalityStore = Ext.ComponentQuery.query('#functionalityTab')[0].down(\"#mainList\").getStore() ;//Ext.getStore(\"pricingFunctionalityStore\");\r",
                    "\r",
                    "\r",
                    "\r",
                    "var id = field.getAttribute('data-id') ;\r",
                    "var fieldName = field.getAttribute('field') ;\r",
                    "var price = field.value ;\r",
                    "\r",
                    "// console.log(\"***** id .\" , id , \" fieldName \" ,fieldName , \" price \" ,price);\r",
                    "\r",
                    "var activeItem = Ext.ComponentQuery.query(\"#pricingDetailsMainTabPanel\")[0].getActiveItem();\r",
                    "var productID = -1;\r",
                    "\r",
                    "switch(activeItem.title) {\r",
                    "\r",
                    "    case 'DATALINK':\r",
                    "        productID = 1;\r",
                    "        break;\r",
                    "\r",
                    "    case 'ECATALOG':\r",
                    "        productID = 2;\r",
                    "        break;\r",
                    "\r",
                    "    case 'E-COMMERCE':\r",
                    "        productID = 3;\r",
                    "        break;\r",
                    "\r",
                    "    case 'RM PRO':\r",
                    "        productID = 4;\r",
                    "        break;\r",
                    "\r",
                    "    case 'IRUGZ':\r",
                    "        productID = 5;\r",
                    "        break;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "switch(list){\r",
                    "\r",
                    "    case \"RMPRODetailRecords\":\r",
                    "        var rmProStore = Ext.getStore('products.RMProStore') ;\r",
                    "\r",
                    "        var recordIndex = rmProStore.findExact('id',id);\r",
                    "        var record = rmProStore.getAt(recordIndex);\r",
                    "\r",
                    "\r",
                    "                switch(fieldName) {\r",
                    "\r",
                    "                    case 'standard':\r",
                    "                        record.set('module_standard_price',price );\r",
                    "                        break;\r",
                    "\r",
                    "                    case 'promotional':\r",
                    "                        record.set('module_promotional_price',price );\r",
                    "                        break;\r",
                    "                }\r",
                    "\r",
                    "\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "    case \"vendorDetailRecords\":\r",
                    "\r",
                    "        return ;\r",
                    "        id = parseInt(id);\r",
                    "        var recordIndex = vendorDetailsRecodsStore.findExact('id',id);\r",
                    "        var record = vendorDetailsRecodsStore.getAt(recordIndex);\r",
                    "        var productsArray = record.data.products ;\r",
                    "\r",
                    "        for(var j = 0; j < productsArray.length ; j++)\r",
                    "        {\r",
                    "            if(productsArray[j].id === productID)\r",
                    "            {\r",
                    "                switch(fieldName) {\r",
                    "\r",
                    "                    case 'standard':\r",
                    "                        productsArray[j].standard_price = price;\r",
                    "                        break;\r",
                    "\r",
                    "                    case 'promotional':\r",
                    "                        productsArray[j].promotional_price = price;\r",
                    "                        break;\r",
                    "                }\r",
                    "            }\r",
                    "        }\r",
                    "\r",
                    "        record.set('products',productsArray);\r",
                    "        vendorDetailsRecodsStore.sync();\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "    case \"productDetailRecords\":\r",
                    "\r",
                    "        //var record = productDetailsRecordsStore.getById(productID);\r",
                    "        var rowRecord = null;\r",
                    "        switch(fieldName) {\r",
                    "\r",
                    "            case 'standardPricingPolicy':\r",
                    "            case 'promotionalPricingPolicy':\r",
                    "                rowRecord = pricingPolicyStore.getById(id);\r",
                    "                if(fieldName === 'standardPricingPolicy')\r",
                    "                {\r",
                    "                    rowRecord.set(\"standard\", price);\r",
                    "                    //rowRecord.standard = price ;\r",
                    "                }\r",
                    "                else\r",
                    "                {\r",
                    "                    rowRecord.set(\"promotional\", price);\r",
                    "                    //rowRecord.promotional = price ;\r",
                    "                }\r",
                    "                var pricingPolicyArray = [] ;\r",
                    "                for(var j = 0; j < pricingPolicyStore.getCount() ; j++)\r",
                    "                {\r",
                    "                    pricingPolicyArray.push(pricingPolicyStore.getAt(j).data);\r",
                    "                }\r",
                    "\r",
                    "                this.updaePricingData(pricingPolicyStore.getStoreId()) ;\r",
                    "             //   record.set('pricing_policy_sku_range',pricingPolicyArray);\r",
                    "\r",
                    "                break;\r",
                    "\r",
                    "            case 'standardFunctionality':\r",
                    "            case 'promotionalFunctionality':\r",
                    "            case 'pricing_function':\r",
                    "                rowRecord = pricingFunctionalityStore.getById(id);\r",
                    "               if(fieldName === 'standardFunctionality')\r",
                    "                {\r",
                    "                    rowRecord.set(\"standard_price\", price);\r",
                    "                    //rowRecord.standard = price ;\r",
                    "                }\r",
                    "                else if(fieldName == 'pricing_function'){\r",
                    "\r",
                    "                     rowRecord.set(\"pricing_function\", price);\r",
                    "\r",
                    "                    }\r",
                    "                else\r",
                    "                {\r",
                    "                    rowRecord.set(\"promotional_price\", price);\r",
                    "                    //rowRecord.promotional = price ;\r",
                    "                }\r",
                    "\r",
                    "              /*  var functionalityArray = [] ;\r",
                    "                for(var j = 0; j < pricingFunctionalityStore.getCount() ; j++)\r",
                    "                {\r",
                    "                    functionalityArray.push(pricingFunctionalityStore.getAt(j).data);\r",
                    "                }\r",
                    "             */\r",
                    "                  this.updaePricingData(pricingFunctionalityStore.getStoreId()) ;\r",
                    "              //  record.set('functionality',functionalityArray);\r",
                    "                break;\r",
                    "\r",
                    "            case 'vendorsPricingPolicy':\r",
                    "            case 'discountPricingPolicy':\r",
                    "                 rowRecord = pricingDiscountPolicyStore.getById(id);\r",
                    "                if(fieldName === 'vendorsPricingPolicy')\r",
                    "                {\r",
                    "                    rowRecord.set(\"of_vendors\", price);\r",
                    "                    //rowRecord.standard = price ;\r",
                    "                }\r",
                    "                else\r",
                    "                {\r",
                    "                    rowRecord.set(\"discount_level\", price);\r",
                    "                    //rowRecord.promotional = price ;\r",
                    "                }\r",
                    "                var pricingDiscountArray = [] ;\r",
                    "                for(var j = 0; j < pricingDiscountPolicyStore.getCount() ; j++)\r",
                    "                {\r",
                    "                    pricingDiscountArray.push(pricingDiscountPolicyStore.getAt(j).data);\r",
                    "                }\r",
                    "\r",
                    "                   this.updaePricingData(pricingDiscountPolicyStore.getStoreId()) ;\r",
                    "             //   record.set('pricing_policy_discounts_levels',pricingDiscountArray);\r",
                    "                break;\r",
                    "        }\r",
                    "\r",
                    "        break;\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "3b0d6274-2cef-40e2-94a2-557b438712cd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "id"
                ],
                "fn": "setDataForPricingSideContainer",
                "implHandler": [
                    "\r",
                    " Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].setHidden(false);\r",
                    "\r",
                    " Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(1).setHidden(false);\r",
                    " Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(2).setHidden(false);\r",
                    "\r",
                    "\r",
                    "console.log(id) ;\r",
                    "\r",
                    "var pricingPolicyList =     Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down(\"#mainList\");\r",
                    "var pricingDiscountPolicyList =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down(\"#mainList\");\r",
                    "var pricingFunctionalityList = Ext.ComponentQuery.query('#functionalityTab')[0].down(\"#mainList\");\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "\r",
                    "pricing.smart_cart_pricing\r",
                    "pricing.smart_cart_discount\r",
                    "pricing.smart_cart_functionality\r",
                    "\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "var pricingSelectFld = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0];\r",
                    "var discountSelectFld = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0];\r",
                    "\r",
                    "\r",
                    "this.config.doNotSaveStoreData = true ;\r",
                    "var oldValue = null;\r",
                    "var newValue = null;\r",
                    "\r",
                    "switch(id){\r",
                    "\r",
                    "    case 1:\r",
                    "\r",
                    "\r",
                    "        pricingPolicyList.setStore('pricing.datalink_pricing') ;\r",
                    "        pricingDiscountPolicyList.setStore('pricing.datalink_discount');\r",
                    "        pricingFunctionalityList.setStore('pricing.datalink_functionality') ;\r",
                    "\r",
                    "        if( this.config.pricingData ){\r",
                    "\r",
                    "            pricingSelectFld.setValue(this.config.pricingData[0].active_pricing_policy);\r",
                    "            discountSelectFld.setValue(this.config.pricingData[0].active_discount_policy);\r",
                    "\r",
                    "\r",
                    "            this.loadPricingPolicy(this.config.pricingData[0].active_pricing_policy,null);\r",
                    "            this.loadDiscountPolicy(this.config.pricingData[0].active_discount_policy,null);\r",
                    "            this.LoadFunctionalityStore(0);\r",
                    "\r",
                    "        }\r",
                    "         Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(1).setHidden(true);\r",
                    "        Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(2).setHidden(true);\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "    case 2:\r",
                    "\r",
                    "        pricingPolicyList.setStore('pricing.ecatalog_pricing') ;\r",
                    "        pricingDiscountPolicyList.setStore('pricing.ecatlog_discount');\r",
                    "        pricingFunctionalityList.setStore('pricing.ecatalog_functionality') ;\r",
                    "\r",
                    "         if( this.config.pricingData ){\r",
                    "\r",
                    "            pricingSelectFld.setValue(this.config.pricingData[1].active_pricing_policy);\r",
                    "            discountSelectFld.setValue(this.config.pricingData[1].active_discount_policy);\r",
                    "\r",
                    "\r",
                    "            this.loadPricingPolicy(this.config.pricingData[1].active_pricing_policy,null);\r",
                    "            this.loadDiscountPolicy(this.config.pricingData[1].active_discount_policy,null);\r",
                    "           this.LoadFunctionalityStore(1);\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "    case 3:\r",
                    "\r",
                    "        if(!this.config.pricingData[2]){\r",
                    "            break ;\r",
                    "        }\r",
                    "        pricingPolicyList.setStore('pricing.smart_cart_pricing') ;\r",
                    "        pricingDiscountPolicyList.setStore('pricing.smart_cart_discount');\r",
                    "        pricingFunctionalityList.setStore('pricing.smart_cart_functionality') ;\r",
                    "\r",
                    "         if( this.config.pricingData ){\r",
                    "\r",
                    "\r",
                    "            pricingSelectFld.setValue(this.config.pricingData[2].active_pricing_policy);\r",
                    "\r",
                    "             discountSelectFld.setValue(this.config.pricingData[2].active_discount_policy);\r",
                    "\r",
                    "            this.loadPricingPolicy(this.config.pricingData[2].active_pricing_policy,null);\r",
                    "            this.loadDiscountPolicy(this.config.pricingData[2].active_discount_policy,null);\r",
                    "           this.LoadFunctionalityStore(2);\r",
                    "\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "        break;\r",
                    "    case 4:\r",
                    "\r",
                    "        Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].setActiveItem(0);\r",
                    "        Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(1).setHidden(true);\r",
                    "        Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(2).setHidden(true);\r",
                    "\r",
                    "          Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].setHidden(true);\r",
                    "\r",
                    "     //   pricingPolicyList.setStore('pricing.RM_proPricing') ;\r",
                    "     //   pricingDiscountPolicyList.setStore('pricing.RM_proDiscount');\r",
                    "     //   pricingFunctionalityList.setStore(null) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "    default:\r",
                    "         pricingPolicyList.setStore(null) ;\r",
                    "        pricingDiscountPolicyList.setStore(null);\r",
                    "        pricingFunctionalityList.setStore(null) ;\r",
                    "\r",
                    "        break ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "this.config.doNotSaveStoreData = false ;\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "var pricingPolicyStore =  Ext.getStore(\"pricingPolicyStore\");\r",
                    "var pricingDiscountPolicyStore = Ext.getStore(\"pricingDiscountPolicyStore\");\r",
                    "var pricingFunctionalityStore = Ext.getStore(\"pricingFunctionalityStore\");\r",
                    "var productDetailsRecordsStore =  Ext.getStore(\"productDetailsRecordsStore\");\r",
                    "\r",
                    "var storeData = productDetailsRecordsStore.getById(id);\r",
                    "\r",
                    "\r",
                    "pricingPolicyStore.removeAll();\r",
                    "pricingPolicyStore.sync();\r",
                    "\r",
                    "\r",
                    "pricingFunctionalityStore.removeAll();\r",
                    "pricingFunctionalityStore.sync();\r",
                    "\r",
                    "pricingDiscountPolicyStore.removeAll();\r",
                    "pricingDiscountPolicyStore.sync();\r",
                    "\r",
                    "if(storeData)\r",
                    "{\r",
                    "pricingPolicyStore.setData(storeData.data.pricing_policy_sku_range);\r",
                    "pricingPolicyStore.sync();\r",
                    "\r",
                    "pricingFunctionalityStore.setData(storeData.data.functionality);\r",
                    "pricingFunctionalityStore.sync();\r",
                    "\r",
                    "pricingDiscountPolicyStore.setData(storeData.data.pricing_policy_discounts_levels);\r",
                    "pricingDiscountPolicyStore.sync();\r",
                    "}\r",
                    "\r",
                    "*/"
                ]
            },
            "designerId": "7f4e031d-1215-458d-8d9a-7dd731fe37b3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "pricingSavedButtonFunctionality",
                "implHandler": [
                    "console.log(\"PRICING SAVE BUTTON TAP\");\r",
                    "\r",
                    "if(Ext.ComponentQuery.query('#pricingDetailsMainTabPanel')[0].getActiveItem().getItemId() == \"rmPLCTab\"){\r",
                    "\r",
                    "    this.updateRMProPricing() ;\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var pricingMainStore = Ext.getStore('pricing.MainStore') ;\r",
                    "\r",
                    "var datalinkRecord = pricingMainStore.getAt(this.config.pricingData[0].searchIndex);\r",
                    "var ecatlogRecord = pricingMainStore.getAt(this.config.pricingData[1].searchIndex);\r",
                    "var smarCartRecord =  pricingMainStore.getAt(this.config.pricingData[2].searchIndex);\r",
                    "\r",
                    "\r",
                    "            datalinkRecord.set(this.config.pricingData[0] );\r",
                    "            datalinkRecord.dirty= true;\r",
                    "             pricingMainStore.sync() ;\r",
                    "\r",
                    "            ecatlogRecord.set(this.config.pricingData[1] );\r",
                    "            ecatlogRecord.dirty= true;\r",
                    "             pricingMainStore.sync() ;\r",
                    "            smarCartRecord.set(this.config.pricingData[2] );\r",
                    "            smarCartRecord.dirty= true;\r",
                    "\r",
                    "             pricingMainStore.sync() ;\r",
                    "\r",
                    "this.updateVendorsForPricing();\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "var  vendorDetailsRecodsStore = Ext.getStore(\"vendorDetailsRecodsStore\");\r",
                    "var listPermission = Ext.ComponentQuery.query(\"#permissionList\")[0].down('#mainList');\r",
                    "var selectedItems = listPermission.selected.items;\r",
                    "\r",
                    "var idArray = [];\r",
                    "\r",
                    "var activeItem = Ext.ComponentQuery.query(\"#pricingDetailsMainTabPanel\")[0].getActiveItem();\r",
                    "var pricingList = activeItem.down('#pricingList');\r",
                    "var pricingTotalsList = activeItem.down('#pricingTotalsList');\r",
                    "\r",
                    "var productID = -1;\r",
                    "\r",
                    "switch(activeItem.title) {\r",
                    "\r",
                    "    case 'DATALINK':\r",
                    "        productID = 1;\r",
                    "        break;\r",
                    "\r",
                    "    case 'ECATALOG':\r",
                    "        productID = 2;\r",
                    "        break;\r",
                    "\r",
                    "    case 'SMART CART':\r",
                    "        productID = 3;\r",
                    "        break;\r",
                    "\r",
                    "    case 'RM PLC':\r",
                    "        productID = 4;\r",
                    "        break;\r",
                    "\r",
                    "    case 'IRUGZ':\r",
                    "        productID = 5;\r",
                    "        break;\r",
                    "}\r",
                    "\r",
                    "//console.log(\"productID \" ,productID);\r",
                    "\r",
                    "\r",
                    "\r",
                    "for(var j = 0 ; j<selectedItems.length; j++ )\r",
                    "{\r",
                    "\r",
                    "       idArray.push(selectedItems[j].data.id);\r",
                    "      // console.log(selectedItems[j].data.id);\r",
                    "}\r",
                    "\r",
                    "for(var j = 0 ; j<vendorDetailsRecodsStore.getCount(); j++ )\r",
                    "{\r",
                    "    var vendorRecord = vendorDetailsRecodsStore.getAt(j);\r",
                    "    var idToSearch = vendorRecord.data.id;\r",
                    "    var isSelected = false;\r",
                    "    var haveToAdd = true;\r",
                    "    var haveToDelete = false;\r",
                    "    var productArray = vendorDetailsRecodsStore.getAt(j).data.products;\r",
                    "    //console.log(idToSearch);\r",
                    "    // console.log(productArray);\r",
                    "\r",
                    "    // FIRST CHECK THIS ID IS SELECTED OR NOT\r",
                    "    for(var k = 0 ; k < idArray.length; k++ )\r",
                    "    {\r",
                    "        if(idArray[k] === idToSearch )\r",
                    "        {\r",
                    "            isSelected = true;\r",
                    "            break;\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "     // ***********  NOW CHECK ALREADY PRSENT IN STORE ??? ***********\r",
                    "    if(isSelected)\r",
                    "    {\r",
                    "        for(var i = 0 ; i < productArray.length; i++ )\r",
                    "        {\r",
                    "            //console.log(\"productArray[i].id  \", productArray[i].id);\r",
                    "            //console.log(\"idToSearch  \", idToSearch);\r",
                    "            if(productArray[i].id === productID)\r",
                    "            {\r",
                    "                haveToAdd = false;\r",
                    "                break;\r",
                    "            }\r",
                    "        }\r",
                    "\r",
                    "        //  ********** ADD PRODUCT FOR THIS VENDOR  ************\r",
                    "        if(haveToAdd)\r",
                    "        {\r",
                    "\r",
                    "            //console.log(\"True haveToAdd  \", idToSearch);\r",
                    "\r",
                    "            var oneRowRecord =\r",
                    "                {\r",
                    "                    \"id\" : productID,\r",
                    "                    \"standard_price\" : \"0.00\",\r",
                    "                    \"promotional_price\" : \"0.00\"\r",
                    "\r",
                    "                };\r",
                    "\r",
                    "            productArray.push(oneRowRecord);\r",
                    "            vendorRecord.set(\"products\" , productArray);\r",
                    "            //console.log(\"vendorRecord  \", vendorRecord);\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "    // *********  NOT SELECTED  ************\r",
                    "    else\r",
                    "    {\r",
                    "       var i = 0;\r",
                    "       for(i = 0 ; i < productArray.length; i++ )\r",
                    "        {\r",
                    "            if(productArray[i].id === productID)\r",
                    "            {\r",
                    "                haveToDelete = true;\r",
                    "                break;\r",
                    "            }\r",
                    "        }\r",
                    "\r",
                    "        // ********** ADD PRODUCT FOR THIS VENDOR *********\r",
                    "        if(haveToDelete)\r",
                    "        {\r",
                    "            //console.log(\"True haveToDelete  \", idToSearch);\r",
                    "            productArray.splice(i , 1);\r",
                    "            vendorRecord.set(\"products\" , productArray);\r",
                    "            //console.log(\"vendorRecord  \", vendorRecord);\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "this.setDataForPricingList(pricingList,(productID-1),productID,pricingTotalsList);\r",
                    "pricingList.refresh();\r",
                    "\r",
                    "Ext.Msg.alert('Success.', 'Record Updated Successfuly.', Ext.emptyFn);\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "//Ext.Msg.alert('Success.', 'Record Updated Successfuly.', Ext.emptyFn);"
                ]
            },
            "designerId": "33d00a58-8b98-4e48-86cf-6399f3b9e1a4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onBillingListItemTap",
                "implHandler": [
                    "/*MOVE THIS HANDLER TO CONTROLLER*/\r",
                    "var attrToSearch = RMdatalink.util.globalConfig.getListAttrForDelHandling();\r",
                    "var targetEl = e.target;\r",
                    "\r",
                    "var  retailersMasterStore = Ext.getStore(\"retailersMaster\");\r",
                    "// ********  FIND RECORD FROM MASTER STORE USING 'store_name'  ********\r",
                    "var indexRetailersMaster = retailersMasterStore.find(\"store_name\",record.data.store_name);\r",
                    "\r",
                    "if( RMdatalink.util.globalConfig.isAttributePresentInTarget( attrToSearch,targetEl )  ){\r",
                    "\r",
                    "    var attrVak = targetEl.getAttribute(attrToSearch);\r",
                    "    var nameAttr = RMdatalink.util.globalConfig.getManager_LastNameDelegateClassForTap();\r",
                    "    var storeAttr = RMdatalink.util.globalConfig.getStore_nameDelegateClassForTap();\r",
                    "\r",
                    "    var varibleToSet = setVariable();\r",
                    "    var retailersMaincontentpanel = Ext.ComponentQuery.query('#retailersMaincontentpanel')[0];\r",
                    "\r",
                    "    switch (attrVak){\r",
                    "\r",
                    "        case nameAttr:  RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);\r",
                    "            Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDManagerTab');\r",
                    "            RMdatalink.app.getController('UINav').onPanelAddretailertapped(retailersMaincontentpanel);\r",
                    "\r",
                    "            break;\r",
                    "        case storeAttr: RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);\r",
                    "            Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDStoresTab');\r",
                    "            RMdatalink.app.getController('UINav').onPanelAddretailertapped(retailersMaincontentpanel);\r",
                    "\r",
                    "            break;\r",
                    "        default:console.log('DONT FIRE ANY THING');\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "function setVariable(){\r",
                    "\r",
                    "    return {\r",
                    "\r",
                    "        placeClicked:  attrVak,\r",
                    "        record:retailersMasterStore.getAt(indexRetailersMaster),\r",
                    "        index:index\r",
                    "    };\r",
                    "}"
                ]
            },
            "designerId": "7293a506-99cd-4e60-9ecc-f297cea0bf3c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "title",
                    "list"
                ],
                "fn": "setProductsSbscriptionData",
                "implHandler": [
                    " var totalsList = null ;\r",
                    "\r",
                    "\r",
                    "    switch(title) {\r",
                    "\r",
                    "        case 'DATALINK':\r",
                    "\r",
                    "            this.setDataForPricingList(list,0,1,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'ECATALOG':\r",
                    "\r",
                    "            this.setDataForPricingList(list,1,2,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'E-COMMERCE':\r",
                    "\r",
                    "            this.setDataForPricingList(list,2,3,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'RM PLC':\r",
                    "             this.setDataForPricingList(list,3,4,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "\r",
                    "        case 'IRUGZ':\r",
                    "\r",
                    "            this.setDataForPricingList(list,4,5,totalsList);\r",
                    "\r",
                    "            break;\r",
                    "    }"
                ]
            },
            "designerId": "3129007c-5a52-44a0-9334-f73ed335bc82"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "selectfield[itemId=pricingPolicySkuIncrementSelectFld]",
                "designer|targetType": "Ext.field.Select",
                "fn": "onpricingPolicySkuIncrementSelectFldChange",
                "implHandler": [
                    "console.log(newValue) ;\r",
                    "//alert(\"change\"+ this.config.doNotSaveStoreData );\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "        from_sku: \"0\"\r",
                    "        id: 1\r",
                    "        promotional: \"29\"\r",
                    "        standard: \"29\"\r",
                    "        to_sku: \"2500\"\r",
                    "\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "       \"id\": 1,\r",
                    "            \"product_name\": \"Datalink\",\r",
                    "            \"active_pricing_policy\":\"500\",\r",
                    "            \"active_discount_policy\":\"5\",\r",
                    "            \"pricing_policy\":[\r",
                    "                    {\r",
                    "                        \"text\":\"Pricing Policy1\",\r",
                    "                        \"value\":\"500\",\r",
                    "                        \"data\":\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "////////////////////////\r",
                    "\r",
                    "if(this.config.doNotSaveStoreData){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(! newValue){\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "var recordIndex = 0 ;\r",
                    "var skuPricingPolicyStore =  Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down(\"#mainList\").getStore() ;\r",
                    "\r",
                    "switch(skuPricingPolicyStore.getStoreId()){\r",
                    "\r",
                    "          case 'pricing.datalink_pricing':\r",
                    "\r",
                    "                        recordIndex = 0 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "         case 'pricing.ecatalog_pricing':\r",
                    "\r",
                    "                        recordIndex = 1 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "         case 'pricing.smart_cart_pricing':\r",
                    "\r",
                    "                        recordIndex = 2 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "this.config.pricingData[recordIndex].active_pricing_policy = newValue ;\r",
                    "var isRecordFoundFornewValue = false ;\r",
                    "var pricingPolicyOldRecords = new Array() ;\r",
                    "\r",
                    "for(var k =0; k< this.config.pricingData[recordIndex].pricing_policy.length; k++){\r",
                    "\r",
                    "    if(this.config.pricingData[recordIndex].pricing_policy[k].value == oldValue && ! this.config.doNotSaveStoreData ){\r",
                    "       console.log(\"SAVE\");\r",
                    "        this.config.pricingData[recordIndex].pricing_policy[k].data =  getArrayDataFromStore(skuPricingPolicyStore );\r",
                    "    }\r",
                    " //fillStore\r",
                    "    if(this.config.pricingData[recordIndex].pricing_policy[k].value == newValue && this.config.pricingData[recordIndex].pricing_policy[k].data.length >  2 ){\r",
                    "     pricingPolicyOldRecords = this.config.pricingData[recordIndex].pricing_policy[k].data ;\r",
                    "       isRecordFoundFornewValue =true ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "if(isRecordFoundFornewValue)\r",
                    "{\r",
                    "     fillStore(skuPricingPolicyStore,pricingPolicyOldRecords);\r",
                    "     isRecordFoundFornewValue = false ;\r",
                    "     return ;\r",
                    "}\r",
                    "////////////////////////////////////////\r",
                    "var pricingSKUStore = skuPricingPolicyStore;\r",
                    "var newData = new Array() ;\r",
                    "var maxSKU = 100000 ;\r",
                    "var minSKU = 0 ;\r",
                    "var increment = newValue ;\r",
                    "\r",
                    "var from = minSKU ;\r",
                    "var to = increment ;\r",
                    "while(to < maxSKU){\r",
                    "\r",
                    "    newData.push(\r",
                    "        {\r",
                    "                    \"from_sku\":  from,\r",
                    "                    \"promotional\": \"0\",\r",
                    "                    \"standard\": \"0\",\r",
                    "                    \"to_sku\": to\r",
                    "        }\r",
                    "    );\r",
                    "\r",
                    "    from = to +1 ;\r",
                    "    to = to + increment ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    " to = maxSKU ;\r",
                    "\r",
                    "    newData.push(\r",
                    "        {\r",
                    "                    \"from_sku\":  from,\r",
                    "                    \"promotional\": \"0\",\r",
                    "                    \"standard\": \"0\",\r",
                    "                    \"to_sku\": to\r",
                    "        }\r",
                    "    );\r",
                    "\r",
                    "\r",
                    "pricingSKUStore.removeAll();\r",
                    "pricingSKUStore.sync();\r",
                    "\r",
                    "pricingSKUStore.setData(newData);\r",
                    "pricingSKUStore.sync() ;\r",
                    "\r",
                    "\r",
                    "this.loadVendorTotalCountData() ;\r",
                    "\r",
                    "function getArrayDataFromStore(store){\r",
                    "\r",
                    "    var data = new Array();\r",
                    "    data = store.getData().all;\r",
                    "\r",
                    "    var dataToReturn = new Array();\r",
                    "\r",
                    "    for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "        dataToReturn.push(data[i].data);\r",
                    "    }\r",
                    "\r",
                    "    return dataToReturn ;\r",
                    " }\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillStore(store,data){\r",
                    "    store.removeAll();\r",
                    "    store.sync() ;\r",
                    "\r",
                    "\r",
                    "    store.setData(data) ;\r",
                    "    store.sync();\r",
                    "}\r",
                    ""
                ],
                "name": "change"
            },
            "designerId": "4e62d028-8a18-41d5-93d3-c2e4b2e32abd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "selectfield[itemId=DiscountPolicyVendorsIncrementSelectFld]",
                "designer|targetType": "Ext.field.Select",
                "fn": "onDiscountPolicyVendorsIncrementSelectFldChange",
                "implHandler": [
                    "console.log(newValue) ;\r",
                    "\r",
                    "if(this.config.doNotSaveStoreData){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(! newValue){\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "/*\r",
                    "discount_level: \"5\"\r",
                    "id: 1\r",
                    "of_vendors: \"5\"\r",
                    "*/\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "       \"id\": 1,\r",
                    "            \"product_name\": \"Datalink\",\r",
                    "            \"active_pricing_policy\":\"500\",\r",
                    "            \"active_discount_policy\":\"5\",\r",
                    "            \"discount_policy\": [\r",
                    "                       {\r",
                    "                            \"text\":\"Discount Policy1\",\r",
                    "                            \"value\":\"5\",\r",
                    "                            \"data\":[\r",
                    "                                   ]\r",
                    "                       },\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "////////////////////////\r",
                    "\r",
                    "var discountStore =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down(\"#mainList\").getStore() ;\r",
                    "var recordIndex = 0 ;\r",
                    "\r",
                    "\r",
                    "switch(discountStore.getStoreId()){\r",
                    "\r",
                    "          case 'pricing.datalink_discount':\r",
                    "\r",
                    "                        recordIndex = 0 ;\r",
                    "\r",
                    "          break;\r",
                    "           case 'pricing.ecatlog_discount':\r",
                    "\r",
                    "                        recordIndex = 1 ;\r",
                    "\r",
                    "          break;\r",
                    "           case 'pricing.smart_cart_discount':\r",
                    "\r",
                    "                        recordIndex = 2 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "this.config.pricingData[recordIndex].active_discount_policy = newValue ;\r",
                    "var isRecordFoundFornewValue = false ;\r",
                    "var discountPolicyOldRecords = new Array() ;\r",
                    "\r",
                    "for(var k =0; k< this.config.pricingData[recordIndex].discount_policy.length; k++){\r",
                    "\r",
                    "    if(this.config.pricingData[recordIndex].discount_policy[k].value == oldValue && !this.config.doNotSaveStoreData ){\r",
                    "        console.log(\"SAVE\");\r",
                    "        this.config.pricingData[recordIndex].discount_policy[k].data =  getArrayDataFromStore(discountStore );\r",
                    "    }\r",
                    " //fillStore\r",
                    "    if(this.config.pricingData[recordIndex].discount_policy[k].value == newValue && this.config.pricingData[recordIndex].discount_policy[k].data.length >  2 ){\r",
                    "     discountPolicyOldRecords = this.config.pricingData[recordIndex].discount_policy[k].data ;\r",
                    "       isRecordFoundFornewValue =true ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "if(isRecordFoundFornewValue)\r",
                    "{\r",
                    "     fillStore(discountStore,discountPolicyOldRecords);\r",
                    "     isRecordFoundFornewValue = false ;\r",
                    "     return ;\r",
                    "}\r",
                    "////////////////////////////////////////\r",
                    "\r",
                    "\r",
                    "var newData = new Array() ;\r",
                    "var maxOfVendors = 80 ;\r",
                    "var minOfVendors = 0 ;\r",
                    "var increment = newValue ;\r",
                    "\r",
                    "var from = minOfVendors ;\r",
                    "\r",
                    "while(from  < maxOfVendors){\r",
                    "\r",
                    "    newData.push(\r",
                    "        {\r",
                    "                    \"of_vendors\":  from,\r",
                    "                    \"discount_level\": \"0\"\r",
                    "        }\r",
                    "    );\r",
                    "\r",
                    "    from = from + increment ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    " from = maxOfVendors ;\r",
                    "\r",
                    "      newData.push(\r",
                    "            {\r",
                    "                        \"of_vendors\":  from,\r",
                    "                        \"discount_level\": \"0\"\r",
                    "            }\r",
                    "        );\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "discountStore.removeAll();\r",
                    "discountStore.sync();\r",
                    "\r",
                    "discountStore.setData(newData);\r",
                    "discountStore.sync() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getArrayDataFromStore(store){\r",
                    "\r",
                    "    var data = new Array();\r",
                    "    data = store.getData().all;\r",
                    "\r",
                    "    var dataToReturn = new Array();\r",
                    "\r",
                    "    for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "        dataToReturn.push(data[i].data);\r",
                    "    }\r",
                    "\r",
                    "    return dataToReturn ;\r",
                    " }\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillStore(store,data){\r",
                    "    store.removeAll();\r",
                    "    store.sync() ;\r",
                    "\r",
                    "\r",
                    "    store.setData(data) ;\r",
                    "    store.sync();\r",
                    "}\r",
                    ""
                ],
                "name": "change"
            },
            "designerId": "a140e4ec-f5c0-4427-9edc-c16b29e7cc7e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadPricingStores",
                "implHandler": [
                    "/*\r",
                    "\r",
                    "       \"id\": 1,\r",
                    "            \"product_name\": \"Datalink\",\r",
                    "            \"active_pricing_policy\":\"500\",\r",
                    "            \"active_discount_policy\":\"5\",\r",
                    "            \"pricing_policy\":[\r",
                    "                    {\r",
                    "                        \"text\":\"Pricing Policy1\",\r",
                    "                        \"value\":\"500\",\r",
                    "                        \"data\":\r",
                    "\r",
                    "\r",
                    "\r",
                    "pricing.datalink_discount\r",
                    "pricing.datalink_pricing\r",
                    "pricing.datalink_functionality\r",
                    "\r",
                    "\r",
                    "pricing.ecatalog_pricing\r",
                    "pricing.ecatlog_discount\r",
                    "pricing.ecatalog_functionality\r",
                    "\r",
                    "\r",
                    "pricing.smart_cart_pricing\r",
                    "pricing.smart_cart_discount\r",
                    "pricing.smart_cart_functionality\r",
                    "\r",
                    "\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "var pricingMainStore = Ext.getStore('pricing.MainStore') ;\r",
                    "\r",
                    "var pricingData = getArrayDataFromStore(pricingMainStore);\r",
                    "\r",
                    "\r",
                    " this.config.pricingData = new Array() ;\r",
                    "\r",
                    " this.config.pricingData = pricingData;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var f1 = new Array() ;\r",
                    "var f2 = new Array() ;\r",
                    "var f3 = new Array() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "// f1 = pricingData[0].functionality ;\r",
                    "// f2 = pricingData[1].functionality ;\r",
                    "// f3 = pricingData[2].functionality ;\r",
                    "\r",
                    "//  fillStore(Ext.getStore('pricing.datalink_functionality'),f1) ;\r",
                    "//  fillStore(Ext.getStore('pricing.ecatalog_functionality'),f2 ) ;\r",
                    "//  fillStore(Ext.getStore('pricing.smart_cart_functionality'),f3 ) ;\r",
                    "\r",
                    "\r",
                    "if(!Ext.ComponentQuery.query('#pricingMainContentsPanel')[0]){\r",
                    "    \r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "Ext.ComponentQuery.query('#pricingMainContentsPanel')[0].setMasked(false);\r",
                    "\r",
                    "this.LoadFunctionalityStore(0);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].setValue(pricingData[0].active_pricing_policy) ;\r",
                    "\r",
                    "var rmProStore = Ext.getStore('products.RMProStore') ;\r",
                    "this.config.isPricingDataloaded = true ;\r",
                    "\r",
                    "if( rmProStore.getData().all.length == 0){\r",
                    "\r",
                    "    RMdatalink.app.getController('RMProController').initRMproStore() ;\r",
                    "}else{\r",
                    "\r",
                    "    this.initialseRMProPricingPolicy() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "//this.setRMPROPricingPolicySelectFld() ;\r",
                    "\r",
                    "/*\r",
                    "var datalinkPricingPolicyData = new Array() ;\r",
                    "\r",
                    "for(var i=0;i<pricingData.length ;i++){\r",
                    "\r",
                    "\r",
                    "    if(pricingData[i].product_name == \"Datalink\"){\r",
                    "       var pricing_policy = pricingData[i].pricing_policy ;\r",
                    "        for(var j =0 ; j< pricing_policy.length ; j++){\r",
                    "\r",
                    "            if(pricing_policy[j].value == pricingData[i].active_pricing_policy){\r",
                    "\r",
                    "                datalinkPricingPolicyData = pricing_policy[j].data ;\r",
                    "\r",
                    "            }\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "console.log(datalinkPricingPolicyData);\r",
                    "fillStore(Ext.getStore('pricing.datalink_pricing'),datalinkPricingPolicyData);\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "function fillStore(store,data){\r",
                    "    store.removeAll();\r",
                    "    store.sync() ;\r",
                    "\r",
                    "\r",
                    "    store.setData(data) ;\r",
                    "    store.sync();\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getArrayDataFromStore(store){\r",
                    "\r",
                    "    var data = new Array();\r",
                    "    data = store.getData().all;\r",
                    "\r",
                    "    var dataToReturn = new Array();\r",
                    "\r",
                    "\r",
                    "    var datalink;\r",
                    "    var ecatlog;\r",
                    "    var smartcart ;\r",
                    "    var rmPro ;\r",
                    "   for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "        if(data[i].data.product_name == \"Datalink\" && data[i].data.active_pricing_policy ){\r",
                    "            datalink = data[i].data;\r",
                    "            datalink.searchIndex = i ;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        if(data[i].data.product_name == \"ECatalog\" && data[i].data.active_pricing_policy ){\r",
                    "\r",
                    "            ecatlog = data[i].data;\r",
                    "            ecatlog.searchIndex = i ;\r",
                    "        }\r",
                    "\r",
                    "         if(data[i].data.product_name == \"Smart Cart\" && data[i].data.active_pricing_policy ){\r",
                    "\r",
                    "            smartcart = data[i].data;\r",
                    "              smartcart.searchIndex = i ;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "       if(data[i].data.product_name == \"RM_PRO\" && data[i].data.active_pricing_policy ){\r",
                    "\r",
                    "              rmPro = data[i].data;\r",
                    "              rmPro.searchIndex = i ;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "  }\r",
                    "\r",
                    "      dataToReturn.push(datalink);\r",
                    "      dataToReturn.push(ecatlog);\r",
                    "      dataToReturn.push(smartcart);\r",
                    "\r",
                    "      dataToReturn.push(rmPro);\r",
                    "\r",
                    "    console.log(dataToReturn);\r",
                    "    return dataToReturn ;\r",
                    " }"
                ]
            },
            "designerId": "ed9486cf-8b11-4b4e-9f01-42ea33cb3e9c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "storeId"
                ],
                "fn": "updaePricingData",
                "implHandler": [
                    "\r",
                    "var pricingStore = Ext.getStore(storeId) ;\r",
                    "\r",
                    "if(!pricingStore){\r",
                    "\r",
                    "    console.error(\"No Store Found with id ::\"+storeId);\r",
                    "    return ;\r",
                    "}\r",
                    "var _this = this ;\r",
                    "\r",
                    "var recordIndex = 0 ;\r",
                    "var newValue = null ;\r",
                    "\r",
                    "switch(storeId){\r",
                    "\r",
                    "    case 'pricing.datalink_discount':\r",
                    "        var recordIndex = 0 ;\r",
                    "        newValue = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0].getValue();\r",
                    "        saveDatalinkDiscountPolicy();\r",
                    "        break;\r",
                    "    case 'pricing.datalink_pricing':\r",
                    "        var recordIndex = 0 ;\r",
                    "        newValue = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].getValue();\r",
                    "        saveDatalinkPricingPolicy() ;\r",
                    "\r",
                    "        break;\r",
                    "    case 'pricing.datalink_functionality':\r",
                    "        var recordIndex = 0 ;\r",
                    "        saveFunctionalityData() ;\r",
                    "        break;\r",
                    "//////////////////////////////////////////////////////////////////////////////////////////////\r",
                    "\r",
                    "        case 'pricing.ecatlog_discount':\r",
                    "        var recordIndex = 1 ;\r",
                    "        newValue = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0].getValue();\r",
                    "        saveDatalinkDiscountPolicy();\r",
                    "        break;\r",
                    "    case 'pricing.ecatalog_pricing':\r",
                    "        var recordIndex = 1 ;\r",
                    "        newValue = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].getValue();\r",
                    "        saveDatalinkPricingPolicy() ;\r",
                    "\r",
                    "        break;\r",
                    "    case 'pricing.ecatalog_functionality':\r",
                    "        var recordIndex = 1 ;\r",
                    "        saveFunctionalityData() ;\r",
                    "        break;\r",
                    "\r",
                    "////////////////////////////////////////////////////////////////////////////\r",
                    "   case 'pricing.smart_cart_discount':\r",
                    "        var recordIndex = 2 ;\r",
                    "        newValue = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0].getValue();\r",
                    "        saveDatalinkDiscountPolicy();\r",
                    "        break;\r",
                    "    case 'pricing.smart_cart_pricing':\r",
                    "        var recordIndex = 2 ;\r",
                    "        newValue = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].getValue();\r",
                    "        saveDatalinkPricingPolicy() ;\r",
                    "\r",
                    "        break;\r",
                    "    case 'pricing.smart_cart_functionality':\r",
                    "        var recordIndex = 2 ;\r",
                    "        saveFunctionalityData() ;\r",
                    "        break;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function saveFunctionalityData(){\r",
                    "\r",
                    "    _this.config.pricingData[recordIndex].functionality =  getArrayDataFromStore(pricingStore);\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function saveDatalinkPricingPolicy(){\r",
                    "\r",
                    "\r",
                    "    if(newValue){\r",
                    "\r",
                    "        _this.config.pricingData[recordIndex].active_pricing_policy = newValue ;\r",
                    "\r",
                    "        for(var k =0; k< _this.config.pricingData[recordIndex].pricing_policy.length; k++){\r",
                    "\r",
                    "            if(_this.config.pricingData[recordIndex].pricing_policy[k].value == newValue ){\r",
                    "                _this.config.pricingData[recordIndex].pricing_policy[k].data =  getArrayDataFromStore(pricingStore);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function saveDatalinkDiscountPolicy(){\r",
                    "\r",
                    "\r",
                    "    if(newValue){\r",
                    "\r",
                    "        _this.config.pricingData[recordIndex].active_discount_policy = newValue ;\r",
                    "\r",
                    "        for(var k =0; k< _this.config.pricingData[recordIndex].discount_policy.length; k++){\r",
                    "\r",
                    "            if(_this.config.pricingData[recordIndex].discount_policy[k].value == newValue ){\r",
                    "                _this.config.pricingData[recordIndex].discount_policy[k].data =  getArrayDataFromStore(pricingStore);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getArrayDataFromStore(store){\r",
                    "\r",
                    "    var data = new Array();\r",
                    "    data = store.getData().all;\r",
                    "\r",
                    "    var dataToReturn = new Array();\r",
                    "\r",
                    "    for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "        dataToReturn.push(data[i].data);\r",
                    "    }\r",
                    "\r",
                    "    return dataToReturn ;\r",
                    " }\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillStore(store,data){\r",
                    "    store.removeAll();\r",
                    "    store.sync() ;\r",
                    "\r",
                    "\r",
                    "    store.setData(data) ;\r",
                    "    store.sync();\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "3df599f7-c958-46c6-8b69-86d13ae06f1e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "newValue",
                    "oldValue"
                ],
                "fn": "loadPricingPolicy",
                "implHandler": [
                    "console.log(newValue) ;\r",
                    "//alert(\"change\"+ this.config.doNotSaveStoreData );\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "        from_sku: \"0\"\r",
                    "        id: 1\r",
                    "        promotional: \"29\"\r",
                    "        standard: \"29\"\r",
                    "        to_sku: \"2500\"\r",
                    "\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "       \"id\": 1,\r",
                    "            \"product_name\": \"Datalink\",\r",
                    "            \"active_pricing_policy\":\"500\",\r",
                    "            \"active_discount_policy\":\"5\",\r",
                    "            \"pricing_policy\":[\r",
                    "                    {\r",
                    "                        \"text\":\"Pricing Policy1\",\r",
                    "                        \"value\":\"500\",\r",
                    "                        \"data\":\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "////////////////////////\r",
                    "\r",
                    "if(! newValue){\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "var recordIndex = 0 ;\r",
                    "var skuPricingPolicyStore =  Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down(\"#mainList\").getStore() ;\r",
                    "\r",
                    "switch(skuPricingPolicyStore.getStoreId()){\r",
                    "\r",
                    "          case 'pricing.datalink_pricing':\r",
                    "\r",
                    "                        recordIndex = 0 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "         case 'pricing.ecatalog_pricing':\r",
                    "\r",
                    "                        recordIndex = 1 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "         case 'pricing.smart_cart_pricing':\r",
                    "\r",
                    "                        recordIndex = 2 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "this.config.pricingData[recordIndex].active_pricing_policy = newValue ;\r",
                    "var isRecordFoundFornewValue = false ;\r",
                    "var pricingPolicyOldRecords = new Array() ;\r",
                    "\r",
                    "for(var k =0; k< this.config.pricingData[recordIndex].pricing_policy.length; k++){\r",
                    "\r",
                    "    if(this.config.pricingData[recordIndex].pricing_policy[k].value == oldValue && ! this.config.doNotSaveStoreData ){\r",
                    "       console.log(\"SAVE\");\r",
                    "        this.config.pricingData[recordIndex].pricing_policy[k].data =  getArrayDataFromStore(skuPricingPolicyStore );\r",
                    "    }\r",
                    " //fillStore\r",
                    "    if(this.config.pricingData[recordIndex].pricing_policy[k].value == newValue && this.config.pricingData[recordIndex].pricing_policy[k].data.length >  2 ){\r",
                    "     pricingPolicyOldRecords = this.config.pricingData[recordIndex].pricing_policy[k].data ;\r",
                    "       isRecordFoundFornewValue =true ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "if(isRecordFoundFornewValue)\r",
                    "{\r",
                    "     fillStore(skuPricingPolicyStore,pricingPolicyOldRecords);\r",
                    "     isRecordFoundFornewValue = false ;\r",
                    "     return ;\r",
                    "}\r",
                    "////////////////////////////////////////\r",
                    "var pricingSKUStore = skuPricingPolicyStore;\r",
                    "var newData = new Array() ;\r",
                    "var maxSKU = 100000 ;\r",
                    "var minSKU = 0 ;\r",
                    "var increment = newValue ;\r",
                    "\r",
                    "var from = minSKU ;\r",
                    "var to = increment ;\r",
                    "while(to < maxSKU){\r",
                    "\r",
                    "    newData.push(\r",
                    "        {\r",
                    "                    \"from_sku\":  from,\r",
                    "                    \"promotional\": \"0\",\r",
                    "                    \"standard\": \"0\",\r",
                    "                    \"to_sku\": to\r",
                    "        }\r",
                    "    );\r",
                    "\r",
                    "    from = to +1 ;\r",
                    "    to = to + increment ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    " to = maxSKU ;\r",
                    "\r",
                    "    newData.push(\r",
                    "        {\r",
                    "                    \"from_sku\":  from,\r",
                    "                    \"promotional\": \"0\",\r",
                    "                    \"standard\": \"0\",\r",
                    "                    \"to_sku\": to\r",
                    "        }\r",
                    "    );\r",
                    "\r",
                    "\r",
                    "pricingSKUStore.removeAll();\r",
                    "pricingSKUStore.sync();\r",
                    "\r",
                    "pricingSKUStore.setData(newData);\r",
                    "pricingSKUStore.sync() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getArrayDataFromStore(store){\r",
                    "\r",
                    "    var data = new Array();\r",
                    "    data = store.getData().all;\r",
                    "\r",
                    "    var dataToReturn = new Array();\r",
                    "\r",
                    "    for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "        dataToReturn.push(data[i].data);\r",
                    "    }\r",
                    "\r",
                    "    return dataToReturn ;\r",
                    " }\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillStore(store,data){\r",
                    "    store.removeAll();\r",
                    "    store.sync() ;\r",
                    "\r",
                    "\r",
                    "    store.setData(data) ;\r",
                    "    store.sync();\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "6bd928dc-d186-4c1f-b097-57774dfaffe0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "newValue",
                    "oldValue"
                ],
                "fn": "loadDiscountPolicy",
                "implHandler": [
                    "console.log(newValue) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "discount_level: \"5\"\r",
                    "id: 1\r",
                    "of_vendors: \"5\"\r",
                    "*/\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "       \"id\": 1,\r",
                    "            \"product_name\": \"Datalink\",\r",
                    "            \"active_pricing_policy\":\"500\",\r",
                    "            \"active_discount_policy\":\"5\",\r",
                    "            \"discount_policy\": [\r",
                    "                       {\r",
                    "                            \"text\":\"Discount Policy1\",\r",
                    "                            \"value\":\"5\",\r",
                    "                            \"data\":[\r",
                    "                                   ]\r",
                    "                       },\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "////////////////////////\r",
                    "\r",
                    "var discountStore =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down(\"#mainList\").getStore() ;\r",
                    "var recordIndex = 0 ;\r",
                    "\r",
                    "\r",
                    "switch(discountStore.getStoreId()){\r",
                    "\r",
                    "          case 'pricing.datalink_discount':\r",
                    "\r",
                    "                        recordIndex = 0 ;\r",
                    "\r",
                    "          break;\r",
                    "           case 'pricing.ecatlog_discount':\r",
                    "\r",
                    "                        recordIndex = 1 ;\r",
                    "\r",
                    "          break;\r",
                    "           case 'pricing.smart_cart_discount':\r",
                    "\r",
                    "                        recordIndex = 2 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "this.config.pricingData[recordIndex].active_discount_policy = newValue ;\r",
                    "var isRecordFoundFornewValue = false ;\r",
                    "var discountPolicyOldRecords = new Array() ;\r",
                    "\r",
                    "for(var k =0; k< this.config.pricingData[recordIndex].discount_policy.length; k++){\r",
                    "\r",
                    "    if(this.config.pricingData[recordIndex].discount_policy[k].value == oldValue && !this.config.doNotSaveStoreData ){\r",
                    "        console.log(\"SAVE\");\r",
                    "        this.config.pricingData[recordIndex].discount_policy[k].data =  getArrayDataFromStore(discountStore );\r",
                    "    }\r",
                    " //fillStore\r",
                    "    if(this.config.pricingData[recordIndex].discount_policy[k].value == newValue && this.config.pricingData[recordIndex].discount_policy[k].data.length >  2 ){\r",
                    "     discountPolicyOldRecords = this.config.pricingData[recordIndex].discount_policy[k].data ;\r",
                    "       isRecordFoundFornewValue =true ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "if(isRecordFoundFornewValue)\r",
                    "{\r",
                    "     fillStore(discountStore,discountPolicyOldRecords);\r",
                    "     isRecordFoundFornewValue = false ;\r",
                    "     return ;\r",
                    "}\r",
                    "////////////////////////////////////////\r",
                    "\r",
                    "\r",
                    "var newData = new Array() ;\r",
                    "var maxOfVendors = 80 ;\r",
                    "var minOfVendors = 0 ;\r",
                    "var increment = newValue ;\r",
                    "\r",
                    "var from = minOfVendors ;\r",
                    "\r",
                    "while(from  < maxOfVendors){\r",
                    "\r",
                    "    newData.push(\r",
                    "        {\r",
                    "                    \"of_vendors\":  from,\r",
                    "                    \"discount_level\": \"0\"\r",
                    "        }\r",
                    "    );\r",
                    "\r",
                    "    from = from + increment ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    " from = maxOfVendors ;\r",
                    "\r",
                    "      newData.push(\r",
                    "            {\r",
                    "                        \"of_vendors\":  from,\r",
                    "                        \"discount_level\": \"0\"\r",
                    "            }\r",
                    "        );\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "discountStore.removeAll();\r",
                    "discountStore.sync();\r",
                    "\r",
                    "discountStore.setData(newData);\r",
                    "discountStore.sync() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getArrayDataFromStore(store){\r",
                    "\r",
                    "    var data = new Array();\r",
                    "    data = store.getData().all;\r",
                    "\r",
                    "    var dataToReturn = new Array();\r",
                    "\r",
                    "    for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "        dataToReturn.push(data[i].data);\r",
                    "    }\r",
                    "\r",
                    "    return dataToReturn ;\r",
                    " }\r",
                    "\r",
                    "\r",
                    "\r",
                    "function fillStore(store,data){\r",
                    "    store.removeAll();\r",
                    "    store.sync() ;\r",
                    "\r",
                    "\r",
                    "    store.setData(data) ;\r",
                    "    store.sync();\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "e4cc4287-80d5-43f7-a385-5f0e62e23f3a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "index"
                ],
                "fn": "LoadFunctionalityStore",
                "implHandler": [
                    "var pricingFunctionalityStore = Ext.ComponentQuery.query('#functionalityTab')[0].down(\"#mainList\").getStore() ;//Ext.getStore(\"pricingFunctionalityStore\");\r",
                    "\r",
                    "\r",
                    "pricingFunctionalityStore.removeAll();\r",
                    "pricingFunctionalityStore.sync() ;\r",
                    "\r",
                    "pricingFunctionalityStore.setData(this.config.pricingData[index].functionality) ;\r",
                    "pricingFunctionalityStore.sync();\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "06cb21dd-5626-4440-92e8-be5ab6fbede1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateVendorsForPricing",
                "implHandler": [
                    "var that = this ;\r",
                    "            Ext.Viewport.setMasked( {\r",
                    "                xtype: 'loadmask'\r",
                    "            });\r",
                    "\r",
                    "\r",
                    "var recordIndex = 0 ;\r",
                    "var skuPricingPolicyStore =  Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down(\"#mainList\").getStore() ;\r",
                    "var key = \"datalink\" ;\r",
                    "switch(skuPricingPolicyStore.getStoreId()){\r",
                    "\r",
                    "          case 'pricing.datalink_pricing':\r",
                    "            key = \"datalink\" ;\r",
                    "                        recordIndex = 0 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "         case 'pricing.ecatalog_pricing':\r",
                    "                key = \"ecatalog\" ;\r",
                    "                        recordIndex = 1 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "         case 'pricing.smart_cart_pricing':\r",
                    "                key = \"ecommerce\" ;\r",
                    "                        recordIndex = 2 ;\r",
                    "\r",
                    "          break;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "console.log(skuPricingPolicyStore.getData() );\r",
                    "/*\r",
                    "\r",
                    "from_sku: 0\r",
                    "id: \"ext-record-176\"\r",
                    "promotional: \"100\"\r",
                    "standard: \"19\"\r",
                    "to_sku: 500\r",
                    "\r",
                    "\r",
                    "*/\r",
                    "\r",
                    " var pricingPolicyIncrementValue = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].getValue() ;\r",
                    "\r",
                    " var vendorStore = Ext.getStore('vendors.Master');\r",
                    "\r",
                    "\r",
                    "var vendorCount = vendorStore.getData().all.length ;\r",
                    "\r",
                    "\r",
                    "//for(var index =0 ; ; index++ )\r",
                    "\r",
                    "var index =0 ;\r",
                    "var dataToUpdate = {};\r",
                    "\r",
                    "var vRecord = null ;\r",
                    "\r",
                    " updateVendor() ;\r",
                    "\r",
                    "function updateVendor()\r",
                    "{\r",
                    "\r",
                    "    if( index < vendorCount)\r",
                    "    {\r",
                    "       vRecord = vendorStore.getAt(index) ;\r",
                    "\r",
                    "        if(!vRecord){\r",
                    "            Ext.Viewport.setMasked(false);\r",
                    "            return ;\r",
                    "        }\r",
                    "       var vSKU =  0 ;\r",
                    "\r",
                    "        if( vRecord.data.SKU && vRecord.data.SKU != \"\" ){\r",
                    "\r",
                    "            vSKU = parseInt(vRecord.data.SKU) ;\r",
                    "        }\r",
                    "\r",
                    "        var pIndex = parseInt(  vSKU/pricingPolicyIncrementValue);\r",
                    "\r",
                    "\r",
                    "        var stPrice = skuPricingPolicyStore.getData().all[pIndex].data.standard ;\r",
                    "        var promoPrice = skuPricingPolicyStore.getData().all[pIndex].data.promotional ;\r",
                    "\r",
                    "\r",
                    "        if(vRecord.data.product_price){\r",
                    "            dataToUpdate = vRecord.data.product_price ;\r",
                    "        }\r",
                    "\r",
                    "        dataToUpdate[key] ={} ;\r",
                    "\r",
                    "        dataToUpdate[key].standard_price = stPrice ;\r",
                    "        dataToUpdate[key].promotional_price = promoPrice ;\r",
                    "\r",
                    "        var data = {\r",
                    "            product_price : dataToUpdate\r",
                    "        };\r",
                    "        RMdatalink.iwa.rdl.doUpdateCollection(vendorStore, data , vRecord.get('_id'), success , failuer );\r",
                    "\r",
                    "\r",
                    "    }else{\r",
                    "\r",
                    "        //that.updatePricingVendorStore() ;\r",
                    "        console.log(\"vendors updated\");\r",
                    "\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function success(){\r",
                    "\r",
                    "     vRecord.set(\"product_price\",dataToUpdate );\r",
                    "    index++ ;\r",
                    "    updateVendor() ;\r",
                    "}\r",
                    "\r",
                    "function failuer(){\r",
                    "    index++ ;\r",
                    "    updateVendor() ;\r",
                    "}\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "6719c98f-51cf-4dac-bdd6-586c7ad671ad"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updatePricingVendorStore",
                "implHandler": [
                    "                    var tempArray = new Array();\r",
                    "                    tempArray = getArrayDataFromStore(Ext.getStore('vendors.Master'));\r",
                    "\r",
                    "                    var tempVendorStore = Ext.getStore('vendorTempRecordStore') ;\r",
                    "\r",
                    "                    tempVendorStore.removeAll();\r",
                    "                    tempVendorStore.sync();\r",
                    "\r",
                    "                    tempVendorStore.setData(tempArray);\r",
                    "                    tempVendorStore.sync();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getArrayDataFromStore(store){\r",
                    "\r",
                    "    var data = new Array();\r",
                    "    data = store.getData().all;\r",
                    "\r",
                    "    var dataToReturn = new Array();\r",
                    "\r",
                    "    for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "        dataToReturn.push(data[i].data);\r",
                    "    }\r",
                    "\r",
                    "    return dataToReturn ;\r",
                    " }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "e31b7ccd-e6e7-451d-88b5-a03d3867913b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadRM_PROData",
                "implHandler": [
                    "\r",
                    "console.log(this.config.pricingData[3]) ;\r",
                    "\r",
                    "var rmpProData = this.config.pricingData[3] ;\r",
                    "\r",
                    "RMdatalink.app.getController('RMProController').setRMPRODiscountStore() ;\r",
                    "RMdatalink.app.getController('DatalinkController').setDatalinkDiscountStore() ;\r",
                    "\r",
                    "var atcivePricingPolicy =  rmpProData.active_pricing_policy ;\r",
                    "atcivePricingPolicy =  parseInt(atcivePricingPolicy) - 1 ;\r",
                    "\r",
                    "var rmProStore = Ext.getStore('products.RMProStore') ;\r",
                    "resetActivePolicy() ;\r",
                    "//Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].setOptions(rmpProData.pricing_policy ) ;\r",
                    "//Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].setValue( atcivePricingPolicy );\r",
                    "\r",
                    "//\r",
                    "///////////////////////////////////////////////////////////////////////////////////\r",
                    "\r",
                    "var modulesToSelect = rmpProData.pricing_policy[atcivePricingPolicy].rm_pro_modules ;\r",
                    "var bundlePrice = rmpProData.pricing_policy[atcivePricingPolicy].rm_pro_bundle_price ;\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rm_proBundlePriceTxtFld')[0].setValue(bundlePrice ? bundlePrice: \"\" ) ;\r",
                    "\r",
                    "var rmProList =  Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList') ;\r",
                    "\r",
                    "rmProList.deselectAll(true) ;\r",
                    "\r",
                    "var moduleRecIndex = -1 ;\r",
                    "var moduleRec = [] ;\r",
                    "\r",
                    "if(modulesToSelect)\r",
                    "for(var i=0; i <modulesToSelect.length; i++){\r",
                    "\r",
                    "    moduleRecIndex = rmProStore.findExact('_id',modulesToSelect[i].module_id );\r",
                    "\r",
                    "    if(moduleRecIndex != -1 ){\r",
                    "\r",
                    "        moduleRec.push(rmProStore.getAt(moduleRecIndex)) ;\r",
                    "        \r",
                    "        rmProStore.getAt(moduleRecIndex).set(\"active_policy\",atcivePricingPolicy);\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "rmProList.select(moduleRec,false,true);\r",
                    "\r",
                    "\r",
                    " RMdatalink.app.getController('RMProController').onRmProSelectUnselect();\r",
                    "\r",
                    "///////////////////////////////////////////////////////////////////////////////////\r",
                    "\r",
                    "\r",
                    "var pricingData = rmpProData.pricing_policy[atcivePricingPolicy].data ;\r",
                    "\r",
                    "if(! pricingData || pricingData.length == 0 ){\r",
                    "    return ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "loadRMproStoreForPricing();\r",
                    "\r",
                    "\r",
                    "function loadRMproStoreForPricing(){\r",
                    "    \r",
                    "    \r",
                    "    \r",
                    "   var maxRec =  pricingData.length;\r",
                    "\r",
                    "    for(var i=0 ; i < maxRec ; i++){\r",
                    "\r",
                    "            var recIndex = rmProStore.findExact(\"_id\",pricingData[i].product_id );\r",
                    "\r",
                    "            var rec = rmProStore.getAt(recIndex) ;\r",
                    "\r",
                    "            if(rec)\r",
                    "            {\r",
                    "                    rec.set(\"module_promotional_price\",pricingData[i].promotional_price );\r",
                    "                    rec.set(\"module_standard_price\",pricingData[i].standard_price );\r",
                    "                    rec.set(\"quantity\",pricingData[i].quantity );\r",
                    "                    \r",
                    "            }//quantity\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function resetActivePolicy(){\r",
                    "    \r",
                    "    for(var i=0; i < rmProStore.getData().all.length ; i ++){\r",
                    "        \r",
                    "        var rmRec = rmProStore.getAt(i) ;\r",
                    "        \r",
                    "        rmRec.set(\"active_policy\",\"99999\");\r",
                    "        rmRec.dirty = true ;\r",
                    "    }\r",
                    "    \r",
                    "}"
                ]
            },
            "designerId": "2d1016ab-7d0f-4c28-9718-d859e6674027"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateRMProPricing",
                "implHandler": [
                    "//   Ext.Viewport.setMasked( {\r",
                    "//                 xtype: 'loadmask'\r",
                    "//             });\r",
                    "\r",
                    "var activePolicy = Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].getValue();\r",
                    "\r",
                    "var rmProStore = Ext.getStore('products.RMProStore') ;\r",
                    "\r",
                    "var rmpProData = this.config.pricingData[3] ;\r",
                    "\r",
                    "var searchIndex = rmpProData.searchIndex ;\r",
                    "\r",
                    "var pricingData = [];\r",
                    "\r",
                    "\r",
                    "var rmProStoreData = rmProStore.getData().all ;\r",
                    "\r",
                    "\r",
                    "for(var i =0 ; i < rmProStoreData.length; i++ ){\r",
                    "\r",
                    "    pricingData.push({\r",
                    "\r",
                    "        \"product_id\":rmProStoreData[i].data._id,\r",
                    "        \"promotional_price\":rmProStoreData[i].data.module_promotional_price,\r",
                    "        \"standard_price\":rmProStoreData[i].data.module_standard_price,\r",
                    "        \"quantity\":rmProStoreData[i].data.quantity\r",
                    "\r",
                    "    });\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "activePolicy =  parseInt(activePolicy) - 1 ;\r",
                    "\r",
                    "this.config.pricingData[3].pricing_policy[activePolicy].data = pricingData ;\r",
                    "////////////////////////////////////////////////////////////////////////////////\r",
                    "var selectedRec =  Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList').getSelection() ;\r",
                    "\r",
                    "this.config.pricingData[3].pricing_policy[activePolicy].rm_pro_modules = [] ;\r",
                    "this.config.pricingData[3].pricing_policy[activePolicy].rm_pro_bundle_price = Ext.ComponentQuery.query('#rm_proBundlePriceTxtFld')[0].getValue() ;\r",
                    "\r",
                    "for( var i=0 ; i < selectedRec.length ; i++ ){\r",
                    "\r",
                    "    this.config.pricingData[3].pricing_policy[activePolicy].rm_pro_modules.push({\"module_id\":selectedRec[i].get('_id')}) ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "////////////////////////////////////////////////////////////////////////////////\r",
                    "this.config.pricingData[3].active_pricing_policy = Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].getValue();\r",
                    "\r",
                    "rmpProData = this.config.pricingData[3] ;\r",
                    "\r",
                    "console.log(this.config.pricingData[3].pricing_policy[activePolicy].data );\r",
                    "\r",
                    "var pricingMainStore = Ext.getStore('pricing.MainStore') ;\r",
                    "\r",
                    "var rmPRORec = pricingMainStore.getAt(this.config.pricingData[3].searchIndex);\r",
                    "\r",
                    "\r",
                    "\r",
                    "            rmPRORec.set( this.config.pricingData[3] );\r",
                    "            rmPRORec.dirty= true;\r",
                    "             pricingMainStore.sync() ;\r",
                    "\r",
                    "\r",
                    "var index = 0 ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "function updateRMPRO(){\r",
                    "\r",
                    "    if(index <  rmProStoreData.length){\r",
                    "\r",
                    "        var dataToUpdate = {\r",
                    "\r",
                    "           \"module_promotional_price\":rmProStoreData[index].data.module_promotional_price,\r",
                    "           \"module_standard_price\":rmProStoreData[index].data.module_standard_price,\r",
                    "            \"quantity\":rmProStoreData[index].data.quantity\r",
                    "        };\r",
                    "\r",
                    "    }else{\r",
                    "\r",
                    "          Ext.Viewport.setMasked(false);\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function success(){\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "function error(){\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "//  Ext.Viewport.setMasked(false);\r",
                    "\r",
                    "// Ext.Msg.alert(\"Alert\",\"RM-PRO pricing policies updated successfully.\",Ext.emptyFn);"
                ]
            },
            "designerId": "76bade6a-8844-4f00-aa2a-3b88654c451d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "selectfield[itemId=rm_proPricingPolicySelectFld]",
                "designer|targetType": "Ext.field.Select",
                "fn": "onRMPROPolicySelectfieldChange",
                "implHandler": [
                    "var that = this ;\r",
                    "\r",
                    "if(oldValue && ! that.config.isNoActionToChangePolicy){\r",
                    "\r",
                    "    Ext.Msg.confirm(\"Confirm\",\"Are you sure you want to change the pricing policy?.\",onMessageAns ,this);\r",
                    "\r",
                    "\r",
                    "    function onMessageAns(action,opt,confirmBox){\r",
                    "\r",
                    "\r",
                    "        if(action == \"yes\"){\r",
                    "\r",
                    "             that.config.pricingData[3].active_pricing_policy = newValue;\r",
                    "\r",
                    "             that.loadRM_PROData() ;\r",
                    "\r",
                    "             that.updateRMProPricing() ;\r",
                    "\r",
                    "        }else{\r",
                    "\r",
                    "            that.config.isNoActionToChangePolicy = true ;\r",
                    "            selectfield.setValue(oldValue);\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "else{\r",
                    "\r",
                    "     that.config.isNoActionToChangePolicy = false ;\r",
                    "\r",
                    "    this.config.pricingData[3].active_pricing_policy = newValue;\r",
                    "\r",
                    "    this.loadRM_PROData() ;\r",
                    "}\r",
                    "\r",
                    ""
                ],
                "name": "change"
            },
            "designerId": "f2ef3a6d-3930-42e7-9670-0e12f8cbb6ff"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRMPROPricingPolicySelectFld",
                "implHandler": [
                    "var rmpProData = this.config.pricingData[3] ;\r",
                    "\r",
                    "var atcivePricingPolicy =  rmpProData.active_pricing_policy ;\r",
                    "\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].setOptions(rmpProData.pricing_policy ) ;\r",
                    "Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].setValue( atcivePricingPolicy );\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "45831664-330b-4505-8f51-9eb267564967"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initialseRMProPricingPolicy",
                "implHandler": [
                    "this.setRMPROPricingPolicySelectFld() ;\r",
                    "\r",
                    "//this.loadRM_PROData();\r",
                    ""
                ]
            },
            "designerId": "691236cb-dd7e-4f2f-afea-2e8054e1cb40"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadVendorTotalCountData",
                "implHandler": [
                    "\r",
                    "\r",
                    "\r",
                    "    var vendorsMasterStr = Ext.getStore( 'vendors.Master');\r",
                    "    var vdrs = vendorsMasterStr.getData().all ;\r",
                    "    \r",
                    "    var totalSKU = 0 ;\r",
                    "    var totalCllections = 0 ;\r",
                    "    var totalDesigns = 0 ;\r",
                    "    var totalStdPrice = 0 ;\r",
                    "    var totalPromoPrice = 0 ;\r",
                    "    var totalCalculatedVal = 0 ;\r",
                    "\r",
                    "\r",
                    "    for(var i=0; i < vdrs.length ; i++){\r",
                    "        if( vdrs[i].data.SKU)\r",
                    "        {\r",
                    "             totalSKU +=  parseInt(vdrs[i].data.SKU,0) ;\r",
                    "              var  result = (parseInt(vdrs[i].data.SKU,0 )  * 5)/60 ;\r",
                    "             result =    Math.round(result * 100) / 100 ;\r",
                    "        \r",
                    "             totalCalculatedVal += result ;\r",
                    "        }\r",
                    "        if( vdrs[i].data.collections)\r",
                    "             totalCllections += parseInt(vdrs[i].data.collections,0)  ;\r",
                    "        if(vdrs[i].data.design )\r",
                    "             totalDesigns += parseInt(vdrs[i].data.design,0)  ;\r",
                    "        if(vdrs[i].data.product_price && vdrs[i].data.product_price.datalink )\r",
                    "        {\r",
                    "             totalStdPrice +=  parseInt(vdrs[i].data.product_price.datalink.standard_price,0) ;\r",
                    "             totalPromoPrice +=  parseInt(vdrs[i].data.product_price.datalink.promotional_price,0) ;\r",
                    "        }\r",
                    "            \r",
                    "\r",
                    "        \r",
                    "    }\r",
                    "\r",
                    "var dataToSet = {\r",
                    "    vendor_count:  vdrs.length,\r",
                    "    collection_count:totalCllections,\r",
                    "    design_count:totalDesigns,\r",
                    "    sku_count:totalSKU,\r",
                    "    total_std_price:totalStdPrice,\r",
                    "    total_promo_price:totalStdPrice,\r",
                    "    total_calculated_value:totalCalculatedVal\r",
                    "};\r",
                    "\r",
                    "    var listIbj = Ext.ComponentQuery.query('#pricingDetailsMainTabPanel')[0].down('#dataLinkTab').down('#pricingTotalsList') ;\r",
                    " RMdatalink.util.globalMethods.fillListDataByListObject(listIbj,[dataToSet]);"
                ]
            },
            "designerId": "14bef489-f073-43ce-9432-78ad84f363cf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "assignAccountNoToRetailers",
                "implHandler": [
                    "\r",
                    "\r",
                    "\r",
                    "         var pStatus = null ;\r",
                    "     \r",
                    "             pStatus =  {'$or':\r",
                    "                [\r",
                    "                 {\"store_products.datalink_status\" : \"ACTIVE\"},\r",
                    "                 {\"store_products.ecatalog_status\" : \"ACTIVE\"},\r",
                    "                 {\"store_products.ecommerce_status\" :\"ACTIVE\"},\r",
                    "                 {\"store_products.irugs_status\" : \"ACTIVE\"},\r",
                    "                 {\"store_products.rmpro_status\" : \"ACTIVE\"}\r",
                    "                 ]} ;\r",
                    " \r",
                    " \r",
                    "\r",
                    "\r",
                    "         RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_masterretailerrecords\",pageNo:1 ,pageSize: 50 ,sortBy:{\"store_name\":1},\r",
                    "         query:pStatus,\r",
                    "                                     fields:{account_no:1}},success,error);\r",
                    "\r",
                    "\r",
                    "var count = 0 ;\r",
                    "var items = [] ;\r",
                    "function success(){\r",
                    "    \r",
                    "    count = parseInt(arguments[0].count,0) ;\r",
                    "    items = arguments[0].items ;\r",
                    "    \r",
                    "    console.log(arguments);\r",
                    "    \r",
                    "    assignAccountNo() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function error(){\r",
                    "    \r",
                    "    console.log(arguments);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var index = 0 ;\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "\r",
                    "function assignAccountNo(){\r",
                    "    \r",
                    "    if(items[index].account_no ){\r",
                    "        err();\r",
                    "        return ;\r",
                    "    }\r",
                    "    \r",
                    "    if(index < items.length)\r",
                    "    {\r",
                    "        var  accNo = 1001 + count + index ;\r",
                    "        \r",
                    "        var dataToUpdate = {\r",
                    "            \"account_no\":accNo\r",
                    "        };\r",
                    "        \r",
                    "         RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,items[index]._id , suc, err);\r",
                    "    }\r",
                    "  \r",
                    "\r",
                    "}\r",
                    "\r",
                    " function suc(){\r",
                    "\r",
                    "     index++ ;\r",
                    "     assignAccountNo() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    " function err(){\r",
                    "       index++ ;\r",
                    "     assignAccountNo() ;              \r",
                    " }"
                ]
            },
            "designerId": "0c3046ac-9746-4098-aa39-be7e40602574"
        }
    ]
}