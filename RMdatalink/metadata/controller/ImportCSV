{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "ImportCSV",
        "isRetailerMainView": false,
        "retailerForVendor": [
            "null"
        ]
    },
    "configAlternates": {
        "retailerForVendor": "object",
        "isRetailerMainView": "boolean"
    },
    "designerId": "25985451-9529-44db-a557-c43a885f1e0e",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "retailerForVendor",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isRetailerMainView",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "csvToJSON",
                "implHandler": [
                    "\r",
                    "function CSVToArray(strData, strDelimiter) {\r",
                    "    // Check to see if the delimiter is defined. If not,\r",
                    "    // then default to comma.\r",
                    "    strDelimiter = (strDelimiter || \",\");\r",
                    "    // Create a regular expression to parse the CSV values.\r",
                    "    var objPattern = new RegExp((\r",
                    "    // Delimiters.\r",
                    "    \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r",
                    "    // Quoted fields.\r",
                    "    \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r",
                    "    // Standard fields.\r",
                    "    \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"), \"gi\");\r",
                    "    // Create an array to hold our data. Give the array\r",
                    "    // a default empty first row.\r",
                    "    var arrData = [[]];\r",
                    "    // Create an array to hold our individual pattern\r",
                    "    // matching groups.\r",
                    "    var arrMatches = null;\r",
                    "    // Keep looping over the regular expression matches\r",
                    "    // until we can no longer find a match.\r",
                    "    while (arrMatches == objPattern.exec(strData)) {\r",
                    "        // Get the delimiter that was found.\r",
                    "        var strMatchedDelimiter = arrMatches[1];\r",
                    "        // Check to see if the given delimiter has a length\r",
                    "        // (is not the start of string) and if it matches\r",
                    "        // field delimiter. If id does not, then we know\r",
                    "        // that this delimiter is a row delimiter.\r",
                    "        if (strMatchedDelimiter.length && (strMatchedDelimiter != strDelimiter)) {\r",
                    "            // Since we have reached a new row of data,\r",
                    "            // add an empty row to our data array.\r",
                    "            arrData.push([]);\r",
                    "        }\r",
                    "        // Now that we have our delimiter out of the way,\r",
                    "        // let's check to see which kind of value we\r",
                    "        // captured (quoted or unquoted).\r",
                    "        if (arrMatches[2]) {\r",
                    "            // We found a quoted value. When we capture\r",
                    "            // this value, unescape any double quotes.\r",
                    "            var strMatchedValue = arrMatches[2].replace(\r",
                    "            new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\r",
                    "        } else {\r",
                    "            // We found a non-quoted value.\r",
                    "            var strMatchedValue = arrMatches[3];\r",
                    "        }\r",
                    "        // Now that we have our value string, let's add\r",
                    "        // it to the data array.\r",
                    "        arrData[arrData.length - 1].push(strMatchedValue);\r",
                    "    }\r",
                    "    // Return the parsed data.\r",
                    "    return (arrData);\r",
                    "}\r",
                    "\r",
                    "function CSV2JSON(csv) {\r",
                    "    var array = CSVToArray(csv);\r",
                    "    var objArray = [];\r",
                    "    for (var i = 1; i < array.length; i++) {\r",
                    "        objArray[i - 1] = {};\r",
                    "        for (var k = 0; k < array[0].length && k < array[i].length; k++) {\r",
                    "            var key = array[0][k];\r",
                    "            objArray[i - 1][key] = array[i][k] ;\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    var json = JSON.stringify(objArray);\r",
                    "    var str = json.replace(/},/g, \"},\\r\\n\");\r",
                    "\r",
                    "    return str;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function splitString(stringToSplit,separator)\r",
                    "{\r",
                    "    var arrayOfStrings = stringToSplit.split(separator);\r",
                    "    print('The original string is: \"' + stringToSplit + '\"');\r",
                    "    print('The separator is: \"' + separator + '\"');\r",
                    "    print(\"The array has \" + arrayOfStrings.length + \" elements: \");\r",
                    "\r",
                    "    for (var i=0; i < arrayOfStrings.length; i++)\r",
                    "        print(arrayOfStrings[i] + \" / \");\r",
                    "}\r",
                    "\r",
                    "var tempestString = \"Oh brave new world that has such people in it.\";\r",
                    "var monthString = \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\";\r",
                    "\r",
                    "var space = \" \";\r",
                    "var comma = \",\";\r",
                    "\r",
                    "splitString(tempestString, space);\r",
                    "splitString(tempestString);\r",
                    "splitString(monthString, comma);"
                ]
            },
            "designerId": "55462cc0-af67-4e96-a69c-855ae340d99e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getCSV",
                "implHandler": [
                    "\r",
                    "\r",
                    "//csvImportFileField\r",
                    "//addCsvContentButton"
                ]
            },
            "designerId": "9211b201-401f-4bcc-b883-3588422e021e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "temp",
                "implHandler": [
                    "csvReader =  new function() {\r",
                    "\r",
                    "    var me = this;              // pointer to ourselves\r",
                    "    me.ready = false;           // are we done with reading the file ?\r",
                    "    me.debug = true;            // are we in debug mode ?\r",
                    "    me.fileData = new Array();  // line data array\r",
                    "\r",
                    "    /* read file - event callback from the file input box */\r",
                    "    me.readFileEvent = function (event) {\r",
                    "\r",
                    "        me.fileData.length = 0; // make sure the array is clear\r",
                    "        me.ready = false;       // set ready to false\r",
                    "\r",
                    "        // the files, reader and string handler\r",
                    "        var files = event.target.files;\r",
                    "        var reader = new FileReader();\r",
                    "        var str;\r",
                    "\r",
                    "        // parse the file - reader is async\r",
                    "        reader.onload = function(theFile) {\r",
                    "\r",
                    "\r",
                    "            str = theFile.target.result;            // load file values\r",
                    "            var lines = str.split(/[\\r\\n|\\n]+/);    // split data by line\r",
                    "\r",
                    "            // for every line, remove formatting characters\r",
                    "            for(i=0;i<lines.length;i++) {\r",
                    "\r",
                    "                lines[i]  = lines[i].replace(/(\\r\\n|\\n|\\r|)/gm,\"\").split(/[,;]+/);          // remove formatting and split by comma OR semi colon\r",
                    "                lines[i]  = lines[i].filter( function(x){ if( x!= \"\" )return true; } );     // filter out null members\r",
                    "\r",
                    "                //if it isn't a comment line\r",
                    "                if(lines[i][0][0] != \"#\") {\r",
                    "\r",
                    "                    // cast all members to correct type\r",
                    "                    for(x =0;x< lines[i].length;x++) {\r",
                    "                        // try float\r",
                    "                        var result = parseFloat(lines[i][x]);\r",
                    "\r",
                    "                        // check if cast ok and set value\r",
                    "                        if( !isNaN(result) )\r",
                    "                            lines[i][x] = result;\r",
                    "                    }\r",
                    "                    // push line\r",
                    "                    me.fileData.push(lines[i]);\r",
                    "                }\r",
                    "            }\r",
                    "            // done, set ready\r",
                    "            me.ready = true;\r",
                    "            // if in debug, dump data to console\r",
                    "            me.consoleDump();\r",
                    "        };\r",
                    "        reader.onerror = function(){\r",
                    "            console.log('Error reading file');\r",
                    "        };\r",
                    "        reader.readAsText(files[0])  ;                                      // start reading the text, async\r",
                    "    };\r",
                    "\r",
                    "    /* dump the file data to the console */\r",
                    "    me.consoleDump = function() {\r",
                    "\r",
                    "        if(!me.ready || !me.debug)\r",
                    "            return null;\r",
                    "        var end = me.fileData.length;\r",
                    "        for(i=0; i<end; i++)\r",
                    "            console.log(me.fileData[i]);\r",
                    "    };\r",
                    "};\r",
                    ""
                ]
            },
            "designerId": "234b10b2-14aa-4369-8880-496f2c8b3576"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "filefield[action=importRetailers]",
                "designer|targetType": "Ext.field.File",
                "fn": "oncsvImportFileFieldUpdatedata",
                "implHandler": [
                    "// itemId=csvImportFileField\r",
                    "\r",
                    "\r",
                    "\r",
                    "var fileField = component ;\r",
                    "var fileSelect = fileField.element.dom.querySelector('input[type=file]');\r",
                    "var that = this ;\r",
                    "\r",
                    "fileSelect.onchange = function() {\r",
                    "    \r",
                    "            if(component.getItemId() == \"retailersMainScreenImportFileFld\")\r",
                    "            {\r",
                    "                that.config.isRetailerMainView = true ;\r",
                    "            }\r",
                    "            else{\r",
                    "            \r",
                    "                that.config.isRetailerMainView = false ;\r",
                    "            }\r",
                    "        \r",
                    "           \r",
                    "     var file = this.files[0];\r",
                    "\r",
                    "console.log(file);\r",
                    "\r",
                    "    var reader = new FileReader();\r",
                    "    reader.onload = function(event) {\r",
                    "       console.log(event.target.result) ;\r",
                    "\r",
                    "     var csvArray = processData(event.target.result) ;\r",
                    "     that.createJsonArray(csvArray) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    };\r",
                    "    reader.onerror = function(event) {\r",
                    "        console.error(\"File could not be read! Code \" + event.target.error.code);\r",
                    "    };\r",
                    "    reader.readAsText(file);\r",
                    "\r",
                    "};\r",
                    "\r",
                    "\r",
                    "\r",
                    " function processData(csv) {\r",
                    "      var allTextLines = csv.split(/\\r\\n|\\n/);\r",
                    "      var lines = [];\r",
                    "      for (var i=0; i<allTextLines.length; i++) {\r",
                    "          var data = allTextLines[i].split(';');\r",
                    "              var tarr = [];\r",
                    "              for (var j=0; j<data.length; j++) {\r",
                    "                  tarr.push(data[j]);\r",
                    "              }\r",
                    "              lines.push(tarr);\r",
                    "      }\r",
                    "    console.log(lines);\r",
                    "\r",
                    "     return lines ;\r",
                    "  }\r",
                    "\r",
                    ""
                ],
                "name": "initialize"
            },
            "designerId": "eb7934e8-167c-44e8-ab86-4e8544c1a3da"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "csv"
                ],
                "fn": "createJsonArray",
                "implHandler": [
                    "\r",
                    "var jsonArray = new Array() ;\r",
                    "var keyStr = csv[0] ;\r",
                    " keyStr = keyStr.toString() ;\r",
                    "\r",
                    " keys = keyStr.split(\",\") ;\r",
                    "console.log(keys) ;\r",
                    "\r",
                    "for(var i= 1; i < csv.length ; i++){\r",
                    "\r",
                    "    var objectToPush = {} ;\r",
                    "\r",
                    "    for(var j = 0 ;j < keys.length ; j++ ){\r",
                    "\r",
                    "        var key = keys[j] ;\r",
                    "\r",
                    "        var valStr= csv[i].toString() ;\r",
                    "        var values = valStr.split(\",\") ;\r",
                    "        console.log(values) ;\r",
                    "\r",
                    "        objectToPush[key] = values[j] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "      jsonArray.push(objectToPush);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "console.log(jsonArray);\r",
                    "this.loadRetailerToServer(jsonArray);\r",
                    "\r",
                    "/*\r",
                    "var prospectList  = Ext.ComponentQuery.query('#RDInStoreVendorsTab')[0].down(\"#mainList\");\r",
                    "\r",
                    "var prospectStore = prospectList.getStore() ;\r",
                    "prospectStore.removeAll();\r",
                    "prospectStore.sync();\r",
                    "\r",
                    "prospectStore.setData(jsonArray) ;\r",
                    "\r",
                    "prospectStore.sync();\r",
                    "\r",
                    "*/"
                ]
            },
            "designerId": "374a04c2-5b50-44c5-ad7e-602c4f188efa"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "retailers"
                ],
                "fn": "loadRetailerToServer",
                "implHandler": [
                    "/*\r",
                    "\r",
                    "\r",
                    "            \"store_name\": \"Abrash Rugs \",\r",
                    "            \"store_address_line1\": \"401 Milwaukee Road\",\r",
                    "            \"store_city\": \"Singalin\",\r",
                    "            \"store_state\": \"OH\",\r",
                    "            \"store_zip\": \"40555\",\r",
                    "            \"store_phone\": \"7073654287\",\r",
                    "            \"store_website\": \"www.abrashrugs.com\",\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "    var that = this ;\r",
                    "\r",
                    "    var crmUser = RMdatalink.app.getController('LoginHandler').config.userDetails.userName ;\r",
                    "\r",
                    "    var recordIndex = -1;\r",
                    "    var failedRecords = [];\r",
                    "    var successfulRecords = [];\r",
                    "    var duplicateRecords = [];\r",
                    "\r",
                    "if(!that.config.isRetailerMainView )\r",
                    "{\r",
                    "    var isRetailerDetailsView = RMdatalink.app.getController('UINav').isRetailerDetailsView;\r",
                    "    var selectedUserRecord = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;\r",
                    "\r",
                    "    var vendor_id = selectedUserRecord.record.data._id ;\r",
                    "    var vendor_name = selectedUserRecord.record.data.vendor_name ;\r",
                    "}\r",
                    "    var masterStore = Ext.getStore('retailersMaster');\r",
                    "\r",
                    "    if(this.validateRetailers(retailers[0])){\r",
                    "\r",
                    "         Ext.Viewport.setMasked({\r",
                    "                                    xtype: 'loadmask'\r",
                    "                                });\r",
                    "\r",
                    "        sendRecords() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "    }else{\r",
                    "\r",
                    "        Ext.Msg.alert(\"Alert\",\"invalid records\",Ext.emptyFn);\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "function sendRecords(){\r",
                    "\r",
                    "\r",
                    "\r",
                    "       if(recordIndex < ( retailers.length -1)) {\r",
                    "\r",
                    "          recordIndex ++;\r",
                    "          if(!that.config.isRetailerMainView )\r",
                    "          {\r",
                    "                  retailers[recordIndex].store_status = \"PROSPECTS\";\r",
                    "          }else{\r",
                    "                  retailers[recordIndex].store_status = \"NO_STATUS\";\r",
                    "          }\r",
                    "\r",
                    "           retailers[recordIndex].user_since = RMdatalink.util.globalMethods.getToday() ;\r",
                    "           retailers[recordIndex].created_by = crmUser ;\r",
                    "\r",
                    "               console.log( retailers[recordIndex]) ;\r",
                    "\r",
                    "                  checkForDuplication() ;\r",
                    "\r",
                    "         }else{\r",
                    "\r",
                    "\r",
                    "              Ext.Viewport.setMasked(false);\r",
                    "\r",
                    "\r",
                    "//               RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('retailersMaster') ;\r",
                    "//               RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),false);\r",
                    "\r",
                    "              Ext.Msg.alert(\"Info\",\"Records Uploaded Successfully.\",Ext.emptyFn);\r",
                    "\r",
                    "            if(!that.config.isRetailerMainView )\r",
                    "            {\r",
                    "                 RMdatalink.app.getController('RetailerDeatilsDataSet').loadActiveRetailersForVendors() ;\r",
                    "\r",
                    "                 RMdatalink.app.getController('VendorRetailerRelations').updateVendorOnRetailerAddedOrRemoved() ;\r",
                    "\r",
                    "\r",
                    "                  setVendorForRetailer();\r",
                    "\r",
                    "                  console.log(successfulRecords);\r",
                    "\r",
                    "                  console.log(failedRecords);\r",
                    "\r",
                    "                  console.log(duplicateRecords);\r",
                    "            }\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function sendRecordToServer(){\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "        RMdatalink.util.DataLoader.sendNewRecordForRetailerToServer(retailers[recordIndex],masterStore,successCallBack,errorCallBack) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "function successCallBack(){\r",
                    "\r",
                    "    successfulRecords.push(retailers[recordIndex]) ;\r",
                    "    if(!that.config.isRetailerMainView )\r",
                    "    {\r",
                    "        setRetailersForVendorByPhone(retailers[recordIndex]);\r",
                    "    }\r",
                    "    sendRecords();\r",
                    "\r",
                    "}\r",
                    "\r",
                    "function errorCallBack(){\r",
                    "\r",
                    "    failedRecords.push(retailers[recordIndex]) ;\r",
                    "    sendRecords();\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function checkForDuplication(){\r",
                    "\r",
                    "    var str_name = retailers[recordIndex].store_phone ;\r",
                    "    RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_masterretailerrecords\",pageNo:1,pageSize: 2 ,sortBy:{},query:{store_phone:str_name },fields:{store_phone:1,vendors:1}},duplicationSuccess,duplicationError);\r",
                    "\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function duplicationSuccess(){\r",
                    "    console.log(arguments[0]);\r",
                    "\r",
                    "    if(arguments[0].count == 0 ){\r",
                    "          console.log(\"New Record\");\r",
                    "          sendRecordToServer() ;\r",
                    "    }\r",
                    "    else{\r",
                    "\r",
                    "        console.log(\"Record Already Present \");\r",
                    "         setRetailersForVendorByPhone(retailers[recordIndex]);\r",
                    "\r",
                    "        duplicateRecords.push(arguments[0].items[0]) ;\r",
                    "        sendRecords() ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "function duplicationError(){\r",
                    "\r",
                    "    errorCallBack() ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function setVendorForRetailer(){\r",
                    "\r",
                    "        if(!that.config.isRetailerMainView )\r",
                    "        {\r",
                    "            that.assignVendorForRetailer(vendor_id,vendor_name,duplicateRecords) ;\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "/* Note: store_phone is used as primary key for retailers */\r",
                    "\r",
                    "function setRetailersForVendorByPhone(retailer){\r",
                    "    //assignRetailerForVendor\r",
                    "    if(!that.config.isRetailerMainView )\r",
                    "    {\r",
                    "        that.assignRetailerForVendor(selectedUserRecord.record.data,retailer.store_phone) ;\r",
                    "    }\r",
                    "}"
                ]
            },
            "designerId": "6d3c5a18-193e-47c5-9b77-b7a0e98c0255"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "retailer"
                ],
                "fn": "validateRetailers",
                "implHandler": [
                    "   /*\r",
                    "\r",
                    "\r",
                    "            \"store_name\": \"Abrash Rugs \",\r",
                    "            \"store_address_line1\": \"401 Milwaukee Road\",\r",
                    "            \"store_city\": \"Singalin\",\r",
                    "            \"store_state\": \"OH\",\r",
                    "            \"store_zip\": \"40555\",\r",
                    "            \"store_phone\": \"7073654287\",\r",
                    "            \"store_website\": \"www.abrashrugs.com\",\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    */\r",
                    "\r",
                    "\r",
                    "\r",
                    "        var validationresult = true ;\r",
                    "\r",
                    "        if(! retailer.store_name){\r",
                    "\r",
                    "            validationresult = false ;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        if(! retailer.store_address_line1){\r",
                    "\r",
                    "            validationresult = false ;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        if(! retailer.store_city){\r",
                    "\r",
                    "            validationresult = false ;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        if(! retailer.store_state){\r",
                    "\r",
                    "            validationresult = false ;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "      if(! retailer.store_zip){\r",
                    "\r",
                    "            validationresult = false ;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "      if(! retailer.store_phone){\r",
                    "\r",
                    "            validationresult = false ;\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "\r",
                    "    return validationresult ;"
                ]
            },
            "designerId": "1de6922d-bc60-4929-843a-2d265b5fbcc7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "vendor",
                    "store_phone",
                    "isFromRelController",
                    "str_id"
                ],
                "fn": "assignRetailerForVendor",
                "implHandler": [
                    "\r",
                    "\r",
                    "\r",
                    "/* Note: store_phone is used as primary key for retailers */\r",
                    "\r",
                    "   if(!this.config.retailerForVendor)\r",
                    "   {\r",
                    "       this.config.retailerForVendor = new Array() ;\r",
                    "   }\r",
                    "\r",
                    "\r",
                    "       /*retailer_phone is store_phone*/\r",
                    "\r",
                    "var isRecAlreadyPresent = false ;\r",
                    "\r",
                    "\r",
                    "for(var i =0 ; i < this.config.retailerForVendor.length ; i++){\r",
                    "\r",
                    "    if( this.config.retailerForVendor[i].retailer_phone == store_phone ){\r",
                    "\r",
                    "        isRecAlreadyPresent = true ;\r",
                    "        break ;\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "console.log(store_phone) ;\r",
                    "\r",
                    "\r",
                    "console.log(isRecAlreadyPresent) ;\r",
                    "\r",
                    "if(! isRecAlreadyPresent){\r",
                    "\r",
                    "    if(isFromRelController){\r",
                    "        this.config.retailerForVendor.push({\r",
                    "\r",
                    "                  retailer_phone : store_phone,\r",
                    "                  type: \"ACTIVE\",\r",
                    "                  retailer_id:str_id\r",
                    "\r",
                    "       });\r",
                    "    }\r",
                    "    else{\r",
                    "       this.config.retailerForVendor.push({\r",
                    "\r",
                    "                  retailer_phone : store_phone,\r",
                    "                  type: \"ACTIVE\"\r",
                    "\r",
                    "       });\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    if(isFromRelController){\r",
                    "\r",
                    "        RMdatalink.app.getController('VendorRetailerRelations').addRtToRTVList() ;\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "else{\r",
                    "\r",
                    "\r",
                    "    console.log(\"Vendor already have this retailer\");\r",
                    "}\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "67dc2271-f1f9-438f-b182-f3a6f5538323"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "vendor_id",
                    "vendor_name",
                    "duplicatedRetailers"
                ],
                "fn": "assignVendorForRetailer",
                "implHandler": [
                    "\r",
                    "/*\r",
                    "\r",
                    " get all retailers having phone nos\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "return ;\r",
                    "\r",
                    "var rtIndex = -1 ;\r",
                    "\r",
                    "var updatedRecords = [] ;\r",
                    "var duplicatedRecords = [] ;\r",
                    "var failedRecords = [] ;\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "\r",
                    "console.error(duplicatedRetailers);\r",
                    "\r",
                    "\r",
                    "updateRetailers() ;\r",
                    "\r",
                    "\r",
                    "function updateRetailers(){\r",
                    "\r",
                    "    if(rtIndex  < (duplicatedRetailers.length -1 ))\r",
                    "    {\r",
                    "         rtIndex++ ;\r",
                    "\r",
                    "        var recAlreadyPresent = false ;\r",
                    "        for(var i =0 ; i < duplicatedRetailers[rtIndex].vendors.length ; i++ )\r",
                    "        {\r",
                    "\r",
                    "            if( duplicatedRetailers[rtIndex].vendors[i].vendor_id == vendor_id){\r",
                    "\r",
                    "                recAlreadyPresent = true ;\r",
                    "                break ;\r",
                    "            }\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        if(recAlreadyPresent){\r",
                    "\r",
                    "            duplicatedRecords.push(duplicatedRetailers[rtIndex]) ;\r",
                    "\r",
                    "            updateRetailers() ;\r",
                    "\r",
                    "        }else{\r",
                    "            duplicatedRetailers[rtIndex].vendors.push(\r",
                    "\r",
                    "              {\r",
                    "                  vendor_id : vendor_id,\r",
                    "                  vendor_name:vendor_name,\r",
                    "                  type: \"ACTIVE\"\r",
                    "              }\r",
                    "\r",
                    "            );\r",
                    "            sendUpdateData() ;\r",
                    "        }\r",
                    "    }\r",
                    "    else{\r",
                    "\r",
                    "        console.log(\"Retailers updated for current Vendor\");\r",
                    "\r",
                    "        RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('retailersMaster') ;\r",
                    "        RMdatalink.app.getController('PaginationController').loadStore(masterStore.getPageNo(),RMdatalink.util.DataLoader.getPageSize(),false);\r",
                    "\r",
                    "\r",
                    "        console.log(updatedRecords) ;\r",
                    "        console.log(duplicatedRecords) ;\r",
                    "        console.log(failedRecords) ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function sendUpdateData(){\r",
                    "\r",
                    "\r",
                    "    //duplicatedRetailers[rtIndex]\r",
                    "\r",
                    "     var rec = new Object() ;\r",
                    "     rec = duplicatedRetailers[rtIndex] ;\r",
                    "     var _id = duplicatedRetailers[rtIndex]._id ;\r",
                    "\r",
                    "     delete(rec._id);\r",
                    "     delete(rec.store_phone );\r",
                    "\r",
                    "\r",
                    "     RMdatalink.iwa.rdl.doUpdateCollection(masterStore, rec , _id , successCallBack , errorCallback );\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function successCallBack(){\r",
                    "    updatedRecords.push(duplicatedRetailers[rtIndex]) ;\r",
                    "\r",
                    "\r",
                    "    updateRetailers() ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function errorCallback(){\r",
                    "\r",
                    "    failedRecords.push(duplicatedRetailers[rtIndex]) ;\r",
                    "\r",
                    "    updateRetailers();\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "25985da5-2fc5-42c7-8c9f-b629f7216e6b"
        }
    ]
}