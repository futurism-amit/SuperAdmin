{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "ProductBillingController",
        "productKey": "product_rmpro",
        "rmProPackValue": 0
    },
    "configAlternates": {
        "rtProduct": "object",
        "rmProPackValue": "number"
    },
    "designerId": "ef458d59-7947-4a3d-9fde-3a71b2628f98",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "rtProduct",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "title",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "productKey",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "rmProPackValue",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target"
                ],
                "fn": "displayRMPROBillig",
                "implHandler": [
                    "//retailerBillingSheet\r",
                    "\r",
                    "\r",
                    "\r",
                    "// this.initProductRtBilling() ;\r",
                    "\r",
                    "\r",
                    "this.setRM_PROPackageList() ;\r",
                    "this.setRM_proModules() ;\r",
                    "\r",
                    "\r",
                    "this.initProductRtBilling() ;\r",
                    "\r",
                    "\r",
                    "//this.fillModuleLists() ;\r",
                    "\r",
                    " var that = this ;\r",
                    " var timeout = setTimeout(function(){\r",
                    "            that.calculateBillingPrices() ;\r",
                    " },100);\r",
                    "\r",
                    "\r",
                    "var record = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection()[0] ;\r",
                    "var packName = '<div style=\"font-size: 14px;margin-left: 10px;\">' + record.data.text+ '</div>' ;\r",
                    "Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageNameLabel').setHtml( packName );\r",
                    "\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageBundlePriceLbl').setHtml( '<div style=\"margin-right: 80px;font-size: small;\"> Bundle Price ::$ '+record.data.rm_pro_bundle_price+'</div>');\r",
                    "\r",
                    "\r",
                    "var rm_pro_modules = record.data.rm_pro_modules ;\r",
                    "var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;\r",
                    "\r",
                    "var adOnsStore = addOnsList.getStore() ;\r",
                    " for(var i =0 ; i< rm_pro_modules.length; i++){\r",
                    "\r",
                    "    var recIndex = adOnsStore.findExact('_id', rm_pro_modules[i].module_id ) ;\r",
                    "\r",
                    "    if(recIndex != -1)\r",
                    "    {\r",
                    "\r",
                    "        addOnsList.select(adOnsStore.getAt(recIndex),true,true) ;\r",
                    "\r",
                    "\r",
                    "    }\r",
                    " }"
                ]
            },
            "designerId": "9f51ea7e-cca7-449e-8d63-4dc720417221"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getBillingSheet",
                "implHandler": [
                    "if(Ext.ComponentQuery.query(\"#retailerBillingSheet\")[0])\r",
                    "{\r",
                    "\r",
                    " return Ext.ComponentQuery.query(\"#retailerBillingSheet\")[0];\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    " return Ext.widget('retailerBillingSheet');\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "38ae6c04-ed9a-433d-9a30-b395a95f7da6"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "list[itemId=RDStoreProductsList]",
                "designer|targetType": "Ext.dataview.List",
                "fn": "onRDStoreProductsListSelect",
                "implHandler": [
                    "\r",
                    "if(record.data.ProductName == \"RM PRO\")\r",
                    "{\r",
                    "    this.getBillingSheet().show();\r",
                    "    this.intRMPROBilling() ;\r",
                    "    this.displayRMPROBillig(target);\r",
                    "}\r",
                    "else if(record.data.ProductName == \"Datalink\"){\r",
                    "    this.getBillingSheet().show();\r",
                    "    this.initDatalinkBilling() ;\r",
                    "    this.displayDatalinkBilling(target);\r",
                    "}\r",
                    "\r",
                    " RMdatalink.app.getController('RetailerDeatilsDataSet').saveRTProductSetup();"
                ],
                "name": "itemtap"
            },
            "designerId": "4db98c2f-683e-4b8a-9750-33eba26f1fdc"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=productBillingSheetCancel]",
                "designer|targetType": "Ext.Button",
                "fn": "onproductBillingSheetCancelTap",
                "implHandler": [
                    "this.hideProductBillingSheet();"
                ],
                "name": "tap"
            },
            "designerId": "03b46548-efa4-4b4d-9259-bc3ee358e30e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRM_PROPackageList",
                "implHandler": [
                    "\r",
                    "   var billingController =  RMdatalink.app.getController('BillingDetailsController') ;\r",
                    "\r",
                    "if(billingController.config.pricingData){\r",
                    "\r",
                    "\r",
                    "        RMdatalink.util.globalMethods.fillListData('#rmProSelectPackageList',billingController.config.pricingData[3].pricing_policy);\r",
                    "\r",
                    "}\r",
                    "\r",
                    "// Ext.ComponentQuery.query('#rmProSelectPackageList')[0].select(0,false,true) ;\r",
                    "// Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(0,false,true) ;"
                ]
            },
            "designerId": "a5d05d26-5ed6-4a53-9b02-7a66a1c2bdb3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setRM_proModules",
                "implHandler": [
                    "\r",
                    "\r",
                    "var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;\r",
                    "\r",
                    "var rmproStore = Ext.getStore('products.RMProStore') ;\r",
                    "\r",
                    "\r",
                    "rmProBillingStore.removeAll();\r",
                    "rmProBillingStore.sync() ;\r",
                    "\r",
                    "var data = getArrayDataFromStore(rmproStore) ;\r",
                    "\r",
                    "var qunty = 1 ;\r",
                    "for(var i=0 ; i< data.length ; i ++){\r",
                    "\r",
                    "    qunty =   data[i].quantity ?  data[i].quantity  : 1 ;\r",
                    "    data[i].trial = \"\";\r",
                    "    data[i].quantity = qunty ;\r",
                    "    data[i].per_month = 1 ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "rmProBillingStore.setData(data);\r",
                    "rmProBillingStore.sync() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var rtDiscountStore = Ext.getStore('products.BillingDiscount') ;\r",
                    "var rmProDiscount = Ext.getStore('products.RMProDiscountStore');\r",
                    "\r",
                    "rtDiscountStore.removeAll();\r",
                    "rtDiscountStore.sync() ;\r",
                    "\r",
                    "rtDiscountStore.setData(getArrayDataFromStore(rmProDiscount));\r",
                    "rtDiscountStore.sync() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "  function getArrayDataFromStore(store){\r",
                    "\r",
                    "        var data = new Array();\r",
                    "        data = store.getData().items;\r",
                    "\r",
                    "        var dataToReturn = new Array();\r",
                    "\r",
                    "        for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "            dataToReturn.push(data[i].data);\r",
                    "        }\r",
                    "\r",
                    "        return dataToReturn ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "656361f4-4b0d-4009-aa40-a716e246e5cc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "updateBillPrices",
                "implHandler": [
                    "\r",
                    "var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;\r",
                    "\r",
                    "var rateList = Ext.ComponentQuery.query('#rmProSelectRateList')[0] ;\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "d20b2f8f-983a-4c9b-90c9-05174b72de9b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "inputFld",
                    "record_key"
                ],
                "fn": "updateModuleList",
                "implHandler": [
                    "console.log(inputFld.attributes['data-id'].value) ;\r",
                    "\r",
                    "var _id = inputFld.attributes['data-id'].value ;\r",
                    "var value = inputFld.value ;\r",
                    "\r",
                    "var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;\r",
                    "var recIndex = rmProBillingStore.findExact('_id',_id) ;\r",
                    "\r",
                    "if(recIndex == -1){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var record = rmProBillingStore.getAt(recIndex) ;\r",
                    "\r",
                    "record.set(record_key,value) ;\r",
                    "\r",
                    "\r",
                    "this.calculateBillingPrices() ;"
                ]
            },
            "designerId": "d755cb79-2205-44a1-9d30-99eba3811a58"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "calculateBillingPrices",
                "implHandler": [
                    "\r",
                    "var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;\r",
                    "var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;\r",
                    "var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;\r",
                    "\r",
                    "\r",
                    "var rateKey = Ext.ComponentQuery.query('#rmProSelectRateList')[0].getSelection()[0].data.value ;\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "module_standard_price\r",
                    "module_promotional_price\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "for(var i=0; i < rmProBillingStore.getData().all.length; i++){\r",
                    "\r",
                    "    var tRec = rmProBillingStore.getAt(i);\r",
                    "\r",
                    "    var qty = tRec.get(\"quantity\") ? parseInt(tRec.get(\"quantity\"),0) : 1 ;\r",
                    "    var rate = tRec.get(rateKey) ? parseInt(tRec.get(rateKey),0) : 1 ;\r",
                    "\r",
                    "    var stdRate = tRec.get(\"module_standard_price\") ? parseInt(tRec.get(\"module_standard_price\"),0) : 1 ;\r",
                    "    var promoRate = tRec.get(\"module_promotional_price\") ? parseInt(tRec.get(\"module_promotional_price\"),0) : 1 ;\r",
                    "\r",
                    "    var per_month = qty * rate ;\r",
                    "\r",
                    "    var stdPerMonth = qty * stdRate ;\r",
                    "\r",
                    "    var promoPerMonth = qty * promoRate ;\r",
                    "\r",
                    "    tRec.set(\"per_month\",per_month);\r",
                    "\r",
                    "    tRec.set(\"standard_total\",stdPerMonth);\r",
                    "    tRec.set(\"promotional_total\",promoPerMonth);\r",
                    "\r",
                    "\r",
                    "    tRec.dirty = true ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "rmProBillingStore.sync() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var selectedModules = addOnsList.getSelection() ;\r",
                    "\r",
                    "var totalMonthlyMemberShip = 0 ;\r",
                    "\r",
                    "var totalStandardMonthlyMbrShip = 0 ;\r",
                    "var totalPromotionalMonthlyMbrShip = 0 ;\r",
                    "\r",
                    "for(var i=0 ; i <selectedModules.length ; i++){\r",
                    "\r",
                    "    totalMonthlyMemberShip +=  parseInt(selectedModules[i].get('per_month'),0)  ;\r",
                    "\r",
                    "    totalStandardMonthlyMbrShip +=  parseInt(selectedModules[i].get('standard_total'),0)  ;\r",
                    "    totalPromotionalMonthlyMbrShip +=  parseInt(selectedModules[i].get('promotional_total'),0)  ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "////if product RM-PRO\r",
                    "if(this.config.productKey == \"product_rmpro\")\r",
                    "{\r",
                    "    var record = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection()[0] ;\r",
                    "\r",
                    "    if(record.data.rm_pro_bundle_price)\r",
                    "    {\r",
                    "        totalMonthlyMemberShip += parseInt(record.data.rm_pro_bundle_price,0) ;\r",
                    "\r",
                    "        totalStandardMonthlyMbrShip += parseInt(record.data.rm_pro_bundle_price,0) ;\r",
                    "        totalPromotionalMonthlyMbrShip += parseInt(record.data.rm_pro_bundle_price,0) ;\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rtBillTotalMonthlyMbrShipFld')[0].setValue(totalMonthlyMemberShip) ;\r",
                    "\r",
                    "\r",
                    "//if(this.config.productKey == \"product_rmpro\"){\r",
                    "    this.calculateBillingDiscount();\r",
                    "//}\r",
                    "\r",
                    "//textThroughLine\r",
                    "/*\r",
                    "var discounList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');\r",
                    "\r",
                    "var yrlyDiscount = discounList.getSelection();\r",
                    "\r",
                    "if(yrlyDiscount.length > 0){\r",
                    "\r",
                    "    yrlyDiscount = yrlyDiscount[0] ;\r",
                    "}\r",
                    "*/\r",
                    "\r",
                    " Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].setHtml(\"$ \"+totalStandardMonthlyMbrShip);\r",
                    "Ext.ComponentQuery.query('#rmProPrmotionalPriceTotalLbl')[0].setHtml(\"$ \"+totalPromotionalMonthlyMbrShip);\r",
                    "\r",
                    "if(rateKey == \"module_standard_price\" )\r",
                    "{\r",
                    " Ext.ComponentQuery.query('#rmProPrmotionalPriceTotalLbl')[0].setHidden(true);\r",
                    "\r",
                    "  Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].setWidth(\"20%\");\r",
                    "\r",
                    "     Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].removeCls('textThroughLine');\r",
                    "}else{\r",
                    "\r",
                    "     Ext.ComponentQuery.query('#rmProPrmotionalPriceTotalLbl')[0].setHidden(false);\r",
                    "\r",
                    "  Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].setWidth(\"10%\");\r",
                    "\r",
                    "     Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].setCls('textThroughLine');\r",
                    "}"
                ]
            },
            "designerId": "a7e91fe5-5017-41fd-a4d5-618eb9ad366f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onModuleListSelectUnSelect",
                "implHandler": [
                    "\r",
                    " var that = this ;\r",
                    " var timeout = setTimeout(function(){\r",
                    "            that.calculateBillingPrices() ;\r",
                    " },100);"
                ]
            },
            "designerId": "f9734e53-87db-486d-97a4-26befbbd8e87"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "list[itemId=rmProSelectPackageList]",
                "designer|targetType": "Ext.dataview.List",
                "fn": "onrmProSelectPackageListSelect",
                "implHandler": [
                    "console.log(record);\r",
                    "\r",
                    "      // RMdatalink.app.getController('BillingDetailsController').config.pricingData[3].active_pricing_policy = parseInt(record.data.value,0) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "this.config.rmProPackValue =  record.data.value ;\r",
                    "\r",
                    "if(record.data.value == \"5\")\r",
                    "{\r",
                    "    Ext.ComponentQuery.query('#rmProModulesForRtList')[0].setFlex(0.14);\r",
                    "}else{\r",
                    "    \r",
                    "    Ext.ComponentQuery.query('#rmProModulesForRtList')[0].setFlex( 1 );\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var packName = '<div style=\"font-size: 14px;margin-left: 10px;\">' + record.data.text+ '</div>' ;\r",
                    "Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageNameLabel').setHtml( packName );\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageBundlePriceLbl').setHtml( '<div style=\"margin-right: 38px;font-size: small;\"> Bundle Price ::'+record.data.rm_pro_bundle_price+'</div>');\r",
                    "\r",
                    "this.fillModuleLists() ;\r",
                    "var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;\r",
                    "\r",
                    "//var moduleStore = moduleList.getStore() ;\r",
                    "var moduleStore = Ext.getStore('products.BillingRmproModules') ;\r",
                    "\r",
                    "var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;\r",
                    "\r",
                    "var rm_pro_modules = record.data.rm_pro_modules ;\r",
                    "\r",
                    "//this.fillModuleLists() ;\r",
                    "\r",
                    "\r",
                    "//moduleList.selectAll();\r",
                    "\r",
                    "//module_listed_order\r",
                    "// for(var i = 0 ; i < moduleStore.getData().all.length; i++ ){\r",
                    "\r",
                    "//     var rec = moduleStore.getAt(i) ;\r",
                    "//     rec.set('module_listed_order',(100+ i));\r",
                    "\r",
                    "// }\r",
                    "\r",
                    "\r",
                    "var adOnsStore = addOnsList.getStore() ;\r",
                    " for(var i =0 ; i< rm_pro_modules.length; i++){\r",
                    "\r",
                    "    var recIndex = adOnsStore.findExact('_id', rm_pro_modules[i].module_id ) ;\r",
                    "\r",
                    "    if(recIndex != -1)\r",
                    "    {\r",
                    "\r",
                    "        addOnsList.select(adOnsStore.getAt(recIndex),true,true) ;\r",
                    "\r",
                    "\r",
                    "    }\r",
                    " }\r",
                    "\r",
                    "\r",
                    "// for(var i =0 ; i< rm_pro_modules.length; i++){\r",
                    "\r",
                    "//     var recIndex = moduleStore.findExact('_id', rm_pro_modules[i].module_id ) ;\r",
                    "\r",
                    "//     if(recIndex != -1)\r",
                    "//     {\r",
                    "\r",
                    "//         moduleStore.getAt(recIndex).set('module_listed_order',i );\r",
                    "\r",
                    "\r",
                    "\r",
                    "//     }\r",
                    "// }\r",
                    "\r",
                    "this.calculateBillingPrices() ;"
                ],
                "name": "select"
            },
            "designerId": "7873e30b-dde4-4c0d-bd3f-63871e28ca94"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[itemId=rtBillMonthlyMemberShipFld]",
                "designer|targetType": "Ext.field.Text",
                "fn": "onrtBillMonthlyMemberShipFldChange",
                "implHandler": [
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "this.calculateBillingDiscount() ;"
                ],
                "name": "change"
            },
            "designerId": "f0cf66a3-5080-483d-a7e6-f2c69ee0ab3d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "calculateBillingDiscount",
                "implHandler": [
                    "var newValue = Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].getValue() ;\r",
                    "\r",
                    "if(!newValue && newValue == \"\"){\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "var discFldValue = (Ext.ComponentQuery.query('#rtBillTotalMonthlyMbrShipFld')[0].getValue() - parseFloat(newValue) ).toFixed(2);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rtBillDiscountTxtFld')[0].setValue(discFldValue);\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rtBillYearlyMemberShipFld')[0].setValue( (parseFloat(newValue) * 12).toFixed(2) );\r",
                    "\r",
                    "\r",
                    "\r",
                    "var rtDiscountStore = Ext.getStore('products.BillingDiscount') ;\r",
                    "\r",
                    "var yrlyMbrShip = Ext.ComponentQuery.query('#rtBillYearlyMemberShipFld')[0].getValue() ;\r",
                    "\r",
                    "if( !yrlyMbrShip || yrlyMbrShip == \"\"){\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "for(var i = 0 ; i < rtDiscountStore.getData().all.length; i++ ){\r",
                    "\r",
                    "    var rec = rtDiscountStore.getAt(i) ;\r",
                    "    var discount_total = (yrlyMbrShip * (100 - rec.get('discount_value')) )/100 ;\r",
                    "    var discount_saving = yrlyMbrShip - discount_total ;\r",
                    "    var discount_per_month = discount_total / 12 ;\r",
                    "\r",
                    "    var duration = rec.get('discount_duration') ;\r",
                    "\r",
                    "    if(! duration){\r",
                    "        duration = i + 1;\r",
                    "    }\r",
                    "\r",
                    "        discount_total =  Math.round(discount_total) ;\r",
                    "        discount_saving =  Math.round(discount_saving) ;\r",
                    "        discount_per_month =  Math.round(discount_per_month) ;\r",
                    "\r",
                    "    rec.set('discount_total',discount_total * duration );\r",
                    "    rec.set('discount_saving',discount_saving * duration  );\r",
                    "    rec.set('discount_per_month',discount_per_month);\r",
                    "\r",
                    "    rec.dirty = true;\r",
                    "}\r",
                    "\r",
                    "rtDiscountStore.sync() ;"
                ]
            },
            "designerId": "92b8f9ac-01de-4586-a2eb-49aa7a5be5b8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initProductRtBilling",
                "implHandler": [
                    "//Retailer RM-PRO Billing\r",
                    "\r",
                    "var rtRecord =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow().record ;\r",
                    "\r",
                    "if(Ext.ComponentQuery.query('#rtBillingHeaderLabel')[0])\r",
                    "{\r",
                    "    Ext.ComponentQuery.query('#rtBillingHeaderLabel')[0].setHtml(rtRecord.get('store_name') + \" : RMPro product setup\");\r",
                    "}\r",
                    "\r",
                    "\r",
                    "this.config.rtProduct = rtRecord.get('products');\r",
                    "\r",
                    "\r",
                    "var product_billng = rtRecord.get('product_billng') ;\r",
                    "\r",
                    "console.log(product_billng) ;\r",
                    "\r",
                    "if(!product_billng || ! product_billng.product_rmpro){\r",
                    "\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(0,false,true) ;\r",
                    "    Ext.ComponentQuery.query('#rmProSelectPackageList')[0].select(0,false,false) ;\r",
                    "   // Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(0,false,true) ;\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "console.log(product_billng) ;\r",
                    "\r",
                    "\r",
                    "var selectedPackage = product_billng.product_rmpro.selected_package ;\r",
                    "var selectedRate = product_billng.product_rmpro.selected_rate == \"module_standard_price\" ? 0 : 1 ;\r",
                    "var monthlyMbrShip = product_billng.product_rmpro.monthly_membership ;\r",
                    "var intActDate =  product_billng.product_rmpro.initial_activation_date ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(! intActDate)\r",
                    "{\r",
                    "    intActDate = RMdatalink.util.globalMethods.getAmToday();\r",
                    "}\r",
                    "Ext.ComponentQuery.query('#rmProSelectPackageList')[0].select((selectedPackage-1),false,true) ;\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(selectedRate,false,false) ;\r",
                    "\r",
                    "if(Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0])\r",
                    "{\r",
                    "    Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].setValue(intActDate) ;\r",
                    "}\r",
                    "Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].setValue(monthlyMbrShip) ;\r",
                    "\r",
                    "var modules = product_billng.product_rmpro.product_modules ;\r",
                    "\r",
                    "this.fillModuleLists() ;\r",
                    "\r",
                    "this.selectModulefrmModuleId(modules) ;\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].setValue( product_billng.product_rmpro.commissionable_ammount);\r",
                    "Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].setValue( product_billng.product_rmpro.commission_percent) ;\r",
                    "\r",
                    "var salesPersonsStore = Ext.getStore('products.RtSalesPersonStore') ;\r",
                    "\r",
                    "salesPersonsStore.removeAll();\r",
                    "salesPersonsStore.sync();\r",
                    "\r",
                    "salesPersonsStore.setData(product_billng.product_rmpro.sales_persons);\r",
                    "salesPersonsStore.sync();\r",
                    "\r",
                    "\r",
                    "\r",
                    " var paymentPrdList = Ext.ComponentQuery.query('#rmProPaymentFreqList')[0];\r",
                    "\r",
                    " var paymentPrd = 1;\r",
                    "\r",
                    "if(product_billng.product_rmpro.payment_frequency){\r",
                    "\r",
                    "     paymentPrd = parseInt(product_billng.product_rmpro.payment_frequency, 0);\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    paymentPrd = parseInt(product_billng.product_rmpro.payment_period, 0);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(!paymentPrd){\r",
                    "\r",
                    "    paymentPrdList.select(0);\r",
                    "}else{\r",
                    "\r",
                    "    var paymentPrdStore = paymentPrdList.getStore() ;\r",
                    "     var searchValForPayPrd = paymentPrd.toString() ;\r",
                    "\r",
                    "    var recIndexForPayPrd = paymentPrdStore.findExact('value',searchValForPayPrd);\r",
                    "\r",
                    "    if(recIndexForPayPrd != -1){\r",
                    "\r",
                    "        paymentPrdList.select(recIndexForPayPrd) ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var contractTermList = Ext.ComponentQuery.query('#rmProSlctTermList')[0];\r",
                    "\r",
                    " var contractPeriod =  parseInt(product_billng.product_rmpro.contract_period, 0);\r",
                    "\r",
                    "if(!contractPeriod){\r",
                    "\r",
                    "    contractTermList.select(0);\r",
                    "}else{\r",
                    "        var contractStore = contractTermList.getStore() ;\r",
                    "\r",
                    "     var searchValForContract = contractPeriod.toString() ;\r",
                    "\r",
                    "    var recIndexForContract = contractStore.findExact('value',searchValForContract);\r",
                    "\r",
                    "    if(recIndexForContract != -1){\r",
                    "\r",
                    "        contractTermList.select(recIndexForContract) ;\r",
                    "    }\r",
                    "\r",
                    "//     switch(contractPeriod){\r",
                    "\r",
                    "//             case 12:\r",
                    "//              paymentPrdList.select(0);\r",
                    "//             break;\r",
                    "\r",
                    "//             case 24:\r",
                    "//              paymentPrdList.select(1);\r",
                    "//             break;\r",
                    "\r",
                    "//             case 36:\r",
                    "//              paymentPrdList.select(2);\r",
                    "//             break;\r",
                    "//     }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var discountList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');\r",
                    "\r",
                    " var discountValue =  parseInt(product_billng.product_rmpro.advance_payment_period, 0);\r",
                    "var discountStore = discountList.getStore() ;\r",
                    "\r",
                    "if(!contractPeriod){\r",
                    "\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "\r",
                    "    var searchVal = (discountValue/12).toString() ;\r",
                    "\r",
                    "    var recIndex = discountStore.findExact('discount_duration',searchVal);\r",
                    "\r",
                    "    if(recIndex != -1){\r",
                    "\r",
                    "        discountList.select(recIndex) ;\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    " Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].setValue(product_billng.product_rmpro.contract_start_date ) ;\r",
                    "\r",
                    "/*\r",
                    " commissionable_ammount:Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue(),\r",
                    "    commission_percent:Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue(),\r",
                    "    sales_persons:getSalesPersons()\r",
                    "*/"
                ]
            },
            "designerId": "471bbf2a-49e7-42ce-84fc-dd0641fda392"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "showSubscription"
                ],
                "fn": "saveRtProductBilling",
                "implHandler": [
                    "//this.config.rtProduct = rtRecord.get('products');\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "\r",
                    "rtBillDiscountTxtFld\r",
                    "rtBillMonthlyMemberShipFld\r",
                    "rtBillYearlyMemberShipFld\r",
                    "\r",
                    "\r",
                    "product_billng\r",
                    "{\r",
                    "    product_rmpro\r",
                    "    {\r",
                    "    initial_activation_date\r",
                    "    selected_package:\r",
                    "    selected_rate:\r",
                    "    monthly_membership\r",
                    "    product_modules:[\r",
                    "    {\r",
                    "        module_id:\r",
                    "        trial:\r",
                    "        quantity:\r",
                    "    }\r",
                    "\r",
                    "    ]\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "*/\r",
                    "\r",
                    "var that = this ;\r",
                    "var rtRecord =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow().record ;\r",
                    "\r",
                    "var recToUpdate ={product_billng : rtRecord.get('product_billng') ? rtRecord.get('product_billng') : {} };\r",
                    "\r",
                    "var rateKey = Ext.ComponentQuery.query('#rmProSelectRateList')[0].getSelection()[0].data.value ;\r",
                    "var monthlyMbrShip = Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].getValue() ;\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "\r",
                    "var initActData = Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].getValue() ;\r",
                    "\r",
                    "var temp = recToUpdate.product_billng ? ( recToUpdate.product_billng.product_rmpro ? recToUpdate.product_billng.product_rmpro : {} ) : {} ;\r",
                    "\r",
                    "console.log(\"*******************************\");\r",
                    "console.log(temp);\r",
                    "\r",
                    "\r",
                    "    temp.initial_activation_date = initActData;\r",
                    "    temp.selected_package = getSelectedPackage() ;\r",
                    "    temp.selected_rate = rateKey ;\r",
                    "    temp.monthly_membership  = monthlyMbrShip ;\r",
                    "    temp.product_modules = that.getSelectedModules() ;\r",
                    "    temp.commissionable_ammount = Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue() ;\r",
                    "    temp.commission_percent = Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue() ;\r",
                    "    temp.sales_persons = getSalesPersons() ;\r",
                    "\r",
                    "    temp.payment_period = getPayemntPeriod() ;\r",
                    "\r",
                    "    temp.advance_payment_period = getAdvancePaymentPeriod() ;\r",
                    "\r",
                    "    temp.contract_period = getContractPeriod() ;\r",
                    "\r",
                    "    temp.payment_frequency = getPayemntPeriod() ;\r",
                    "\r",
                    "if(!temp.due_date )\r",
                    "{\r",
                    "\r",
                    "    temp.due_date =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "    if(!initActData){\r",
                    "\r",
                    "        Ext.Msg.alert(\"Initial Activation date required to save product setup.\");\r",
                    "        return ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "    var todaysDate = new Date() ;\r",
                    "    var tempDate = new Date() ;\r",
                    "\r",
                    "    tempDate.setDate(\"01\");\r",
                    "\r",
                    "\r",
                    "    var actDateObj = new Date(initActData) ;\r",
                    "\r",
                    "    if(actDateObj < tempDate )\r",
                    "    {\r",
                    "\r",
                    "            temp.due_date = (todaysDate.getMonth() + 2) + \"/\"+ (actDateObj.getDate())+\"/\" + todaysDate.getFullYear();\r",
                    "\r",
                    "            temp.payment_period_start =  (todaysDate.getMonth() + 1 ) + \"/\"+ (actDateObj.getDate())+\"/\" + todaysDate.getFullYear(); // temp.due_date ;\r",
                    "\r",
                    "             todaysDate.setMonth(todaysDate.getMonth()+1);\r",
                    "\r",
                    "             temp.payment_period_end = (todaysDate.getMonth() + 1 ) + \"/\"+ (actDateObj.getDate())+\"/\" + todaysDate.getFullYear();\r",
                    "    }\r",
                    "    else{\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "             temp.due_date = (actDateObj.getMonth() + 2) + \"/\"+ (actDateObj.getDate())+\"/\" + actDateObj.getFullYear();\r",
                    "\r",
                    "             temp.payment_period_start = temp.due_date ;\r",
                    "\r",
                    "             actDateObj.setMonth(actDateObj.getMonth()+1);\r",
                    "\r",
                    "             temp.payment_period_end = (actDateObj.getMonth() + 1 ) + \"/\"+ (actDateObj.getDate())+\"/\" + actDateObj.getFullYear();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "*/\r",
                    "}\r",
                    "\r",
                    "\r",
                    "            var paymentInterval = 1 ;\r",
                    "            if( temp.advance_payment_period){\r",
                    "\r",
                    "                paymentInterval = temp.advance_payment_period ;\r",
                    "\r",
                    "                temp.payment_period = paymentInterval ;\r",
                    "\r",
                    "            }else{\r",
                    "\r",
                    "                paymentInterval =  temp.payment_period ;\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "             paymentInterval = parseInt(paymentInterval,0) ;\r",
                    "\r",
                    "            if(! temp.payment_period_start ||   temp.payment_period_start == \"\")\r",
                    "            {\r",
                    "             temp.payment_period_start =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;\r",
                    "            }\r",
                    "\r",
                    "            temp.contract_start_date =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;\r",
                    "\r",
                    "             var tempEndDate = new Date(temp.payment_period_start) ;\r",
                    "\r",
                    "\r",
                    "             tempEndDate.setMonth(tempEndDate.getMonth() + paymentInterval) ;\r",
                    "\r",
                    "             temp.payment_period_end = (tempEndDate.getMonth() + 1 ) + \"/\"+ (tempEndDate.getDate())+\"/\" + tempEndDate.getFullYear();\r",
                    "\r",
                    "\r",
                    "\r",
                    "             recToUpdate.product_billng.product_rmpro =  temp ;\r",
                    "\r",
                    "\r",
                    "// recToUpdate.product_billng.product_rmpro = {\r",
                    "//     initial_activation_date:initActData,\r",
                    "//     selected_package: getSelectedPackage() ,\r",
                    "//     selected_rate:rateKey,\r",
                    "//     monthly_membership:monthlyMbrShip ,\r",
                    "//     product_modules:that.getSelectedModules(),\r",
                    "//     commissionable_ammount:Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue(),\r",
                    "//     commission_percent:Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue(),\r",
                    "//     sales_persons:getSalesPersons()\r",
                    "// };\r",
                    "\r",
                    "console.log(recToUpdate) ;\r",
                    "\r",
                    "Ext.Viewport.setMasked( {\r",
                    "                xtype: 'loadmask'\r",
                    "            });\r",
                    "\r",
                    "   RMdatalink.iwa.rdl.doUpdateCollection(masterStore, recToUpdate , rtRecord.get('_id'), suc, err);\r",
                    "\r",
                    "\r",
                    "            function suc(){\r",
                    "\r",
                    "                //rtRecord.set('product_billng',recToUpdate.product_billng);\r",
                    "\r",
                    "                   RMdatalink.app.getController('Main').updateRetailerRecords(\"product_billng\",recToUpdate.product_billng, rtRecord.get('_id')) ;\r",
                    "\r",
                    "                Ext.Viewport.setMasked(false);\r",
                    "                that.hideProductBillingSheet();\r",
                    "\r",
                    "                if(showSubscription){\r",
                    "\r",
                    "                    RMdatalink.app.getController('InvoiceController').showSubscriptionPage();\r",
                    "                }\r",
                    "\r",
                    "\r",
                    "            }\r",
                    "            function err(){\r",
                    "                    Ext.Viewport.setMasked(false);\r",
                    "            }\r",
                    "\r",
                    "function getSelectedPackage(){\r",
                    "\r",
                    "    var recs = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection() ;\r",
                    "\r",
                    "    return recs[0].data.value ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function getSalesPersons(){\r",
                    "    return getArrayDataFromStore(Ext.getStore('products.RtSalesPersonStore'));\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "  function getArrayDataFromStore(store){\r",
                    "\r",
                    "        var data = new Array();\r",
                    "        data = store.getData().items;\r",
                    "\r",
                    "        var dataToReturn = new Array();\r",
                    "\r",
                    "        for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "            dataToReturn.push(data[i].data);\r",
                    "        }\r",
                    "\r",
                    "        return dataToReturn ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "function getPayemntPeriod(){\r",
                    "\r",
                    "\r",
                    "    var paymentPrdList = Ext.ComponentQuery.query('#rmProPaymentFreqList')[0];\r",
                    "\r",
                    "    if(paymentPrdList.getSelection().length == 0 ){\r",
                    "        return 1;\r",
                    "    }\r",
                    "\r",
                    "    var paymentPrd = paymentPrdList.getSelection()[0];\r",
                    "\r",
                    "    return  paymentPrd.data.value ;\r",
                    "}\r",
                    "\r",
                    "function getAdvancePaymentPeriod(){\r",
                    "\r",
                    "    var discounList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');\r",
                    "\r",
                    "    if(discounList.getSelection().length == 0 ){\r",
                    "        return null;\r",
                    "    }\r",
                    "\r",
                    "    var yrlyDiscount = discounList.getSelection()[0];\r",
                    "    var tempPrd = parseInt(yrlyDiscount.data.discount_duration,0 ) * 12 ;\r",
                    "    return   tempPrd ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function getContractPeriod(){\r",
                    "\r",
                    "\r",
                    "    var contractTermList = Ext.ComponentQuery.query('#rmProSlctTermList')[0];\r",
                    "\r",
                    "    if(contractTermList.getSelection().length == 0 ){\r",
                    "        return 12;\r",
                    "    }\r",
                    "\r",
                    "    var contract = contractTermList.getSelection()[0];\r",
                    "\r",
                    "    return  contract.data.value ;\r",
                    "}"
                ]
            },
            "designerId": "e8b151d1-e97a-49fc-9765-388563f3edaf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getSelectedModules",
                "implHandler": [
                    "\r",
                    "\r",
                    "var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;\r",
                    "\r",
                    "var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;\r",
                    "var records = moduleList.getSelection().concat(addOnsList.getSelection()) ;\r",
                    "//concat\r",
                    "\r",
                    "\r",
                    "var dataToReturn = [] ;\r",
                    "for(var i =0 ; i < records.length; i++){\r",
                    "\r",
                    "    dataToReturn.push(\r",
                    "        {\r",
                    "            module_id:records[i].get('_id'),\r",
                    "            trial:records[i].get('trial'),\r",
                    "            quantity:records[i].get('quantity')\r",
                    "        }\r",
                    "    );\r",
                    "}\r",
                    "\r",
                    "return dataToReturn ;"
                ]
            },
            "designerId": "c2412999-fa94-4c0b-a126-71261395143f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=rtBillingSaveBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onrtBillingSaveBtnTap",
                "implHandler": [
                    "//     var initActData = Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].getValue() ;\r",
                    "\r",
                    "\r",
                    "//     if(!initActData && initActData == \"\" ){\r",
                    "\r",
                    "//         Ext.Msg.alert(\"Alert\",\"Initial Activation date required to save product setup.\",Ext.emptyFn );\r",
                    "//         return ;\r",
                    "//     }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(this.config.productKey == \"product_rmpro\" )\r",
                    "{\r",
                    "\r",
                    "        this.saveRtProductBilling() ;\r",
                    "\r",
                    "}\r",
                    "else{\r",
                    "\r",
                    "        this.saveProductDatalinkBilling() ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "78754b3f-f00d-4ce0-8dee-3ddfdb5b453d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "modules"
                ],
                "fn": "selectModulefrmModuleId",
                "implHandler": [
                    "//        RMdatalink.app.getController('BillingDetailsController').config.pricingData[3].active_pricing_policy =  0;\r",
                    "\r",
                    "//               RMdatalink.app.getController('BillingDetailsController').loadRM_PROData() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;\r",
                    "\r",
                    "var moduleStore = moduleList.getStore() ;\r",
                    "\r",
                    "var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;\r",
                    "\r",
                    "var adOnsStore = addOnsList.getStore() ;\r",
                    "\r",
                    "for(var i = 0 ; i < modules.length; i++){\r",
                    "\r",
                    "\r",
                    "    var recIndex = moduleStore.findExact(\"_id\",modules[i].module_id);\r",
                    "\r",
                    "    if(recIndex != -1){\r",
                    "\r",
                    "        var record = moduleStore.getAt(recIndex) ;\r",
                    "\r",
                    "        // record.set('quantity',modules[i].quantity);\r",
                    "          record.set('trial',modules[i].trial);\r",
                    "\r",
                    "        moduleList.select(record,true,true ) ;\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "for(var i = 0 ; i < modules.length; i++){\r",
                    "\r",
                    "\r",
                    "    var recIndex = adOnsStore.findExact(\"_id\",modules[i].module_id);\r",
                    "\r",
                    "    if(recIndex != -1){\r",
                    "\r",
                    "        var record = adOnsStore.getAt(recIndex) ;\r",
                    "\r",
                    "          record.set('quantity',modules[i].quantity);\r",
                    "          record.set('trial',modules[i].trial);\r",
                    "\r",
                    "        addOnsList.select(record,true,true ) ;\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(RMdatalink.app.getController('LoginHandler').config.isRetailerLogin)\r",
                    "{\r",
                    "\r",
                    "    var selectedAddOns = addOnsList.getSelection() ;\r",
                    "    \r",
                    "    var rtAddons = [] ;\r",
                    "    \r",
                    "    for(var i =0 ; i < selectedAddOns.length ; i ++ ){\r",
                    "        \r",
                    "        rtAddons.push(selectedAddOns[i].data) ;\r",
                    "    }\r",
                    "    \r",
                    "    adOnsStore.removeAll();\r",
                    "    adOnsStore.sync() ;\r",
                    "    \r",
                    "    adOnsStore.setData(rtAddons);\r",
                    "    adOnsStore.sync() ;\r",
                    "    \r",
                    "    \r",
                    "    addOnsList.selectAll() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "3a3c4014-f78e-4340-9e03-f51bf441f585"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "hideProductBillingSheet",
                "implHandler": [
                    "this.getBillingSheet().hide();\r",
                    "this.getBillingSheet().destroy() ;"
                ]
            },
            "designerId": "1099cd1c-48fa-4a72-a917-17a51e8b3432"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "fillModuleLists",
                "implHandler": [
                    "var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;\r",
                    "\r",
                    "\r",
                    "/*\r",
                    "RMdatalink.util.globalMethods.fillListData('#rmProSelectPackageList',billingController.config.pricingData[3].pricing_policy);\r",
                    "\r",
                    "products.BillingFromPackages\r",
                    "products.BillingModuleAddons\r",
                    "\r",
                    "  var recs = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection() ;\r",
                    "\r",
                    "    return recs[0].data.value ;\r",
                    "\r",
                    "*/\r",
                    " var recs = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection() ;\r",
                    " var modules = recs[0].data.rm_pro_modules ;\r",
                    "\r",
                    "var allModules = recs[0].data.data ;\r",
                    "\r",
                    "var packageStore = Ext.getStore('products.BillingFromPackages') ;\r",
                    "var addOnsStore = Ext.getStore('products.BillingModuleAddons') ;\r",
                    "\r",
                    "addOnsStore.removeAll();\r",
                    "addOnsStore.sync();\r",
                    "\r",
                    "packageStore.removeAll();\r",
                    "packageStore.sync();\r",
                    "\r",
                    "for(var i= 0 ; i < rmProBillingStore.getData().all.length; i++){\r",
                    "\r",
                    "    var tRec = rmProBillingStore.getAt(i) ;\r",
                    "\r",
                    "    var dataTOUpdate  = getQtyStdPromoPrice(tRec.get(\"_id\"));\r",
                    "\r",
                    "    var dataToUpdateForAddOns = getStdPromoPriceForAddons(tRec.get(\"_id\"));\r",
                    "\r",
                    "\r",
                    "     if(dataTOUpdate)\r",
                    "        {\r",
                    "            tRec.set(dataTOUpdate) ;\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "    if(chckForPackageModule(tRec.get(\"_id\")))\r",
                    "    {\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "        // tRec.set(\"quantity\",tempQty ? tempQty : 1);\r",
                    "        packageStore.addData(tRec.data) ;\r",
                    "\r",
                    "    }else\r",
                    "    {\r",
                    "\r",
                    "//               if(dataToUpdateForAddOns)\r",
                    "//               {\r",
                    "//                     tRec.set(dataToUpdateForAddOns) ;\r",
                    "//               }\r",
                    "\r",
                    "\r",
                    "         //tRec.set(\"quantity\",tempQty ? tempQty : 1);\r",
                    "         addOnsStore.addData(tRec.data) ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "addOnsStore.sync();\r",
                    "\r",
                    "packageStore.sync();\r",
                    "\r",
                    "var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;\r",
                    "moduleList.selectAll() ;\r",
                    "\r",
                    "function chckForPackageModule(_id){\r",
                    "\r",
                    " //   var recs = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection() ;\r",
                    "  //  var modules = recs[0].data.rm_pro_modules ;\r",
                    "\r",
                    "    for(var i =0 ; i < modules.length ; i++){\r",
                    "\r",
                    "        if(_id == modules[i].module_id){\r",
                    "            return true ;\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    return false ;\r",
                    "}\r",
                    "\r",
                    "/*\r",
                    "promotional_price: \"50\"\r",
                    "quantity: \"3\"\r",
                    "standard_price: \"85\"\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "function getQtyStdPromoPrice(m_id){\r",
                    "\r",
                    "    for(var i =0 ; i < allModules.length ; i++){\r",
                    "\r",
                    "        if(allModules[i].product_id == m_id){\r",
                    "\r",
                    "            return {\r",
                    "                module_promotional_price: allModules[i].promotional_price,\r",
                    "                module_standard_price :allModules[i].standard_price,\r",
                    "                quantity : allModules[i].quantity\r",
                    "            };\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    return null ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function getStdPromoPriceForAddons(m_id){\r",
                    "\r",
                    "    for(var i =0 ; i < allModules.length ; i++){\r",
                    "\r",
                    "        if(allModules[i].product_id == m_id){\r",
                    "\r",
                    "            return {\r",
                    "                module_promotional_price: allModules[i].promotional_price,\r",
                    "                module_standard_price :allModules[i].standard_price\r",
                    "            };\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    return null ;\r",
                    "}"
                ]
            },
            "designerId": "a3ed19bf-1ec0-45ce-b795-5531794b2d6d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getBillingSheetDatalink",
                "implHandler": [
                    "if(Ext.ComponentQuery.query(\"#retailerBillingSheetDatalink\")[0])\r",
                    "{\r",
                    "\r",
                    " return Ext.ComponentQuery.query(\"#retailerBillingSheetDatalink\")[0];\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    " return Ext.widget('retailerBillingSheetDatalink');\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "05b90280-9624-4090-9a5c-178856383d58"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initDatalinkBilling",
                "implHandler": [
                    "/*\r",
                    "\r",
                    "productKey\r",
                    "\r",
                    "\r",
                    "recToUpdate.product_billng.product_rmpro = {\r",
                    "    initial_activation_date:initActData,\r",
                    "    selected_package: getSelectedPackage() ,\r",
                    "    selected_rate:rateKey,\r",
                    "    monthly_membership:monthlyMbrShip ,\r",
                    "    product_modules:that.getSelectedModules(),\r",
                    "    commissionable_ammount:Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue(),\r",
                    "    commission_percent:Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue(),\r",
                    "    sales_persons:getSalesPersons()\r",
                    "};\r",
                    "\r",
                    "\r",
                    "\r",
                    "productRmproSlctTermLbl\r",
                    "rmProSlctTermList\r",
                    "\r",
                    "productRmproPaymentFreqLbl\r",
                    "rmProPaymentFreqList\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "this.config.productKey = \"product_datalink\" ;\r",
                    "\r",
                    "var retailerBillingSheet = Ext.ComponentQuery.query('#retailerBillingSheet')[0] ;\r",
                    "\r",
                    "retailerBillingSheet.down('#rtBillingSlctPackLbl').setHidden(true);\r",
                    "retailerBillingSheet.down('#rmProSelectPackageList').setHidden(true);\r",
                    "//retailerBillingSheet.down('#rmProDiscountsForRtList').setHidden(true);\r",
                    "\r",
                    "\r",
                    "// retailerBillingSheet.down('#productRmproSlctTermLbl').setHidden(true);\r",
                    "// retailerBillingSheet.down('#rmProSlctTermList').setHidden(true);\r",
                    "// retailerBillingSheet.down('#productRmproPaymentFreqLbl').setHidden(true);\r",
                    "// retailerBillingSheet.down('#rmProPaymentFreqList').setHidden(true);\r",
                    "\r",
                    "\r",
                    "retailerBillingSheet.down('#rmProModulesForRtList').setHeight(30);\r",
                    "\r",
                    "\r",
                    "retailerBillingSheet.down('#productDatalinkVdrDiscTtlLbl').setHidden(true);\r",
                    "retailerBillingSheet.down('#productDatalinkVdrDiscLst').setHidden(true);\r",
                    "\r",
                    "\r",
                    "this.resetProductBillingView() ;"
                ]
            },
            "designerId": "a4a796e4-47e5-4857-87a4-6739ba3a3374"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target"
                ],
                "fn": "displayDatalinkBilling",
                "implHandler": [
                    "\r",
                    "this.setDatalinkModules() ;\r",
                    "\r",
                    "\r",
                    "this.initProductDatalinkModuleSelection() ;\r",
                    "\r",
                    "\r",
                    " var that = this ;\r",
                    " var timeout = setTimeout(function(){\r",
                    "            that.calculateBillingPrices() ;\r",
                    " },1000);\r",
                    "\r",
                    "\r",
                    "\r",
                    "var packName = '' ;\r",
                    "Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageNameLabel').setHtml( packName );\r",
                    "\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageBundlePriceLbl').setHtml('');\r",
                    ""
                ]
            },
            "designerId": "0355e70d-7e3a-4516-9b39-46b0e42a0f6e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setDatalinkModules",
                "implHandler": [
                    "\r",
                    "\r",
                    "var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;\r",
                    "\r",
                    "var datalinkStore = Ext.getStore('products.DatalinkMain') ;\r",
                    "\r",
                    "\r",
                    "rmProBillingStore.removeAll();\r",
                    "rmProBillingStore.sync() ;\r",
                    "\r",
                    "\r",
                    "var data = getArrayDataFromStore(datalinkStore) ;\r",
                    "\r",
                    "var vendorPricing = this.getSumVendorsPromotionalStandardPrice();\r",
                    "\r",
                    "\r",
                    "for(var i=0 ; i< data.length ; i ++){\r",
                    "\r",
                    "    data[i].trial = \"\";\r",
                    "    data[i].quantity = 1;\r",
                    "    data[i].per_month = 1 ;\r",
                    "\r",
                    "    if( data[i].module_sku == \"DL-DATA\"){\r",
                    "          data[i].module_standard_price = vendorPricing.standard_price ;\r",
                    "          data[i].module_promotional_price = vendorPricing.promotional_price ;\r",
                    "          data[i].quantity = vendorPricing.quantity;\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "rmProBillingStore.setData(data);\r",
                    "rmProBillingStore.sync() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var rtDiscountStore = Ext.getStore('products.BillingDiscount') ;\r",
                    "var rmProDiscount = Ext.getStore('products.DatalinkDiscountStore');\r",
                    "\r",
                    "rtDiscountStore.removeAll();\r",
                    "rtDiscountStore.sync() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "rtDiscountStore.setData(getArrayDataFromStore(rmProDiscount));\r",
                    "rtDiscountStore.sync() ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "  function getArrayDataFromStore(store){\r",
                    "\r",
                    "        var data = new Array();\r",
                    "        data = store.getData().items;\r",
                    "\r",
                    "        var dataToReturn = new Array();\r",
                    "\r",
                    "        for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "            dataToReturn.push(data[i].data);\r",
                    "        }\r",
                    "\r",
                    "        return dataToReturn ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "9397170b-7b23-454b-b862-11f0c66dddf3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initProductDatalinkModuleSelection",
                "implHandler": [
                    "//Retailer RM-PRO Billing\r",
                    "\r",
                    "var rtRecord =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow().record ;\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rtBillingHeaderLabel')[0].setHtml(rtRecord.get('store_name') + \" : Datalink product setup\");\r",
                    "\r",
                    "\r",
                    "\r",
                    "this.config.rtProduct = rtRecord.get('products');\r",
                    "\r",
                    "\r",
                    "var product_billng = rtRecord.get('product_billng') ;\r",
                    "\r",
                    "console.log(product_billng) ;\r",
                    "this.fillDatalinkModuleList() ;\r",
                    "\r",
                    "if(!product_billng || ! product_billng.product_datalink){\r",
                    "\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(0,false,true) ;\r",
                    "\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "console.log(product_billng) ;\r",
                    "\r",
                    "\r",
                    "var selectedRate = product_billng.product_datalink.selected_rate == \"module_standard_price\" ? 0 : 1 ;\r",
                    "var monthlyMbrShip = product_billng.product_datalink.monthly_membership ;\r",
                    "var intActDate =  product_billng.product_datalink.initial_activation_date ;\r",
                    "\r",
                    "if(! intActDate)\r",
                    "{\r",
                    "    intActDate = RMdatalink.util.globalMethods.getAmToday();\r",
                    "}\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(selectedRate,false,false) ;\r",
                    "\r",
                    "Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].setValue(intActDate) ;\r",
                    "Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].setValue(monthlyMbrShip) ;\r",
                    "\r",
                    "var modules = product_billng.product_datalink.product_modules ;\r",
                    "\r",
                    "// this.fillDatalinkModuleList() ;\r",
                    "\r",
                    "this.selectModulefrmModuleId(modules) ;\r",
                    "\r",
                    "\r",
                    "///New Product setup implementation\r",
                    "\r",
                    "\r",
                    " var paymentPrdList = Ext.ComponentQuery.query('#rmProPaymentFreqList')[0];\r",
                    "\r",
                    " var paymentPrd = 1;\r",
                    "\r",
                    "if(product_billng.product_rmpro.payment_frequency){\r",
                    "\r",
                    "     paymentPrd = parseInt(product_billng.product_rmpro.payment_frequency, 0);\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    paymentPrd = parseInt(product_billng.product_rmpro.payment_period, 0);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(!paymentPrd){\r",
                    "\r",
                    "    paymentPrdList.select(0);\r",
                    "}else{\r",
                    "\r",
                    "    var paymentPrdStore = paymentPrdList.getStore() ;\r",
                    "     var searchValForPayPrd = paymentPrd.toString() ;\r",
                    "\r",
                    "    var recIndexForPayPrd = paymentPrdStore.findExact('value',searchValForPayPrd);\r",
                    "\r",
                    "    if(recIndexForPayPrd != -1){\r",
                    "\r",
                    "        paymentPrdList.select(recIndexForPayPrd) ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var contractTermList = Ext.ComponentQuery.query('#rmProSlctTermList')[0];\r",
                    "\r",
                    " var contractPeriod =  parseInt(product_billng.product_rmpro.contract_period, 0);\r",
                    "\r",
                    "if(!contractPeriod){\r",
                    "\r",
                    "    contractTermList.select(0);\r",
                    "}else{\r",
                    "        var contractStore = contractTermList.getStore() ;\r",
                    "\r",
                    "     var searchValForContract = contractPeriod.toString() ;\r",
                    "\r",
                    "    var recIndexForContract = contractStore.findExact('value',searchValForContract);\r",
                    "\r",
                    "    if(recIndexForContract != -1){\r",
                    "\r",
                    "        contractTermList.select(recIndexForContract) ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "var discountList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');\r",
                    "\r",
                    " var discountValue =  parseInt(product_billng.product_rmpro.advance_payment_period, 0);\r",
                    "var discountStore = discountList.getStore() ;\r",
                    "\r",
                    "if(!contractPeriod){\r",
                    "\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "\r",
                    "    var searchVal = (discountValue/12).toString() ;\r",
                    "\r",
                    "    var recIndex = discountStore.findExact('discount_duration',searchVal);\r",
                    "\r",
                    "    if(recIndex != -1){\r",
                    "\r",
                    "        discountList.select(recIndex) ;\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    " Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].setValue(product_billng.product_rmpro.contract_start_date ) ;\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "a3dd1f04-99d4-4f2c-a46b-6623a45d2e2f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "fillDatalinkModuleList",
                "implHandler": [
                    "var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var packageStore = Ext.getStore('products.BillingFromPackages') ;\r",
                    "var addOnsStore = Ext.getStore('products.BillingModuleAddons') ;\r",
                    "\r",
                    "addOnsStore.removeAll();\r",
                    "addOnsStore.sync();\r",
                    "\r",
                    "packageStore.removeAll();\r",
                    "packageStore.sync();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "for(var i= 0 ; i < rmProBillingStore.getData().all.length; i++){\r",
                    "\r",
                    "    var tRec = rmProBillingStore.getAt(i) ;\r",
                    "\r",
                    "\r",
                    "    addOnsStore.add(tRec) ;\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "addOnsStore.sync();\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "ee3c7e92-02b5-4406-a725-76ae7b85a89d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "intRMPROBilling",
                "implHandler": [
                    "/*\r",
                    "\r",
                    "productKey\r",
                    "\r",
                    "\r",
                    "recToUpdate.product_billng.product_rmpro = {\r",
                    "    initial_activation_date:initActData,\r",
                    "    selected_package: getSelectedPackage() ,\r",
                    "    selected_rate:rateKey,\r",
                    "    monthly_membership:monthlyMbrShip ,\r",
                    "    product_modules:that.getSelectedModules(),\r",
                    "    commissionable_ammount:Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue(),\r",
                    "    commission_percent:Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue(),\r",
                    "    sales_persons:getSalesPersons()\r",
                    "};\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "rtBillingSlctPackLbl\r",
                    "rmProSelectPackageList\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "this.config.productKey = \"product_rmpro\" ;\r",
                    "\r",
                    "var retailerBillingSheet = Ext.ComponentQuery.query('#retailerBillingSheet')[0] ;\r",
                    "\r",
                    "retailerBillingSheet.down('#productDatalinkVdrDiscTtlLbl').setHidden(true);\r",
                    "retailerBillingSheet.down('#productDatalinkVdrDiscLst').setHidden(true);"
                ]
            },
            "designerId": "6c042c78-6e1e-4e13-9678-a2ec735ee0bb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "resetProductBillingView",
                "implHandler": [
                    "var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var packageStore = Ext.getStore('products.BillingFromPackages') ;\r",
                    "var addOnsStore = Ext.getStore('products.BillingModuleAddons') ;\r",
                    "\r",
                    "addOnsStore.removeAll();\r",
                    "addOnsStore.sync();\r",
                    "\r",
                    "packageStore.removeAll();\r",
                    "packageStore.sync();\r",
                    "\r",
                    "rmProBillingStore.removeAll();\r",
                    "rmProBillingStore.sync();"
                ]
            },
            "designerId": "a2ddc7ce-e171-48e7-9aa5-a19dcbc0c515"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "showSubscription"
                ],
                "fn": "saveProductDatalinkBilling",
                "implHandler": [
                    "\r",
                    "var that = this ;\r",
                    "var rtRecord =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow().record ;\r",
                    "\r",
                    "var recToUpdate ={product_billng : rtRecord.get('product_billng') ? rtRecord.get('product_billng') : {} };\r",
                    "\r",
                    "var rateKey = Ext.ComponentQuery.query('#rmProSelectRateList')[0].getSelection()[0].data.value ;\r",
                    "var monthlyMbrShip = Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].getValue() ;\r",
                    "var masterStore = Ext.getStore('retailersMaster');\r",
                    "\r",
                    "var initActData = Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].getValue() ;\r",
                    "\r",
                    "\r",
                    "var temp = recToUpdate.product_billng ? (recToUpdate.product_billng.product_datalink ? recToUpdate.product_billng.product_datalink : {}) : {} ;\r",
                    "\r",
                    "\r",
                    "console.log(\"*******************************\");\r",
                    "console.log(temp);\r",
                    "\r",
                    "    temp.initial_activation_date = initActData ;\r",
                    "    temp.selected_rate = rateKey ;\r",
                    "    temp.monthly_membership  = monthlyMbrShip  ;\r",
                    "    temp.product_modules = that.getSelectedModules() ;\r",
                    "  temp.payment_period = getPayemntPeriod() ;\r",
                    "\r",
                    "    temp.advance_payment_period = getAdvancePaymentPeriod() ;\r",
                    "\r",
                    "    temp.contract_period = getContractPeriod() ;\r",
                    "\r",
                    "    temp.payment_frequency = getPayemntPeriod() ;\r",
                    "\r",
                    "if(!temp.due_date )\r",
                    "{\r",
                    "\r",
                    "    temp.due_date =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "    if(!initActData){\r",
                    "\r",
                    "        Ext.Msg.alert(\"Initial Activation date required to save product setup.\");\r",
                    "        return ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "\r",
                    "    var todaysDate = new Date() ;\r",
                    "    var tempDate = new Date() ;\r",
                    "\r",
                    "    tempDate.setDate(\"01\");\r",
                    "\r",
                    "\r",
                    "    var actDateObj = new Date(initActData) ;\r",
                    "\r",
                    "    if(actDateObj < tempDate )\r",
                    "    {\r",
                    "\r",
                    "            temp.due_date = (todaysDate.getMonth() + 2) + \"/\"+ (actDateObj.getDate())+\"/\" + todaysDate.getFullYear();\r",
                    "\r",
                    "            temp.payment_period_start =  (todaysDate.getMonth() + 1 ) + \"/\"+ (actDateObj.getDate())+\"/\" + todaysDate.getFullYear(); // temp.due_date ;\r",
                    "\r",
                    "             todaysDate.setMonth(todaysDate.getMonth()+1);\r",
                    "\r",
                    "             temp.payment_period_end = (todaysDate.getMonth() + 1 ) + \"/\"+ (actDateObj.getDate())+\"/\" + todaysDate.getFullYear();\r",
                    "    }\r",
                    "    else{\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "             temp.due_date = (actDateObj.getMonth() + 2) + \"/\"+ (actDateObj.getDate())+\"/\" + actDateObj.getFullYear();\r",
                    "\r",
                    "             temp.payment_period_start = temp.due_date ;\r",
                    "\r",
                    "             actDateObj.setMonth(actDateObj.getMonth()+1);\r",
                    "\r",
                    "             temp.payment_period_end = (actDateObj.getMonth() + 1 ) + \"/\"+ (actDateObj.getDate())+\"/\" + actDateObj.getFullYear();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "*/\r",
                    "}\r",
                    "\r",
                    "\r",
                    "            var paymentInterval = 1 ;\r",
                    "            if( temp.advance_payment_period){\r",
                    "\r",
                    "                paymentInterval = temp.advance_payment_period ;\r",
                    "\r",
                    "                temp.payment_period = paymentInterval ;\r",
                    "\r",
                    "            }else{\r",
                    "\r",
                    "                paymentInterval =  temp.payment_period ;\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "             paymentInterval = parseInt(paymentInterval,0) ;\r",
                    "\r",
                    "             if(! temp.payment_period_start ||   temp.payment_period_start == \"\")\r",
                    "            {\r",
                    "             temp.payment_period_start =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;\r",
                    "            }\r",
                    "\r",
                    "            temp.contract_start_date =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;\r",
                    "\r",
                    "             var tempEndDate = new Date(temp.payment_period_start) ;\r",
                    "\r",
                    "\r",
                    "             tempEndDate.setMonth(tempEndDate.getMonth() + paymentInterval) ;\r",
                    "\r",
                    "             temp.payment_period_end = (tempEndDate.getMonth() + 1 ) + \"/\"+ (tempEndDate.getDate())+\"/\" + tempEndDate.getFullYear();\r",
                    "\r",
                    "\r",
                    "recToUpdate.product_billng.product_datalink = temp ; //{} ;\r",
                    "\r",
                    "\r",
                    "// recToUpdate.product_billng.product_datalink = {\r",
                    "//     initial_activation_date:initActData,\r",
                    "//     selected_rate:rateKey,\r",
                    "//     monthly_membership:monthlyMbrShip ,\r",
                    "//     product_modules:that.getSelectedModules()\r",
                    "\r",
                    "// };\r",
                    "\r",
                    "console.log(recToUpdate) ;\r",
                    "\r",
                    "Ext.Viewport.setMasked( {\r",
                    "                xtype: 'loadmask'\r",
                    "            });\r",
                    "\r",
                    "   RMdatalink.iwa.rdl.doUpdateCollection(masterStore, recToUpdate , rtRecord.get('_id'), suc, err);\r",
                    "\r",
                    "\r",
                    "            function suc(){\r",
                    "\r",
                    "                //rtRecord.set('product_billng',recToUpdate.product_billng);\r",
                    "\r",
                    "                  RMdatalink.app.getController('Main').updateRetailerRecords(\"product_billng\",recToUpdate.product_billng, rtRecord.get('_id')) ;\r",
                    "\r",
                    "\r",
                    "                Ext.Viewport.setMasked(false);\r",
                    "                that.hideProductBillingSheet();\r",
                    "\r",
                    "                 if(showSubscription){\r",
                    "\r",
                    "                    RMdatalink.app.getController('InvoiceController').showSubscriptionPage();\r",
                    "                }\r",
                    "\r",
                    "\r",
                    "            }\r",
                    "            function err(){\r",
                    "                    Ext.Viewport.setMasked(false);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "\r",
                    "  function getArrayDataFromStore(store){\r",
                    "\r",
                    "        var data = new Array();\r",
                    "        data = store.getData().items;\r",
                    "\r",
                    "        var dataToReturn = new Array();\r",
                    "\r",
                    "        for(var i=0; i < data.length ; i++){\r",
                    "\r",
                    "            dataToReturn.push(data[i].data);\r",
                    "        }\r",
                    "\r",
                    "        return dataToReturn ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "function getPayemntPeriod(){\r",
                    "\r",
                    "\r",
                    "    var paymentPrdList = Ext.ComponentQuery.query('#rmProPaymentFreqList')[0];\r",
                    "\r",
                    "    if(paymentPrdList.getSelection().length == 0 ){\r",
                    "        return 1;\r",
                    "    }\r",
                    "\r",
                    "    var paymentPrd = paymentPrdList.getSelection()[0];\r",
                    "\r",
                    "    return  paymentPrd.data.value ;\r",
                    "}\r",
                    "\r",
                    "function getAdvancePaymentPeriod(){\r",
                    "\r",
                    "    var discounList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');\r",
                    "\r",
                    "    if(discounList.getSelection().length == 0 ){\r",
                    "        return null;\r",
                    "    }\r",
                    "\r",
                    "    var yrlyDiscount = discounList.getSelection()[0];\r",
                    "    var tempPrd = parseInt(yrlyDiscount.data.discount_duration,0 ) * 12 ;\r",
                    "    return   tempPrd ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function getContractPeriod(){\r",
                    "\r",
                    "\r",
                    "    var contractTermList = Ext.ComponentQuery.query('#rmProSlctTermList')[0];\r",
                    "\r",
                    "    if(contractTermList.getSelection().length == 0 ){\r",
                    "        return 12;\r",
                    "    }\r",
                    "\r",
                    "    var contract = contractTermList.getSelection()[0];\r",
                    "\r",
                    "    return  contract.data.value ;\r",
                    "}"
                ]
            },
            "designerId": "438512d6-08cc-4594-86d2-91957be36d92"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getSumVendorsPromotionalStandardPrice",
                "implHandler": [
                    "\r",
                    "/*\r",
                    "        Ext.getStore('vendors.Master')\r",
                    "\r",
                    "        product_price\r",
                    "            datalink: Object\r",
                    "                promotional_price: \"49\"\r",
                    "                standard_price: \"69\"\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "\r",
                    "var prospectList  = Ext.ComponentQuery.query('#RDInStoreVendorsTab')[0].down(\"#mainList\");\r",
                    "\r",
                    "var prospectStore = prospectList.getStore() ;\r",
                    "\r",
                    "var vendorStore =  Ext.getStore('vendorTempRecordStore') ;\r",
                    "\r",
                    "var specificrtVdrs =  prospectStore.getData().all ;\r",
                    "\r",
                    "var dataToReturn = {\r",
                    "    promotional_price :0,\r",
                    "    standard_price:0,\r",
                    "    quantity:1\r",
                    "} ;\r",
                    "\r",
                    "for(var i=0; i < specificrtVdrs.length ; i++){\r",
                    "\r",
                    "   var vendor_name = specificrtVdrs[i].data.vendor_name;\r",
                    "\r",
                    "   var recIndex = vendorStore.findExact('vendor_name',vendor_name);\r",
                    "\r",
                    "    if(recIndex != -1)\r",
                    "    {\r",
                    "            var record = vendorStore.getAt(recIndex) ;\r",
                    "            if(record.data.product_price && record.data.product_price.datalink){\r",
                    "\r",
                    "                 dataToReturn.standard_price += parseInt(record.data.product_price.datalink.standard_price) ;\r",
                    "                 dataToReturn.promotional_price += parseInt(record.data.product_price.datalink.promotional_price) ;\r",
                    "            }\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "if(specificrtVdrs.length > 0)\r",
                    "{\r",
                    "     dataToReturn.standard_price  = Math.round(dataToReturn.standard_price /specificrtVdrs.length) ;\r",
                    "    dataToReturn.promotional_price = Math.round(dataToReturn.promotional_price /specificrtVdrs.length) ;\r",
                    "\r",
                    "    dataToReturn.quantity = specificrtVdrs.length ;\r",
                    "}\r",
                    "\r",
                    "console.log(dataToReturn) ;\r",
                    "\r",
                    "return dataToReturn ;"
                ]
            },
            "designerId": "51f3243e-ee79-438a-87c4-764014fd35e7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=productBillingShowSubscriptionBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onProductBillingShowSubscriptionBtnTap",
                "implHandler": [
                    "\r",
                    "if(this.config.productKey == \"product_rmpro\" )\r",
                    "{\r",
                    "\r",
                    "        this.saveRtProductBilling(true) ;\r",
                    "\r",
                    "}\r",
                    "else{\r",
                    "\r",
                    "        this.saveProductDatalinkBilling(true) ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "2065631d-a15d-4b2b-9abc-66a1a9590418"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=invoiceDatalinkProductSetupBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "oninvoiceDatalinkProductSetupBtnTap",
                "implHandler": [
                    "   Ext.ComponentQuery.query('#rtBillingSheetCancelBtn')[0].fireEvent(\"tap\");\r",
                    "\r",
                    "\r",
                    "    this.getBillingSheet().show();\r",
                    "    this.initDatalinkBilling() ;\r",
                    "    this.displayDatalinkBilling();\r",
                    "\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "74854674-275a-4d86-8ca4-8edf65ac9a42"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=invoiceRMPROProductSetupBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "oninvoiceRMPROProductSetupBtnTap",
                "implHandler": [
                    "\r",
                    "\r",
                    "   Ext.ComponentQuery.query('#rtBillingSheetCancelBtn')[0].fireEvent(\"tap\");\r",
                    "\r",
                    "\r",
                    "    this.getBillingSheet().show();\r",
                    "    this.intRMPROBilling() ;\r",
                    "    this.displayRMPROBillig();\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "1b0c3df5-424d-4f82-8082-0ac0fbbd9758"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "setResetModuleListHeight",
                "implHandler": [
                    "var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;\r",
                    "var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;\r",
                    "var headers = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down(\"#headerList\");\r",
                    ""
                ]
            },
            "designerId": "b77c8b96-6ff5-469a-95a0-b92a4ab26e5d"
        }
    ]
}