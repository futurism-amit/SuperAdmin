{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "Main",
        "designer|userClassName": "Main",
        "requires": [
            "Ext.MessageBox"
        ]
    },
    "designerId": "a11f1673-b905-4e3c-9fdd-b4cc50a4331f",
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|createAlias": "cardRef",
                "designer|displayName": "cardRef",
                "ref": "cardRef",
                "selector": "container",
                "xtype": "Ext.Container"
            },
            "designerId": "2fdc71ba-4956-4b4b-99cf-a7cf08b59682"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "cardRef",
                "designer|params": [
                    "container"
                ],
                "designer|targetType": "Ext.Container",
                "fn": "onPanelActiontapped1",
                "implHandler": [
                    "//console.log(\"in controller action tapped: \"); vendorCardHeader billingCardHeader inHouseCardHeader\r",
                    "//console.log(container.getItemId());\r",
                    "if(container.getItemId() === \"retailerCardHeader\") {\r",
                    "\r",
                    "    var tabpanel = container.parent.down('tabpanel');\r",
                    "    var activeTab = tabpanel.getActiveItem();\r",
                    "    var tabs = tabpanel.getInnerItems();\r",
                    "\r",
                    "    var folderNames = [];\r",
                    "    for(var i=0;i<tabs.length-2;i++) {\r",
                    "\r",
                    "        var status = false;\r",
                    "        if(activeTab === tabs[i])\r",
                    "            status = true;\r",
                    "        folderNames.push({\r",
                    "            checkStatus: status,\r",
                    "            folderName:tabs[i].title,\r",
                    "            storeName:tabs[i].down('list').getStore().getStoreId()\r",
                    "        });\r",
                    "    }\r",
                    "    Ext.ComponentQuery.query(\"#actionDDCheckList\")[0].setData(folderNames);\r",
                    "\r",
                    "\r",
                    "    var currentStore = activeTab.down('list').getStore();\r",
                    "    //console.log(currentStore.getStoreId());\r",
                    "\r",
                    "}\r",
                    "else {\r",
                    "    Ext.Msg.alert('Alert', 'Development in Progress.', Ext.emptyFn);\r",
                    "}"
                ],
                "name": "actiontapped"
            },
            "designerId": "64ff8a03-f511-49e4-bb55-11066b7df11c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "searchfield[itemId=RMSearchField]",
                "designer|targetType": "Ext.field.Search",
                "fn": "onSearchfieldKeyup",
                "implHandler": [
                    "var listToSearch = null;\r",
                    "var store = null;\r",
                    "\r",
                    "listToSearch = textfield.parent.parent.parent.down(\"list\");\r",
                    "if(!listToSearch)\r",
                    "    return;\r",
                    "store = listToSearch.getStore();\r",
                    "if(!store)\r",
                    "    return;\r",
                    "store.clearFilter();\r",
                    "\r",
                    "var value = textfield.getValue();\r",
                    "var keysToSearch = store.getModel().getFields().keys;\r",
                    "\r",
                    "if (!value) {\r",
                    "    store.filterBy(function() {\r",
                    "        return true;\r",
                    "    });\r",
                    "}\r",
                    "else {\r",
                    "    var searches = value.split(' '),\r",
                    "        regexps = [],\r",
                    "        i;\r",
                    "\r",
                    "    for (i = 0; i < searches.length; i++) {\r",
                    "        if (searches[i]) {\r",
                    "           regexps.push(new RegExp(searches[i], 'i'));\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    store.filterBy(function(record) {\r",
                    "        var matched = [];\r",
                    "        for (i = 0; i < regexps.length; i++) {\r",
                    "            var search = regexps[i];\r",
                    "            var recordAllowed = false;\r",
                    "            for(var j=0 ; j<keysToSearch.length ; j++) {\r",
                    "                if(record.get(keysToSearch[j]) === null || record.get(keysToSearch[j]) === undefined )\r",
                    "                    continue;\r",
                    "                if(record.get(keysToSearch[j]).toString().match(search) &&\r",
                    "                   keysToSearch[j]!==\"id\" && !recordAllowed)\r",
                    "                    recordAllowed = true;\r",
                    "            }\r",
                    "            matched.push(recordAllowed);\r",
                    "        }\r",
                    "\r",
                    "        if (regexps.length > 1 && matched.indexOf(false) != -1) {\r",
                    "            return false;\r",
                    "        } else {\r",
                    "            return matched[0];\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ],
                "name": "keyup"
            },
            "designerId": "73a5c708-4e0f-4bac-953a-800862be99a3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "searchfield[itemId=RMSearchField]",
                "designer|targetType": "Ext.field.Search",
                "fn": "onSearchfieldClearicontap",
                "implHandler": [
                    "var listToSearch = textfield.parent.parent.parent.down(\"list\");\r",
                    "if(!listToSearch)\r",
                    "    return;\r",
                    "\r",
                    "var store = listToSearch.getStore();\r",
                    "if(!store)\r",
                    "    return;\r",
                    "\r",
                    "store.clearFilter();"
                ],
                "name": "clearicontap"
            },
            "designerId": "8bc569e6-244e-4ea7-bd22-ee6c009b96cf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "component[action=setScrollBarVisible]",
                "designer|targetType": "Ext.Component",
                "fn": "onViewInitializeForScrollBarVisible",
                "implHandler": [
                    "\r",
                    "        var setupPCScrollbar = function(container) {\r",
                    "                        var isMobile = (navigator.appVersion.toLowerCase().indexOf(\"mobile\") > -1 || navigator.appVersion.toLowerCase().indexOf(\"ipad\") > -1);\r",
                    "                        if (!isMobile) {\r",
                    "                            if (container.isXType('selectfield'))\r",
                    "                                container = container.down('list');// Add support for selectbuttons\r",
                    "                            if (!Ext.isFunction(container.getScrollable) || !container.getScrollable() || !Ext.isFunction(container.getScrollable().getScroller))\r",
                    "                                return console.warn(\"Attempting to apply pc scroller to non-container item\");\r",
                    "                            container.getScrollable().getScroller().setDisabled(true);\r",
                    "                            container.getScrollable(false);\r",
                    "                            var scrollContainers = Ext.DomQuery.select('.x-scroll-container', container.element.dom);\r",
                    "                            var scrollBars = Ext.DomQuery.select('.x-scroll-indicator', container.element.dom);\r",
                    "                            for (var i = 0; i < scrollContainers.length; i++) {\r",
                    "                                scrollContainers[i].style.overflow = \"auto\";\r",
                    "                            }\r",
                    "                            for (var i = 0; i < scrollBars.length; i++) {\r",
                    "                                scrollBars[i].offsetHeight = scrollContainers[0].offsetHeight;\r",
                    "                                scrollBars[i].clientHeight = scrollContainers[0].clientHeight;\r",
                    "                                scrollBars[i].style.zIndex = \"-1\";\r",
                    "                            }\r",
                    "                        }\r",
                    "                    };\r",
                    "\r",
                    "        setupPCScrollbar(component) ;\r",
                    "\r",
                    "/*\r",
                    "\r",
                    "\r",
                    "        component.getScrollable().getIndicators().y.show() ;\r",
                    "\r",
                    "        component.getScrollable().setIndicatorsHidingDelay(0);\r",
                    "\r",
                    "        component.getScrollable().getScroller().addListener('scrollend', function(that){\r",
                    "                                                                                        if(that.maxPosition.y != that.minPosition.y ){\r",
                    "\r",
                    "                                                                                                component.getScrollable().getIndicators().y.show() ;\r",
                    "                                                                                            }\r",
                    "                                                                                       });\r",
                    "\r",
                    "        component.getScrollable().getScroller().addListener('refresh', function(that,eopt){\r",
                    "                                                                                           if(that.maxPosition.y == that.minPosition.y ){\r",
                    "                                                                                               component.getScrollable().getIndicators().y.hide() ;\r",
                    "\r",
                    "                                                                                           }\r",
                    "                                                                                           else{\r",
                    "\r",
                    "                                                                                               component.getScrollable().getIndicators().y.show() ;\r",
                    "                                                                                           }\r",
                    "\r",
                    "                                                                                          } );\r",
                    "\r",
                    "                                                                                          */\r",
                    ""
                ],
                "name": "initialize"
            },
            "designerId": "dfc7b556-44ce-4c5e-bad9-e1bfcb4fe9f2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field"
                ],
                "fn": "saveComment",
                "implHandler": [
                    "var store = Ext.getStore('RDCRM');\r",
                    "if(field.hasAttribute('data-id')) {\r",
                    "    var record = store.findRecord('id',field.getAttribute('data-id'));\r",
                    "    record.set('comments',field.value);\r",
                    "}\r",
                    "store.sync();"
                ]
            },
            "designerId": "507ac7b6-3988-4a11-8b2e-705148a49c47"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "listName"
                ],
                "fn": "saveTips",
                "implHandler": [
                    "var doDontsStore;\r",
                    "var doDontsRecord;\r",
                    "\r",
                    "switch(listName)\r",
                    "{\r",
                    "    case 'doDonts':\r",
                    "          console.log(\" doDonts \");\r",
                    "        doDontsStore = Ext.getStore('notificationsTipsDoDonts');\r",
                    "        doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "        doDontsRecord.set('notification',field.value);\r",
                    "        doDontsStore.sync();\r",
                    "        break;\r",
                    "\r",
                    "    case 'managerDoDonts':\r",
                    "        console.log(\" managerDoDonts \");\r",
                    "        doDontsStore = Ext.getStore('notifications.managerTipsdodonts');\r",
                    "        doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "        doDontsRecord.set('notification',field.value);\r",
                    "        doDontsStore.sync();\r",
                    "        break;\r",
                    "\r",
                    "    case 'repsDoDonts':\r",
                    "        console.log(\" repsDoDonts \");\r",
                    "        doDontsStore = Ext.getStore('notifications.repsTipsdodonts');\r",
                    "        doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "        doDontsRecord.set('notification',field.value);\r",
                    "        doDontsStore.sync();\r",
                    "        break;\r",
                    "\r",
                    "\r",
                    "    case 'followUps':\r",
                    "        followUpStore = Ext.getStore('notificationsTipsFollowsup');\r",
                    "        followUpRecord = followUpStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "        followUpRecord.set('notification',field.value);\r",
                    "        followUpStore.sync();\r",
                    "        break;\r",
                    "\r",
                    "    case 'managerFollowUps':\r",
                    "        doDontsStore = Ext.getStore('notifications.managerTipsfollowsup');\r",
                    "        doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "        doDontsRecord.set('notification',field.value);\r",
                    "        doDontsStore.sync();\r",
                    "        break;\r",
                    "\r",
                    "    case 'repsFollowUps':\r",
                    "        doDontsStore = Ext.getStore('notifications.repsTipsfollowsup');\r",
                    "        doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "        doDontsRecord.set('notification',field.value);\r",
                    "        doDontsStore.sync();\r",
                    "        break;\r",
                    "        \r",
                    "       case 'actmanagerDoDonts':\r",
                    "        console.log(\" managerDoDonts \");\r",
                    "        doDontsStore = Ext.ComponentQuery.query('#ActRDManagerDosDontList')[0].getStore();\r",
                    "        doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "        doDontsRecord.set('notification',field.value);\r",
                    "        doDontsStore.sync();\r",
                    "        break; \r",
                    "        \r",
                    "            case 'actmanagerFollowUps':\r",
                    "        doDontsStore = Ext.ComponentQuery.query('#ActRDManagerFollowUpsLists')[0].getStore();\r",
                    "        doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "        doDontsRecord.set('notification',field.value);\r",
                    "        doDontsStore.sync();\r",
                    "        break;\r",
                    "\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "ee8c8579-6478-4393-b0b9-6fee5e3c94b8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "listName"
                ],
                "fn": "saveTipsForTUser",
                "implHandler": [
                    "\r",
                    "if(listName === 'doDonts') {\r",
                    "\r",
                    "    var doDontsStore = Ext.getStore('notificationsTipsDoDonts');\r",
                    "    var doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "    doDontsRecord.set('notification',field.value);\r",
                    "    doDontsStore.sync();\r",
                    "    //console.log(\"do donts saved\");\r",
                    "}\r",
                    "else {\r",
                    "\r",
                    "    var followUpStore = Ext.getStore('notificationsTipsFollowsup');\r",
                    "    var followUpRecord = followUpStore.findRecord('id',field.getAttribute('data-id'));\r",
                    "    followUpRecord.set('notification',field.value);\r",
                    "    followUpStore.sync();\r",
                    "    //console.log(\"followup saved\");\r",
                    "}"
                ]
            },
            "designerId": "30919a46-d116-4191-8dd6-38956f18aea3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=filterBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onFilterButtonTap",
                "implHandler": [
                    "if(Ext.getCmp(\"filterDropDown\"))\r",
                    "    Ext.getCmp(\"filterDropDown\").destroy();\r",
                    "\r",
                    "var popup = Ext.widget('filterDropDown');\r",
                    "\r",
                    "var filterDDList = Ext.ComponentQuery.query(\"#filterDDList\")[0];\r",
                    "\r",
                    "\r",
                    "switch(button.parent.getItemId()) {\r",
                    "\r",
                    "    case 'retailerSeachViewItemID':\r",
                    "\r",
                    "        filterDDList.setHeight(220);\r",
                    "        setCommonTpl();\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "    case 'billingSeachViewItemID':\r",
                    "\r",
                    "        filterDDList.setHeight(270);\r",
                    "        setTPLForBilling();\r",
                    "\r",
                    "        break;\r",
                    "    case 'RDNotesSearchViewItemID':\r",
                    "\r",
                    "        filterDDList.setHeight(150);\r",
                    "        popup.down('#filterDDList').setItemTpl(\r",
                    "            '<div class=\"x-rm-filter-tplmain\">No Content</div>'\r",
                    "        );\r",
                    "        popup.down('#filterApplyBtn').setDisabled(true);\r",
                    "\r",
                    "        break;\r",
                    "\r",
                    "    case 'vendorSeachViewItemID':\r",
                    "    case 'inHouseSeachViewItemID':\r",
                    "\r",
                    "        filterDDList.setHeight(80);\r",
                    "        setTplVendor();\r",
                    "\r",
                    "        break;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "popup.showBy(button);\r",
                    "\r",
                    "\r",
                    "function setCommonTpl(){\r",
                    "\r",
                    "    filterDDList.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-filter-tplmain\">',\r",
                    "                   '    <div>',\r",
                    "                   '        <p>Product Subscriptions:</p>',\r",
                    "                   '        <div class=\"x-rm-filter-container\">',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <input type=\"checkbox\" name=\"filter-checkbox\" data-name=\"store_products_datalink\"/>',\r",
                    "                   '                <label>Datalink</label>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <input type=\"checkbox\" name=\"filter-checkbox\" data-name=\"store_products_smart_cart\"/>',\r",
                    "                   '                <label>Cart</label>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <input type=\"checkbox\" name=\"filter-checkbox\" data-name=\"store_products_ecatalog\"/>',\r",
                    "                   '                <label>eCatalog</label>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <input type=\"checkbox\" name=\"filter-checkbox\" data-name=\"store_products_rm_plc\"/>',\r",
                    "                   '                <label>RMPro</label>',\r",
                    "                   '            </div>',\r",
                    "                   '        </div>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div>',\r",
                    "                   '        <p>Monthly Subscription Range:</p>',\r",
                    "                   '        <div class=\"x-rm-filter-container\">',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <span>From</span>',\r",
                    "                   '                <input type=\"text\" maxlength=\"6\" pattern=\"[0-9]*\" placeholder=\"$\" data-name=\"monthly_range\" data-subname=\"from\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\"/>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <span>To</span>',\r",
                    "                   '                <input type=\"text\" maxlength=\"6\" pattern=\"[0-9]*\" placeholder=\"$\" data-name=\"monthly_range\" data-subname=\"to\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\"/>',\r",
                    "                   '            </div>',\r",
                    "                   '        </div>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div>',\r",
                    "                   '        <div class=\"x-rm-filter-container\">',\r",
                    "                   '            <div class=\"x-rm-filter-days\">',\r",
                    "                   '                <span>Modified in Past</span>',\r",
                    "                   '                <input style = \"margin-left: 6px;\" maxlength=\"3\" type=\"text\" pattern=\"[0-9]*\" data-name=\"modified_in_past\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\" />',\r",
                    "                   '                <span>Days</span>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-days\">',\r",
                    "                   '                <span>Created in Past</span>',\r",
                    "                   '                <input style = \"margin-left: 12px;\" maxlength=\"3\" type=\"text\" pattern=\"[0-9]*\" data-name=\"created_in_past\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\" />',\r",
                    "                   '                <span>Days</span>',\r",
                    "                   '            </div>',\r",
                    "                   '        </div>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "    filterDDList.refresh();\r",
                    "}\r",
                    "\r",
                    "//***********  set Tpl Billing  ************\r",
                    "\r",
                    "function setTPLForBilling(){\r",
                    "\r",
                    "    filterDDList.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-filter-tplmain\">',\r",
                    "                   '    <div style = \"height: 25% !important;\" >',\r",
                    "                   '        <p>Product Subscriptions:</p>',\r",
                    "                   '        <div class=\"x-rm-filter-container\">',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <input type=\"checkbox\" name=\"filter-checkbox\" data-name=\"store_products_datalink\"/>',\r",
                    "                   '                <label>Datalink</label>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <input type=\"checkbox\" name=\"filter-checkbox\" data-name=\"store_products_smart_cart\"/>',\r",
                    "                   '                <label>Cart</label>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <input type=\"checkbox\" name=\"filter-checkbox\" data-name=\"store_products_ecatalog\"/>',\r",
                    "                   '                <label>eCatalog</label>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-check\">',\r",
                    "                   '                <input type=\"checkbox\" name=\"filter-checkbox\" data-name=\"store_products_rm_plc\"/>',\r",
                    "                   '                <label>RMPro</label>',\r",
                    "                   '            </div>',\r",
                    "                   '        </div>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div style = \"height: 37% !important;\">',\r",
                    "                   '        <div class=\"x-rm-filter-container\">',\r",
                    "                   '            <div style = \"margin-bottom: 3px;\">Monthly Subscription Range:</div>',\r",
                    "                   '            ',\r",
                    "                   '            <div style = \"margin-bottom: 6px;\" class=\"x-rm-filter-check\">',\r",
                    "                   '                <span>From</span>',\r",
                    "                   '                <input type=\"text\" maxlength=\"6\" pattern=\"[0-9]*\" placeholder=\"$\" data-name=\"monthly_range\" data-subname=\"from\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\"/>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div style = \"margin-bottom: 6px;\" class=\"x-rm-filter-check\">',\r",
                    "                   '                <span>To</span>',\r",
                    "                   '                <input type=\"text\" pattern=\"[0-9]*\" maxlength=\"6\" placeholder=\"$\" data-name=\"monthly_range\" data-subname=\"to\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\"/>',\r",
                    "                   '            </div>',\r",
                    "                   '            ',\r",
                    "                   '            <div>Payment Owed Range:</div>',\r",
                    "                   '            ',\r",
                    "                   '            <div style = \"margin-top: 3px;\" class=\"x-rm-filter-check\">',\r",
                    "                   '                <span>From</span>',\r",
                    "                   '                <input  type=\"text\" pattern=\"[0-9]*\" maxlength=\"6\" placeholder=\"$\" data-name=\"owed_range\" data-subname=\"from\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\"/>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div style = \"margin-top: 3px;\" class=\"x-rm-filter-check\">',\r",
                    "                   '                <span>To</span>',\r",
                    "                   '                <input type=\"text\" pattern=\"[0-9]*\" maxlength=\"6\" placeholder=\"$\" data-name=\"owed_range\" data-subname=\"to\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\"/>',\r",
                    "                   '            </div>',\r",
                    "                   '            ',\r",
                    "                   '        </div>',\r",
                    "                   '    </div>',\r",
                    "                   '    <div>',\r",
                    "                   '        <div class=\"x-rm-filter-container\">',\r",
                    "                   '            <div style = \"margin-top: 10px;\" class=\"x-rm-filter-days\">',\r",
                    "                   '                <span>Modified in Past</span>',\r",
                    "                   '                <input style = \"margin-left: 6px;\" maxlength=\"3\" type=\"text\" pattern=\"[0-9]*\" data-name=\"modified_in_past\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\" />',\r",
                    "                   '                <span>Days</span>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-days\">',\r",
                    "                   '                <span>Created in Past</span>',\r",
                    "                   '                <input  style = \"margin-left: 12px;\" maxlength=\"3\" type=\"text\" pattern=\"[0-9]*\" data-name=\"created_in_past\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\" />',\r",
                    "                   '                <span>Days</span>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-days\">',\r",
                    "                   '                <span>Past due for</span>',\r",
                    "                   '                <input style = \"margin-left: 27px;\" maxlength=\"3\" type=\"text\" pattern=\"[0-9]*\" data-name=\"past_due_for\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\" />',\r",
                    "                   '                <span>Days</span>',\r",
                    "                   '            </div>',\r",
                    "                   '        </div>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "    filterDDList.refresh();\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "//***********  set Tpl Vendor  ************\r",
                    "\r",
                    "function setTplVendor(){\r",
                    "\r",
                    "    filterDDList.setItemTpl(\r",
                    "        Ext.create('Ext.XTemplate',\r",
                    "                   '<div class=\"x-rm-filter-tplmain\">',\r",
                    "                   '    <div style= \"border: none;\">',\r",
                    "                   '        <div class=\"x-rm-filter-container\">',\r",
                    "                   '            <div class=\"x-rm-filter-days\">',\r",
                    "                   '                <span>Modified in Past</span>',\r",
                    "                   '                <input style = \"margin-left: 6px;\" maxlength=\"3\" type=\"text\" pattern=\"[0-9]*\" data-name=\"modified_in_past\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\" />',\r",
                    "                   '                <span>Days</span>',\r",
                    "                   '            </div>',\r",
                    "                   '            <div class=\"x-rm-filter-days\">',\r",
                    "                   '                <span>Created in Past</span>',\r",
                    "                   '                <input style = \"margin-left: 12px;\" maxlength=\"3\" type=\"text\" pattern=\"[0-9]*\" data-name=\"created_in_past\" onkeyup=\"if(!(/^[0-9]+$/.test(this.value))) this.value=\\'\\';\" />',\r",
                    "                   '                <span>Days</span>',\r",
                    "                   '            </div>',\r",
                    "                   '        </div>',\r",
                    "                   '    </div>',\r",
                    "                   '</div>'\r",
                    "                  )\r",
                    "    );\r",
                    "    filterDDList.refresh();\r",
                    "}\r",
                    "\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "7a001118-ebeb-4f1d-9f5c-c8ee686bfbb2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "dataview[actionSorting=sortingStore]",
                "designer|targetType": "Ext.dataview.DataView",
                "fn": "onListHeaderSortingItemTap",
                "implHandler": [
                    "\r",
                    "var targetEl = e.target;\r",
                    "var listId = null;\r",
                    "\r",
                    "switch(dataview._itemId) {\r",
                    "\r",
                    "    case 'billingListHeader':\r",
                    "\r",
                    "        listId = '#billingList';\r",
                    "        break;\r",
                    "\r",
                    "    case 'pricingListHeader':\r",
                    "\r",
                    "        listId = '#pricingList';\r",
                    "        break;\r",
                    "\r",
                    "    case 'inhouseListHeader':\r",
                    "\r",
                    "        listId = '#inhouseList';\r",
                    "        break;\r",
                    "\r",
                    "    case 'discountListHeader':\r",
                    "\r",
                    "        listId = '#discountList';\r",
                    "        break;\r",
                    "\r",
                    "    case 'retailerListHeader':\r",
                    "\r",
                    "        listId = '#retailerList';\r",
                    "        break;\r",
                    "\r",
                    "    case 'headerList':\r",
                    "\r",
                    "        listId = '#mainList';\r",
                    "        break;\r",
                    "\r",
                    "    case 'vendorListHeader':\r",
                    "\r",
                    "        listId = '#vendorList';\r",
                    "        break;\r",
                    "\r",
                    "    default:\r",
                    "\r",
                    "        return;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(targetEl.hasAttribute('data-name') || targetEl.parentNode.hasAttribute('data-name')) {\r",
                    "    var listToRefresh = dataview.parent.down(listId);\r",
                    "    var storeToSort = listToRefresh.getStore();\r",
                    "\r",
                    "    //  *******  IF  LIST  IS  EMPTY  *****\r",
                    "    if(!storeToSort)\r",
                    "    {\r",
                    "        return;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    if(targetEl.hasAttribute('data-name')) {\r",
                    "        var childImage = targetEl.querySelectorAll('img')[0];\r",
                    "        if(childImage) {\r",
                    "            if(childImage.getAttribute('src').indexOf('downArrow') !== -1) {\r",
                    "                childImage.setAttribute('src','resources/images/button_icons/upArrow.png');\r",
                    "                storeToSort.sort(targetEl.getAttribute('data-name'),'ASC');\r",
                    "            }\r",
                    "            else {\r",
                    "                childImage.setAttribute('src','resources/images/button_icons/downArrow.png');\r",
                    "                storeToSort.sort(targetEl.getAttribute('data-name'),'DESC');\r",
                    "            }\r",
                    "        }\r",
                    "    }\r",
                    "    else {\r",
                    "        if(targetEl.getAttribute('src').indexOf('downArrow') !== -1) {\r",
                    "            targetEl.setAttribute('src','resources/images/button_icons/upArrow.png');\r",
                    "            storeToSort.sort(targetEl.parentNode.getAttribute('data-name'),'ASC');\r",
                    "        }\r",
                    "        else {\r",
                    "            targetEl.setAttribute('src','resources/images/button_icons/downArrow.png');\r",
                    "            storeToSort.sort(targetEl.parentNode.getAttribute('data-name'),'DESC');\r",
                    "        }\r",
                    "    }\r",
                    "    listToRefresh.refresh();\r",
                    "}"
                ],
                "name": "itemtap"
            },
            "designerId": "a54908bf-7490-4d87-8cfa-fd1e74922dce"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "image[action=imageSelector]",
                "designer|targetType": "Ext.Img",
                "fn": "onImageSelectorImageTap",
                "implHandler": [
                    "return ;\r",
                    "var fileFieldItemId = image.getItemId().substring(0,(image.getItemId().length - 5 ));\r",
                    "\r",
                    "var fileField = Ext.ComponentQuery.query('#'+fileFieldItemId)[0] ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "// fileInput = fileField.down('fileinput') ;\r",
                    "// console.log(fileInput);\r",
                    "// var evt = document.createEvent('Event');\r",
                    "// evt.initEvent('click', true, true);\r",
                    "// fileInput.dispatchEvent(evt);"
                ],
                "name": "tap"
            },
            "designerId": "e8df563e-38d7-49c6-be5c-09c323b10e4d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "image[action=profileImage]",
                "designer|targetType": "Ext.Img",
                "fn": "onProfileImageHide",
                "implHandler": [
                    "component.setHidden(false);\r",
                    "component.setDisabled(false);\r",
                    "\r",
                    "// var fileFieldItemId = component.getItemId().substring(0,(component.getItemId().length - 5 ));\r",
                    "\r",
                    "// var fileField = Ext.ComponentQuery.query('#'+fileFieldItemId)[0] ;\r",
                    "\r",
                    "\r",
                    "// fileField.removeCls('x-rm-rdNophoto');\r",
                    "// fileField.setCls('x-rm-rdaddphoto');\r",
                    "//component.setSrc('resources/images/retailerDetail/add_photo.png');\r",
                    "\r",
                    "this.changeFileInputTitle();"
                ],
                "name": "hide"
            },
            "designerId": "7044fd85-4767-41cb-a887-223d2972a95f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "filefield[action=changeImageFile]",
                "designer|targetType": "Ext.field.File",
                "fn": "onImageAddFilefieldHide",
                "implHandler": [
                    "component.setHidden(false);\r",
                    "component.setDisabled(false);\r",
                    "\r",
                    "// component.removeCls('x-rm-rdaddphoto');\r",
                    "// component.setCls('x-rm-rdNophoto');\r",
                    "\r",
                    "//component.getParent.down('image').setSrc('resources/images/logos/default_User.jpg');\r",
                    "\r",
                    "this.changeFileInputTitle();"
                ],
                "name": "hide"
            },
            "designerId": "1cc8ac98-5f5e-4a22-ac7e-480c0a4cf81d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "changeFileInputTitle",
                "implHandler": [
                    "var fileFields = Ext.DomQuery.select(\"input[type=file]\") ;\r",
                    "\r",
                    "if(fileFields.length){\r",
                    "    for(var i=0; i < fileFields.length; i++){\r",
                    "\r",
                    "        fileFields[i].title = \"Change Photo\";\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "6d4adb46-f3a2-486f-86d9-a79b3edc6c98"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "onDeleteButtonTap",
                "implHandler": [
                    "var allVendorListContainer  = component.down(\"#allVendorListContainer\");\r",
                    "var vendorList = allVendorListContainer.down(\"#vendorList\");\r",
                    "var store = vendorList.getStore();\r",
                    "var selectedRecords = vendorList.getSelection();\r",
                    "\r",
                    "if(Ext.isEmpty(selectedRecords)) {\r",
                    "    Ext.Msg.alert('Warning', 'Please select a record to delete', Ext.emptyFn);\r",
                    "    return;\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    store.remove(selectedRecords);\r",
                    "    store.sync();\r",
                    "    vendorList.refresh();\r",
                    "}\r",
                    "\r",
                    "console.log(selectedRecords);"
                ]
            },
            "designerId": "a53114ff-67c4-45f8-aee3-666db014bde6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initialiseApp",
                "implHandler": [
                    "\r",
                    "            function loadStore(){\r",
                    "                      if(! RMdatalink.app.getController('PaginationController').config.storesLoadedFirstTime[RMdatalink.app.getController('PaginationController').getCurrentActiveStoreId()]){\r",
                    "                             RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),false);\r",
                    "                  }\r",
                    "            }\r",
                    "\r",
                    "           RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('PermisstionsStore') ;\r",
                    "          loadStore();\r",
                    "\r",
                    "\r",
                    "          RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('notificationsNew') ;\r",
                    "          loadStore();\r",
                    "\r",
                    "\r",
                    "           RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('vendors.Master') ;\r",
                    "          loadStore();\r",
                    "          RMdatalink.app.getController('PaginationController').config.storesLoadedFirstTime['vendors.Master'] = true ;\r",
                    "\r",
                    "\r",
                    "     //     RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('vendorDetailsRecodsStore') ;\r",
                    "     //     loadStore();\r",
                    "\r",
                    "          RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('products.DatalinkMain') ;\r",
                    "           loadStore();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "          RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('billingMasterStore') ;\r",
                    "          loadStore();\r",
                    "\r",
                    "           RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('TechSupportLogsStore') ;\r",
                    "          loadStore();\r",
                    "\r",
                    "\r",
                    "        RMdatalink.app.getController('RMProController').initRMproStore() ;\r",
                    "\r",
                    "\r",
                    "            Ext.getStore('inhouseMasterStore').setData([{\r",
                    "                users:{},\r",
                    "                reps:{}\r",
                    "            }]);\r",
                    "            Ext.getStore('inhouseMasterStore').sync();\r",
                    "\r",
                    "            Ext.getStore('discountsMasterStore').setData([{\r",
                    "                datalink:{},\r",
                    "                ecatalog:{},\r",
                    "                smartcart:{},\r",
                    "                rmplc:{},\r",
                    "                irugz:{},\r",
                    "                previousDiscounts:{}\r",
                    "            }]);\r",
                    "            Ext.getStore('discountsMasterStore').sync();\r",
                    "\r",
                    "\r",
                    "            controllers= {\r",
                    "\r",
                    "                    RetailerDeatilsDataSet:RMdatalink.app.getController('RetailerDeatilsDataSet')\r",
                    "            };\r",
                    "\r",
                    "\r",
                    "          RMdatalink.app.getController('PaginationController').initialiseRetailers() ;"
                ]
            },
            "designerId": "cfe2a995-7308-409b-bcb5-7a51a9ab7736"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "component[cls=x-select-overlay]",
                "designer|targetType": "Ext.Component",
                "fn": "onSelectFldPanelInitialize",
                "implHandler": [
                    "component = component.down('list');\r",
                    "        var setupPCScrollbar = function(container) {\r",
                    "                        var isMobile = (navigator.appVersion.toLowerCase().indexOf(\"mobile\") > -1 || navigator.appVersion.toLowerCase().indexOf(\"ipad\") > -1);\r",
                    "                        if (!isMobile) {\r",
                    "                            if (container.isXType('selectfield'))\r",
                    "                                container = container.down('list');// Add support for selectbuttons\r",
                    "                            if (!Ext.isFunction(container.getScrollable) || !container.getScrollable() || !Ext.isFunction(container.getScrollable().getScroller))\r",
                    "                                return console.warn(\"Attempting to apply pc scroller to non-container item\");\r",
                    "                            container.getScrollable().getScroller().setDisabled(true);\r",
                    "                            container.getScrollable(false);\r",
                    "                            var scrollContainers = Ext.DomQuery.select('.x-scroll-container', container.element.dom);\r",
                    "                            var scrollBars = Ext.DomQuery.select('.x-scroll-indicator', container.element.dom);\r",
                    "                            for (var i = 0; i < scrollContainers.length; i++) {\r",
                    "                                scrollContainers[i].style.overflow = \"auto\";\r",
                    "                            }\r",
                    "                            for (var i = 0; i < scrollBars.length; i++) {\r",
                    "                                scrollBars[i].offsetHeight = scrollContainers[0].offsetHeight;\r",
                    "                                scrollBars[i].clientHeight = scrollContainers[0].clientHeight;\r",
                    "                                scrollBars[i].style.zIndex = \"-1\";\r",
                    "                            }\r",
                    "                        }\r",
                    "                    };\r",
                    "\r",
                    "        setupPCScrollbar(component) ;"
                ],
                "name": "initialize"
            },
            "designerId": "cb421bd3-135a-4db3-9863-e3aa4a190488"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textfield[action=inputByDatePicker]",
                "designer|targetType": "Ext.field.Text",
                "fn": "onTextfieldinputByDatePickerInitialize",
                "implHandler": [
                    "component.element.on(\"tap\",function(){\r",
                    "\r",
                    "\r",
                    "        function fn(newDate){\r",
                    "\r",
                    "\r",
                    "            component.setValue(Ext.Date.format(newDate, \"m/d/Y\"));\r",
                    "            RMdatalink.util.Calendar.hideCalendar();\r",
                    "             component.setDisabled(false);\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "        RMdatalink.util.Calendar.showCalendar(fn,component);\r",
                    "\r",
                    "        component.setDisabled(true);\r",
                    "\r",
                    "        if(calendarPanelPicker)\r",
                    "        {\r",
                    "            calendarPanelPicker.setZIndex(52);\r",
                    "        }\r",
                    "\r",
                    "});"
                ],
                "name": "initialize"
            },
            "designerId": "be6f49c2-5b2c-47dd-b01e-a246ae3217ac"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "dataKey",
                    "dataToUpdate",
                    "_id"
                ],
                "fn": "updateRetailerRecords",
                "implHandler": [
                    "/*\r",
                    "\r",
                    "\r",
                    "find rt using _id\r",
                    "\r",
                    "if dataKey == \"ALL\"\r",
                    "\r",
                    "update full rt record\r",
                    "\r",
                    "else \r",
                    "\r",
                    "update specific data key\r",
                    "\r",
                    "repeat above for all rt sores\r",
                    "\r",
                    "retailersMaster\r",
                    "billingMasterStore\r",
                    "retailerUsers\r",
                    "retailerPending\r",
                    "retailerHotProspects\r",
                    "retailerProspects\r",
                    "retailerInactive\r",
                    "\r",
                    "\r",
                    "RMdatalink.app.getController('Main').updateRetailerRecords(dataKey,dataToUpdate,_id) ;\r",
                    "\r",
                    "\r",
                    "*/\r",
                    "\r",
                    "var retailersMaster = Ext.getStore('retailersMaster') ;\r",
                    "\r",
                    "var billingMasterStore = Ext.getStore('billingMasterStore') ;\r",
                    "\r",
                    "var retailerUsers = Ext.getStore('retailerUsers') ;\r",
                    "\r",
                    "var retailerPending = Ext.getStore('retailerPending') ;\r",
                    "\r",
                    "var retailerHotProspects = Ext.getStore('retailerHotProspects') ;\r",
                    "\r",
                    "var retailerProspects = Ext.getStore('retailerProspects') ;\r",
                    "\r",
                    "var retailerInactive = Ext.getStore('retailerInactive') ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "var rtStores = []; \r",
                    "\r",
                    "rtStores.push(retailersMaster);\r",
                    "\r",
                    "rtStores.push(billingMasterStore);\r",
                    "\r",
                    "rtStores.push(retailerUsers);\r",
                    "\r",
                    "rtStores.push(retailerPending);\r",
                    "\r",
                    "rtStores.push(retailerHotProspects);\r",
                    "\r",
                    "rtStores.push(retailerProspects);\r",
                    "\r",
                    "rtStores.push(retailerInactive);\r",
                    "\r",
                    "\r",
                    "for(var i= 0; i < rtStores.length ; i++ ){\r",
                    "    \r",
                    "    var recIndex = rtStores[i].findExact('_id',_id) ;\r",
                    "    \r",
                    "    if(recIndex == -1){\r",
                    "        break ;\r",
                    "    }\r",
                    "    \r",
                    "    var rtRecord = rtStores[i].getAt(recIndex);\r",
                    "    \r",
                    "    if(dataKey == \"ALL\" ){\r",
                    "        \r",
                    "        rtRecord.set(dataToUpdate);\r",
                    "        \r",
                    "    }else{\r",
                    "        \r",
                    "        rtRecord.set(dataKey,dataToUpdate);\r",
                    "    }\r",
                    "     rtRecord.dirty= true;\r",
                    "}"
                ]
            },
            "designerId": "0c796e0e-af06-4554-80fa-c8e457a5d578"
        }
    ]
}