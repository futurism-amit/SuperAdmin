{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "LoginHandler",
        "isRetailerLogin": false,
        "logedInUser": "amitc",
        "logedInUserRecord": [
            "null"
        ],
        "resetPwdUser": [
            "{\r",
            "    \r",
            "}"
        ],
        "userDetails": [
            "{}"
        ]
    },
    "configAlternates": {
        "userDetails": "object",
        "logedInUserRecord": "object",
        "isRetailerLogin": "boolean",
        "resetPwdUser": "object"
    },
    "designerId": "a5b226a5-a28d-43b7-bcd2-6315d23cb899",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "logedInUser",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "userDetails",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "logedInUserRecord",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "isRetailerLogin",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "resetPwdUser",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=loginActionButton]",
                "designer|targetType": "Ext.Button",
                "fn": "onloginActionButtonTap",
                "implHandler": [
                    "var userNameFld = Ext.ComponentQuery.query('#loginUsernameTxtFld')[0] ;\r",
                    "var userName = userNameFld.getValue() ;\r",
                    "var isInhouseUser = null ;//Ext.ComponentQuery.query('#loginAsInhouseUserRadioFld')[0].getChecked() ;\r",
                    "\r",
                    "if(Ext.data.Validations.email(userNameFld, userName))\r",
                    "{\r",
                    "   isInhouseUser = false;\r",
                    "\r",
                    "   this.config.isRetailerLogin = true ;\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "     this.config.isRetailerLogin = false ;\r",
                    "\r",
                    "    isInhouseUser = true ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(isInhouseUser)\r",
                    "{\r",
                    "    this.doLogin(Ext.ComponentQuery.query('#loginUsernameTxtFld')[0].getValue(),Ext.ComponentQuery.query('#loginPasswordFld')[0].getValue());\r",
                    "}else{\r",
                    "\r",
                    "    this.doRetailerLogin(Ext.ComponentQuery.query('#loginUsernameTxtFld')[0].getValue(),Ext.ComponentQuery.query('#loginPasswordFld')[0].getValue());\r",
                    "    //Ext.Viewport.setActiveItem(Ext.create('RMdatalink.view.retailer.MainPanel'));\r",
                    "\r",
                    "}"
                ],
                "name": "tap"
            },
            "designerId": "225d2dcd-291a-4557-99f0-23456e27f284"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "username",
                    "password"
                ],
                "fn": "doLogin",
                "implHandler": [
                    "var _this = this ;\r",
                    "\r",
                    "if(dbEnv === \"dev_\")\r",
                    "{\r",
                    "    username = \"dkhazai\";\r",
                    "    password = \"123456\" ;\r",
                    "}\r",
                    "\r",
                    "if(username == \"\" || password == \"\"){\r",
                    "\r",
                    "    Ext.Msg.alert('Alert.', \"Username and Password are mandatory\", Ext.emptyFn);\r",
                    "    return ;\r",
                    "}else // if( password === \"123456\")\r",
                    "{\r",
                    " Ext.Viewport.setMasked({\r",
                    "                    xtype: 'loadmask',message:\"Authenticating...\"\r",
                    "                });\r",
                    "     requestLogin() ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "// }else{\r",
                    "\r",
                    "//     failuer();\r",
                    "// }\r",
                    "\r",
                    "\r",
                    "function requestLogin(){\r",
                    "\r",
                    "   // RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_inhouserecords\",pageNo:1,pageSize:50,sortBy:{},query:{\"username\":username},fields:{\"username\":1,\"user_role\":1 ,\"permissions\":1}},suc,err);\r",
                    "\r",
                    "\r",
                    "    var query = {\r",
                    "\r",
                    "        \"username\":username,\r",
                    "        \"password\":password\r",
                    "\r",
                    "    };\r",
                    "\r",
                    "     RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_inhouserecords\",pageNo:1,pageSize:50,sortBy:{},query:{\"username\":username,\"password\":password},fields:{}},suc,err);\r",
                    "   //RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_masterretailerrecords\",pageNo:1,pageSize:50,sortBy:{},query:tQuery,fields:{}},suc,err);\r",
                    "    function suc(){\r",
                    "\r",
                    "        if(arguments[0].count >= 1)\r",
                    "        {\r",
                    "            try{\r",
                    "\r",
                    "             _this.config.logedInUserRecord = arguments[0].items[0] ;\r",
                    "\r",
                    "                console.log( _this.config.logedInUserRecord) ;\r",
                    "\r",
                    "\r",
                    "             _this.config.userDetails.userName = arguments[0].items[0].username ;\r",
                    "             _this.config.userDetails.userRole = arguments[0].items[0].user_role ;\r",
                    "            // _this.config.userDetails.permissions = arguments[0].items[0].permissions ;\r",
                    "             _this.config.userDetails._id = arguments[0].items[0]._id ;\r",
                    "             _this.config.userDetails.custom_filter = arguments[0].items[0].custom_filter ;\r",
                    "             _this.config.userDetails.lastUserSavedActivity =   RMdatalink.util.globalMethods.getlatestUserActivity(arguments[0].items[0]);\r",
                    "             _this.config.userDetails.expand_button_state =  arguments[0].items[0].expand_button_state ;\r",
                    "             _this.config.userDetails.rm_navigation_panel_state = arguments[0].items[0].rm_navigation_panel_state ;\r",
                    "            // console.log(arguments[0].items[0])   ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "              _this.config.userDetails.right_naviagtion_panel_state = arguments[0].items[0].right_naviagtion_panel_state;\r",
                    "            }catch(ex){\r",
                    "                console.error(ex) ;\r",
                    "            }\r",
                    "            success();\r",
                    "        }\r",
                    "        else{\r",
                    "            failuer() ;\r",
                    "        }\r",
                    "        console.log(arguments);\r",
                    "    }\r",
                    "\r",
                    "    function err(){\r",
                    "        failuer() ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function failuer(){\r",
                    " Ext.Viewport.setMasked(false);\r",
                    "    Ext.Msg.alert('Alert.', \"Login failed\", Ext.emptyFn);\r",
                    "}\r",
                    "\r",
                    "function success(){\r",
                    "//     Ext.Viewport.setMasked({\r",
                    "//                     xtype: 'loadmask'\r",
                    "//                 });\r",
                    "\r",
                    "    //Ext.ComponentQuery.query('#loginForgotPwdLabel')[0].setHidden(true);\r",
                    "    Ext.ComponentQuery.query('#loginActionButton')[0].setDisabled(true);\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#loginUsernameTxtFld')[0].setValue(\"\") ;\r",
                    "    Ext.ComponentQuery.query('#loginPasswordFld')[0].setValue(\"\") ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "    function showMainView(){\r",
                    "\r",
                    "            Ext.Viewport.setActiveItem(\"Main\");\r",
                    "\r",
                    "    }\r",
                    "     Ext.Viewport.setMasked({\r",
                    "                    xtype: 'loadmask',message:\"Initializing app...please wait.\"\r",
                    "                });\r",
                    "\r",
                    "    Ext.Function.defer( showMainView, 100, this);\r",
                    "\r",
                    "\r",
                    "    function requestLogin(){\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "}"
                ]
            },
            "designerId": "665454b5-bfcd-4e1f-8516-38f69ace9271"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "username",
                    "password"
                ],
                "fn": "doRetailerLogin",
                "implHandler": [
                    "var _this = this ;\r",
                    "\r",
                    "if(username == \"\" || password == \"\"){\r",
                    "\r",
                    "    Ext.Msg.alert('Alert.', \"Username and Password are mandatory\", Ext.emptyFn);\r",
                    "    return ;\r",
                    "\r",
                    "}else // if( password === \"123456\")\r",
                    "{\r",
                    "\r",
                    "\r",
                    " Ext.Viewport.setMasked({\r",
                    "                    xtype: 'loadmask'\r",
                    "                });\r",
                    "     requestLogin() ;\r",
                    "\r",
                    "}\r",
                    "// else{\r",
                    "\r",
                    "//     failuer();\r",
                    "// }\r",
                    "\r",
                    "\r",
                    "function requestLogin(){\r",
                    "\r",
                    "    var tQuery = {\r",
                    "        '$and':[\r",
                    "            {\"store_email\":username},\r",
                    "            {\"store_password\":password}\r",
                    "        ]\r",
                    "    };\r",
                    "\r",
                    "   // RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_inhouserecords\",pageNo:1,pageSize:50,sortBy:{},query:{\"username\":username},fields:{\"username\":1,\"user_role\":1 ,\"permissions\":1}},suc,err);\r",
                    "\r",
                    "    RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_masterretailerrecords\",pageNo:1,pageSize:50,sortBy:{},query:tQuery,fields:{}},suc,err);\r",
                    "\r",
                    "    function suc(){\r",
                    "\r",
                    "        if(arguments[0].count >= 1)\r",
                    "        {\r",
                    "            try{\r",
                    "\r",
                    "             _this.config.logedInUserRecord = arguments[0].items[0] ;\r",
                    "\r",
                    "                console.log( _this.config.logedInUserRecord) ;\r",
                    "\r",
                    "\r",
                    "             _this.config.userDetails._id = arguments[0].items[0]._id ;\r",
                    "\r",
                    "\r",
                    "            }catch(ex){\r",
                    "                console.error(ex) ;\r",
                    "            }\r",
                    "            success();\r",
                    "        }\r",
                    "        else{\r",
                    "            failuer() ;\r",
                    "        }\r",
                    "        console.log(arguments);\r",
                    "    }\r",
                    "\r",
                    "    function err(){\r",
                    "        failuer() ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function failuer(){\r",
                    " Ext.Viewport.setMasked(false);\r",
                    "    Ext.Msg.alert('Alert.', \"Login failed\", Ext.emptyFn);\r",
                    "}\r",
                    "\r",
                    "function success(){\r",
                    "//     Ext.Viewport.setMasked({\r",
                    "//                     xtype: 'loadmask'\r",
                    "//                 });\r",
                    "\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#loginActionButton')[0].setDisabled(true);\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#loginUsernameTxtFld')[0].setValue(\"\") ;\r",
                    "    Ext.ComponentQuery.query('#loginPasswordFld')[0].setValue(\"\") ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "    function showMainView(){\r",
                    "\r",
                    "            Ext.Viewport.setActiveItem(\"RetailerMain\");\r",
                    "            RMdatalink.app.getController('UINav').redirectTo(\"RTcard0\");\r",
                    "            Ext.Viewport.setMasked(false) ;\r",
                    "            RMdatalink.app.getController('RetailerPaymentController').initialiseRetailer() ;\r",
                    "    }\r",
                    "\r",
                    "    Ext.Function.defer( showMainView, 100, this);\r",
                    "\r",
                    "\r",
                    "    function requestLogin(){\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "}"
                ]
            },
            "designerId": "6079dd6c-bb3b-4d1f-8eff-6ccb505d2c93"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "passwordfield[action=onActionDoLogin]",
                "designer|targetType": "Ext.field.Password",
                "fn": "onLoginPasswordfieldAction",
                "implHandler": [
                    "var userNameFld = Ext.ComponentQuery.query('#loginUsernameTxtFld')[0] ;\r",
                    "var userName = userNameFld.getValue() ;\r",
                    "var isInhouseUser = null ;//Ext.ComponentQuery.query('#loginAsInhouseUserRadioFld')[0].getChecked() ;\r",
                    "\r",
                    "if(Ext.data.Validations.email(userNameFld, userName))\r",
                    "{\r",
                    "\r",
                    "    this.config.isRetailerLogin = true ;\r",
                    "   isInhouseUser = false;\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "     this.config.isRetailerLogin = false ;\r",
                    "    isInhouseUser = true ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(isInhouseUser)\r",
                    "{\r",
                    "    this.doLogin(Ext.ComponentQuery.query('#loginUsernameTxtFld')[0].getValue(),Ext.ComponentQuery.query('#loginPasswordFld')[0].getValue());\r",
                    "}else{\r",
                    "\r",
                    "    this.doRetailerLogin(Ext.ComponentQuery.query('#loginUsernameTxtFld')[0].getValue(),Ext.ComponentQuery.query('#loginPasswordFld')[0].getValue());\r",
                    "\r",
                    " //   Ext.Viewport.setActiveItem(Ext.create('RMdatalink.view.retailer.MainPanel'));\r",
                    "\r",
                    "}"
                ],
                "name": "action"
            },
            "designerId": "b5f39d0c-d47e-4524-9248-aedeef01a3e2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onForgotPasswordTap",
                "implHandler": [
                    "Ext.ComponentQuery.query('#loginScreenContainer')[0].setActiveItem(1);"
                ]
            },
            "designerId": "33be2ffc-9868-4f32-b651-b8a54641c5e2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "label[itemId=loginForgotPwdLabel]",
                "designer|targetType": "Ext.Label",
                "fn": "onloginForgotPwdLabelInitialize",
                "implHandler": [
                    "\r",
                    "component.element.on(\"tap\",this.onForgotPasswordTap,this) ;"
                ],
                "name": "initialize"
            },
            "designerId": "243bb112-0faf-413c-8fce-7d02e34d90c2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=lUserIptnsLogoutBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onRMLogoutBtnTap",
                "implHandler": [
                    "RMdatalink.app.getController('UINav').redirectTo(\"main\");\r",
                    "\r",
                    "\r",
                    "Ext.getCmp(\"LoginUserOptions\").hide() ;\r",
                    "Ext.Viewport.setActiveItem(\"LoginScreen\");\r",
                    "Ext.ComponentQuery.query('#loginActionButton')[0].setDisabled(false);\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "b31ab3dd-4735-4a32-8133-f901e5ef7df2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "permissions"
                ],
                "fn": "setResetUserRestrictions",
                "implHandler": [
                    "\r",
                    "    Ext.ComponentQuery.query('#RMMainAccSettings')[0].setText(this.config.userDetails.userName) ;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "    if(!permissions || permissions.length == 0){\r",
                    "        return ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    for(var i=0 ; i<permissions.length ; i++){\r",
                    "\r",
                    "        switch(permissions[i].type){\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "             case \"Retailers\":\r",
                    "\r",
                    "                if(permissions[i].value == \"none\"){\r",
                    "\r",
                    "                    Ext.ComponentQuery.query(\"#overviewRetailersBtn\")[0].setHidden(true);\r",
                    "                }else{\r",
                    "                    Ext.ComponentQuery.query(\"#overviewRetailersBtn\")[0].setHidden(false);\r",
                    "                }\r",
                    "\r",
                    "                break;\r",
                    "\r",
                    "             case \"Billing\":\r",
                    "\r",
                    "                if(permissions[i].value == \"none\"){\r",
                    "\r",
                    "                    Ext.ComponentQuery.query(\"#overviewBillingBtn\")[0].setHidden(true);\r",
                    "                }else{\r",
                    "                    Ext.ComponentQuery.query(\"#overviewBillingBtn\")[0].setHidden(false);\r",
                    "                }\r",
                    "\r",
                    "                break;\r",
                    "\r",
                    "\r",
                    "              case \"Vendors\":\r",
                    "\r",
                    "                if(permissions[i].value == \"none\"){\r",
                    "\r",
                    "                    Ext.ComponentQuery.query(\"#overviewVendorsBtn\")[0].setHidden(true);\r",
                    "                }else{\r",
                    "\r",
                    "                    Ext.ComponentQuery.query(\"#overviewVendorsBtn\")[0].setHidden(false);\r",
                    "                }\r",
                    "\r",
                    "                var vendorMainPanel = Ext.ComponentQuery.query('#vendorsMainContentPanel')[0] ;\r",
                    "                if(permissions[i].value == \"fullControl\"){\r",
                    "\r",
                    "                     vendorMainPanel.down('#cardAddRetailerBtn').setHidden(false) ;\r",
                    "                     vendorMainPanel.down('#cardDeleteBtn').setHidden(false) ;\r",
                    "\r",
                    "\r",
                    "                }else{\r",
                    "\r",
                    "\r",
                    "                     vendorMainPanel.down('#cardAddRetailerBtn').setHidden(true) ;\r",
                    "                    vendorMainPanel.down('#cardDeleteBtn').setHidden(true) ;\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "\r",
                    "                break;\r",
                    "\r",
                    "\r",
                    "               case \"Inhouse\":\r",
                    "\r",
                    "                if(permissions[i].value == \"none\"){\r",
                    "\r",
                    "                    Ext.ComponentQuery.query(\"#overviewInHouseBtn\")[0].setHidden(true);\r",
                    "                }else{\r",
                    "                    Ext.ComponentQuery.query(\"#overviewInHouseBtn\")[0].setHidden(false);\r",
                    "                }\r",
                    "                 var inhouseMainPanel = Ext.ComponentQuery.query('#inhouseMainContentPanel')[0] ;\r",
                    "                 var inhouseDetailPage = Ext.ComponentQuery.query('#inhouseDetailPageScreenPanel')[0] ;\r",
                    "\r",
                    "                 if(permissions[i].value == \"fullControl\"){\r",
                    "\r",
                    "                   inhouseMainPanel.down('#cardAddRetailerBtn').setHidden(false) ;\r",
                    "                     inhouseMainPanel.down('#cardDeleteBtn').setHidden(false) ;\r",
                    "\r",
                    "                     inhouseDetailPage.down('#detailsSaveBtn').setHidden(false) ;\r",
                    "\r",
                    "                }else{\r",
                    "                      inhouseMainPanel.down('#cardAddRetailerBtn').setHidden(true) ;\r",
                    "                    inhouseMainPanel.down('#cardDeleteBtn').setHidden(true) ;\r",
                    "\r",
                    "                    inhouseDetailPage.down('#detailsSaveBtn').setHidden(true) ;\r",
                    "\r",
                    "                }\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "                break;\r",
                    "\r",
                    "\r",
                    "              case \"Notification\":\r",
                    "\r",
                    "                if(permissions[i].value == \"none\"){\r",
                    "\r",
                    "                    Ext.ComponentQuery.query(\"#extrasNotificationsBtn\")[0].setHidden(true);\r",
                    "                }else{\r",
                    "                    Ext.ComponentQuery.query(\"#extrasNotificationsBtn\")[0].setHidden(false);\r",
                    "                }\r",
                    "\r",
                    "                break;\r",
                    "\r",
                    "\r",
                    "                case \"Notepad\":\r",
                    "\r",
                    "                if(permissions[i].value == \"none\"){\r",
                    "\r",
                    "                    Ext.ComponentQuery.query(\"#extrasNotepadBtn\")[0].setHidden(true);\r",
                    "                }else{\r",
                    "                    Ext.ComponentQuery.query(\"#extrasNotepadBtn\")[0].setHidden(false);\r",
                    "                }\r",
                    "\r",
                    "                break;\r",
                    "\r",
                    "\r",
                    "                case \"Products\":\r",
                    "\r",
                    "                if(permissions[i].value == \"none\"){\r",
                    "\r",
                    "                    Ext.ComponentQuery.query(\"#RMProductsNavigationPanel\")[0].setHidden(true);\r",
                    "                }else{\r",
                    "                    Ext.ComponentQuery.query(\"#RMProductsNavigationPanel\")[0].setHidden(false);\r",
                    "                }\r",
                    "\r",
                    "                break;\r",
                    "\r",
                    "                //\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    ""
                ]
            },
            "designerId": "2c52ad1b-2932-492d-8051-a53332db0673"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "hideUserRightInfoForInhouse",
                "implHandler": [
                    "try{\r",
                    "\r",
                    " var userRightDivs = Ext.DomQuery.select('div[class=useRoleToHide]');\r",
                    "if(RMdatalink.app.getController('LoginHandler').config.userDetails.userRole == \"Super Admin\"){\r",
                    "\r",
                    "    for(var i=0  ; i <userRightDivs.length ; i++){\r",
                    "\r",
                    "        userRightDivs[i].style.visibility=\"visible\";\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "else{\r",
                    "\r",
                    "    for(var i=0  ; i <userRightDivs.length ; i++){\r",
                    "\r",
                    "         userRightDivs[i].style.visibility=\"hidden\";\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "}\r",
                    "}catch(ex){\r",
                    "\r",
                    "    console.error(ex) ;\r",
                    "}\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "a226ba6e-0ee1-4ca2-bc68-e080c58f4cf5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onPermissionsLoaded",
                "implHandler": [
                    "var permissionsStore = Ext.getStore('PermisstionsStore') ;\r",
                    "\r",
                    "if(permissionsStore.getData() && permissionsStore.getData().all.length > 0){\r",
                    "\r",
                    "    var permissions = new Array() ;\r",
                    "    var userRole =  this.config.userDetails.userRole ;\r",
                    "\r",
                    "\r",
                    "    var recIndex = permissionsStore.findExact(\"user_role\",userRole) ;\r",
                    "\r",
                    "    var record = permissionsStore.getAt(recIndex) ;\r",
                    "\r",
                    "    permissions = record.data.permissions ;\r",
                    "console.log(permissions) ;\r",
                    "\r",
                    "    this.setResetUserRestrictions(permissions);\r",
                    "\r",
                    "//      Ext.Viewport.setMasked(false) ;\r",
                    "\r",
                    "}else{\r",
                    "\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "d70d7643-8f29-447c-9921-7717aff66b9a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=RMMainAccSettings]",
                "designer|targetType": "Ext.Button",
                "fn": "onRMMainAccSettingsButtonTap",
                "implHandler": [
                    "                if(Ext.getCmp(\"LoginUserOptions\"))\r",
                    "                {\r",
                    "                     var popup =  Ext.getCmp(\"LoginUserOptions\") ;\r",
                    "                }\r",
                    "                else{\r",
                    "\r",
                    "                     var popup =   Ext.widget('LoginUserOptions');\r",
                    "                }\r",
                    "                if( this.config.userDetails.userRole == \"Super Admin\"){\r",
                    "\r",
                    "                    Ext.ComponentQuery.query('#lUserIptnsPermissionsBtn')[0].setHidden(false);\r",
                    "\r",
                    "                }else{\r",
                    "\r",
                    "                        Ext.ComponentQuery.query('#lUserIptnsPermissionsBtn')[0].setHidden(true);\r",
                    "                }\r",
                    "\r",
                    "                popup.showBy(button);\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "2703fbbd-3d0b-4f55-86a6-54fd8150f03e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=lUserIptnsPermissionsBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onlUserIptnsPermissionsBtnTap",
                "implHandler": [
                    "\r",
                    "RMdatalink.app.getController('PermissionsConroller').showPermissions() ;"
                ],
                "name": "tap"
            },
            "designerId": "8bb44fc8-152d-4d85-8477-fc254f8904c6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "forgotPassword",
                "implHandler": [
                    "var emailField = Ext.ComponentQuery.query('#forgotPasswardEmailFld')[0] ;\r",
                    "\r",
                    "var emailText = emailField.getValue();\r",
                    "\r",
                    "var that = this ;\r",
                    "\r",
                    "var newPwd = \"\" ;\r",
                    "\r",
                    "var username = \"\" ;\r",
                    "\r",
                    "if( emailText.length === 0 || ! Ext.data.Validations.email(emailField, emailText))\r",
                    "{\r",
                    "    Ext.Msg.alert('Alert.', \"Please enter valid e-mail address.\", Ext.emptyFn);\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "\r",
                    " Ext.Viewport.setMasked({\r",
                    "                    xtype: 'loadmask'\r",
                    "                });\r",
                    "\r",
                    "getInhouseUser() ;\r",
                    "\r",
                    "function generatePassword(length){\r",
                    "\r",
                    "    if(!length){\r",
                    "\r",
                    "        length = 6 ;\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    var str = \"\" ;\r",
                    "\r",
                    "    for(var i =0 ; i < length ; i++ ){\r",
                    "\r",
                    "        str +=  String.fromCharCode(getRandomInt(65,90)) ;\r",
                    "    }\r",
                    "\r",
                    "    return str ;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "//65 A 90 Z\r",
                    "\r",
                    "function getRandomInt(min, max) {\r",
                    "\r",
                    "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "//email\r",
                    "\r",
                    "function getInhouseUser(){\r",
                    "\r",
                    "    RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_inhouserecords\",pageNo:1,pageSize:50,sortBy:{},query:{\"email\":emailText},fields:{username:1}},suc,err);\r",
                    "\r",
                    "\r",
                    "    function suc(){\r",
                    "\r",
                    "        if(arguments[0].items.length ==0 ){\r",
                    "            err() ;\r",
                    "        }else{\r",
                    "            username = arguments[0].items[0].username ;\r",
                    "            updatePassword(arguments[0].items[0]._id);\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    function err(){\r",
                    "         Ext.Viewport.setMasked(false);\r",
                    "         Ext.Msg.alert('Alert.', \"User Not Found.\", Ext.emptyFn);\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "function updatePassword(_id){\r",
                    "    var store = Ext.getStore('inhouseMasterStore') ;\r",
                    "    newPwd = generatePassword() ;\r",
                    "    var dataToUpdate = {\r",
                    "\r",
                    "        temp_password : newPwd,\r",
                    "        is_password_reset : true\r",
                    "    };\r",
                    "     RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id , suc, err);\r",
                    "\r",
                    "    function suc(){\r",
                    "        sendEmail() ;\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "         Ext.Msg.alert('', \"Password update link sent, please check your email.\", Ext.emptyFn);\r",
                    "    }\r",
                    "\r",
                    "    function err(){\r",
                    "\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "function sendEmail(){\r",
                    "\r",
                    "    that.sendEmail(newPwd,emailText,username) ;\r",
                    "\r",
                    "\r",
                    "    //sendEmail:function(to, from, subject, body,sucessCallBack , errorCallBack){\r",
                    "}"
                ]
            },
            "designerId": "f2e1dd3b-734d-482a-bf6b-8653326a6e33"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[action=doForgotPassword]",
                "designer|targetType": "Ext.Button",
                "fn": "onForgotPwdButtonTap",
                "implHandler": [
                    "this.forgotPassword() ;"
                ],
                "name": "tap"
            },
            "designerId": "1e3f92ed-45cb-4e64-a354-46f7be04cf01"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "password",
                    "to",
                    "username"
                ],
                "fn": "sendEmail",
                "implHandler": [
                    "    var url = window.location.origin + window.location.pathname +\"?\";\r",
                    "\r",
                    "    if( dbEnv == \"dev_\"){\r",
                    "\r",
                    "        url += \"dev=true&\" ;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "     url += \"temppwd=\"+ password + \"&\" ;\r",
                    "\r",
                    "     url += \"user=\"+ username + \"#regeneratepwd\" ;\r",
                    "\r",
                    "     var linck = '<a href='+url+'>'+url+'</a>' ;\r",
                    "\r",
                    "\r",
                    "    var msgBody = 'Dear '+username + ' Please click below link to change your password ' + linck;\r",
                    "\r",
                    "    RMdatalink.iwa.rdl.sendEmail(to , \"support@rmdatalink.com\" ,\"Password Change\",\r",
                    "                                 msgBody ,sucessCallBack , errorCallBack) ;\r",
                    "\r",
                    "    function sucessCallBack(){\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    function errorCallBack(){\r",
                    "\r",
                    "    }"
                ]
            },
            "designerId": "6a000e18-e62f-49af-a001-203b65fd1633"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "newPwd"
                ],
                "fn": "regeneratePassword",
                "implHandler": [
                    "  var that = this ;\r",
                    " Ext.Viewport.setMasked({\r",
                    "                    xtype: 'loadmask'\r",
                    "                });\r",
                    "\r",
                    "\r",
                    "var tempPwd = that.config.resetPwdUser.tempPassword ;\r",
                    "var username = that.config.resetPwdUser.username ;\r",
                    "\r",
                    "getInhouseUser();\r",
                    "\r",
                    "function getInhouseUser(){\r",
                    "\r",
                    "    RMdatalink.iwa.rdl.queryDB({collection: dbEnv + \"rdl_inhouserecords\",pageNo:1,pageSize:50,\r",
                    "                                sortBy:{},query:{\"temp_password\":tempPwd,\"username\":username,is_password_reset:true},\r",
                    "                                fields:{username:1}},\r",
                    "                                suc,err);\r",
                    "\r",
                    "\r",
                    "    function suc(){\r",
                    "\r",
                    "        if(arguments[0].items.length ==0 ){\r",
                    "\r",
                    "            err() ;\r",
                    "\r",
                    "        }else{\r",
                    "\r",
                    "            updatePassword(arguments[0].items[0]._id);\r",
                    "\r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    function err(){\r",
                    "\r",
                    "         Ext.Viewport.setMasked(false);\r",
                    "         Ext.Msg.alert('Error.', \"You can no longer change the password using this link.\", Ext.emptyFn);\r",
                    "\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "function updatePassword(_id){\r",
                    "    var store = Ext.getStore('inhouseMasterStore') ;\r",
                    "\r",
                    "    var dataToUpdate = {\r",
                    "        password:newPwd ,\r",
                    "        temp_password : \"NON\" ,\r",
                    "        is_password_reset : false\r",
                    "    };\r",
                    "\r",
                    "     RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id , suc, err);\r",
                    "\r",
                    "    function suc(){\r",
                    "\r",
                    "       //  Ext.Viewport.setMasked(false);\r",
                    "         Ext.Msg.alert('Alert.', \"Password updated successfully.\", Ext.emptyFn);\r",
                    "\r",
                    "        doLogin() ;\r",
                    "    }\r",
                    "\r",
                    "    function err(){\r",
                    "\r",
                    "        Ext.Msg.alert('Error.', \"Error occured during password update, please re-try.\", Ext.emptyFn);\r",
                    "\r",
                    "        Ext.Viewport.setMasked(false);\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function doLogin(){\r",
                    "\r",
                    "       Ext.ComponentQuery.query('#loginScreenContainer')[0].setActiveItem(0) ;\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#regenratePwdFld')[0].setValue(\"\") ;\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#retypedRegenratePwdFld')[0].setValue(\"\") ;\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#loginUsernameTxtFld')[0].setValue(username) ;\r",
                    "    Ext.ComponentQuery.query('#loginPasswordFld')[0].setValue(newPwd) ;\r",
                    "\r",
                    "    Ext.ComponentQuery.query('#loginActionButton')[0].fireEvent(\"tap\");\r",
                    "}"
                ]
            },
            "designerId": "678bdb50-2aa1-448e-8fdd-bcfbcbadafb0"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button[itemId=confirmResetPwdFrmEmailBtn]",
                "designer|targetType": "Ext.Button",
                "fn": "onResetFrmEmailButtonTap",
                "implHandler": [
                    "\r",
                    "\r",
                    "var pwd = Ext.ComponentQuery.query('#regenratePwdFld')[0].getValue() ;\r",
                    "\r",
                    "var repwd = Ext.ComponentQuery.query('#retypedRegenratePwdFld')[0].getValue() ;\r",
                    "\r",
                    "var validation = true ;\r",
                    "var msg = \"\" ;\r",
                    "if(pwd.length < 6 ){\r",
                    "    validation = false ;\r",
                    "    msg += \"Try one with at least 6 characters. </br>\" ;\r",
                    "}\r",
                    "else if(pwd != repwd ){\r",
                    "    validation = false ;\r",
                    "    msg += \"These passwords don't match. Try again?</br>\" ;\r",
                    "}\r",
                    "\r",
                    "if(! validation){\r",
                    "     Ext.Msg.alert('Alert.', msg, Ext.emptyFn);\r",
                    "    return ;\r",
                    "}\r",
                    "\r",
                    "this.regeneratePassword(pwd) ;\r",
                    "\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "763218c2-5d0c-47ac-a503-afe30c010447"
        }
    ]
}