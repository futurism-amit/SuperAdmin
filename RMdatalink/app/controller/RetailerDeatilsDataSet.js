/*
 * File: app/controller/RetailerDeatilsDataSet.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.RetailerDeatilsDataSet', {
    extend: 'Ext.app.Controller',

    config: {
        isVendorUpdated: false,
        recordToUpdate: null,
        isAdditionalInfoMoreFldsTap: false,
        changedManually: false,
        isCmpContactProfile: false,
        billingQuery: {
            getLastPaidAmmount: function(value){
        
                                if(value.product_billng){
        
                                   var d1 = null;
                                   var d2 = null ;
                                    var amm1 = 0 ;
                                    var amm2 = 0 ;
                                   if(value.product_billng.product_datalink){
        
                                       d1 = value.product_billng.product_datalink.invoice_id;
        
                                       amm1 = value.product_billng.product_datalink.total_payble;
                                   }
                                   if(value.product_billng.product_rmpro){
        
                                       d2 = value.product_billng.product_rmpro.invoice_id;
        
                                       amm2 = value.product_billng.product_rmpro.total_payble;
                                   }
        
                                   if( d1 && d2){
                                       
                                       if(amm1 && amm2){
                                           var t1 = parseFloat(amm1) ;
                                           var t2 = parseFloat(amm2) ;
                                           
                                           return t1 + t2 ;
                                       }
                                       
                                       var d3 = new Date(d1);
                                       var d4 = new Date(d2);
                                       return (d3 > d4 ? amm1 : amm2 ) ;
                                   }else{
        
                                       return (amm1 ? amm1 : amm2 ? amm2 : "") ;
                                   }
        
                               }
        
                                return "";
        
                           },
            getDueDate: function(value){
                               if(value.product_billng){
        
                                   var d1 = null;
                                   var d2 = null ;
        
                                   if(value.product_billng.product_datalink){
        
                                       d1 = value.product_billng.product_datalink.due_date;
                                   }
                                   if(value.product_billng.product_rmpro){
        
                                       d2 = value.product_billng.product_rmpro.due_date;
                                   }
        
                                   if( d1 && d2){
                                       var d3 = new Date(d1);
                                       var d4 = new Date(d2);
                                       return (d3 < d4 ? d1 : d2) ;
                                   }else{
        
                                       return (d1 ? d1 : d2 ? d2 : "") ;
                                   }
        
                               }
        
                                return "";
        
                           },
            getDueAmmount: function(value){
        
                             var past_due = 0 ;
                               if(value.product_billng){
        
        
        
                                   if(value.product_billng.product_datalink){
        
                                       past_due = value.product_billng.product_datalink.past_due ? parseInt(value.product_billng.product_datalink.past_due,0) : 0;
                                   }
                                   if(value.product_billng.product_rmpro){
        
                                       past_due += value.product_billng.product_rmpro.past_due ? parseInt(value.product_billng.product_rmpro.past_due,0) :0;
                                   }
        
        
        
                               }
        
                                return past_due ;
        
                           },
            getLastPaidOn: function(value){
        
                                if(value.product_billng){
        
                                   var d1 = null;
                                   var d2 = null ;
        
                                   if(value.product_billng.product_datalink){
        
                                       d1 = value.product_billng.product_datalink.invoice_id;
                                   }
                                   if(value.product_billng.product_rmpro){
        
                                       d2 = value.product_billng.product_rmpro.invoice_id;
                                   }
        
                                   if( d1 && d2){
                                       var d3 = new Date(d1);
                                       var d4 = new Date(d2);
                                       return (d3 > d4 ? d1 : d2) ;
                                   }else{
        
                                       return (d1 ? d1 : d2 ? d2 : "") ;
                                   }
        
                               }
        
                                return "";
        
                           },
            getStatus: function(value){
        
                             var status = "" ;
                                var dd = null ;
                               if(value.product_billng){
        
                                   var d1 = null;
                                   var d2 = null ;
        
                                   if(value.product_billng.product_datalink){
        
                                       d1 = value.product_billng.product_datalink.due_date;
                                   }
                                   if(value.product_billng.product_rmpro){
        
                                       d2 = value.product_billng.product_rmpro.due_date;
                                   }
        
                                   if( d1 && d2){
                                       var d3 = new Date(d1);
                                       var d4 = new Date(d2);
                                       dd = (d3 < d4 ? d1 : d2) ;
                                   }else{
        
                                       dd = (d1 ? d1 : d2 ? d2 : "") ;
                                   }
        
                               }
        
                                if(dd){
                                    var today = new Date() ;
        
                                    dd = new Date(dd) ;
        
                                    return today < dd ? "" : "EXPIRED";
                                }
        
                                return "" ;
        
                           },
            getProductAlertText: function(value,product){
        
                             var status = "" ;
                                var dd = null ;
                               if(value.product_billng){
        
                                   var d1 = null;
        
                                   if(value.product_billng[product]){
        
                                       d1 = value.product_billng[product].due_date;
                                   }
                                  
        
                                       dd = d1 ;
                                   
        
                               }
        
                                if(dd){
                                    var today = new Date() ;
        
                                    dd = new Date(dd) ;
        
                                    return today < dd ? "" : "!";
                                }
        
                                return "" ;
        
                           }
        },
        accNoChk: 0,
        isEditMode: false,

        control: {
            "textfield[action=clearIconTap]": {
                clearicontap: 'onTextfieldClearicontapRetailerDetails'
            },
            "button[itemId=retailerLocationAddBtn]": {
                tap: 'onretailerLocationAddBtnTap'
            },
            "label[action=deleteLocation]": {
                initialize: 'ondeleteLocationLabelInitialize'
            },
            "selectfield[action=selectLocation]": {
                focus: 'onselectLocationSelectfieldPainted',
                change: 'onLocationChangeSelectfieldChange'
            },
            "selectfield[action=productStatusChange]": {
                change: 'onproductStatusChangeSelectfieldChange'
            },
            "button[itemId=RDStoreTabResetPwdBtn]": {
                tap: 'onRDStoreTabResetPwdBtnTap'
            }
        }
    },

    onTextfieldClearicontapRetailerDetails: function(textfield, e, eOpts) {
        textfield.removeCls('x-rm-rdformErrorPanel');
        textfield.addCls('x-rm-rdformpanel');
    },

    onretailerLocationAddBtnTap: function(button, e, eOpts) {
        this.createLocation() ;
    },

    ondeleteLocationLabelInitialize: function(component, eOpts) {
        component.element.on("tap",function(){

            component.getParent().destroy() ;
            RMdatalink.app.getController('RetailerDeatilsDataSet').updateNoOfLocations() ;
        }) ;
    },

    onselectLocationSelectfieldPainted: function(selectfield, e, eOpts) {

        selectfield.setOptions(this.getLocationData()) ;
    },

    onLocationChangeSelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {

        var selectFld = selectfield.getItemId() ;
        var location = this.getLocationData()[newValue] ;


        console.log(selectFld) ;
        console.log(location) ;
        switch(selectFld){


                case "cmpContactsLocSelectFld":


                    Ext.ComponentQuery.query('#CmpContactProfileAddress')[0].setValue(location.address) ;
                    Ext.ComponentQuery.query('#CmpContactProfileSuite')[0].setValue(location.suit) ;
                    Ext.ComponentQuery.query('#CmpContactProfileCity')[0].setValue(location.city) ;
                    Ext.ComponentQuery.query('#CmpContactProfileState')[0].setValue(location.state) ;
                    Ext.ComponentQuery.query('#CmpContactProfileZip')[0].setValue(location.zip) ;


                break;

                case "actMgrLocSelectFld":

                    Ext.ComponentQuery.query('#RDManagerAddress')[0].setValue(location.address) ;
                    Ext.ComponentQuery.query('#RDManagerSuite')[0].setValue(location.suit) ;
                    Ext.ComponentQuery.query('#ActMgrCity')[0].setValue(location.city) ;
                    Ext.ComponentQuery.query('#ActMgrState')[0].setValue(location.state) ;
                    Ext.ComponentQuery.query('#ActMgrZip')[0].setValue(location.zip) ;




                break;
        }







    },

    onproductStatusChangeSelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {

        switch(newValue){

            case "ACTIVE":
                selectfield.setInputCls("backgroundActiveInputCls");
                break;
            case "INACTIVE":
                selectfield.setInputCls("backgroundInActiveInputCls");
                break;
            case "PROSPECT":
                selectfield.setInputCls("backgroundProspectInputCls");
                break;
           case "HOT_PROSPECT":
                selectfield.setInputCls("backgroundHotProspectInputCls");
                break;
            case "PENDING":
                selectfield.setInputCls("backgroundPendingInputCls");
                break;
             case "SKIP":
                selectfield.setInputCls("backgroundInActiveInputCls");
                break;
            default:
                selectfield.setInputCls("backgroundNoStatusInputCls");
                break;
        }



        // if(this.config.changedManually){
        // Console.error("****************************************************************CHANGE") ;
        //     this.saveRTProductSetup();
        // }
    },

    onRDStoreTabResetPwdBtnTap: function(button, e, eOpts) {

        //username,emailAddress,successCallback,failuerCallback


        var selectedUserRecord = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;
            if( !( Object.keys(selectedUserRecord).length  )   ){
                // USER CLICKED ON ADD NEW RETAILER BTN
                return ;
            }


        var username = selectedUserRecord.record.data.store_email;
        var emailAddress =selectedUserRecord.record.data.store_email;
        RMdatalink.util.ServerAPI.resetUserPassword(username,emailAddress,successCallback,failuerCallback) ;


        function successCallback(){


        }

        function failuerCallback(){


        }
    },

    validationOfInputFields: function() {
        var isRetailerDetailsView = RMdatalink.app.getController('UINav').isRetailerDetailsView;

        this.removeErrorCls();

        var retailerDetailsMainTabPanel = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0];

        var phoneRegex = /^\(?\d{3}\)?-? *\d{3}-? *-?\d{4}$/;
        var zipRegex = /(^\d{5}$)|(^\d{5}-\d{4}$)/;
        var faxRegex = /^\(?\d{3}\)?-? *\d{3}-? *-?\d{4}$/;

        var RDUsers1FormPanel = Ext.ComponentQuery.query('#RDUsers1FormPanel')[0];
        //console.log("item id 1" , RDUsers1FormPanel.getItemId());

        var emailFieldRDUsers1 =  RDUsers1FormPanel.getComponent('RDUsersEmail');
        var emailTextRDUsers1 =  emailFieldRDUsers1.getValue();

        var phoneFieldRDUsers1 =  RDUsers1FormPanel.getComponent('RDUsersPhone');
        var phoneTextRDUsers1  = phoneFieldRDUsers1.getValue();


        var RDUsers1FormPanel2 = Ext.ComponentQuery.query('#RDUsers1FormPanel2')[0];
        //console.log("item id 2" , RDUsers1FormPanel2.getItemId());

        var emailFieldRDUsers2 =  RDUsers1FormPanel2.getComponent('RDUsersEmail');
        var emailTextRDUsers2 =  emailFieldRDUsers2.getValue();

        var phoneFieldRDUsers2 = RDUsers1FormPanel2.getComponent('RDUsersPhone');
        var phoneTextRDUsers2  = phoneFieldRDUsers2.getValue();

        var RDUsers1FormPanel3 = Ext.ComponentQuery.query('#RDUsers1FormPanel3')[0];
        //console.log("item id 3" , RDUsers1FormPanel3.getItemId());

        var emailFieldRDUsers3 =  RDUsers1FormPanel3.getComponent('RDUsersEmail');
        var emailTextRDUsers3 =  emailFieldRDUsers3.getValue();

        var phoneFieldRDUsers3 =  RDUsers1FormPanel3.getComponent('RDUsersPhone');
        var phoneTextRDUsers3  = phoneFieldRDUsers3.getValue();



        //   STORE FIELDS
        var emailField = Ext.ComponentQuery.query('#RDStoreEmail')[0];
        var emailText = emailField.getValue();

        var phoneField = Ext.ComponentQuery.query('#RDStorePhone')[0];
        var phoneText = phoneField.getValue();

        var websiteField = Ext.ComponentQuery.query('#RDStoreWebsite')[0];
        var websiteText = websiteField.getValue();


        var zipField = Ext.ComponentQuery.query('#RDStoreZip')[0];
        var zipText = zipField.getValue();

        var faxField = Ext.ComponentQuery.query('#RDStoreFax')[0];
        var faxText = faxField.getValue();


        if(websiteText.substr(0,3) === 'www')
        {
            websiteText   = websiteText.replace('www.' ,'https://');
        }

        //   MANAGER FIELDS
        var emailFieldRDManager = Ext.ComponentQuery.query('#RDManagerEmail')[0];
        var emailTextRDManager = emailFieldRDManager.getValue();

        var phoneFieldRDManager = Ext.ComponentQuery.query('#RDManagerPhone')[0];
        var phoneTextRDManager = phoneFieldRDManager.getValue();

        var RDManagerDirectPhone = Ext.ComponentQuery.query('#RDManagerDirectPhone')[0];
        var RDManagerDirectPhoneText = RDManagerDirectPhone.getValue();

        var ActMgrZip = Ext.ComponentQuery.query('#ActMgrZip')[0];
        var ActMgrZipText = ActMgrZip.getValue();

        //   MANAGER FIELDS RELATIONSHIP DETAILS

        var altEmailFieldRDManager = Ext.ComponentQuery.query('#RDMRDAltEmail')[0];
        var altEmailTextRDManager = altEmailFieldRDManager.getValue();

        var altPhoneFieldRDManager = Ext.ComponentQuery.query('#RDMRDAltPhone')[0];
        var altPhoneTextRDManager = altPhoneFieldRDManager.getValue();

        var altWebsiteFieldRDManager = Ext.ComponentQuery.query('#RDMRDWebsite')[0];
        var altWebsiteTextRDManager = altWebsiteFieldRDManager.getValue();


        if(altWebsiteTextRDManager.substr(0,3) === 'www')
        {
            altWebsiteTextRDManager   = altWebsiteTextRDManager.replace('www.' ,'https://');
        }


        var validationForStore = true;
        var validationForManager = true;
        var validationForManagerRelationshipDetails = true;
        var validationForUser = true;


        //EMAIL VALIDATION
        if( emailTextRDManager.length !== 0 && !Ext.data.Validations.email(emailFieldRDManager, emailTextRDManager))
        {
            //console.log(emailText);
            emailFieldRDManager.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForManager = false;
        }

        if( emailText.length !== 0 && !Ext.data.Validations.email(emailField, emailText))
        {
            //console.log(emailText);
            emailField.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForStore = false;
        }



        if( altEmailTextRDManager.length !== 0 && !Ext.data.Validations.email(altEmailFieldRDManager, altEmailTextRDManager))
        {
            //console.log(emailTextRDUsers3.length);
            altEmailFieldRDManager.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForManagerRelationshipDetails = false;
        }


        //PHONE NUM VALIDATION
        if(! isRetailerDetailsView)
        {

            if(  phoneText.length !== 0 && !phoneRegex.test(phoneText))
            {
                phoneField.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
                validationForStore = false;
            }
        }

        if( phoneTextRDManager.length !== 0 && !phoneRegex.test(phoneTextRDManager))
        {

            phoneFieldRDManager.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForManager = false;
        }

        if( RDManagerDirectPhoneText.length !== 0 && !phoneRegex.test(RDManagerDirectPhoneText))
        {
            RDManagerDirectPhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForManager = false;
        }

        if( altPhoneTextRDManager.length !== 0 && !phoneRegex.test(altPhoneTextRDManager))
        {
            //console.log("***********phoneText");
            altPhoneFieldRDManager.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForManagerRelationshipDetails = false;
        }



        //WEB SITE VALIDATION
        if( websiteText.length !== 0 && !RMdatalink.util.globalMethods.isValidWebsite(websiteText))
        {
            //console.log(websiteText);
            websiteField.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForStore = false;
        }

        if( altWebsiteTextRDManager.length !== 0 && !RMdatalink.util.globalMethods.isValidWebsite(altWebsiteTextRDManager))
        {
            //console.log(websiteText);
            altWebsiteFieldRDManager.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForManagerRelationshipDetails = false;
        }



        //ZIP CODE VALIDATION
        if(! isRetailerDetailsView)
        {
        if( zipText.length !== 0 && !zipRegex.test(zipText))
        {
            //console.log(zipText);
            zipField.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForStore = false;
        }
        }

        //ZIP CODE VALIDATION
        if( ActMgrZipText.length !== 0 && !zipRegex.test(ActMgrZipText))
        {
            //console.log(zipText);
            ActMgrZip.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForManager = false;
        }

        // FAX CODE VALIDATION

        if( faxText.length !== 0 && !faxRegex.test(faxText))
        {
            //console.log(zipText);
            faxField.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForStore = false;
        }





        //************

        if(!validationForStore)
        {
            retailerDetailsMainTabPanel.setActiveItem(retailerDetailsMainTabPanel.down("#RDStoresTab"));
           // retailerDetailsMainTabPanel.setActiveItem(0);
            return false;
        }


        if(!this.validationForRepsInputFields())
        {

            return false;
        }

        if(!this.validationForComContactInputFields())
        {

            return false;
        }


        if( (!validationForManager || !validationForManagerRelationshipDetails) )
        {
            retailerDetailsMainTabPanel.setActiveItem(retailerDetailsMainTabPanel.down("#RDManagerTab"));
            //FOR SIDE PANEL
            if(!validationForManagerRelationshipDetails)
            {
                var retailerDetailsManagerSideTabPanel = Ext.ComponentQuery.query('#RDManagerSideTabPanel')[0];
                retailerDetailsManagerSideTabPanel.setActiveItem(1);
            }
            return false;
        }


        return true;



    },

    loadRetailerMasterData: function(scope) {
        RMdatalink.util.DataManager.loadDataInStore(
            {
                storeName:'notificationsNew',
                proxy: {
                    type: 'ajax',
                    url: 'app/data/New_Notifications.json',
                    reader: {
                        type: 'json',
                        rootProperty:'New_Notifications'
                    }
                },
                successCallback:function() {
                    console.log("successfully loaded");
                },
                errorCallback: function() {
                    console.log("Exception occured. data not loaded");
                },
                scope:scope
            }
        );


        RMdatalink.util.DataManager.loadDataInStore(
            {
                storeName:'billingMasterStore',
                proxy: {
                    type: 'ajax',
                    url: 'app/data/BillingDetailsRecords.json',
                    reader: {
                        type: 'json',
                        rootProperty:'billingDetailRecords'
                    }
                },
                successCallback:function() {
                    console.log("successfully loaded");
                },
                errorCallback: function() {
                    console.log("Exception occured. data not loaded");
                },
                scope:scope
            }
        );

        RMdatalink.util.DataManager.loadDataInStore(
            {
                storeName:'productDetailsRecordsStore',
                proxy: {
                    type: 'ajax',
                    url: 'app/data/ProductDetailRecords.json',
                    reader: {
                        type: 'json',
                        rootProperty:'productDetailRecords'
                    }
                },
                successCallback:function() {
                    console.log("pro successfully loaded"); console.log(arguments);

                },
                errorCallback: function() {
                    console.log("Exception occured. data not loaded");
                },
                scope:scope
            }
        );
        RMdatalink.util.DataManager.loadDataInStore(
            {
                storeName:'vendorDetailsRecodsStore',
                proxy: {
                    type: 'ajax',
                    url: 'app/data/VendorDetailRecords.json',
                    reader: {
                        type: 'json',
                        rootProperty:'vendorDetailRecords'
                    }
                },
                successCallback:function() {
                    console.log("ven successfully loaded"); console.log(arguments);

                },
                errorCallback: function() {
                    console.log("Exception occured. data not loaded");
                },
                scope:scope
            }
        );
        RMdatalink.util.DataManager.loadDataInStore(
            {
                storeName:'retailersMaster',
                proxy: {
                    type: 'ajax',
                    url: 'app/data/MasterRetailerRecords.json',
                    reader: {
                        type: 'json',
                        rootProperty:'masterRetailerRecords'
                    }
                },
                successCallback:RMdatalink.util.globalMethods.fillDataFromMasterStore,
                errorCallback: function() {
                    console.log("Exception occured. data not loaded");
                },
                scope:scope
            }
        );

        RMdatalink.util.DataManager.loadDataInStore(
            {
                storeName:'inhouseMasterStore',
                proxy: {
                    type: 'ajax',
                    url: 'app/data/InhouseRecords.json',
                    reader: {
                        type: 'json',
                        rootProperty:'inhouseRecords'
                    }
                },
                successCallback:function() {
                    console.log(arguments);
                },
                errorCallback: function() {
                    console.log("Exception occured. data not loaded");
                },
                scope:scope
            }
        );

        RMdatalink.util.DataManager.loadDataInStore(
            {
                storeName:'discountsMasterStore',
                proxy: {
                    type: 'ajax',
                    url: 'app/data/DiscountsRecords.json',
                    reader: {
                        type: 'json',
                        rootProperty:'discounts'
                    }
                },
                successCallback:function() {
                    console.log(arguments);
                },
                errorCallback: function() {
                    console.log("Exception occured. data not loaded");
                },
                scope:scope
            }
        );



    },

    setResetRetailersDetailedView: function() {
        this.config.changedManually = false ;

        var isRetailerDetailsView = RMdatalink.app.getController('UINav').isRetailerDetailsView;

        this.removeErrorCls();
        var that = this ;

        if(isRetailerDetailsView){
                Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0].setActiveItem(0);
            var parentPanel = Ext.ComponentQuery.query('#rtlrVdrAssociationTotalFldSet')[0] ;


            parentPanel.down('#rtDtlVdrCollectionTotalLbl').setHidden(false);
            parentPanel.down('#rtDtlVdrDesignTotalLbl').setHidden(false);
            parentPanel.down('#rtDtlVdrSKUTotalLbl').setHidden(false);




            parentPanel.down('#rtDtlVdrCollectionTotalLbl').setHtml("");
            parentPanel.down('#rtDtlVdrDesignTotalLbl').setHtml("");
            parentPanel.down('#rtDtlVdrSKUTotalLbl').setHtml("");

            Ext.ComponentQuery.query('#RDStoreTabResetPwdBtn')[0].setHidden(false);

            Ext.ComponentQuery.query('#RDVendorResourcesPad')[0].setHidden(true);

            Ext.ComponentQuery.query('#RDStoreWebsiteFbFld')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreWebsiteTwFld')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreWebsiteLnFld')[0].setHidden(true);


            Ext.ComponentQuery.query('#RDAccountDetails')[0].setHidden(false);
            Ext.ComponentQuery.query('#vendorsCommonSearchViewForRetailer')[0].setHidden(false);

            Ext.ComponentQuery.query('#vendorsActiveRetailersSearchFldSet')[0].setHidden(true);
            Ext.ComponentQuery.query('#retailersProspectSearchFieldSet')[0].setHidden(true);

            Ext.ComponentQuery.query('#RDSideProductsItemID')[0].setHidden(false);
            Ext.ComponentQuery.query('#csvImportFileField')[0].setHidden(true);
            Ext.ComponentQuery.query('#retailersPagignationControlPanel')[0].setHidden(true);
            Ext.ComponentQuery.query('#retailersProspectsPagignationControlPanel')[0].setHidden(true);

            Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0].getTabBar().getAt(2).setHidden(false);

            Ext.ComponentQuery.query('#cmpContactsLocSelectFld')[0].setHidden(false);
            Ext.ComponentQuery.query('#actMgrLocSelectFld')[0].setHidden(false);
            Ext.ComponentQuery.query('#retailerLocationsFldSet')[0].setHidden(false);




            Ext.ComponentQuery.query('#RDStoreType')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreLocations')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreEmployees')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreYrsInBusiness')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStorePercProg')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStorePercKind')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreAdvertising')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreMoBudget')[0].setHidden(true);

            Ext.ComponentQuery.query('#RDStoreDesign')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreSKU')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreNoOfRugsImages')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreNoOfAdditionalImages')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreCollections')[0].setHidden(true);


            Ext.ComponentQuery.query('#RDStoreType')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreLocations')[0].setHidden(false);

            Ext.ComponentQuery.query('#RDStoreEmployees')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStoreYrsInBusiness')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStorePercProg')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStorePercKind')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStoreAdvertising')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStoreMoBudget')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStoreInventoryTool')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStoreAccountingTool')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStoreAltBusiness')[0].setHidden(false);

            Ext.ComponentQuery.query('#RDStoreSize')[0].setHidden(true);

             Ext.ComponentQuery.query('#RDStoreChallenges')[0].setHidden(true);
             Ext.ComponentQuery.query('#RDStoreAddress')[0].setHidden(true);
             Ext.ComponentQuery.query('#RDStoreCity')[0].setHidden(true);
             Ext.ComponentQuery.query('#RDStorePhone')[0].setHidden(true);
             Ext.ComponentQuery.query('#RDStoreSuite')[0].setHidden(true);
             Ext.ComponentQuery.query('#RDStoreState')[0].setHidden(true);
             Ext.ComponentQuery.query('#RDStoreZip')[0].setHidden(true);
             Ext.ComponentQuery.query('#RDStorePhoneExt')[0].setHidden(true);
             Ext.ComponentQuery.query('#RDStoreFax')[0].setHidden(true);



            Ext.ComponentQuery.query('#retailerValuesLabels')[0].setHidden(false);
            Ext.ComponentQuery.query('#storeValuesLabels')[0].setHidden(true);



        }else{

            Ext.ComponentQuery.query('#RDStoreTabResetPwdBtn')[0].setHidden(true);

            var parentPanel = Ext.ComponentQuery.query('#rtlrVdrAssociationTotalFldSet')[0] ;


            parentPanel.down('#rtDtlVdrCollectionTotalLbl').setHidden(true);
            parentPanel.down('#rtDtlVdrDesignTotalLbl').setHidden(true);
            parentPanel.down('#rtDtlVdrSKUTotalLbl').setHidden(true);

            Ext.ComponentQuery.query('#RDVendorResourcesPad')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStoreWebsiteFbFld')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStoreWebsiteTwFld')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDStoreWebsiteLnFld')[0].setHidden(false);

            Ext.ComponentQuery.query('#RDAccountDetails')[0].setHidden(false);

            RMdatalink.app.getController('SearchController').doSearchForProspectRetailersAtVendor("");


            Ext.ComponentQuery.query('#vendorsCommonSearchViewForRetailer')[0].setHidden(true);

            Ext.ComponentQuery.query('#vendorsActiveRetailersSearchFldSet')[0].setHidden(false);

            Ext.ComponentQuery.query('#retailersProspectSearchFieldSet')[0].setHidden(false);

            Ext.ComponentQuery.query('#cmpContactsLocSelectFld')[0].setHidden(true);
            Ext.ComponentQuery.query('#actMgrLocSelectFld')[0].setHidden(true);
            Ext.ComponentQuery.query('#retailerLocationsFldSet')[0].setHidden(true);




            Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0].getTabBar().getAt(2).setHidden(true);

            Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0].setActiveItem(0) ;

            Ext.ComponentQuery.query('#retailersProspectsPagignationControlPanel')[0].setHidden(false);
            Ext.ComponentQuery.query('#retailersPagignationControlPanel')[0].setHidden(false);
            Ext.ComponentQuery.query('#csvImportFileField')[0].setHidden(false);

            Ext.ComponentQuery.query('#RDSideProductsItemID')[0].setHidden(true);

            Ext.ComponentQuery.query('#RDStoreDesign')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreSKU')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreNoOfRugsImages')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreNoOfAdditionalImages')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreCollections')[0].setHidden(true);

            Ext.ComponentQuery.query('#RDStoreType')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreLocations')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreEmployees')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreYrsInBusiness')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStorePercProg')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStorePercKind')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreAdvertising')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreMoBudget')[0].setHidden(true);

            Ext.ComponentQuery.query('#RDStoreType')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreLocations')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreEmployees')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreYrsInBusiness')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStorePercProg')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStorePercKind')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreAdvertising')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreMoBudget')[0].setHidden(true);
            Ext.ComponentQuery.query('#storeValuesLabels')[0].setHidden(false);
            Ext.ComponentQuery.query('#retailerValuesLabels')[0].setHidden(true);




             Ext.ComponentQuery.query('#RDStoreAddress')[0].setHidden(false);
             Ext.ComponentQuery.query('#RDStoreCity')[0].setHidden(false);
             Ext.ComponentQuery.query('#RDStorePhone')[0].setHidden(false);
             Ext.ComponentQuery.query('#RDStoreSuite')[0].setHidden(false);
             Ext.ComponentQuery.query('#RDStoreState')[0].setHidden(false);
             Ext.ComponentQuery.query('#RDStoreZip')[0].setHidden(false);
             Ext.ComponentQuery.query('#RDStorePhoneExt')[0].setHidden(false);
             Ext.ComponentQuery.query('#RDStoreFax')[0].setHidden(false);


        }


        // ******   REMOVED  ALREADY ADDED CHILD ITEMS  IN BLUE BOOK TAB  **********
        // var blueBookParentPanel = Ext.ComponentQuery.query('#blueBookParentPanel')[0];
        // blueBookParentPanel.removeAll(true,true);

        var locationContainerPanel = Ext.ComponentQuery.query('#locationAddNewContainerItemID')[0];
        locationContainerPanel.removeAll(false,true);


        //****  SET  PRESSING CLS AND  SET  TITLE ******
        var retailerDetailsHeader  =Ext.ComponentQuery.query('#retailerDetailsHeader')[0];
        var titleLabel = retailerDetailsHeader.down('#detailsHeaderTitle');





        if(isRetailerDetailsView)
        {
            Ext.ComponentQuery.query('#overviewRetailersBtn')[0].addCls('x-button-pressing');
            titleLabel.setHtml('<div style="font-size: large;margin-left: -10px;">BACK / <span style="color:#2EC1DA;"> RETAILERS </span></div>');
        }
        else
        {
            Ext.ComponentQuery.query('#overviewVendorsBtn')[0].addCls('x-button-pressing');
            titleLabel.setHtml('<div style="font-size: large;margin-left: -10px;">BACK / <span style="color:#2EC1DA;"> VENDORS </span></div>');
        }



        // ****  SET SIDE CONTAINER TPL FOR  STORE  OR VENDOR  ******
        this.setTplOnlineInSideContainerList(isRetailerDetailsView);

        resetVlauesForRetailersDetailCard();
        setVlauesForRetailersDetailCard() ;

        console.error("ALL  CODE HAS BEEN COMPLETED.");

        function resetVlauesForRetailersDetailCard(){

            console.error(1);
            resetLocations() ;
                console.error(2);
            resetExtraFlds();
                console.error(3);
            resetManagerData();
                console.error(4);
            unfillStoreInformationForRDetailCard();
                console.error(5);
            unfillMAnagerRelationData();
                console.error(6);
            unfillCRMSData() ;
                console.error(7);
            unfillNotesStore() ;
                console.error(8);
            unfillVendorsStore() ;    console.error(9);
            unfillRCMDSidebarPhotos();    console.error(10);
            unfillRCMDSidebarAttachments();    console.error(11);
            unselectStoreStaus();    console.error(12);
            unfillStoreProductStatus();    console.error(13);
            unfillTipsData();    console.error(14);
            unfillREPsBlueBookUsers();    console.error(15);
            unfillCompanyContactInfo();    console.error(16);
        }


        function resetLocations(){

            that.destroyLocations() ;
            that.createLocation() ;
            Ext.ComponentQuery.query('#deleteLocationLbl')[0].setHidden(true) ;

        }

        function setLocations(selectedUserRecord){


              that.setRetailersFirstLocation(selectedUserRecord.record.data) ;
              that.createAndSetLocations(selectedUserRecord.record.data.locations) ;


        }


        function setVlauesForRetailersDetailCard(){
            var selectedUserRecord = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;


        console.log(selectedUserRecord.record);
               RMdatalink.app.getController('TechSupportLog').config.currentSelectedRecord =   selectedUserRecord.record ;



            clearAllScreenInfoOnRetailCard();
            RMdatalink.util.globalConfig.setDataInRetailerScreenForSaveOrCancel( {}  );

            //  ********* CHANGE TAB NAME STORE/VENDOR  *********
            var rdTabPanel =  Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0];
            var RDStoreSideTabPanel =  Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0];

            var RDStoreLabel = rdTabPanel.down('#RDStoreLabel');
            var RDStoreTabReseller = rdTabPanel.down('#RDStoreTabReseller');
            var RDStoreTabPerformance = rdTabPanel.down('#RDStoreTabPerformance');
            var RDStoreLogoLabel = rdTabPanel.down('#RDStoreLogoLabel');
            var rdStoreTab = rdTabPanel.down('#RDStoresTab');
            var RDStoreName = rdTabPanel.down('#RDStoreName');
            var RDStoreOwner = rdTabPanel.down('#RDStoreOwner');
            var RDStoreType = rdTabPanel.down('#RDStoreType');
            var RDStoreSize = rdTabPanel.down('#RDStoreSize');
            var RDStoreAltBusiness = rdTabPanel.down('#RDStoreAltBusiness');
            var RDStoreInventoryAccountingTool = rdTabPanel.down('#RDStoreInventoryAccountingTool');

            var RDStoreProductsList = Ext.ComponentQuery.query('#RDStoreProductsList')[0];
            var RDStoreStatusList = Ext.ComponentQuery.query('#RDStoreStatusList')[0];

            var RDMRDYrsAtStore =  Ext.ComponentQuery.query('#RDMRDYrsAtStore')[0];
            var RDMRDWife =  Ext.ComponentQuery.query('#RDMRDWife')[0];


            var RDUsersTab =  Ext.ComponentQuery.query('#RDUsersTab')[0];
            var RDBlueBookTab =  Ext.ComponentQuery.query('#RDBlueBookTab')[0];


            if(isRetailerDetailsView)
            {

                rdTabPanel.getTabBar().getAt(0).setTitle('RETAILER');
        //         RDStoreSideTabPanel.getTabBar().getAt(0).setTitle('IN-STORE VENDORS');
        //         RDStoreSideTabPanel.getTabBar().getAt(1).setTitle('ONLINE VENDORS');

                RDStoreLabel.setHtml('NEW RETAILERS');
                RDStoreLogoLabel.setHtml('Store Logo');
                RDStoreName.setLabel("Company Name");

                RDStoreOwner.setHidden(false);

                RDStoreOwner.setLabel("Store Owner");
                RDStoreType.setLabel("Store Type");

                //   RDStoreTabPerformance.setHidden(false);
                RDStoreTabReseller.setHidden(false);

                RDStoreProductsList.setHidden(false);

               // RDStoreStatusList.setHidden(false);

                RDMRDYrsAtStore.setLabel("Years At Store");

                rdTabPanel.getTabBar().getAt(3).setHidden(true);
                rdTabPanel.getTabBar().getAt(4).setHidden(true);
              //  RDBlueBookTab.setActiveItem(0);
            }
            else
            {
                rdTabPanel.getTabBar().getAt(0).setTitle('VENDOR');
        //         RDStoreSideTabPanel.getTabBar().getAt(0).setTitle('IN-STORE RETAILERS');
        //         RDStoreSideTabPanel.getTabBar().getAt(1).setTitle('ONLINE RETAILERS');

                RDStoreLabel.setHtml('NEW VENDOR');
                RDStoreLogoLabel.setHtml('Vendor Logo');
                RDStoreName.setLabel("Vendor Name");
                RDStoreOwner.setHidden(true);
                RDStoreOwner.setLabel("Owner Name");
                RDStoreType.setLabel("Vendor Type");
                RDStoreSize.setHidden(true);
            //    RDStoreAltBusiness.setHidden(true);
             //   RDStoreInventoryAccountingTool.setHidden(true);
                RDStoreTabReseller.setHidden(true);

                RDStoreProductsList.setHidden(true);
                RDStoreStatusList.setHidden(true);

                RDMRDYrsAtStore.setLabel("Years At Co.");

                rdTabPanel.getTabBar().getAt(4).setHidden(true);
                rdTabPanel.getTabBar().getAt(3).setHidden(false);
                RDUsersTab.setActiveItem(0);

            }

            // *********   SET  LABEL  AND DATA *************
            var RDVisitProfileLabel =  Ext.ComponentQuery.query('#RDVisitProfileLabel')[0];
            var RDVisitProfileLabel1 =  Ext.ComponentQuery.query('#RDVisitProfileLabel1')[0];
            var RDVisitProfileLabel2 =  Ext.ComponentQuery.query('#RDVisitProfileLabel2')[0];


            if( !( Object.keys(selectedUserRecord).length  )   ){
                // USER CLICKED ON ADD NEW RETAILER BTN

                Ext.ComponentQuery.query('#RDCRMTab')[0].setDisabled(true);

                Ext.ComponentQuery.query('#rm_selectFileForStore')[0].setDisabled(false);
                Ext.ComponentQuery.query('#RDManagerAddPhoto')[0].setDisabled(false);
               // Ext.ComponentQuery.query('#RDStoreLabel')[0].setHidden(false);
                Ext.ComponentQuery.query('#RDUsersStoreLogoImage')[0].setSrc('resources//images//logos//default_User.jpg') ;
                Ext.ComponentQuery.query('#storeValuesLabels')[0].setHidden(true);
                Ext.ComponentQuery.query('#RDStoreTabEditBtnItemID')[0].setHidden(true);

                RDVisitProfileLabel.setHidden(true);
                RDVisitProfileLabel1.setHidden(true);
                RDVisitProfileLabel2.setHidden(true);

                rdTabPanel.setActiveItem(0);

                if(isRetailerDetailsView)
                {
                    that.setAccNoForNewRt() ;
                }


                return;
            }
            else{


                Ext.ComponentQuery.query('#RDCRMTab')[0].setDisabled(false);

                Ext.ComponentQuery.query('#RDStoreTabEditBtnItemID')[0].setHidden(false);
                Ext.ComponentQuery.query('#RDManagerAddPhoto')[0].setDisabled(true);
                Ext.ComponentQuery.query('#rm_selectFileForStore')[0].setDisabled(true);
                console.log(" selectedUserRecord  " , selectedUserRecord.record.data);
                RDVisitProfileLabel.setHidden(false);
                RDVisitProfileLabel1.setHidden(false);
                RDVisitProfileLabel2.setHidden(false);
                RMdatalink.util.globalConfig.setDataInRetailerScreenForSaveOrCancel(selectedUserRecord);
            }

            console.error(21);
            setManagerData(selectedUserRecord);    console.error(22);
            fillStoreInformationForRDetailCard( selectedUserRecord.record );    console.error(23);
            fillMAnagerRelationData( selectedUserRecord );    console.error(25);
            fillCRMSData(selectedUserRecord) ;    console.error(26);
            fillValueinEcoomerceTab(selectedUserRecord);
            fillNotesStore(selectedUserRecord) ;    console.error(27);
            fillVendorsStore(selectedUserRecord) ;    console.error(28);
            fillRCMDSidebarPhotos(selectedUserRecord);    console.error(29);
            fillRCMDSidebarAttachments(selectedUserRecord);    console.error(30);
            fillREPsBlueBookUsers(selectedUserRecord) ;    console.error(31);

            //  ****  CALL ONLY  FOR RETAILER DETAILS  *****
            if(isRetailerDetailsView)
            {
                setLocations(selectedUserRecord) ;    console.error(32);
                selectStoreStaus(selectedUserRecord);    console.error(33);
                fillStoreProductStatus(selectedUserRecord);    console.error(34);
                //  FOR RETAILER  BLUEBOOK LIST    console.error(21);
                //fillBlueBookUsers(selectedUserRecord) ;    console.error(21);
            }

            fillCompanyContactInfo(selectedUserRecord);    console.error(35);
            fillTipsData(selectedUserRecord);    console.error(36);
            fillTechSupports(selectedUserRecord) ;    console.error(37);

            setOtherExtraFlds(selectedUserRecord) ;    console.error(38);
        }


        function setOtherExtraFlds(selectedUserRecord){

                if(selectedUserRecord.record.data.store_products)
                {

                   Ext.ComponentQuery.query('#rtDatalinkStatusSelFld')[0].setValue( selectedUserRecord.record.data.store_products.datalink_status) ;
                   Ext.ComponentQuery.query('#rtEcatalogStatusSelFld')[0].setValue( selectedUserRecord.record.data.store_products.ecatalog_status);
                   Ext.ComponentQuery.query('#rtECommerceStatusSelFld')[0].setValue(selectedUserRecord.record.data.store_products.ecommerce_status);
                   Ext.ComponentQuery.query('#rtRM_proStatusSelFld')[0].setValue( selectedUserRecord.record.data.store_products.rmpro_status);
                   Ext.ComponentQuery.query('#rtirugzStatusSelFld')[0].setValue(selectedUserRecord.record.data.store_products.irugs_status );
                   Ext.ComponentQuery.query('#rtVipStatusSelFld')[0].setValue(selectedUserRecord.record.data.store_products.vip_status );
                }





                that.config.isAdditionalInfoMoreFldsTap =true ;
                RMdatalink.app.getController('inhouse.DetailScreenController').removeNewlyAddedRelFlds();


                if(selectedUserRecord.record.data.additional_fields){
                     RMdatalink.app.getController('inhouse.DetailScreenController').
                     addNewFldsForExistingData(selectedUserRecord.record.data.additional_fields);
                }


                that.config.isAdditionalInfoMoreFldsTap = false ;

        }

        function resetExtraFlds(){

                if(isRetailerDetailsView)
                {
                    var resetValue = null ; //"INACTIVE" ;
        //rtVipStatusSelFld
                    Ext.ComponentQuery.query('#rtDatalinkStatusSelFld')[0].setValue(resetValue) ;
                   Ext.ComponentQuery.query('#rtEcatalogStatusSelFld')[0].setValue( resetValue);
                   Ext.ComponentQuery.query('#rtECommerceStatusSelFld')[0].setValue(resetValue);
                   Ext.ComponentQuery.query('#rtRM_proStatusSelFld')[0].setValue(resetValue);
                   Ext.ComponentQuery.query('#rtirugzStatusSelFld')[0].setValue(resetValue);
                   Ext.ComponentQuery.query('#rtVipStatusSelFld')[0].setValue(resetValue);

                      Ext.ComponentQuery.query('#inStoreVendorsRetailersCLbl')[0].setHtml("Total Vendors : 0") ;
                }else{


                  Ext.ComponentQuery.query('#RDVendorResourceTxtArea')[0].setValue("");

            Ext.ComponentQuery.query('#RDStoreWebsiteFbFld')[0].setValue("");
            Ext.ComponentQuery.query('#RDStoreWebsiteTwFld')[0].setValue("");
            Ext.ComponentQuery.query('#RDStoreWebsiteLnFld')[0].setValue("");


                    Ext.ComponentQuery.query('#RDAccountDetails')[0].setValue("");
                      Ext.ComponentQuery.query('#inStoreVendorsRetailersCLbl')[0].setHtml("Total Retailers : 0") ;
                }

            var prospectList  = Ext.ComponentQuery.query('#RDInStoreVendorsTab')[0].down("#mainList");
            console.error("PROSEPCT LUIST");

            var prospectStore = prospectList.getStore() ;
            console.error("PROSEPCT LUIST REM)VE ALL CALLED");
            prospectStore.removeAll();
            prospectStore.sync();



        }


        function fillTechSupports(selectedUserRecord){

             if(! isRetailerDetailsView)
             {
                   var userData = selectedUserRecord.record.data ;
                 RMdatalink.app.getController('TechSupportLog').loadVendorRetailerSpecificStore (userData.vendor_name,"NotDefined" );



             }else{

                     var userData = selectedUserRecord.record.data ;
                 RMdatalink.app.getController('TechSupportLog').loadVendorRetailerSpecificStore (userData.store_name,"NotDefined" );

             }
        }


        function setManagerData(selectedUserRecord){

            var userData = selectedUserRecord.record.data ;
            var storeOrVendorName;
            if(isRetailerDetailsView)
            {
                  Ext.ComponentQuery.query('#RDAccountDetails')[0].setValue(userData.account_no);

                storeOrVendorName = userData.store_name;
                console.error(92);
                that.loadActiveVendorsForRetailers() ;
            }
            else
            {
                Ext.ComponentQuery.query('#RDVendorResourceTxtArea')[0].setValue(userData.vendor_resources);

                Ext.ComponentQuery.query('#RDStoreWebsiteFbFld')[0].setValue(userData.vendor_facebook);
                Ext.ComponentQuery.query('#RDStoreWebsiteTwFld')[0].setValue(userData.vendor_twitter);
                Ext.ComponentQuery.query('#RDStoreWebsiteLnFld')[0].setValue(userData.vendor_linkedin);

                    Ext.ComponentQuery.query('#RDAccountDetails')[0].setValue(userData.account_details);

                   var importFrmCsvController = RMdatalink.app.getController('ImportCSV') ;

                   if( userData.retailers )
                   {

                       importFrmCsvController.config.retailerForVendor = [];

                       importFrmCsvController.config.retailerForVendor = userData.retailers ;
                   }else{

                       importFrmCsvController.config.retailerForVendor = [];
                   }
        console.error(93);
                that.loadActiveRetailersForVendors() ;

                storeOrVendorName = userData.vendor_name;
            }
            var mangerForm = Ext.ComponentQuery.query('#RDManagerFormPanel')[0];
            mangerForm.setDisabled(true) ;
            Ext.ComponentQuery.query('#RDManagerRelationDetailsForm')[0].setDisabled(true);
            Ext.ComponentQuery.query('#ActRDManagerRelationDetailsForm')[0].setDisabled(true);

            var profilePicView = Ext.ComponentQuery.query('#RDManagerAddPhotoImage')[0];
            profilePicView.setSrc(userData.manager_photo_url).setHidden(false) ;

            Ext.ComponentQuery.query('#ActRDMPositionId')[0].setValue(userData.manager_position);
            Ext.ComponentQuery.query('#RDManagerStoreName')[0].setValue(storeOrVendorName);
            Ext.ComponentQuery.query('#RDManagerFirstName')[0].setValue(userData.manager_firstname);
            Ext.ComponentQuery.query('#RDManagerLastName')[0].setValue(userData.manager_lastname);
            Ext.ComponentQuery.query('#RDManagerEmail')[0].setValue(userData.manager_email);
            Ext.ComponentQuery.query('#RDManagerPhone')[0].setValue(userData.manager_phone);
            Ext.ComponentQuery.query('#RDManagerPhoneExt')[0].setValue(userData.manager_phone_ext);
            Ext.ComponentQuery.query('#RDManagerLinkedIn')[0].setValue(userData.manager_linkedin);
            Ext.ComponentQuery.query('#RDManagerFacebook')[0].setValue(userData.manager_facebook);
            Ext.ComponentQuery.query('#RDManagerTwitter')[0].setValue(userData.manager_twitter);
            Ext.ComponentQuery.query('#RDManagerAddress')[0].setValue(userData.manager_address);
            Ext.ComponentQuery.query('#RDManagerSuite')[0].setValue(userData.manager_address_suite);
            Ext.ComponentQuery.query('#ActMgrCity')[0].setValue(userData.manager_city);
            Ext.ComponentQuery.query('#ActMgrState')[0].setValue(userData.manager_state);
            Ext.ComponentQuery.query('#ActMgrZip')[0].setValue(userData.manager_zip);
            Ext.ComponentQuery.query('#RDManagerDirectPhone')[0].setValue(userData.manager_direct_number);
            Ext.ComponentQuery.query('#RDManagerDirectPhoneExt')[0].setValue(userData.manager_direct_number_ext);


            console.error("GLOBAL FILL ONE");
            console.error(96);
            RMdatalink.util.globalMethods.fillListData('#RDManagerActivityList',userData.manager_recent_activity);

        }

        function fillListData(itemId,data){
            var list = Ext.ComponentQuery.query('#'+itemId)[0] ;
            var listStore = list.getStore();
            if(listStore){
                listStore.removeAll();
                listStore.sync();
            }

            list.setData(data);
            list.refresh();
        }


        function fillMAnagerRelationData(selectedUserRecord){
            var userData = selectedUserRecord.record.data ;
            var year , wife ;
            if(isRetailerDetailsView)
            {
                year = userData.manager_rd_years_at_store;
                wife = userData.manager_rd_wife;
            }
            else
            {
                year = userData.manager_rd_years_at_co;
                wife = userData.manager_rd_sig_other;
            }


            if( Ext.ComponentQuery.query('#ActRDMRDYrsAtStore ')){
                Ext.ComponentQuery.query('#ActRDMRDYrsAtStore ')[0].setValue(year);
            }
            Ext.ComponentQuery.query('#ActRDMRDWife')[0].setValue(wife);

            Ext.ComponentQuery.query('#ActRDMRDRelatives ')[0].setValue(userData.manager_rd_relatives);

            Ext.ComponentQuery.query('#ActRDMRDHobbies')[0].setValue(userData.manager_rd_hobbies);

            Ext.ComponentQuery.query('#ActRDMRDCarOfChoice')[0].setValue(userData.manager_rd_car_of_choice);

            Ext.ComponentQuery.query('#ActRDMRDAltPhone ')[0].setValue(userData.manager_rd_alt_phone);

            Ext.ComponentQuery.query('#ActRDMRDAltEmail')[0].setValue(userData.manager_rd_alt_email);
            Ext.ComponentQuery.query('#ActRDMRDWebsite')[0].setValue(userData.manager_rd_website);

            if(userData.manager_rd_childs){

                if(Ext.ComponentQuery.query('#ActRDMRDChild1Name')){Ext.ComponentQuery.query('#ActRDMRDChild1Name')[0].setValue(userData.manager_rd_childs[0] ? userData.manager_rd_childs[0].child_name : "" ) ;}
                if(Ext.ComponentQuery.query('#ActRDMRDChild2Name')){Ext.ComponentQuery.query('#ActRDMRDChild2Name')[0].setValue(userData.manager_rd_childs[1] ? userData.manager_rd_childs[1].child_name : "" );}
                //  Ext.ComponentQuery.query('#ActRDMRDChild3Name')[0].setValue(userData.manager_rd_childs[2].child_name);
                if(Ext.ComponentQuery.query('#ActRDMRDChild1Age')){Ext.ComponentQuery.query('#ActRDMRDChild1Age')[0].setValue(userData.manager_rd_childs[0] ? userData.manager_rd_childs[0].child_age : "" );}
                if(Ext.ComponentQuery.query('#ActRDMRDChild2Age')){Ext.ComponentQuery.query('#ActRDMRDChild2Age')[0].setValue(userData.manager_rd_childs[1] ? userData.manager_rd_childs[1].child_age : "" );}
                // Ext.ComponentQuery.query('#ActRDMRDChild3Age')[0].setValue(userData.manager_rd_childs[2].child_age);
            }

            if( userData.manager_rd_partner){

                if(Ext.ComponentQuery.query('#ActRDMRDPartner1')){Ext.ComponentQuery.query('#ActRDMRDPartner1')[0].setValue( userData.manager_rd_partner[0] ? userData.manager_rd_partner[0].partner_name : "");}
                if(Ext.ComponentQuery.query('#ActRDMRDPartner2')){Ext.ComponentQuery.query('#ActRDMRDPartner2')[0].setValue( userData.manager_rd_partner[1] ? userData.manager_rd_partner[1].partner_name : "");}
            }


              Ext.ComponentQuery.query('#ActRDMRDDOBMonth')[0].setValue(userData.manager_rd_dob);
             Ext.ComponentQuery.query('#ActRDMRDAniversaryMonth')[0].setValue(userData.manager_rd_aniversary);

        }
        function setRtlBillingDtl(record){

            var billingHtml = "<div>" ;
            billingHtml += '<span>Billing Amount $: '+ formatNum( that.config.billingQuery.getLastPaidAmmount(record.data)) +'</span>' ;

            billingHtml += '<div>Expiration : '+ that.config.billingQuery.getDueDate(record.data) ;

            billingHtml += '<span style = "color: red; ">   '+ that.config.billingQuery.getStatus(record.data) +'</span></div>' ;
            billingHtml += "</div>" ;

            Ext.ComponentQuery.query('#billingDtlLbl')[0].setHtml(billingHtml);




        }

        function showProductMarker(value){

        var str = Ext.ComponentQuery.query('#RDStoreProductsList')[0].getStore() ;



                             var status = "" ;
                                var dd = null ;
                                var today = new Date() ;
                               if(value.product_billng){

                                   var d1 = null;
                                   var d2 = null ;

                                   if(value.product_billng.product_datalink){

                                       d1 = value.product_billng.product_datalink.due_date;
                                   }
                                   if(value.product_billng.product_rmpro){

                                       d2 = value.product_billng.product_rmpro.due_date;
                                   }

                                   if( d1 && d2){
                                       var d3 = new Date(d1);
                                       var d4 = new Date(d2);


                                       if(d3 < today){

                                           str.getAt(0).set("product_expiry","!");
                                       }

                                       if(d4 < today ){

                                            str.getAt(3).set("product_expiry","!");
                                       }

                                       //dd = (d3 < d4 ? d1 : d2) ;


                                   }else{
                                        var temp ;
                                       if(d1){
                                           temp = new Date(d1) ;
                                           if(temp < today ){

                                            str.getAt(0).set("product_expiry","!");
                                           }
                                       }

                                       if(d2){

                                             temp = new Date(d2) ;

                                           temp = new Date(d1) ;
                                           if(temp < today ){

                                            str.getAt(3).set("product_expiry","!");
                                           }

                                       }

                               }
                       }


        }


        function fillStoreInformationForRDetailCard (record){
            var logo , name , state , ownerFName , ownerLName , performance , cityName;
            var keyName ,keyAddrss ,keyAddrssSuite , keyCity, keyState , keyZip,keyEmail, keyPhone,keyPhoneExt,keyFax, keyWebsite, keyType,
                keyLocation,keyYrBuisness , keyEmployee , keyProgram , keyOneKind , keyChallenges , keyAdv , keyMonBug;


            if(isRetailerDetailsView)
            {
                logo =  record.data.store_logo;
                name = record.data.store_name.toUpperCase() ;
                state = record.data.store_state;
                ownerFName = record.data.store_owner_firstname;
                ownerLName = record.data.store_owner_lastname ;
                performance = record.data.store_performance;
                cityName =  record.data.store_city;

                keyName = 'store_name';
                keyAddrss = "store_address_line1" ;
                keyAddrssSuite = "store_address_suite";
                keyCity = "store_city";
                keyState = "store_state";
                keyZip = "store_zip" ;
                keyEmail = "store_email";
                keyPhone = "store_phone" ;
                keyPhoneExt = "store_phone_ext" ;
                keyFax = "store_fax" ;
                keyWebsite = "store_website" ;
                keyType = "store_type" ;
                keyLocation = "store_location" ;
                keyYrBuisness = "store_yr_business";
                keyEmployee =  "store_employees";
                keyProgram = "store_percent_program";
                keyOneKind = "store_percent_oneof_kind";
                keyChallenges = "store_challenges";
                keyAdv  = "store_advertising";
                keyMonBug = "store_monthly_budget";
            }
            else
            {
                logo =  record.data.vendor_logo;
                name = record.data.vendor_name.toUpperCase() ;
                state = record.data.vendor_state;
                ownerFName = record.data.vendor_owner_firstname;
                ownerLName = record.data.vendor_owner_lastname ;
                performance = record.data.vendor_performance;
                cityName =  record.data.vendor_city;

                keyName = 'vendor_name';
                keyAddrss = "vendor_address_line1" ;
                keyAddrssSuite = "vendor_address_suite";
                keyCity = "vendor_city";
                keyState = "vendor_state";
                keyZip = "vendor_zip" ;
                keyEmail = "vendor_email";
                keyPhone = "vendor_phone" ;
                keyPhoneExt = "vendor_phone_ext" ;
                keyFax = "vendor_fax" ;
                keyWebsite = "vendor_website" ;
                keyType = "vendor_type" ;
                keyLocation = "vendor_location" ;
                keyYrBuisness = "vendor_yr_business";
                keyEmployee =  "vendor_employees";
                keyProgram = "vendor_percent_program";
                keyOneKind = "vendor_percent_oneof_kind";
                keyChallenges = "vendor_challenges";
                keyAdv  = "vendor_advertising";
                keyMonBug = "vendor_monthly_budget";
            }

            Ext.ComponentQuery.query('#RDUsersStoreLogoImage')[0].setSrc(logo).setHidden(false);
            Ext.ComponentQuery.query('#logoHearderPanel')[0].setHidden(false);
            Ext.ComponentQuery.query('#storeNameOrderLabelItemID')[0].setHtml(
                '<div class="x-rm-rdstoreother-details"><div>'+name+'</div>'+
                '<a href="#card2"">ACCOUNT NO #'+record.data.account_no+'</a></div>'
            );


            var uSince = RMdatalink.util.globalMethods.getDateTimeFromMongo_id(record.data._id) ;
            uSince = RMdatalink.util.globalMethods.getAMDate(uSince);
            Ext.ComponentQuery.query('#cityNameLabelItemID')[0].setHtml(
                cityName+','+state+
                '&nbsp;&nbsp;&nbsp;&nbsp;User since '+ uSince  //record.data.user_since
            );
            Ext.ComponentQuery.query('#lastLoginLabelItemID')[0].setHtml('Last login '+record.data.last_login);
            Ext.ComponentQuery.query('#lastExportLabelItemID')[0].setHtml('Last export '+record.data.last_export);
            Ext.ComponentQuery.query('#RDStoreTabReseller')[0].setHtml(
                '<div style="font-size:100% !important" class="x-rm-rdstoreother-details">'+
                'Reseller: <a href="#card4">'+record.data.reseller+'</a></div>'
            );


            ///////////////////////////////
            if(!isRetailerDetailsView){

                if(! record.data.SKU){
                    record.data.SKU = '';

                }
                if(! record.data.collections){
                    record.data.collections = '';
                }

                if(! record.data.design){
                    record.data.design = "" ;
                }

                if(! record.data.price){
                    record.data.price = "" ;
                }

                Ext.ComponentQuery.query('#vendorNameLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Vendor name: '+record.data.vendor_name +'</div>');
                Ext.ComponentQuery.query('#vendorCollectionsLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Collections: '+record.data.collections +'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Design: '+record.data.design +'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SKUs: '+record.data.SKU+'</div>');
                Ext.ComponentQuery.query('#vendorRugImageLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Rug images: '+record.data.no_of_rugs_images+'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Additional images :'+record.data.no_of_additional_images+'</div>');
                Ext.ComponentQuery.query('#vendorLastUpdateLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Last updated on:</div>');
                Ext.ComponentQuery.query('#vendorPriceLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Price: '+ record.data.price+'</div>');

            }
            //////////////////////////////////


            Ext.ComponentQuery.query('#RDStoreLabel')[0].setHidden(true);
            //  Ext.ComponentQuery.query('#RDStoreLogoPanel')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDStoreTabFormPanel')[0].setDisabled(true);
            Ext.ComponentQuery.query('#retailerEcommerceForm')[0].setDisabled(true);
            Ext.ComponentQuery.query('#RDStoreOwner')[0].setValue(
                ownerFName+' '+ownerLName
            );

            var store_perfList =  Ext.ComponentQuery.query('#RDStoreTabPerformance')[0] ;
            store_perfList.setDisableSelection(false) ;
            switch(performance){

                case "BAD":
                    store_perfList.select(0,false,true);
                    break;
                case "GOOD":
                    store_perfList.select(1,false,true);
                    break;
                case "GREAT":
                    store_perfList.select(2,false,true);
                    break;
            }

            var itemIdsAndKeyName = [
                {itemId:'RDStoreName',keyName:keyName},
                {itemId:'RDStoreAddress',keyName:keyAddrss},
                {itemId:'RDStoreSuite',keyName:keyAddrssSuite},
                {itemId:'RDStoreCity',keyName:keyCity},
                {itemId:'RDStoreState',keyName:keyState},
                {itemId:'RDStoreZip',keyName:keyZip},
                {itemId:'RDStoreEmail',keyName:keyEmail},
                {itemId:'RDStorePhone',keyName:keyPhone},
                {itemId:'RDStorePhoneExt',keyName:keyPhoneExt},
                {itemId:'RDStoreFax',keyName:keyFax},
                {itemId:'RDStoreWebsite',keyName:keyWebsite},
                {itemId:'RDStoreType',keyName:keyType},
                {itemId:'RDStoreSize',keyName:'store_size_sq_ft'},
                {itemId:'RDStoreLocations',keyName:keyLocation},
                {itemId:'RDStoreEmployees',keyName:keyEmployee},
                {itemId:'RDStoreYrsInBusiness',keyName:keyYrBuisness},
                {itemId:'RDStoreInventoryTool',keyName:'store_inventory_tool'},
                {itemId:'RDStoreAccountingTool',keyName:'store_accounting_tool'},
                {itemId:'RDStoreAltBusiness',keyName:'store_alt_bussiness'},
                {itemId:'RDStorePercProg',keyName:keyProgram},
                {itemId:'RDStorePercKind',keyName:keyOneKind},

                {itemId: isRetailerDetailsView ?'rtAdditionalInfoChallenges' :'RDStoreChallenges',keyName:keyChallenges},

                {itemId:'RDStoreAdvertising',keyName:keyAdv},
                {itemId:'RDStoreMoBudget',keyName:keyMonBug}
            ];

            var refinedArray = RMdatalink.util.globalMethods.getRefinedArray(itemIdsAndKeyName,record.data);

            for(var i=0;i<refinedArray.length;i++){

                var valueToAdd = RMdatalink.util.globalMethods.getValuesFromObj(record.data    , refinedArray[i].keyName );
                var componentQery = '#' + refinedArray[i].itemId;
                RMdatalink.util.globalMethods.setValueWithSelectionQuery(componentQery,valueToAdd);


            }

            if(!isRetailerDetailsView){

                Ext.ComponentQuery.query('#RDStoreDesign')[0].setValue(  record.data.design );
                Ext.ComponentQuery.query('#RDStoreSKU')[0].setValue( record.data.SKU);
                Ext.ComponentQuery.query('#RDStoreCollections')[0].setValue( record.data.collections);
                /*
                Ext.ComponentQuery.query('#RDStoreNoOfRugsImages')[0].setValue( record.data.no_of_rugs_images);
                Ext.ComponentQuery.query('#RDStoreNoOfAdditionalImages')[0].setValue( record.data.no_of_additional_images );

        */

            }else{

                setRtlBillingDtl(record) ;
            }

        }
        function clearAllScreenInfoOnRetailCard(){
            //ADD ITEMID OF FIELDS  HERE WHICH WE WNAT TO CLEAR
            //CLEAR MANUALLY IF NOT POSSIBLE BY ITERATION.
            var itemIdsAndKeyName = [
                {itemId:'RDStoreName'},
                {itemId:'RDStoreOwner'},
                {itemId:'RDStoreAddress'},
                {itemId:'RDStoreFax'},
                {itemId:'RDStoreSuite'},
                {itemId:'RDStoreCity'},
                {itemId:'RDStoreState'},
                {itemId:'RDStoreZip'},
                {itemId:'RDStoreEmail'},
                {itemId:'RDStorePhone'},
                {itemId:'RDStorePhoneExt'},
                {itemId:'RDStoreWebsite'},
                {itemId:'RDStoreType'},
                {itemId:'RDStoreSize'},
                {itemId:'RDStoreLocations'},
                {itemId:'RDStoreEmployees'},
                {itemId:'RDStoreYrsInBusiness'},
                {itemId:'RDStoreInventoryTool'},
                {itemId:'RDStoreAccountingTool'},
                {itemId:'RDStoreAltBusiness'},
                {itemId:'RDStorePercProg'},
                {itemId:'RDStorePercKind'},
                {itemId:  isRetailerDetailsView ?'rtAdditionalInfoChallenges' : 'RDStoreChallenges'},
                {itemId:'RDStoreAdvertising'},
                {itemId:'RDStoreMoBudget'},
                {itemId:'RDStoreMoBudget'}
            ];
            var refinedArray = itemIdsAndKeyName;
            for(var i=0;i<refinedArray.length;i++){

                var valueToAdd = '';
                var componentQery = '#' + refinedArray[i].itemId;
                RMdatalink.util.globalMethods.setValueWithSelectionQuery(componentQery,valueToAdd);

            }




        }

        function fillCRMSData(selectedUserRecord){
            var userData = selectedUserRecord.record.data ;

            var list = Ext.ComponentQuery.query('#RDCRMList')[0].down("#mainList");

            var RDCRMStore = Ext.getStore('RDCRM');
            RDCRMStore.removeAll() ;
            RDCRMStore.sync() ;

            RDCRMStore.setData(userData.crms) ;
            RDCRMStore.sync() ;
            list.refresh();
        }


        function fillValueinEcoomerceTab(selectedUserRecord){

          console.warn("FILLING RETAILER E-COMMERCE INFORMATION");
          var userData = selectedUserRecord.record.data ;
          var retailerEcommerceForm = Ext.ComponentQuery.query("#retailerEcommerceForm")[0];
             retailerEcommerceForm.setValues(userData.e_commerce_info);

            fillLogoInfoForEcommeceTab(selectedUserRecord , retailerEcommerceForm);
            fillAdditionalVEndors(selectedUserRecord , retailerEcommerceForm);
            fillFeatureInformation(selectedUserRecord , retailerEcommerceForm);

            //fillFeatureInformation
        }

        function fillLogoInfoForEcommeceTab(record , form){

            var rec =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;
            var logo;
            try{
                 logo = rec.record.data.e_commerce_info.logo;
            }catch(e){

                console.log("EROR WA THROWN"  ,e);
            }

            if(logo){

                console.log(" LOGO INFORMATION");
            }else{
                console.log("NO LOGO INFORMATION");
            }
            var backGround_Logo_Image = Ext.ComponentQuery.query("#backGround_Logo_Image")[0];
            var dom = backGround_Logo_Image.element.dom;
            var img = dom.childNodes[0];
            img.setAttribute("src" , logo);

        }

        function fillAdditionalVEndors(){


            var vipVendorListInEComm = Ext.ComponentQuery.query("#vipVendorListInEComm")[0];
            var rec =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;
            var additional_vendors;
            var list = vipVendorListInEComm ;
            var store = vipVendorListInEComm.getStore();
            try{
                 additional_vendors = rec.record.data.e_commerce_info.additional_vendors;
            }catch(e){

                console.log("EROR WA THROWN"  ,e);
            }

            if(additional_vendors && additional_vendors.length){

                console.log(" additional_vendors INFORMATION");
                console.log(additional_vendors);
                if(store){
                    store.setData(additional_vendors);
                }else{
                    list.setData(additional_vendors);
                }




            }else{
                console.log("NO additional_vendors INFORMATION");
                if(store){
                    store.removeAll();
                }
                return;
            }








        }

        function fillFeatureInformation(){


            var vipVendorProgramListInEComm = Ext.ComponentQuery.query("#vipVendorProgramListInEComm")[0];
            var rec =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;
            var additional_vendors;
            var list = vipVendorProgramListInEComm ;
            var store = vipVendorProgramListInEComm.getStore();
            try{
                 additional_vendors = rec.record.data.e_commerce_info.programs;
            }catch(e){

                console.log("EROR WA THROWN"  ,e);
            }

            if(additional_vendors && additional_vendors.length){

                console.log(" additional_vendors INFORMATION");
                console.log(additional_vendors);
                if(store){
                    store.setData(additional_vendors);
                }else{
                    list.setData(additional_vendors);
                }




            }else{
                console.log("NO additional_vendors INFORMATION");
                if(store){
                    store.removeAll();
                }
                return;
            }







        }


        function fillNotesStore(selectedUserRecord){

            var userData = selectedUserRecord.record.data ;

            var RDCRMStore = Ext.getStore('retailersDetailsNotes');
            if(userData.notes && userData.notes.length > 0){
                    Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].getTabBar().getAt(6).setBadgeText(userData.notes.length);
            }
            else{

                    Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].getTabBar().getAt(6).setBadgeText();
            }

            RDCRMStore.removeAll() ;
            RDCRMStore.sync() ;

            RDCRMStore.setData(userData.notes) ;
            RDCRMStore.sync() ;

        }


        function fillBlueBookUsers(selectedUserRecord){


            var blueBookListWithHeader = Ext.ComponentQuery.query('#blueBookListWithHeader')[0];
            var blueBookMainList = blueBookListWithHeader.down('#mainList');
            var newChildpanelBlueBookList = blueBookMainList.down('#newChildpanelBlueBookList');
            var managerUSers =[] ;
            // FOR  NEW  ADD  RETAILER  BUTTON  CLICKED
            if( Object.keys(selectedUserRecord).length )
            {
                var userData = selectedUserRecord.record.data ;
                managerUSers =userData.reps_bluebook_teamusers ;
            }
        console.error("GLOBAL FILL 2");
            RMdatalink.util.globalMethods.fillListDataByListObject(blueBookMainList,managerUSers);
            blueBookMainList.refresh();

            if(managerUSers !== undefined && managerUSers !== null)
            {
                newChildpanelBlueBookList.setTop(managerUSers.length*50);
            }

            else
            {
                newChildpanelBlueBookList.setTop(0);
            }
        }

        function fillREPsBlueBookUsers(selectedUserRecord){

            var userData = selectedUserRecord.record.data ;
            var managerUSers = userData.reps_bluebook_teamusers ;
            console.log("managerUSers  " , managerUSers);

            var REPsStore = Ext.getStore('vendor.REPsDetails');
            REPsStore.setData(managerUSers) ;
            REPsStore.sync() ;
        }


        function fillRCMDSidebarPhotos(selectedUserRecord){
            var userData = selectedUserRecord.record.data ;
           console.error("GLOBAL FILL 3");
            RMdatalink.util.globalMethods.fillListData('#RDCRMNotesPhotosView',userData.photos);

        }

        function fillRCMDSidebarAttachments(selectedUserRecord){
            var userData = selectedUserRecord.record.data ;
            console.error("GLOBAL FILL 4");
            RMdatalink.util.globalMethods.fillListData('#RDCRMNotesAttRetailerList',userData.attachments);
            console.error("GLOBAL FILL 5");
            RMdatalink.util.globalMethods.fillListData('#RDCRMNotesAttList',userData.attachments);
            //
        }


        function fillVendorsStore(selectedUserRecord){

            /*
            var userData = selectedUserRecord.record.data ;
            var inStoreOrVendor , onlineStoreOrVendor ;
            if(isRetailerDetailsView)
            {
                inStoreOrVendor = userData.store_in_store_vendors;
                onlineStoreOrVendor = userData.store_online_vendors;
            }
            else
            {
                inStoreOrVendor = userData.vendor_in_store_retailers;
                onlineStoreOrVendor = userData.vendor_online_retailers;
            }

            var vendorTabPanel = Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0];
            vendorTabPanel.setActiveItem(0);

            //FOR IN
            var vendorList = vendorTabPanel.down("#RDInStoreVendorsTab").down('#mainList');
            vendorList.setDisableSelection(false);
            var vendorStore = vendorList.getStore();
            vendorStore.removeAll() ;
            vendorStore.sync();
            vendorStore.setData(inStoreOrVendor) ;
            vendorStore.sync();

            vendorList.deselectAll();
            for(var i=0;i<vendorList.getViewItems().length;i++) {
                if(vendorStore.getAt(i).data.status) {
                    vendorList.select(i,true,true);
                }
            }


            //FOR ONLINE

            var vendorOnlineList = vendorTabPanel.down("#RDOnlineVendorsTab").down('#mainList');
            vendorOnlineList.setDisableSelection(false);
            var vendorOnlineStore = vendorOnlineList.getStore();
            vendorOnlineStore.removeAll() ;
            vendorOnlineStore.sync();
            vendorOnlineStore.setData(onlineStoreOrVendor) ;
            vendorOnlineStore.sync();

            vendorOnlineList.deselectAll();
            for(var j=0;i<vendorOnlineList.getViewItems().length;i++) {
                if(vendorOnlineStore.getAt(j).data.status) {
                    vendorOnlineList.select(j,true,true);
                }
            }

            */
        }



        function selectStoreStaus(selectedUserRecord){
            var userData = selectedUserRecord.record.data ;
            var statusList =  Ext.ComponentQuery.query('#RDStoreStatusList')[0] ;
            statusList.setDisableSelection(false) ;
            switch(userData.store_status){
                case "ACTIVE":
                    statusList.select(0,false,true);
                    break;

                case "INACTIVE":
                    statusList.select(1,false,true);
                    break;

                case "PROSPECTS":
                    statusList.select(2,false,true);
                    break;

                case "PENDING":
                    statusList.select(3,false,true);
                    break;
                 case "HOT_PROSPECTS":
                    statusList.select(4,false,true);
                    break;

                default:
                    // Ext.ComponentQuery.query('#RDStoreStatusList')[0].select(0,false,true);
                    break;
            }
            //statusList.setDisableSelection(true) ;
        }

        function fillStoreProductStatus(selectedUserRecord){
            var userData = selectedUserRecord.record.data ;

            var data = [
                {"ProductImage":"resources//images//RMNavigationPanel//Datalink.png","ProductName":"Datalink","ProductStatus":userData.store_products_datalink ,"product_expiry" :"" },
                {"ProductImage":"resources//images//RMNavigationPanel//ECatalog.png","ProductName":"ECatalog","ProductStatus":userData.store_products_ecatalog ,"product_expiry" :"" },
                {"ProductImage":"resources//images//RMNavigationPanel//SMART_cart.png","ProductName":"E-Commerce","ProductStatus":userData.store_products_smart_cart ,"product_expiry" :"" },
                {"ProductImage":"resources//images//RMNavigationPanel//RM_PLC.png","ProductName":"RMPro","ProductStatus":userData.store_products_rm_plc ,"product_expiry" :"" },
                {"ProductImage":"resources//images//RMNavigationPanel//iRugz.png","ProductName":"iRugz","ProductStatus":userData.store_products_irugs ,"product_expiry" :"" },
                {"ProductImage":"resources//images//RMNavigationPanel//vip.png","ProductName":"VIP","ProductStatus":userData.store_products_vip ,"product_expiry" :"" }
            ];
           console.error("GLOBAL FILL 6");
            RMdatalink.util.globalMethods.fillListData('#RDStoreProductsList',data);
         showProductMarker(userData);
        }


        function setStoreLogo(selectedUserRecord){
            var userData = selectedUserRecord.record.data ;
        }

        function fillTipsData(selectedUserRecord) {
            var userData = selectedUserRecord.record.data;

            var doDontsStore = Ext.getStore('notificationsTipsDoDonts');
            if(userData.dos_and_donts && userData.dos_and_donts.length > 1)
            {
                doDontsStore.removeAll();
                doDontsStore.sync();
                doDontsStore.setData(userData.dos_and_donts);
                doDontsStore.sync();
            }


            var followUpStore = Ext.getStore('notificationsTipsFollowsup');
            if(userData.follow_ups && userData.follow_ups.length )
            {
                followUpStore.removeAll();
                followUpStore.sync();
                followUpStore.setData(userData.follow_ups);
                followUpStore.sync();
            }
            userData = selectedUserRecord.record.data;

         /*   doDontsStore = Ext.getStore('notifications.managerTipsdodonts');
            doDontsStore.removeAll();
            doDontsStore.sync();
            doDontsStore.setData(userData.manager_dos_and_donts);
            doDontsStore.sync();

            followUpStore = Ext.getStore('notifications.managerTipsfollowsup');
            followUpStore.removeAll();
            followUpStore.sync();
            followUpStore.setData(userData.manager_follow_ups);
            followUpStore.sync();
        */

            if(userData.manager_dos_and_donts && userData.manager_dos_and_donts.length > 1)
            {console.error("GLOBAL FILL 7");
                RMdatalink.util.globalMethods.fillListData('#ActRDManagerDosDontList',userData.manager_dos_and_donts);
            }

            if(userData.manager_follow_ups && userData.manager_follow_ups.length > 1)
            {
                console.error("GLOBAL FILL 8");
                RMdatalink.util.globalMethods.fillListData('#ActRDManagerFollowUpsLists',userData.manager_follow_ups);
            }


            Ext.ComponentQuery.query('#ActRDManagerBlueStickyTextArea')[0].setValue(userData.manager_blue_note);
            Ext.ComponentQuery.query('#RDCRMNotesBlueStickyTextArea')[0].setValue(userData.blue_note);
        }


        /////////////////////////////RESET FIELDS

        function resetManagerData(){

            Ext.ComponentQuery.query('#RDAccountDetails')[0].setValue("");
              var importFrmCsvController = RMdatalink.app.getController('ImportCSV') ;

               importFrmCsvController.config.retailerForVendor =  null ;

            var mangerForm = Ext.ComponentQuery.query('#RDManagerFormPanel')[0];
            mangerForm.setDisabled(false) ;
            Ext.ComponentQuery.query('#RDManagerRelationDetailsForm')[0].setDisabled(false);
            Ext.ComponentQuery.query('#ActRDManagerRelationDetailsForm')[0].setDisabled(false);

            var profilePicView = Ext.ComponentQuery.query('#RDManagerAddPhotoImage')[0];
            profilePicView.setSrc("resources//images//logos//default_User.jpg").setHidden(true) ;

            Ext.ComponentQuery.query('#ActRDMPositionId')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerAddPhoto')[0].setHidden(false);
            Ext.ComponentQuery.query('#RDManagerStoreName')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerFirstName')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerLastName')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerEmail')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerPhone')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerPhoneExt')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerLinkedIn')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerFacebook')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerTwitter')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerSuite')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerAddress')[0].setValue('');
            Ext.ComponentQuery.query('#ActMgrCity')[0].setValue('');
            Ext.ComponentQuery.query('#ActMgrState')[0].setValue('');
            Ext.ComponentQuery.query('#ActMgrZip')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerDirectPhone')[0].setValue('');
            Ext.ComponentQuery.query('#RDManagerDirectPhoneExt')[0].setValue('');

            console.error("GLOBAL FILL 9");
            RMdatalink.util.globalMethods.fillListData('#RDManagerActivityList',[]);
        }




        function unfillMAnagerRelationData(){

            Ext.ComponentQuery.query('#ActRDMRDYrsAtStore')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDWife')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDRelatives ')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDHobbies')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDCarOfChoice')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDAltPhone ')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDAltEmail')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDWebsite')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDChild1Name')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDChild2Name')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDChild1Age')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDChild2Age')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDPartner1')[0].setValue('');
            Ext.ComponentQuery.query('#ActRDMRDPartner2')[0].setValue('');

             Ext.ComponentQuery.query('#ActRDMRDDOBMonth')[0].setValue('');
             Ext.ComponentQuery.query('#ActRDMRDAniversaryMonth')[0].setValue('');
        }



        function unfillStoreInformationForRDetailCard(){

            if(!isRetailerDetailsView){

                Ext.ComponentQuery.query('#vendorNameLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Vendor name:</div>');
                Ext.ComponentQuery.query('#vendorCollectionsLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Collections:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Design:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SKUs:</div>');
                Ext.ComponentQuery.query('#vendorRugImageLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Rug images:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Additional images:</div>');
                Ext.ComponentQuery.query('#vendorLastUpdateLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Last updated on:');
                Ext.ComponentQuery.query('#vendorPriceLbl')[0].setHtml('<div class="x-rm-rdstoreother-details">Price:</div>');
            }
            else
            {
                Ext.ComponentQuery.query('#storeNameOrderLabelItemID')[0].setHtml(
                    '<div class="x-rm-rdstoreother-details"><div></div>ACCOUNT NO</div>'
                );
                Ext.ComponentQuery.query('#cityNameLabelItemID')[0].setHtml(
                    'User since '
                );

                Ext.ComponentQuery.query('#billingDtlLbl')[0].setHtml('');

                Ext.ComponentQuery.query('#lastLoginLabelItemID')[0].setHtml('Last login ');
                Ext.ComponentQuery.query('#lastExportLabelItemID')[0].setHtml('Last export ');
                Ext.ComponentQuery.query('#RDStoreTabReseller')[0].setHtml(
                    '<div style="font-size:100% !important" class="x-rm-rdstoreother-details">'+
                    'Reseller:</div>'
                );




        //         Ext.ComponentQuery.query('#rtDatalinkStatusSelFld')[0].setValue(null);
        //        Ext.ComponentQuery.query('#rtEcatalogStatusSelFld')[0].setValue(null);
        //         Ext.ComponentQuery.query('#rtECommerceStatusSelFld')[0].setValue(null);
        //        Ext.ComponentQuery.query('#rtRM_proStatusSelFld')[0].setValue(null);
        //         Ext.ComponentQuery.query('#rtirugzStatusSelFld')[0].setValue(null);



            }



            Ext.ComponentQuery.query('#RDUsersStoreLogoImage')[0].setSrc("resources//images//logos//default_User.jpg");
            Ext.ComponentQuery.query('#RDStoreTabFormPanel')[0].setDisabled(false);
                Ext.ComponentQuery.query('#retailerEcommerceForm')[0].setDisabled(false);
            var store_perfList =  Ext.ComponentQuery.query('#RDStoreTabPerformance')[0] ;
            store_perfList.setDisableSelection(false) ;
            store_perfList.select(1,false,true);

            //ADD ITEMID OF FIELDS  HERE WHICH WE WNAT TO CLEAR
            //CLEAR MANUALLY IF NOT POSSIBLE BY ITERATION.
            var itemIdsAndKeyName = [
                {itemId:'RDStoreName'},
                {itemId:'RDStoreOwner'},
                {itemId:'RDStoreAddress'},
                {itemId:'RDStoreFax'},
                {itemId:'RDStoreSuite'},
                {itemId:'RDStoreCity'},
                {itemId:'RDStoreState'},
                {itemId:'RDStoreZip'},
                {itemId:'RDStoreEmail'},
                {itemId:'RDStorePhone'},
                {itemId:'RDStorePhoneExt'},
                {itemId:'RDStoreWebsite'},
                {itemId:'RDStoreType'},
                {itemId:'RDStoreSize'},
                {itemId:'RDStoreLocations'},
                {itemId:'RDStoreEmployees'},
                {itemId:'RDStoreYrsInBusiness'},
                {itemId:'RDStoreInventoryTool'},
                {itemId:'RDStoreAccountingTool'},
                {itemId:'RDStoreAltBusiness'},
                {itemId:'RDStorePercProg'},
                {itemId:'RDStorePercKind'},
                {itemId:'RDStoreChallenges'},
                {itemId:'RDStoreAdvertising'},
                {itemId:'RDStoreMoBudget'},
                {itemId:'RDStoreMoBudget'}
            ];
            var refinedArray = itemIdsAndKeyName;
            for(var i=0;i<refinedArray.length;i++){

                var valueToAdd = '';
                var componentQery = '#' + refinedArray[i].itemId;
                //  RMdatalink.util.globalMethods.setValueWithSelectionQuery(componentQery,valueToAdd);

            }




        }

        function unfillCRMSData(){

            try{
        Ext.ComponentQuery.query('#RDNotepadNoteProblem')[0].setDisabled(true);

        Ext.ComponentQuery.query('#RDNotepadNoteSolution')[0].setDisabled(true);

        Ext.ComponentQuery.query('#RDNotepadNoteProblem')[0].setValue('');

        Ext.ComponentQuery.query('#RDNotepadNoteSolution')[0].setValue('');
            }catch(ex){
                console.error(ex);
            }

            var RDCRMStore = Ext.getStore('RDCRM');
            RDCRMStore.removeAll() ;
            RDCRMStore.sync() ;
        }


        function unfillNotesStore(){

            var RDCRMStore = Ext.getStore('retailersDetailsNotes');
            RDCRMStore.removeAll() ;
            RDCRMStore.sync() ;
        }

        function unfillRCMDSidebarPhotos(){
        console.error("GLOBAL FILL 10");
            RMdatalink.util.globalMethods.fillListData('#RDCRMNotesPhotosView',[]);

        }

        function unfillRCMDSidebarAttachments(){
            console.error("GLOBAL FILL 11");

            RMdatalink.util.globalMethods.fillListData('#RDCRMNotesAttRetailerList',[]);
            console.error("GLOBAL FILL 12");
            RMdatalink.util.globalMethods.fillListData('#RDCRMNotesAttList',[]);

        }


        function unfillVendorsStore(){

        /*    //FOR IN STORE
            var vendorStore = Ext.getStore('retailersStoreVendors');
            vendorStore.removeAll() ;
            vendorStore.sync() ;

            //FOR ONLINE STORE
            var vendorOnlineStore = Ext.getStore('retailersOnlineStoreVendors');
            vendorOnlineStore.removeAll() ;
            vendorOnlineStore.sync() ;

            var selectedUserRecord = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;
            if(!selectedUserRecord.record) {
                var vendorTabPanel = Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0];
                vendorTabPanel.setActiveItem(0);

                var vendorList = vendorTabPanel.down("#RDInStoreVendorsTab").down('#mainList');
                vendorList.setDisableSelection(false);
                vendorStore.removeAll() ;
                vendorStore.sync();

                var vendorvendorOnlineStoreList = vendorTabPanel.down("#RDOnlineVendorsTab").down('#mainList');
                vendorvendorOnlineStoreList.setDisableSelection(false);
                vendorOnlineStore.removeAll() ;
                vendorOnlineStore.sync();

                var retailerData = [
                    {"name": "Vendor One", "design": "37", "sku": "5000", "status": false},
                    {"name": "Vendor Two", "design": "78", "sku": "2000", "status": false},
                    {"name": "Vendor Three", "design": "37", "sku": "6000", "status": false},
                    {"name": "Vendor Four", "design": "78", "sku": "2500", "status": false},
                    {"name": "Vendor Five", "design": "34", "sku": "1300", "status": false},
                    {"name": "Vendor Six", "design": "56", "sku": "4567", "status": false},
                    {"name": "Vendor Seven", "design": "8", "sku": "8900", "status": false},
                    {"name": "Vendor Eight", "design": "3", "sku": "9322", "status": false},
                    {"name": "Vendor Nine", "design": "34", "sku": "1000", "status": false},
                    {"name": "Vendor Ten", "design": "37", "sku": "2000", "status": false},
                    {"name": "Vendor Eleven", "design": "78", "sku": "6000", "status": false},
                    {"name": "Vendor Twelve", "design": "34", "sku": "2500", "status": false},
                    {"name": "Vendor Thirteen", "design": "37", "sku": "1300", "status": false},
                    {"name": "Vendor Fourteen", "design": "78", "sku": "4567", "status": false},
                    {"name": "Vendor Fifteen", "design": "34", "sku": "8900", "status": false},
                    {"name": "Vendor Sixteen", "design": "56", "sku": "9322", "status": false}
                ];
                var vaendorData = [
                    {"name": "Retail One","status": false,"city" : "New Jersey"},
                    {"name": "Retail Two",  "status": false , "city" : "New Jersey"},
                    {"name": "Retail Three",  "status": false , "city" : "Boston"},
                    {"name": "Retail One","status": false,"city" : "New Jersey"},
                    {"name": "Retail Two",  "status": false , "city" : "New Jersey"},
                    {"name": "Retail Three",  "status": false , "city" : "Boston"},
                    {"name": "Retail One","status": false,"city" : "New Jersey"},
                    {"name": "Retail Two",  "status": false , "city" : "New Jersey"},
                    {"name": "Retail Three",  "status": false , "city" : "Boston"},
                    {"name": "Retail One","status": false,"city" : "New Jersey"},
                    {"name": "Retail Two",  "status": false , "city" : "New Jersey"},
                    {"name": "Retail Three",  "status": false , "city" : "Boston"},
                    {"name": "Retail One","status": false,"city" : "New Jersey"},
                    {"name": "Retail Two",  "status": false , "city" : "New Jersey"},
                    {"name": "Retail Three",  "status": false , "city" : "Boston"},
                    {"name": "Retail One","status": false,"city" : "New Jersey"}

                ];

                if(isRetailerDetailsView)
                {
                    vendorStore.setData(retailerData);
                    vendorvendorOnlineStoreList.setData(retailerData);
                }
                else
                {
                   vendorStore.setData(vaendorData);
                   vendorvendorOnlineStoreList.setData(vaendorData);
                }

                vendorStore.sync();
                vendorOnlineStore.sync();
            }
            */
        }


        function unselectStoreStaus(){
            var statusList =  Ext.ComponentQuery.query('#RDStoreStatusList')[0] ;

            if(isRetailerDetailsView){
                    var rtActiveTabId =  Ext.ComponentQuery.query('#retailersTabPanel')[0].getActiveItem().getItemId();

                switch(rtActiveTabId){

                    case "allRetailerTab":
                        statusList.select(3,false,true);
                        break;
                        case "usersTab":
                        statusList.select(0,false,true);
                        break;
                        case "prospectsTab":
                        statusList.select(2,false,true);
                        break;
                        case "inactiveTab":
                        statusList.select(1,false,true);
                        break;
                        case "pendingTab":
                        statusList.select(3,false,true);
                        break;

                }
            }
            else{
                statusList.select(3,false,true);
            }

        }

        function unfillStoreProductStatus(){
            var data = [
                {"ProductImage":"resources//images//RMNavigationPanel//Datalink.png","ProductName":"Datalink","ProductStatus":false },
                {"ProductImage":"resources//images//RMNavigationPanel//ECatalog.png","ProductName":"ECatalog","ProductStatus":false},
                {"ProductImage":"resources//images//RMNavigationPanel//SMART_cart.png","ProductName":"E-Commerce","ProductStatus":false},
                {"ProductImage":"resources//images//RMNavigationPanel//RM_PLC.png","ProductName":"RM PRO","ProductStatus":false},
                {"ProductImage":"resources//images//RMNavigationPanel//iRugz.png","ProductName":"iRugz","ProductStatus":false},
                {"ProductImage":"resources//images//RMNavigationPanel//vip.png","ProductName":"VIP","ProductStatus":false  }

            ];
           console.error("GLOBAL FILL 13");
            RMdatalink.util.globalMethods.fillListData('#RDStoreProductsList',data);
        }

        function unfillTipsData() {

            //***********  FOR VENDOR  ********

            var doDontsStore = Ext.getStore('notificationsTipsDoDonts');
            doDontsStore.removeAll();
            doDontsStore.sync();
            doDontsStore.setData([
                {"notification":""},
                {"notification":""},
                {"notification":""},
                {"notification":""}
            ]);
            doDontsStore.sync();

            var followUpStore = Ext.getStore('notificationsTipsFollowsup');
            followUpStore.removeAll();
            followUpStore.sync();
            followUpStore.setData([
                {"notification":""},
                {"notification":""},
                {"notification":""},
                {"notification":""}
            ]);
            followUpStore.sync();

             //***********  FOR  MANAGER  ********

            doDontsStore = Ext.getStore('notifications.managerTipsdodonts');
            doDontsStore.removeAll();
            doDontsStore.sync();
            doDontsStore.setData([
                {"notification":""},
                {"notification":""},
                {"notification":""},
                {"notification":""}
            ]);
            doDontsStore.sync();

            followUpStore = Ext.getStore('notifications.managerTipsfollowsup');
            followUpStore.removeAll();
            followUpStore.sync();
            followUpStore.setData([
                {"notification":""},
                {"notification":""},
                {"notification":""},
                {"notification":""}
            ]);
            followUpStore.sync();


           //***********  FOR  REPS  ********
            doDontsStore = Ext.getStore('notifications.repsTipsdodonts');
            doDontsStore.removeAll();
            doDontsStore.sync();
            doDontsStore.setData([
                {"notification":""},
                {"notification":""},
                {"notification":""},
                {"notification":""}
            ]);
            doDontsStore.sync();

            followUpStore = Ext.getStore('notifications.repsTipsfollowsup');
            followUpStore.removeAll();
            followUpStore.sync();
            followUpStore.setData([
                {"notification":""},
                {"notification":""},
                {"notification":""},
                {"notification":""}
            ]);
            followUpStore.sync();


            Ext.ComponentQuery.query('#RDManagerBlueStickyTextArea')[0].setValue("");
            Ext.ComponentQuery.query('#RDCRMNotesBlueStickyTextArea')[0].setValue("");
            Ext.ComponentQuery.query('#RDUserProfileBlueStickyTextArea')[0].setValue("");


            var mgrRdata = [
                {"notification":""},
                {"notification":""},
                {"notification":""},
                {"notification":""}
            ];
             console.error("GLOBAL FILL 14");
            RMdatalink.util.globalMethods.fillListData('#ActRDManagerDosDontList',mgrRdata);
            console.error("GLOBAL FILL 15");
            RMdatalink.util.globalMethods.fillListData('#ActRDManagerFollowUpsLists',mgrRdata);


        }



        function unfillREPsBlueBookUsers(){

            var REPsStore = Ext.getStore('vendor.REPsDetails');
            REPsStore.removeAll() ;
            REPsStore.sync() ;
        }





        function fillCompanyContactInfo(selectedUserRecord){

             var userData = selectedUserRecord.record.data ;
             var cmpContactsStore = Ext.getStore('vendor.CompanyContactStore');
             cmpContactsStore.removeAll();
             cmpContactsStore.sync();

             cmpContactsStore.setData(userData.company_contacts);
             cmpContactsStore.sync();

             selectAccMgr(cmpContactsStore);

        }

        function selectAccMgr(cmpContactsStore){
            var cmpList = Ext.ComponentQuery.query('#CmpContactMainListPanel')[0].down('#mainList');

             var cmpRec ;
            for(var i =0 ; i < cmpContactsStore.getData().all.length ; i ++ ){


                 cmpRec = cmpContactsStore.getAt(i);
                var isAccMgr = cmpRec.get('is_account_mgr');
                if(isAccMgr){

                    cmpList.select( cmpRec , false, true );
                    return ;
                }
            }



               cmpRec = cmpContactsStore.getAt(0);
               if(cmpRec){
                   cmpList.select( cmpRec , false, true );

               }


        }


        function unfillCompanyContactInfo(){

             var cmpContactsStore = Ext.getStore('vendor.CompanyContactStore');
             cmpContactsStore.removeAll();
             cmpContactsStore.sync();

        }


        function setDate(month,day,year, mm,dd,yy) {


                    Ext.ComponentQuery.query('#'+month)[0].setValue(mm) ;
                    Ext.ComponentQuery.query('#'+day)[0].setValue(dd);
                    Ext.ComponentQuery.query('#'+year)[0].setValue(yy) ;


        }

        this.config.changedManually = true ;
        that.disableEnableComponents(true) ;

    },

    setInhouseData: function() {
        var inHouseUsersTab = Ext.ComponentQuery.query('#inHouseUsersTab')[0];
        var usersList = inHouseUsersTab.down('#inhouseList');

        var inHouseStore = Ext.getStore('inhouseMasterStore');


        var usersData = getUsers(inHouseStore);//inHouseStore.getData().all[0].data.users;

        RMdatalink.util.globalMethods.fillListDataByListObject(usersList,usersData);


        var inHouseRepsTab = Ext.ComponentQuery.query('#inHouseRepsTab')[0];
        var repsList = inHouseRepsTab.down('#inhouseList');

        var repsData = getReps(inHouseStore); //inHouseStore.getData().all[0].data.reps;
        console.log(repsData);
        RMdatalink.util.globalMethods.fillListDataByListObject(repsList,repsData);



        function getReps(inHouseStore){
            var inhouseData = inHouseStore.getData().all ;
            var reps = new Array() ;
            for(var i =0 ; i<inhouseData.length; i++){

                if(inhouseData[i].data.type == "reps"){
                    reps.push(inhouseData[i].data) ;
                }
            }

            return reps;
        }


        function getUsers(inHouseStore){
            var inhouseData = inHouseStore.getData().all ;
            var users = [] ;
            for(var i =0 ; i<inhouseData.length; i++){

                if(inhouseData[i].data.type == "users"){
                    users.push(inhouseData[i].data) ;
                }
            }

            return users;
        }
    },

    setDataForDiscountsTab: function() {
        var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsDataLinkTab')[0];
        var discountsEcatlogTab  = Ext.ComponentQuery.query('#discountsEcatlogTab')[0];
        var discountsSmartCartTab   = Ext.ComponentQuery.query('#discountsSmartCartTab')[0];
        var discountsRMPLCTab   = Ext.ComponentQuery.query('#discountsRMPLCTab')[0];
        var discountsIrugzTab   = Ext.ComponentQuery.query('#discountsIrugzTab')[0];
        var discountsSidePreviousTab   = Ext.ComponentQuery.query('#discountsSidePreviousTab')[0];


        var dataLinkList = discountsDataLinkTab.down('#discountList');
        var eCatlogList = discountsEcatlogTab.down('#discountList');
        var smartCartList = discountsSmartCartTab.down('#discountList');
        var rmplcList = discountsRMPLCTab.down('#discountList');
        var irugzList = discountsIrugzTab.down('#discountList');
        var previousDiscountsList = discountsSidePreviousTab.down('#discountList');

        try{
        var discountsMasterStore = Ext.getStore('discountsMasterStore');
        var discountsData = discountsMasterStore.getData().all ? discountsMasterStore.getData().all[0].data : null;

        if(discountsData){
        RMdatalink.util.globalMethods.fillListDataByListObject(dataLinkList,discountsData.datalink);
        RMdatalink.util.globalMethods.fillListDataByListObject(eCatlogList,discountsData.ecatalog);
        RMdatalink.util.globalMethods.fillListDataByListObject(smartCartList,discountsData.smartcart);
        RMdatalink.util.globalMethods.fillListDataByListObject(rmplcList,discountsData.rmplc);
        RMdatalink.util.globalMethods.fillListDataByListObject(irugzList,discountsData.irugz);
        RMdatalink.util.globalMethods.fillListDataByListObject(previousDiscountsList,discountsData.previousDiscounts);
        }



        }
        catch(ex){}
    },

    saveCommentForDiscount: function(field, list) {
        var discountsMasterStore = Ext.getStore('discountsMasterStore');

                var id = field.getAttribute('data-id') ;
                var comment = field.value ;

        switch(list){

            case "discountsDataLink":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsDataLinkTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                record.set('comment',comment);
                store.sync();
                updateDiscountsDataLink(store);

                break;

             case "discountsEcatlogTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsEcatlogTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                record.set('comment',comment);
                store.sync();

                updateDiscountsEcatalog(store);

                break;

             case "discountsSmartCartTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsSmartCartTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                record.set('comment',comment);
                store.sync();

                updateDiscountsSmartcart(store);

                break;

             case "discountsRMPLCTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsRMPLCTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                record.set('comment',comment);
                store.sync();

                updateDiscountsRmplc(store);

                break;


             case "discountsIrugzTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsIrugzTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                record.set('comment',comment);
                store.sync();

                updateDiscountsIrugz(store);

                break;


             case "discountsSidePreviousTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsSidePreviousTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                record.set('comment',comment);
                store.sync();

                updateDiscountsPreviousDiscounts(store);

                break;
        }



        function updateDiscountsDataLink(store){
                    var discountRecord = discountsMasterStore.findRecord("datalink",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("datalink",records);
        }

        function updateDiscountsEcatalog(store){
                    var discountRecord = discountsMasterStore.findRecord("ecatalog",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("ecatalog",records);
        }

        function updateDiscountsSmartcart(store){
                    var discountRecord = discountsMasterStore.findRecord("smartcart",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("smartcart",records);
        }

        function updateDiscountsRmplc(store){
                    var discountRecord = discountsMasterStore.findRecord("rmplc",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("rmplc",records);
        }
        function updateDiscountsIrugz(store){
                    var discountRecord = discountsMasterStore.findRecord("irugz",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("irugz",records);
        }

        function updateDiscountsPreviousDiscounts(store){
                    var discountRecord = discountsMasterStore.findRecord("previousDiscounts",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("previousDiscounts",records);
        }
    },

    deleteDiscount: function(id, type) {

        if(Ext.getCmp("alertPopUp"))
            Ext.getCmp("alertPopUp").destroy();

        var popup = Ext.widget('alertPopUp');
        popup.setItemId("alertForDiscountDelete");
        popup.down('#alertPopUpMsg').setHtml('Would you like to delete this record?');
        popup.show();

        popup.discountId = id ;
        popup.discountType = type ;

        /*
        var discountsMasterStore = Ext.getStore('discountsMasterStore');
        alert(id);
        switch(type){

            case "discountsDataLink":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsDataLinkTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                store.sync();
                updateDiscountsDataLink(store);

                break;

             case "discountsEcatlogTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsEcatlogTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                store.sync();

                updateDiscountsEcatalog(store);

                break;

             case "discountsSmartCartTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsSmartCartTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                store.sync();

                updateDiscountsSmartcart(store);

                break;

             case "discountsRMPLCTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsRMPLCTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
               store.remove(record);
                store.sync();

                updateDiscountsRmplc(store);

                break;


             case "discountsIrugzTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsIrugzTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                store.sync();

                updateDiscountsIrugz(store);

                break;


             case "discountsSidePreviousTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsSidePreviousTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                //record.set('comment',comment);
                store.sync();

                updateDiscountsPreviousDiscounts(store);

                break;
        }



        function updateDiscountsDataLink(store){
                    var discountRecord = discountsMasterStore.findRecord("datalink",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("datalink",records);
        }

        function updateDiscountsEcatalog(store){
                    var discountRecord = discountsMasterStore.findRecord("ecatalog",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("ecatalog",records);
        }

        function updateDiscountsSmartcart(store){
                    var discountRecord = discountsMasterStore.findRecord("smartcart",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("smartcart",records);
        }

        function updateDiscountsRmplc(store){
                    var discountRecord = discountsMasterStore.findRecord("rmplc",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("rmplc",records);
        }
        function updateDiscountsIrugz(store){
                    var discountRecord = discountsMasterStore.findRecord("irugz",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("irugz",records);
        }

        function updateDiscountsPreviousDiscounts(store){
                    var discountRecord = discountsMasterStore.findRecord("previousDiscounts",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("previousDiscounts",records);
        }


        */
    },

    saveRetailersDetailedView: function() {
        var rtDtlTabPanel = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0] ;

        if(rtDtlTabPanel.getActiveItem().getItemId() == "RDCRMTab" ){

            Ext.ComponentQuery.query('#RDTechSupportSaveBtn')[0].fireEvent('tap');
            return ;
        }



        if(this.config.isCmpContactProfile){

             if(!validateRepsProfile()){

                    Ext.Msg.alert('Error', 'Marked Fields Are Mandatory/Invalid', Ext.emptyFn);
                    return ;
                }
                else if(!RMdatalink.app.getController('RetailerDeatilsDataSet').validationForComContactInputFields())
                {
                    Ext.Msg.alert('Error', 'Invalid Inputs For Marked Fields.', Ext.emptyFn);
                    return ;
                }


        function validateRepsProfile(){
            var validationResult = true ;

            RMdatalink.app.getController('RetailerDeatilsDataSet').removeErrorClsForContactCompany();

            var rfName = Ext.ComponentQuery.query('#CmpContactProfileFirstName')[0];
            var rlName = Ext.ComponentQuery.query('#CmpContactProfileLastName')[0];
            var remail = Ext.ComponentQuery.query('#CmpContactProfileEmail')[0];

            if( remail.length !== 0 && !Ext.data.Validations.email(remail, remail.getValue()))
            {
                remail.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
                validationResult = false ;

            }

            if( rfName.getValue().length == 0 )
            {
                rfName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
                validationResult = false ;

            }

            if( rlName.getValue().length == 0 )
            {
                rlName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
                validationResult = false ;
            }


            return validationResult ;
        }





            this.config.isCmpContactProfile = false ;
            var svBtn =  Ext.ComponentQuery.query('#CmpContactProfileEditBtn')[0] ;
            svBtn.fireEvent('tap',svBtn) ;
           // return ;
        }




        //TRANSFER THIS CODE TO A CONTROLLER
        //REMOVE LINKING IN OREDER TO DETECT THE INSTANCE
        //OR CREATE FILTER FOR DIFFERENTIATING INSTANCE WITHOUT THE USING ITEMID OR INDEX
        //REASON FOR ITEMID :WILL BE SAME FOR ALL LINKED ELEMENT
        //INDEX WILL BE HARDCODING

        // FILTERING IS NOT APPLIED HERE AT THIS MOMENT.


        // ***  FIRST  CHECK MANDATORY FIELDS  *******


        var that = this ;

        if(!this.validationForNewRecord())
        {
            Ext.Msg.alert('Error', 'Marked Fields Are Mandatory.', Ext.emptyFn);
            return ;
        }

        else if(!this.validationOfInputFields())
        {
            console.log("validationOfInputFields  ");
            Ext.Msg.alert('Error', 'Invalid Inputs For Marked Fields.', Ext.emptyFn);
            return;

        }
        // AFTER CHAECKED ALL VALIDATION
            else
            {
                if(that.config.accNoChk < 1 || that.config.accNoChk > 1 )
                {
                    that.config.accNoChk = 1 ;
                    that.checkForDuplicateAccountNo() ;
                    return ;
                }

                 that.config.accNoChk = 0 ;
                //*******************
                var isRetailerDetailsView = RMdatalink.app.getController('UINav').isRetailerDetailsView;
                var masterStore =  isRetailerDetailsView ? Ext.getStore('retailersMaster'):Ext.getStore('vendors.Master');

                var TEST =  this.setTempRecordForRetailerOrVendor();
                var selectedRow = RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();

                //RMdatalink.util.globalConfig.setDataInRetailerScreenForSaveOrCancel( {}  );

                console.log("selectedRow" ,selectedRow);

                if(Object.keys(selectedRow).length){

                    var storeIndex = masterStore.findExact('id',selectedRow.record.data.id);
                    var recordInMasterStore = selectedRow.record ; //masterStore.getAt(storeIndex);

                    if(TEST.store_products){

                        var temp_store_status = false ;

                        if(TEST.store_products.datalink_status && TEST.store_products.datalink_status == "ACTIVE")
                        {
                           temp_store_status =true ;

                           TEST.store_products_datalink = true  ;
                        }
                        if(TEST.store_products.ecatalog_status && TEST.store_products.ecatalog_status == "ACTIVE"){

                             temp_store_status =true ;
                            TEST.store_products_ecatalog = true  ;
                        }
                        if(TEST.store_products.ecommerce_status && TEST.store_products.ecommerce_status == "ACTIVE"){
                            temp_store_status =true ;
                            TEST.store_products_smart_cart = true  ;
                        }

                        if(TEST.store_products.irugs_status && TEST.store_products.irugs_status == "ACTIVE"){
                            temp_store_status =true ;
                            TEST.store_products_irugs = true  ;
                        }

                        if(TEST.store_products.rmpro_status && TEST.store_products.rmpro_status == "ACTIVE"){
                            temp_store_status =true ;
                            TEST.store_products_rm_plc = true  ;
                        }

                        if(temp_store_status)
                        {
                            TEST.store_status = "ACTIVE" ;
                        }



                    }

                    /*

                    store_products_datalink: true
                    store_products_ecatalog: false
                    store_products_irugs: true
                    store_products_rm_plc: false
                    store_products_smart_cart: false
                    */


                    //***** WHEN CHANGED ITS STORE STATUS  ****
                 /*  if(isRetailerDetailsView && recordInMasterStore.data.store_status !== TEST.store_status)
                    {

                        switch(recordInMasterStore.data.store_status) {
                            case 'ACTIVE':

                                Ext.getStore('retailerUsers').remove(recordInMasterStore);
                                break;

                            case 'INACTIVE':

                                Ext.getStore('retailerInactive').remove(recordInMasterStore);
                                break;

                            case 'PROSPECTS':

                                Ext.getStore('retailerProspects').remove(recordInMasterStore);
                                break;

                            case 'PENDING':

                                Ext.getStore('retailerPending').remove(recordInMasterStore);
                                break;

                        }

                        switch(TEST.store_status) {
                            case 'ACTIVE':

                                Ext.getStore('retailerUsers').add(recordInMasterStore);
                                break;

                            case 'INACTIVE':

                                Ext.getStore('retailerInactive').add(recordInMasterStore);
                                break;

                            case 'PROSPECTS':

                                Ext.getStore('retailerProspects').add(recordInMasterStore);
                                break;

                             case 'HOT_PROSPECTS':

                                Ext.getStore('hotProspectsTab').add(recordInMasterStore);
                                break;

                            case 'PENDING':

                                Ext.getStore('retailerPending').add(recordInMasterStore);
                                break;

                        }

                    }*/
                    //************
                    try{
                    TEST.id = recordInMasterStore.get('id');
                    }catch(ex){
                        console.error(ex);
                    }
                    TEST._id = recordInMasterStore.get('_id');

                    if(isRetailerDetailsView)
                    {
                        TEST.store_monthly_subscription = recordInMasterStore.get('store_monthly_subscription');
                        TEST.store_note = recordInMasterStore.get('store_note');
                        TEST.store_inactive_reason = recordInMasterStore.get('store_inactive_reason');
                        TEST.store_pending_approval = recordInMasterStore.get('store_pending_approval');
                        TEST.store_created_in_past = recordInMasterStore.get('store_created_in_past');
                        TEST.store_modified_in_past = recordInMasterStore.get('store_modified_in_past');



                    }
                    else
                    {

                        tempCollections = TEST.collections  ;
                        tempDesign =   TEST.design  ;
                        tempSKU = TEST.SKU  ;




                        delete(TEST.collections) ;
                        delete(TEST.design)  ;
                        delete(TEST.SKU)  ;

                        var importFrmCsvController = RMdatalink.app.getController('ImportCSV') ;

                        TEST.retailers = importFrmCsvController.config.retailerForVendor ;


                        TEST.vendor_monthly_subscription = recordInMasterStore.get('store_monthly_subscription');
                        TEST.vendor_note = recordInMasterStore.get('store_note');
                        TEST.vendor_inactive_reason = recordInMasterStore.get('store_inactive_reason');
                        TEST.vendor_pending_approval = recordInMasterStore.get('store_pending_approval');
                        TEST.vendor_created_in_past = recordInMasterStore.get('store_created_in_past');
                        TEST.vendor_modified_in_past = recordInMasterStore.get('store_modified_in_past');
                    }

                    TEST.user_since = recordInMasterStore.get('user_since');
                    TEST.last_login = recordInMasterStore.get('last_login');
                    TEST.last_export = recordInMasterStore.get('last_export');
                    TEST.order_no = recordInMasterStore.get('order_no');
                    TEST.reseller = recordInMasterStore.get('reseller');
                    console.log("Edited TEST " ,TEST);

                    delete(TEST._id) ;

                    delete(TEST.user_since) ;
                    delete(TEST.created_by) ;




                    Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });




                    var retailerEcommerceForm = Ext.ComponentQuery.query("#retailerEcommerceForm")[0];
                    if(retailerEcommerceForm){

                       var  value = retailerEcommerceForm.getValues();
                       var vipVendorListInEComm = Ext.ComponentQuery.query("#vipVendorListInEComm")[0];
                       if(vipVendorListInEComm && vipVendorListInEComm.getStore())   {



                           value.additional_vendors =  getAccountNoAndNameOfVIPVendors() ; //getRawFromList('vipVendorListInEComm') ;//vipVendorListInEComm.getStore().getData();

                       }

                        var vipVendorProgramListInEComm = Ext.ComponentQuery.query("#vipVendorProgramListInEComm")[0];
                        if(vipVendorProgramListInEComm   &&   vipVendorProgramListInEComm.getStore()){

        //                    value.programs =     vipVendorProgramListInEComm.getData();
                            value.programs =  getRawFromList('vipVendorProgramListInEComm') ;// vipVendorProgramListInEComm.getStore().getData();

                        }


                        var backGround_Logo_Image = Ext.ComponentQuery.query("#backGround_Logo_Image")[0];
                        var dom = backGround_Logo_Image.element.dom;
                        var img = dom.childNodes[0];
                        value.logo = img.src;
                        TEST.e_commerce_info = value;

                    }
                    console.log(TEST);
                    RMdatalink.iwa.rdl.doUpdateCollection(masterStore, TEST , recordInMasterStore.get('_id'), suc, err);


                    function suc(){

                         Ext.Viewport.setMasked(false);
                        onUpdateSuccess();


                    }
                    function err(){
                            Ext.Viewport.setMasked(false);
                    }
                }
                else {

                    if(!this.validationForNewRecord())
                    {
                        Ext.Msg.alert('Error', 'Marked Fields Are Mandatory.', Ext.emptyFn);
                        return;
                    }

                    Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });

                    TEST.id = masterStore.getAllCount()+1;

                    function successCallBack(newRecordFromServer){

                      //  Ext.Viewport.setMasked(false);
                        onAddnewSuccess() ;

                    }


                    function errorCallBack(){
                        Ext.Viewport.setMasked(false);
                        Ext.Msg.alert('Failuer.', 'Failed to add new Record.', Ext.emptyFn);
                    }

                    RMdatalink.util.DataLoader.sendNewRecordForRetailerToServer(TEST,masterStore,successCallBack,errorCallBack) ;
                }


            }//ELSE CLOSE


        var tempCollections;
        var tempDesign;
        var tempSKU;
        function onUpdateSuccess(){
                that.disableEnableComponents(true) ;
                    if(isRetailerDetailsView)
                    {


                            that.config.isVendorUpdated = true ;

                          RMdatalink.app.getController('Main').updateRetailerRecords("ALL",TEST,recordInMasterStore.get('_id')) ;
                          that.setRtlAccDtl() ;

                        //updateRespectiveRetailer(recordInMasterStore.get('_id')) ;

                    }
                    else{

                        TEST.collections = tempCollections;
                        TEST.design = tempDesign;
                        TEST.SKU =tempSKU;

                        that.config.isVendorUpdated = true ;

                        recordInMasterStore.set(TEST);
                    }




                    that.config.isVendorUpdated = true ;
                      recordInMasterStore.set(TEST);
                    recordInMasterStore.dirty= true;

                    that.config.recordToUpdate = recordInMasterStore ;
                    var index  = masterStore.findExact('_id',TEST._id);
                    var record = masterStore.getAt(index);
                    var globToSet = setVariable();

                    function setVariable(){

                        return {

                            placeClicked:  'Store_nameDelegateClassForTap',
                            record:record,
                            index:index
                        };
                    }
                    if(isRetailerDetailsView)
                    {

                        RMdatalink.app.getController('PaginationController').loadDependentStoresonMaster('retailersMaster');
                        //RMdatalink.util.globalMethods.fillDataFromMasterStore("retailersMaster");
                    }

                    //  ***  BACK TO MAIN VIEW ***********
                    //RMdatalink.app.getController('UINav').onBackTextTap() ;


                    Ext.Msg.alert('Success.', 'Record Updated Successfuly.', Ext.emptyFn);


        }

        function updateRespectiveRetailer(_id){

            var tempStore = null;
            var recIn = -1;
            tempStore = Ext.getStore('retailerUsers') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tempStore.getAt(recIn).set(TEST);
            }

                tempStore = Ext.getStore('retailerPending') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tempStore.getAt(recIn).set(TEST);
            }


                tempStore = Ext.getStore('retailerHotProspects') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tempStore.getAt(recIn).set(TEST);
            }


                tempStore = Ext.getStore('retailerProspects') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tempStore.getAt(recIn).set(TEST);
            }


                tempStore = Ext.getStore('retailerInactive') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tempStore.getAt(recIn).set(TEST);
            }


                tempStore = Ext.getStore('retailersMaster') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tempStore.getAt(recIn).set(TEST);
            }



        }

        function onAddnewSuccess(){
              that.disableEnableComponents(true) ;

            if(isRetailerDetailsView){

                  RMdatalink.app.getController('SearchController').config.defaultSearchString = TEST.store_name ;
                  RMdatalink.app.getController('SearchController').config.defaultStoreStatus = TEST.store_status ;
                  RMdatalink.app.getController('SearchController').config.isFromRetailerDetail = true ;
                  RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('retailersMaster') ;
                  Ext.Viewport.setMasked(false) ;
                 doRtSearch() ;

            }else{

                     Ext.Viewport.setMasked(false);
                   RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('vendors.Master') ;

                RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),false);
            }
             //     RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),false);


                        RMdatalink.app.getController('UINav').onBackTextTap() ;

                 if(!isRetailerDetailsView){
                        Ext.Msg.alert('Success.', 'Record Added Successfully.', Ext.emptyFn);
                 }


        }

        function doRtSearch(){
           var retailersTabPanel = Ext.ComponentQuery.query('#retailersTabPanel')[0] ;
           retailersTabPanel.setActiveItem(5) ;

           var allRetailerTab =   Ext.ComponentQuery.query('#allRetailerTab')[0] ;

           var SearchController = RMdatalink.app.getController('SearchController') ;

           allRetailerTab.down('#rtVdrsSearchFld').setValue(TEST.store_name) ;

            Ext.Function.defer(startSearch, 1000, that );

            function startSearch(){
                var searchBtn = allRetailerTab.down('#retailersVendorsSerchBtn') ;
                 searchBtn.fireEvent('tap',searchBtn) ;
            }

        }


    },

    setTplOnlineInSideContainerList: function(isRetailerDetailsView) {
        ///  CLEAR THE VALUES STORE IN VARIABLE FOR ACCOUNT NO


        clearAccountValues();


        this.setTplOnlineInECommerceSedeContainerList(isRetailerDetailsView);


        var component = Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0];
        var InStoreHeaders = component.down("#RDInStoreVendorsTab").down("#headerList");
        var OnlineHeaders = component.down("#RDOnlineVendorsTab").down("#headerList");
        InStoreHeaders.setData([{}]);
        OnlineHeaders.setData([{}]);
        var headerTpl , listTpl ;
        var tplOfInStoreHeader;
        var tplOfInlist;

        if(isRetailerDetailsView)
        {  /* <input type="text" name="fname"> */
            headerTpl = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 8%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 24%;" data-name="vendor_name">Name<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="collections">Collections<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="design">Designs<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="SKU">SKUs<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '    <div style="width: 15%;" data-name="no_of_images">Images<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="no_of_additional_images">Addl Images<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '</div>'
                                  );
            tplOfInStoreHeader = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 8%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 15%;" data-name="vendor_name">Acct. No<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="vendor_name">Name<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="collections">Collections<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="design">Designs<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="SKU">SKUs<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '    <div style="width: 15%;" data-name="no_of_images">Images<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="no_of_additional_images">Addl Images<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '</div>'
                                  );



            listTpl = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 8%;">',
                                 '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                 '    </div>',
                                 '    <div style="width: 24%;">{vendor_name}</div>',
                                 '    <div style="width: 15%;">{collections}</div>',
                                 '    <div style="width: 15%;">{design}</div>',
                                 '    <div style="width: 15%;">{SKU}</div>',

                                 '    <div style="width: 15%;">{no_of_images}</div>',
                                 '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                 '</div>'
                                );

            tplOfInlist = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 8%;">',
                                 '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                 '    </div>',
                                     '<div type ="text" style="width:15%;"  >{Account_No}</div>',
                                 '    <div style="width: 15%;">{vendor_name}</div>',
                                 '    <div style="width: 15%;">{collections}</div>',
                                 '    <div style="width: 15%;">{design}</div>',
                                 '    <div style="width: 15%;">{SKU}</div>',

                                 '    <div style="width: 15%;">{no_of_images}</div>',
                                 '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                 '</div>'
                                );


        // /
        }
        else
        {
            headerTpl = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 12%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 35%;" data-name="store_name">Name</div>',
                                   '    <div style="width: 30%;" data-name="store_city">City</div>',
                                   '    <div style="width: 15%;" data-name="store_state">State</div>',

                                   '</div>'
                                  );
            tplOfInStoreHeader = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 12%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 35%;" data-name="store_name">Name</div>',
                                   '    <div style="width: 30%;" data-name="store_city">City</div>',
                                   '    <div style="width: 15%;" data-name="store_state">State</div>',

                                   '</div>'
                                  );


            listTpl = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 12%;">',
                                 '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                 '    </div>',
                                 '    <div style="width: 35%;">{store_name}</div>',
                                 '    <div style="width: 30%;">{store_city}</div>',
                                  '    <div style="width: 15%;">{store_state}</div>',
                                 '</div>'
                                );
            tplOfInlist = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 12%;">',
                                 '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                 '    </div>',
                                 '    <div style="width: 35%;">{store_name}</div>',
                                 '    <div style="width: 30%;">{store_city}</div>',
                                  '    <div style="width: 15%;">{store_state}</div>',
                                 '</div>'
                                );


        // /vendors.Master

        }


        InStoreHeaders.setItemTpl(tplOfInStoreHeader);
        OnlineHeaders.setItemTpl(headerTpl);
        InStoreHeaders.refresh();
        OnlineHeaders.refresh();

        var InStoreList = component.down("#RDInStoreVendorsTab").down('#mainList');
        var OnlineList = component.down("#RDOnlineVendorsTab").down('#mainList');

        InStoreList.setItemHeight(22);
        OnlineList.setItemHeight(22);
        InStoreList.setMode('MULTI');
        OnlineList.setMode('MULTI');
        InStoreList.addCls('x-rm-rdvendorslist');
        OnlineList.addCls('x-rm-rdvendorslist');

        InStoreList.setStore('retailersStoreVendors');//

        console.error("STORE CONNECTED TO LIST SET TPL CONTAINER LIST");

        if(isRetailerDetailsView)
        {
            OnlineList.setStore('vendors.Master');
        }else{
             //OnlineList.setStore('retailersMaster');
            OnlineList.setStore('retailers.prospectRTForVendor');
        }



        //OnlineList.setStore('retailersOnlineStoreVendors');
        InStoreList.config.isUserEditionPermitted = false;
        InStoreList.setItemTpl(tplOfInlist);
        OnlineList.setItemTpl(listTpl);





    },

    setTplOnlineInECommerceSedeContainerList: function(isRetailerDetailsView) {
        var component = Ext.ComponentQuery.query('#RDForECommerce')[0];
        var InStoreHeaders = component.down("#RDInStoreVendorsTab").down("#headerList");
        var OnlineHeaders = component.down("#RDOnlineVendorsTab").down("#headerList");
        InStoreHeaders.setData([{}]);
        OnlineHeaders.setData([{}]);
        var headerTpl , listTpl ;
        var tplOfInStoreHeader;
        var tplOfInlist;


        //RDForECommerce
        if(isRetailerDetailsView)
        {  /* <input type="text" name="fname"> */
            headerTpl = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 8%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 24%;" data-name="vendor_name">Name<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="collections">Collections<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="design">Designs<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="SKU">SKUs<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '    <div style="width: 15%;" data-name="no_of_images">Images<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="no_of_additional_images">Addl Images<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '</div>'
                                  );
            tplOfInStoreHeader = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 8%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 15%;" data-name="vendor_name">Acct. No<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="vendor_name">Name<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="collections">Collections<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="design">Designs<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="SKU">SKUs<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '    <div style="width: 15%;" data-name="no_of_images">Images<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="no_of_additional_images">Addl Images<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '</div>'
                                  );



            listTpl = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 8%;">',
                                 '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                 '    </div>',
                                 '    <div style="width: 24%;">{vendor_name}</div>',
                                 '    <div style="width: 15%;">{collections}</div>',
                                 '    <div style="width: 15%;">{design}</div>',
                                 '    <div style="width: 15%;">{SKU}</div>',

                                 '    <div style="width: 15%;">{no_of_images}</div>',
                                 '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                 '</div>'
                                );

            tplOfInlist = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 8%;">',
                                 '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                 '    </div>',
                                     '<div type ="text" style="width:15%;"  >{Account_No}</div>',
                                 '    <div style="width: 15%;">{vendor_name}</div>',
                                 '    <div style="width: 15%;">{collections}</div>',
                                 '    <div style="width: 15%;">{design}</div>',
                                 '    <div style="width: 15%;">{SKU}</div>',

                                 '    <div style="width: 15%;">{no_of_images}</div>',
                                 '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                 '</div>'
                                );


        // /
        }
        else
        {
            headerTpl = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 12%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 35%;" data-name="store_name">Name</div>',
                                   '    <div style="width: 30%;" data-name="store_city">City</div>',
                                   '    <div style="width: 15%;" data-name="store_state">State</div>',

                                   '</div>'
                                  );
            tplOfInStoreHeader = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 12%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 35%;" data-name="store_name">Name</div>',
                                   '    <div style="width: 30%;" data-name="store_city">City</div>',
                                   '    <div style="width: 15%;" data-name="store_state">State</div>',

                                   '</div>'
                                  );


            listTpl = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 12%;">',
                                 '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                 '    </div>',
                                 '    <div style="width: 35%;">{store_name}</div>',
                                 '    <div style="width: 30%;">{store_city}</div>',
                                  '    <div style="width: 15%;">{store_state}</div>',
                                 '</div>'
                                );
            tplOfInlist = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 12%;">',
                                 '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                 '    </div>',
                                 '    <div style="width: 35%;">{store_name}</div>',
                                 '    <div style="width: 30%;">{store_city}</div>',
                                  '    <div style="width: 15%;">{store_state}</div>',
                                 '</div>'
                                );


        // /vendors.Master

        }


        InStoreHeaders.setItemTpl(tplOfInStoreHeader);
        OnlineHeaders.setItemTpl(headerTpl);
        InStoreHeaders.refresh();
        OnlineHeaders.refresh();

        var InStoreList = component.down("#RDInStoreVendorsTab").down('#mainList');
        var OnlineList = component.down("#RDOnlineVendorsTab").down('#mainList');

        InStoreList.setItemHeight(22);
        OnlineList.setItemHeight(22);
        InStoreList.setMode('MULTI');
        OnlineList.setMode('MULTI');
        InStoreList.addCls('x-rm-rdvendorslist');
        OnlineList.addCls('x-rm-rdvendorslist');

        //InStoreList.setStore('retailersStoreVendors');//

        console.error("STORE CONNECTED TO LIST E COMMERCE LIST");

        if(isRetailerDetailsView)
        {
        //    OnlineList.setStore('vendors.Master');
             OnlineList.setData(    getArrayFromStore(Ext.getStore('vendors.Master')));
        }else{
             //OnlineList.setStore('retailersMaster');
        //    OnlineList.setStore('retailers.prospectRTForVendor');
        //    OnlineList.setData(    getArrayFromStore(Ex.getStore('vendors.Master')));

        }



        //OnlineList.setStore('retailersOnlineStoreVendors');
        InStoreList.config.isUserEditionPermitted = false;
        InStoreList.setItemTpl(tplOfInlist);

        var inStoreListStore = InStoreList.getStore();
        OnlineList.setItemTpl(listTpl);
        InStoreList.refresh();
        OnlineList.refresh();
        if(inStoreListStore){
            inStoreListStore.removeAll();
        }

        this.setTplOnlineEcommVipList(isRetailerDetailsView);
    },

    setTplOnlineEcommVipList: function(isRetailerDetailsView) {
        var component = Ext.ComponentQuery.query('#RDForVIP')[0];
        var InStoreHeaders = component.down("#RDInStoreVendorsTab").down("#headerList");
        var OnlineHeaders = component.down("#RDOnlineVendorsTab").down("#headerList");
        InStoreHeaders.setData([{}]);
        OnlineHeaders.setData([{}]);
        var headerTpl , listTpl ;
        var tplOfInStoreHeader;
        var tplOfInlist;


        //RDForECommerce
        if(isRetailerDetailsView)
        {  /* <input type="text" name="fname"> */
            headerTpl = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 8%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 24%;" data-name="vendor_name">Name<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="collections">Collections<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="design">Designs<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="SKU">SKUs<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '    <div style="width: 15%;" data-name="no_of_images">Images<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="no_of_additional_images">Addl Images<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '</div>'
                                  );
            tplOfInStoreHeader = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 8%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 15%;" data-name="vendor_name">Acct. No<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="vendor_name">Name<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="collections">Collections<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="design">Designs<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="SKU">SKUs<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '    <div style="width: 15%;" data-name="no_of_images">Images<img src="resources/images/button_icons/downArrow.png"/></div>',
                                   '    <div style="width: 15%;" data-name="no_of_additional_images">Addl Images<img src="resources/images/button_icons/downArrow.png"/></div>',

                                   '</div>'
                                  );



            listTpl = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 8%;">',
                                 '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                 '    </div>',
                                 '    <div style="width: 24%;">{vendor_name}</div>',
                                 '    <div style="width: 15%;">{collections}</div>',
                                 '    <div style="width: 15%;">{design}</div>',
                                 '    <div style="width: 15%;">{SKU}</div>',

                                 '    <div style="width: 15%;">{no_of_images}</div>',
                                 '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                 '</div>'
                                );

            tplOfInlist = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 8%;">',
                                 '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                 '    </div>',
                                     '<div type ="text" style="width:15%;"  >{Account_No}</div>',
                                 '    <div style="width: 15%;">{vendor_name}</div>',
                                 '    <div style="width: 15%;">{collections}</div>',
                                 '    <div style="width: 15%;">{design}</div>',
                                 '    <div style="width: 15%;">{SKU}</div>',

                                 '    <div style="width: 15%;">{no_of_images}</div>',
                                 '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                 '</div>'
                                );


        // /
        }
        else
        {
            headerTpl = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 12%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 35%;" data-name="store_name">Name</div>',
                                   '    <div style="width: 30%;" data-name="store_city">City</div>',
                                   '    <div style="width: 15%;" data-name="store_state">State</div>',

                                   '</div>'
                                  );
            tplOfInStoreHeader = Ext.create('Ext.XTemplate',
                                   '<div class="x-rm-listtpl-main">',
                                   '    <div style="width: 12%;">',
                                   '        <div style="width: 20px;" data-name="all"></div>',
                                   '    </div>',
                                   '    <div style="width: 35%;" data-name="store_name">Name</div>',
                                   '    <div style="width: 30%;" data-name="store_city">City</div>',
                                   '    <div style="width: 15%;" data-name="store_state">State</div>',

                                   '</div>'
                                  );


            listTpl = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 12%;">',
                                 '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                 '    </div>',
                                 '    <div style="width: 35%;">{store_name}</div>',
                                 '    <div style="width: 30%;">{store_city}</div>',
                                  '    <div style="width: 15%;">{store_state}</div>',
                                 '</div>'
                                );
            tplOfInlist = Ext.create('Ext.XTemplate',
                                 '<div class="x-rm-listtpl-main pointerCursor">',
                                 '    <div style="width: 12%;">',
                                 '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                 '    </div>',
                                 '    <div style="width: 35%;">{store_name}</div>',
                                 '    <div style="width: 30%;">{store_city}</div>',
                                  '    <div style="width: 15%;">{store_state}</div>',
                                 '</div>'
                                );


        // /vendors.Master

        }


        InStoreHeaders.setItemTpl(tplOfInStoreHeader);
        OnlineHeaders.setItemTpl(headerTpl);
        InStoreHeaders.refresh();
        OnlineHeaders.refresh();

        var InStoreList = component.down("#RDInStoreVendorsTab").down('#mainList');
        var OnlineList = component.down("#RDOnlineVendorsTab").down('#mainList');

        InStoreList.setItemHeight(22);
        OnlineList.setItemHeight(22);
        InStoreList.setMode('MULTI');
        OnlineList.setMode('MULTI');
        InStoreList.addCls('x-rm-rdvendorslist');
        OnlineList.addCls('x-rm-rdvendorslist');

        //InStoreList.setStore('retailersStoreVendors');//

        console.error("STORE CONNECTED TO LIST E COMMERCE LIST");

        if(isRetailerDetailsView)
        {
        //    OnlineList.setStore('vendors.Master');
             OnlineList.setData(    getArrayFromStore(Ext.getStore('vendors.Master')));
        }else{
             //OnlineList.setStore('retailersMaster');
        //    OnlineList.setStore('retailers.prospectRTForVendor');
        //    OnlineList.setData(    getArrayFromStore(Ex.getStore('vendors.Master')));

        }



        //OnlineList.setStore('retailersOnlineStoreVendors');
        InStoreList.config.isUserEditionPermitted = false;
        InStoreList.setItemTpl(tplOfInlist);

        var inStoreListStore = InStoreList.getStore();
        OnlineList.setItemTpl(listTpl);
        InStoreList.refresh();
        OnlineList.refresh();
        if(inStoreListStore){
            inStoreListStore.removeAll();
        }


    },

    setTemplateOfListByEditingMode: function(isEditing) {
            this.setTemplateOfEcommerceTabListByEditingMode(isEditing);




        var component = Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0];
        var tplOfInlist;
        var InStoreList = component.down("#RDInStoreVendorsTab").down('#mainList');
        var isRetailerDetailsView = RMdatalink.app.getController('UINav').isRetailerDetailsView;
        if(isEditing){
            if(isRetailerDetailsView)
            {





                tplOfInlist = Ext.create('Ext.XTemplate',
                                     '<div class="x-rm-listtpl-main pointerCursor">',
                                     '    <div style="width: 8%;">',
                                     '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                     '    </div>',
                                         '<input type ="text" class = "inputAccountNo"  style="max-width: 60px;margin-right:2px;" onkeyup="onKeyDownOfAccountNo(event)"  vendorId =  {vendor_id}  value={Account_No} />',
                                     '    <div style="width: 15%;">{vendor_name}</div>',
                                     '    <div style="width: 15%;">{collections}</div>',
                                     '    <div style="width: 15%;">{design}</div>',
                                     '    <div style="width: 15%;">{SKU}</div>',

                                     '    <div style="width: 15%;">{no_of_images}</div>',
                                     '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                     '</div>'
                                    );


            }
            else
            {

                tplOfInlist = Ext.create('Ext.XTemplate',
                                     '<div class="x-rm-listtpl-main pointerCursor">',
                                     '    <div style="width: 12%;">',
                                     '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                     '    </div>',
                                     '    <div style="width: 35%;">{store_name}</div>',
                                     '    <div style="width: 30%;">{store_city}</div>',
                                      '    <div style="width: 15%;">{store_state}</div>',
                                     '</div>'
                                    );




            }

        }else{


            if(isRetailerDetailsView)
            {





                tplOfInlist = Ext.create('Ext.XTemplate',
                                         '<div class="x-rm-listtpl-main pointerCursor">',
                                         '    <div style="width: 8%;">',
                                         '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                         '    </div>',
                                         '<div type ="text"  style="width:15%;"  >{Account_No}</div>',
                                         '    <div style="width: 15%;">{vendor_name}</div>',
                                         '    <div style="width: 15%;">{collections}</div>',
                                         '    <div style="width: 15%;">{design}</div>',
                                         '    <div style="width: 15%;">{SKU}</div>',

                                         '    <div style="width: 15%;">{no_of_images}</div>',
                                         '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                         '</div>'
                                        );


            }
            else
            {

                tplOfInlist = Ext.create('Ext.XTemplate',
                                         '<div class="x-rm-listtpl-main pointerCursor">',
                                         '    <div style="width: 12%;">',
                                         '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                         '    </div>',
                                         '    <div style="width: 35%;">{store_name}</div>',
                                         '    <div style="width: 30%;">{store_city}</div>',
                                         '    <div style="width: 15%;">{store_state}</div>',
                                         '</div>'
                                        );




            }









        }



            InStoreList.config.isUserEditionPermitted = isEditing;
            InStoreList.setItemTpl(tplOfInlist);



        /*
        vendorId =  {vendor_id}  value={Account_No} />',
        */
        var store =  InStoreList.getStore();
        if(isEditing && store){

            var data = store.getData();
            for(var i=0;i<data.all.length ; i++){

                var rec = data.all[i];
                var vendor_id = rec.data.vendor_id;
                var Account_No = rec.data.Account_No;
                    vendorIdAccountValue[vendor_id] = Account_No;
            }
        }

    },

    setTemplateOfEcommerceTabListByEditingMode: function(isEditing) {
        clearAccountValues();
        var component = Ext.ComponentQuery.query('#RDForECommerce')[0];
        var tplOfInlist;
        var InStoreList = component.down("#RDInStoreVendorsTab").down('#mainList');
        var isRetailerDetailsView = RMdatalink.app.getController('UINav').isRetailerDetailsView;
        if(isEditing){
            if(isRetailerDetailsView)
            {





                tplOfInlist = Ext.create('Ext.XTemplate',
                                     '<div class="x-rm-listtpl-main pointerCursor">',
                                     '    <div style="width: 8%;">',
                                     '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                     '    </div>',
                                         '<input type ="text" class = "inputAccountNo"    style="max-width: 60px;margin-right:2px;"  onkeyup="onKeyDownOfAccountNoECommerce(event)"  vendorId =  {vendor_id}  value={Account_No} />',
                                     '    <div style="width: 15%;">{vendor_name}</div>',
                                     '    <div style="width: 15%;">{collections}</div>',
                                     '    <div style="width: 15%;">{design}</div>',
                                     '    <div style="width: 15%;">{SKU}</div>',

                                     '    <div style="width: 15%;">{no_of_images}</div>',
                                     '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                     '</div>'
                                    );


            }
            else
            {

                tplOfInlist = Ext.create('Ext.XTemplate',
                                     '<div class="x-rm-listtpl-main pointerCursor">',
                                     '    <div style="width: 12%;">',
                                     '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                     '    </div>',
                                     '    <div style="width: 35%;">{store_name}</div>',
                                     '    <div style="width: 30%;">{store_city}</div>',
                                      '    <div style="width: 15%;">{store_state}</div>',
                                     '</div>'
                                    );




            }

        }else{


            if(isRetailerDetailsView)
            {





                tplOfInlist = Ext.create('Ext.XTemplate',
                                         '<div class="x-rm-listtpl-main pointerCursor">',
                                         '    <div style="width: 8%;">',
                                         '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                         '    </div>',
                                         '<div type ="text"  style="width:15%;"  >{Account_No}</div>',
                                         '    <div style="width: 15%;">{vendor_name}</div>',
                                         '    <div style="width: 15%;">{collections}</div>',
                                         '    <div style="width: 15%;">{design}</div>',
                                         '    <div style="width: 15%;">{SKU}</div>',

                                         '    <div style="width: 15%;">{no_of_images}</div>',
                                         '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                         '</div>'
                                        );


            }
            else
            {

                tplOfInlist = Ext.create('Ext.XTemplate',
                                         '<div class="x-rm-listtpl-main pointerCursor">',
                                         '    <div style="width: 12%;">',
                                         '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                         '    </div>',
                                         '    <div style="width: 35%;">{store_name}</div>',
                                         '    <div style="width: 30%;">{store_city}</div>',
                                         '    <div style="width: 15%;">{store_state}</div>',
                                         '</div>'
                                        );




            }









        }



            InStoreList.config.isUserEditionPermitted = isEditing;
            InStoreList.setItemTpl(tplOfInlist);
            InStoreList.refresh();



        var store =  InStoreList.getStore();
        if(isEditing && store){

            var data = store.getData();
            for(var i=0;i<data.all.length ; i++){

                var rec = data.all[i];
                var vendor_id = rec.data.vendor_id;
                var Account_No = rec.data.Account_No;
                    vendorIdAccountValueEComm[vendor_id] = Account_No;
            }
        }
        this.setTemplateOfEcommVipListEditingMode(isEditing);
    },

    setTemplateOfEcommVipListEditingMode: function(isEditing) {
        //clearAccountValues();
        var component = Ext.ComponentQuery.query('#RDForVIP')[0];
        var tplOfInlist;
        var InStoreList = component.down("#RDInStoreVendorsTab").down('#mainList');
        var isRetailerDetailsView = RMdatalink.app.getController('UINav').isRetailerDetailsView;
        if(isEditing){
            if(isRetailerDetailsView)
            {





                tplOfInlist = Ext.create('Ext.XTemplate',
                                     '<div class="x-rm-listtpl-main pointerCursor">',
                                     '    <div style="width: 8%;">',
                                     '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                     '    </div>',
                                         '<input type ="text" class = "inputAccountNo"    style="max-width: 60px;margin-right:2px;"  onkeyup="onKeyDownOfAccountNoVIP(event)"  vendorId =  {_id}  value={Account_No} />',
                                     '    <div style="width: 15%;">{vendor_name}</div>',
                                     '    <div style="width: 15%;">{collections}</div>',
                                     '    <div style="width: 15%;">{design}</div>',
                                     '    <div style="width: 15%;">{SKU}</div>',

                                     '    <div style="width: 15%;">{no_of_images}</div>',
                                     '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                     '</div>'
                                    );


            }
            else
            {

                tplOfInlist = Ext.create('Ext.XTemplate',
                                     '<div class="x-rm-listtpl-main pointerCursor">',
                                     '    <div style="width: 12%;">',
                                     '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                     '    </div>',
                                     '    <div style="width: 35%;">{store_name}</div>',
                                     '    <div style="width: 30%;">{store_city}</div>',
                                      '    <div style="width: 15%;">{store_state}</div>',
                                     '</div>'
                                    );




            }

        }else{


            if(isRetailerDetailsView)
            {





                tplOfInlist = Ext.create('Ext.XTemplate',
                                         '<div class="x-rm-listtpl-main pointerCursor">',
                                         '    <div style="width: 8%;">',
                                         '        <div style="width: 19px; height:19px;" class="fireListSelect"></div>',
                                         '    </div>',
                                         '<div type ="text"  style="width:15%;"  >{Account_No}</div>',
                                         '    <div style="width: 15%;">{vendor_name}</div>',
                                         '    <div style="width: 15%;">{collections}</div>',
                                         '    <div style="width: 15%;">{design}</div>',
                                         '    <div style="width: 15%;">{SKU}</div>',

                                         '    <div style="width: 15%;">{no_of_images}</div>',
                                         '    <div style="width: 15%;">{no_of_additional_images}</div>',
                                         '</div>'
                                        );


            }
            else
            {

                tplOfInlist = Ext.create('Ext.XTemplate',
                                         '<div class="x-rm-listtpl-main pointerCursor">',
                                         '    <div style="width: 12%;">',
                                         '        <div style="width: 20px; height:20px;"class="fireListSelect"></div>',
                                         '    </div>',
                                         '    <div style="width: 35%;">{store_name}</div>',
                                         '    <div style="width: 30%;">{store_city}</div>',
                                         '    <div style="width: 15%;">{store_state}</div>',
                                         '</div>'
                                        );




            }









        }



            InStoreList.config.isUserEditionPermitted = isEditing;
            InStoreList.setItemTpl(tplOfInlist);
            InStoreList.refresh();



        var store =  InStoreList.getStore();
        if(isEditing && store)
        {

            var data = store.getData();
            for(var i=0;i<data.all.length ; i++){

                var rec = data.all[i];
                var vendor_id = rec.data._id;
                var Account_No = rec.data.Account_No;
                    vendorIdAccountValueVIP[vendor_id] = Account_No;
            }
        }

    },

    actionVisitProfile: function(index, record) {
        this.config.activeIndex = index ;

        var selectedUserRecord = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;

        Ext.ComponentQuery.query('#RDUserProfileForm')[0].setDisabled(true) ;
        Ext.ComponentQuery.query('#RDUserProfileRelationDetailsForm')[0].setDisabled(true);

        var managerUSers ;

        this.unFillTipsData();

        if(  Ext.getStore('vendor.REPsDetails').getCount() === index)
        {
            managerUSers = null;

        }
        else
        {
            console.log(record.data);
            managerUSers = record.data ;
            //*********  FILL SIDE CONTAINER DO / DO NOT / FOLLOWS UP / NOTES  ******
            this.fillTipsData(managerUSers);

        }

        fillUserProfile(managerUSers);
        fillUserRelationData(managerUSers);

        Ext.ComponentQuery.query('#RDUsersTab')[0].setActiveItem(1);

            var rfName = Ext.ComponentQuery.query('#RDUserProfileFirstName')[0];
            var rlName = Ext.ComponentQuery.query('#RDUserProfileLastName')[0];
            var remail = Ext.ComponentQuery.query('#RDUserProfileEmail')[0];



            rfName.removeCls('x-rm-rdformErrorPanel');
            rfName.addCls('x-rm-rdformpanel');

            rlName.removeCls('x-rm-rdformErrorPanel');
            rlName.addCls('x-rm-rdformpanel');

            remail.removeCls('x-rm-rdformErrorPanel');
            remail.addCls('x-rm-rdformpanel');



        var container = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0] ;
        var sideContainer = container.parent.down('#RDSideContainer');
        var storeSideContainer = sideContainer.down('#RDStoreSideContainer');
        var managerSideContainer = sideContainer.down('#RDManagerSideContainer');
        var crmNotesSideContainer = sideContainer.down('#RDCRMNotesSideContainer');
        var userProfileSideContainer = sideContainer.down('#RDUserProfileSideContainer');
        Ext.ComponentQuery.query('#RDUserProfileEditBtn')[0].setText("EDIT");

        sideContainer.setHidden(false);
        storeSideContainer.setHidden(true);
        managerSideContainer.setHidden(true);
        crmNotesSideContainer.setHidden(true);
        userProfileSideContainer.setHidden(false);


        function fillUserProfile(managerUSers){

            var profilePicView = Ext.ComponentQuery.query('#RDUserProfileImage')[0];
            profilePicView.setSrc(managerUSers === null ? '' :managerUSers.tu_image_url).setHidden(false) ;

            Ext.ComponentQuery.query('#RDUSerProfileFileFieldForImage')[0].setHidden(true);
            Ext.ComponentQuery.query('#RDUserProfileStoreName')[0].setValue('');
            Ext.ComponentQuery.query('#RDUserProfileFirstName')[0].setValue(managerUSers === null ? '' : managerUSers.tu_firstname);
            Ext.ComponentQuery.query('#RDUserProfileLastName')[0].setValue(managerUSers === null ? '' : managerUSers.tu_lastname);
            Ext.ComponentQuery.query('#RDUserProfileEmail')[0].setValue(managerUSers === null ? '' : managerUSers.tu_email);
            Ext.ComponentQuery.query('#RDUserProfilePhone')[0].setValue(managerUSers === null ? '' : managerUSers.tu_phone);
            Ext.ComponentQuery.query('#RDUserProfilePhoneExt')[0].setValue(managerUSers === null ? '' : managerUSers.tu_phone_ext);
            Ext.ComponentQuery.query('#RDUserProfileCellPhone')[0].setValue(managerUSers === null ? '' : managerUSers.tu_cellphone);
            Ext.ComponentQuery.query('#RDUserProfileCellPhoneExt')[0].setValue(managerUSers === null ? '' : managerUSers.tu_cellphone_ext);
            Ext.ComponentQuery.query('#RDTUserProfileAddress')[0].setValue(managerUSers === null ? '' : managerUSers.tu_address);
            Ext.ComponentQuery.query('#RDTUserProfileSuite')[0].setValue(managerUSers === null ? '' : managerUSers.tu_address_suite);
            Ext.ComponentQuery.query('#RDUserProfileZip')[0].setValue(managerUSers === null ? '' : managerUSers.tu_zip);
            Ext.ComponentQuery.query('#RDUserProfileCity')[0].setValue(managerUSers === null ? '' : managerUSers.tu_city);
            Ext.ComponentQuery.query('#RDUserProfileState')[0].setValue(managerUSers === null ? '' : managerUSers.tu_state);
            Ext.ComponentQuery.query('#RDUserProfileTerritory')[0].setValue(managerUSers === null ? '' : managerUSers.tu_territory);
            Ext.ComponentQuery.query('#RDUserProfileLinkedIn')[0].setValue(managerUSers === null ? '' :managerUSers.tu_linkedIn);
            Ext.ComponentQuery.query('#RDUserProfileFacebook')[0].setValue(managerUSers === null ? '' :managerUSers.tu_facebook);
            Ext.ComponentQuery.query('#RDUserProfileTwitter')[0].setValue(managerUSers === null ? '' :managerUSers.tu_twitter);
        }


        function fillUserRelationData(managerUSers){
            Ext.ComponentQuery.query('#RDUserProfileDYrsAtStore')[0].setValue(managerUSers === null ? '' : managerUSers.tu_relationsheep_details.rd_years_at_store);
            Ext.ComponentQuery.query('#RDUserProfileWife')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_wife);
            Ext.ComponentQuery.query('#RDUserProfileRelatives')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_relatives);
            Ext.ComponentQuery.query('#RDUserProfileHobbies')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_hobbies);
            Ext.ComponentQuery.query('#RDUserProfileCarOfChoice')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_car_of_choice);
            Ext.ComponentQuery.query('#RDUserProfileAltPhone')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_alt_phone);
            Ext.ComponentQuery.query('#RDUserProfileAltEmail')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.d_alt_email);
            Ext.ComponentQuery.query('#RDUserProfileWebsite')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_website);
            Ext.ComponentQuery.query('#RDUserProfileChild1Name')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_childs[0].child_name);
            Ext.ComponentQuery.query('#RDUserProfileChild2Name')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_childs[1].child_name);
            Ext.ComponentQuery.query('#RDUserProfileChild1Age')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_childs[0].child_age);
            Ext.ComponentQuery.query('#RDUserProfileChild2Age')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_childs[1].child_age);
            Ext.ComponentQuery.query('#RDUserProfilePartner1')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_partner[0].partner_name);
            Ext.ComponentQuery.query('#RDUserProfilePartner2')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.rd_partner[1].partner_name);
            Ext.ComponentQuery.query('#RDMRDUserAniversaryMonth')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.aniversary);
            Ext.ComponentQuery.query('#RDUserProfileDOBMonth')[0].setValue(managerUSers === null ? '' :managerUSers.tu_relationsheep_details.dob);
        }




    },

    actionVisitCompanyProfile: function(index, record) {
        this.config.isCmpContactProfile = true ;


        this.config.CmpContactactiveIndex = index ;

        var selectedUserRecord = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;

        //Ext.ComponentQuery.query('#CmpContactProfileForm')[0].setDisabled(false) ;
        //Ext.ComponentQuery.query('#CmpContactProfileRelationDetailsForm')[0].setDisabled(true);

        var managerUSers ;

        //this.unfillTipsData();
        unfillMAnagerRelationData();
        unsetTipsSideContainer();

        if(  Ext.getStore('vendor.CompanyContactStore').getCount() === index)
        {
            managerUSers = null;

        }
        else
        {
            console.log(record.data);
            managerUSers = record.data ;
            //*********  FILL SIDE CONTAINER DO / DO NOT / FOLLOWS UP / NOTES  ******
            this.fillTipsData(managerUSers);

        }

        fillUserProfile(managerUSers);
        fillMAnagerRelationData(managerUSers);

        setTipsSideContainer(managerUSers);

        Ext.ComponentQuery.query('#CmpContactTab')[0].setActiveItem(1);

            var rfName = Ext.ComponentQuery.query('#CmpContactProfileFirstName')[0];
            var rlName = Ext.ComponentQuery.query('#CmpContactProfileLastName')[0];
            var remail = Ext.ComponentQuery.query('#CmpContactProfileEmail')[0];



            rfName.removeCls('x-rm-rdformErrorPanel');
            rfName.addCls('x-rm-rdformpanel');

            rlName.removeCls('x-rm-rdformErrorPanel');
            rlName.addCls('x-rm-rdformpanel');

            remail.removeCls('x-rm-rdformErrorPanel');
            remail.addCls('x-rm-rdformpanel');



        var container = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0] ;
        var sideContainer = container.parent.down('#RDSideContainer');
        var storeSideContainer = sideContainer.down('#RDStoreSideContainer');
        var managerSideContainer = sideContainer.down('#RDManagerSideContainer');
        var crmNotesSideContainer = sideContainer.down('#RDCRMNotesSideContainer');
        var userProfileSideContainer = sideContainer.down('#RDUserProfileSideContainer');
        var blueBookSideContainer = sideContainer.down('#RDBlueBookContainer');


        Ext.ComponentQuery.query('#CmpContactProfileEditBtn')[0].setText("DONE");

            sideContainer.setHidden(false);
            storeSideContainer.setHidden(true);
            managerSideContainer.setHidden(false);
            crmNotesSideContainer.setHidden(true);
            userProfileSideContainer.setHidden(true);
            blueBookSideContainer.setHidden(true);


        function fillUserProfile(managerUSers){

            var profilePicView = Ext.ComponentQuery.query('#CmpContactProfileImage')[0];
            profilePicView.setSrc(managerUSers === null ? '' :managerUSers.companycontact_image_url).setHidden(false) ;
            //  Ext.ComponentQuery.query('#CmpContactProfileFileFieldForImage')[0].setHidden(true);
            //  Ext.ComponentQuery.query('#CmpContactProfileStoreName')[0].setValue('');
            Ext.ComponentQuery.query('#CmpContactProfileFirstName')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_firstname);
            Ext.ComponentQuery.query('#CmpContactProfileLastName')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_lastname);
            Ext.ComponentQuery.query('#CmpContactProfileEmail')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_email);
            Ext.ComponentQuery.query('#CmpContactProfilePhone')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_phone);
            Ext.ComponentQuery.query('#CmpContactProfileDirectExt')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_phone_ext);
            Ext.ComponentQuery.query('#CmpContactProfileAddress')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_address);
            Ext.ComponentQuery.query('#CmpContactProfileSuite')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_address_suite);
            Ext.ComponentQuery.query('#CmpContactProfileZip')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_zip);

            Ext.ComponentQuery.query('#CmpContactProfileCity')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_city);
            Ext.ComponentQuery.query('#CmpContactProfileState')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_state);

            Ext.ComponentQuery.query('#CmpContactProfilePosition')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_position);
            Ext.ComponentQuery.query('#CmpContactProfileCellPhone')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_cellphone);
            Ext.ComponentQuery.query('#CmpContactProfileCellExt')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_cellphone_ext);

            Ext.ComponentQuery.query('#CmpContactProfileLinkedIn')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_linkedIn);
            Ext.ComponentQuery.query('#CmpContactProfileFacebook')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_facebook);
            Ext.ComponentQuery.query('#CmpContactProfileTwitter')[0].setValue(managerUSers === null ? '' : managerUSers.companycontact_twitter);
            // RMdatalink.util.globalMethods.fillListData('#RDUserProfileActivityList',managerUSers.tu_recent_activity);
        }



        function unfillMAnagerRelationData(){

            Ext.ComponentQuery.query('#RDMRDYrsAtStore')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDWife')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDRelatives ')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDHobbies')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDCarOfChoice')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDAltPhone ')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDAltEmail')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDWebsite')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDChild1Name')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDChild2Name')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDChild1Age')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDChild2Age')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDPartner1')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDPartner2')[0].setValue('');



            Ext.ComponentQuery.query('#RDMRDAniversaryMonth')[0].setValue('');
            Ext.ComponentQuery.query('#RDMRDDOBMonth')[0].setValue('');

        }




        function fillMAnagerRelationData(managerUSers){
             if(!managerUSers)
            {
                return ;
            }

            try{

            var userData = managerUSers ;

                if(userData.companycontact_relationsheep_details)     {
            var year , wife ;

                year = userData.companycontact_relationsheep_details.manager_rd_years_at_store;
                wife = userData.companycontact_relationsheep_details.manager_rd_wife;


            if( Ext.ComponentQuery.query('#RDMRDYrsAtStore')){
                Ext.ComponentQuery.query('#RDMRDYrsAtStore')[0].setValue(year);
            }
            Ext.ComponentQuery.query('#RDMRDWife')[0].setValue(wife);

            Ext.ComponentQuery.query('#RDMRDRelatives')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_relatives);

            Ext.ComponentQuery.query('#RDMRDHobbies')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_hobbies);

            Ext.ComponentQuery.query('#RDMRDCarOfChoice')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_car_of_choice);

            Ext.ComponentQuery.query('#RDMRDAltPhone')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_alt_phone);

            Ext.ComponentQuery.query('#RDMRDAltEmail')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_alt_email);
            Ext.ComponentQuery.query('#RDMRDWebsite')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_website);
            if(Ext.ComponentQuery.query('#RDMRDChild1Name')){Ext.ComponentQuery.query('#RDMRDChild1Name')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_childs[0].child_name);}
            if(Ext.ComponentQuery.query('#RDMRDChild2Name')){Ext.ComponentQuery.query('#RDMRDChild2Name')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_childs[1].child_name);}
            //  Ext.ComponentQuery.query('#RDMRDChild3Name')[0].setValue(userData.manager_rd_childs[2].child_name);
            if(Ext.ComponentQuery.query('#RDMRDChild1Age')){Ext.ComponentQuery.query('#RDMRDChild1Age')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_childs[0].child_age);}
            if(Ext.ComponentQuery.query('#RDMRDChild2Age')){Ext.ComponentQuery.query('#RDMRDChild2Age')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_childs[1].child_age);}
            // Ext.ComponentQuery.query('#RDMRDChild3Age')[0].setValue(userData.manager_rd_childs[2].child_age);

            if(Ext.ComponentQuery.query('#RDMRDPartner1')){Ext.ComponentQuery.query('#RDMRDPartner1')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_partner[0].partner_name);}
            if(Ext.ComponentQuery.query('#RDMRDPartner2')){Ext.ComponentQuery.query('#RDMRDPartner2')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_partner[1].partner_name);}

                Ext.ComponentQuery.query('#RDMRDAniversaryMonth')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_aniversary);
                Ext.ComponentQuery.query('#RDMRDDOBMonth')[0].setValue(userData.companycontact_relationsheep_details.manager_rd_dob);



                }
                }
            catch(ex){
                console.error(ex);
            }
        }


        function setTipsSideContainer(managerUSers){

            if(!managerUSers)
            {
                return ;
            }

            var doDontsStore = Ext.getStore('notifications.managerTipsdodonts');
            var followUpsStore = Ext.getStore('notifications.managerTipsfollowsup');

            if(managerUSers.companycontact_dos_and_donts.length > 1)
            {

                doDontsStore.removeAll();
                doDontsStore.sync();

                doDontsStore.setData(managerUSers.companycontact_dos_and_donts);
                doDontsStore.sync();
            }

            if(managerUSers.companycontact_follow_ups.length > 1){
                followUpsStore.removeAll();
                followUpsStore.sync();

                followUpsStore.setData(managerUSers.companycontact_follow_ups);
                followUpsStore.sync();
            }
            Ext.ComponentQuery.query('#RDManagerBlueStickyTextArea')[0].setValue(managerUSers.companycontact_blue_notes);

        }


        function unsetTipsSideContainer(){

            var doDontsStore = Ext.getStore('notifications.managerTipsdodonts');
            var followUpsStore = Ext.getStore('notifications.managerTipsfollowsup');

            doDontsStore.removeAll();
            doDontsStore.sync();


            followUpsStore.removeAll();
            followUpsStore.sync();

           var tempDatad = new Array();
            tempDatad =  [
                        {
                            "notification": ""
                        },
                        {
                            "notification": ""
                        },
                        {
                            "notification": ""
                        },
                        {
                            "notification": ""
                        }
                    ];

               var tempDataf = new Array();
            tempDataf =  [
                        {
                            "notification": ""
                        },
                        {
                            "notification": ""
                        },
                        {
                            "notification": ""
                        }
                    ];

             doDontsStore.setData(tempDatad);
            doDontsStore.sync();


            followUpsStore.setData(tempDataf);
            followUpsStore.sync();

            Ext.ComponentQuery.query('#RDManagerBlueStickyTextArea')[0].setValue('');

        }

                Ext.ComponentQuery.query('#CmpContactProfileFileFieldForImage1')[0].setDisabled(false);
                var mangerForm = Ext.ComponentQuery.query('#CmpContactProfileForm')[0];
               // mangerForm.setDisabled(false) ;
               // Ext.ComponentQuery.query('#RDManagerRelationDetailsForm')[0].setDisabled(false);

        if(RMdatalink.app.getController('RetailerDeatilsDataSet').config.isEditMode){

            RMdatalink.app.getController('RetailerDeatilsDataSet').disableEnableComponents(false);
            mangerForm.setDisabled(false) ;
        }else{

            RMdatalink.app.getController('RetailerDeatilsDataSet').disableEnableComponents(true);
            mangerForm.setDisabled(true) ;
        }
    },

    setTempRecordForRetailerOrVendor: function() {
        var isRetailerDetailsView = RMdatalink.app.getController('UINav').isRetailerDetailsView;


        var crmUser = RMdatalink.app.getController('LoginHandler').config.userDetails.userName ;

        var rdTabPanel = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0];

        var rdStoreTab = rdTabPanel.down('#RDStoresTab');
        var rdManagerTab = rdTabPanel.down('#RDManagerTab');
        var rdManagerDetailsTab = Ext.ComponentQuery.query('#ManagerProfileSideContainer')[0].down('#ActRDManagerRelDetailsTab');
        var rdUsersTab = rdTabPanel.down('#RDUsersTab');
        var rdCRMTab = rdTabPanel.down('#RDCRMTab');
        var rdNotesTab = rdTabPanel.down('#RDNotesTab');

        var TEST = {
            "id":158,
            "user_since":RMdatalink.util.globalMethods.getToday(),
            "created_by":crmUser,
            "last_login":"",
            "last_export":"",
            "order_no":"1002",
            "reseller":"",
            "manager_dos_and_donts":getSpecificDataFromList('ActRDManagerDosDontList'),
            "manager_follow_ups":getSpecificDataFromList('ActRDManagerFollowUpsLists'),
            "manager_blue_note":Ext.ComponentQuery.query('#ActRDManagerBlueStickyTextArea')[0].getValue(),
            "dos_and_donts":getSpecificDataFromStore('notificationsTipsDoDonts'),
            "follow_ups":getSpecificDataFromStore('notificationsTipsFollowsup'),
            "blue_note":Ext.ComponentQuery.query('#RDCRMNotesBlueStickyTextArea')[0].getValue(),
            "manager_photo_url": rdManagerTab.down('#RDManagerAddPhotoImage').getSrc(),
            "manager_firstname": rdManagerTab.down('#RDManagerFirstName').getValue(),
            "manager_lastname": rdManagerTab.down('#RDManagerLastName').getValue(),
            "manager_email": rdManagerTab.down('#RDManagerEmail').getValue(),
            "manager_phone": rdManagerTab.down('#RDManagerPhone').getValue()?rdManagerTab.down('#RDManagerPhone').getValue():"",
            "manager_phone_ext": rdManagerTab.down('#RDManagerPhoneExt').getValue()?rdManagerTab.down('#RDManagerPhoneExt').getValue():"",
            "manager_address_suite" : rdManagerTab.down('#RDManagerSuite').getValue()?rdManagerTab.down('#RDManagerSuite').getValue():"",
            "manager_address" : rdManagerTab.down('#RDManagerAddress').getValue()?rdManagerTab.down('#RDManagerAddress').getValue():"",
            "manager_city" : rdManagerTab.down('#ActMgrCity').getValue()?rdManagerTab.down('#ActMgrCity').getValue():"",
            "manager_state" : rdManagerTab.down('#ActMgrState').getValue()?rdManagerTab.down('#ActMgrState').getValue():"",
            "manager_zip" :  rdManagerTab.down('#ActMgrZip').getValue()?rdManagerTab.down('#ActMgrZip').getValue():"",
            "manager_direct_number" : rdManagerTab.down('#RDManagerDirectPhone').getValue()?rdManagerTab.down('#RDManagerDirectPhone').getValue():"",
             "manager_direct_number_ext" : rdManagerTab.down('#RDManagerDirectPhoneExt').getValue()?rdManagerTab.down('#RDManagerDirectPhoneExt').getValue():"",
            "manager_linkedin": rdManagerTab.down('#RDManagerLinkedIn').getValue(),
            "manager_facebook": rdManagerTab.down('#RDManagerFacebook').getValue(),
            "manager_twitter": rdManagerTab.down('#RDManagerTwitter').getValue(),
            "manager_rd_aniversary":  Ext.ComponentQuery.query('#ActRDMRDAniversaryMonth')[0].getValue(),// getDate('ActRDMRDAniversaryMonth','ActRDMRDAniversaryDay','ActRDMRDAniversaryYear'),
            "manager_rd_relatives": rdManagerDetailsTab.down('#ActRDMRDRelatives').getValue(),
            "manager_rd_dob":   Ext.ComponentQuery.query('#ActRDMRDDOBMonth')[0].getValue(),//getDate('ActRDMRDDOBMonth','ActRDMRDDOBDay','ActRDMRDDOBYear'),
            "manager_rd_hobbies": rdManagerDetailsTab.down('#ActRDMRDHobbies').getValue(),
            "manager_rd_car_of_choice": rdManagerDetailsTab.down('#ActRDMRDCarOfChoice').getValue(),
            "manager_rd_alt_phone": rdManagerDetailsTab.down('#ActRDMRDAltPhone').getValue()?rdManagerDetailsTab.down('#ActRDMRDAltPhone').getValue():"",
            "manager_rd_alt_email": rdManagerDetailsTab.down('#ActRDMRDAltEmail').getValue(),
            "manager_rd_website": rdManagerDetailsTab.down('#ActRDMRDWebsite').getValue(),
            "photos":getSpecificDataFromStore('retailersDetailsPhotos'),
            "attachments":getSpecificDataFromStore('retailersDetailsAttachments'),
            "notes":getSpecificDataFromStore('retailersDetailsNotes'),
            "crms": getSpecificDataFromStore('RDCRM'),
            "manager_recent_activity": rdManagerTab.down('#RDManagerActivityList').getData(),
            "manager_rd_childs": [
                {
                    "child_name": rdManagerDetailsTab.down('#ActRDMRDChild1Name').getValue(),
                    "child_age": rdManagerDetailsTab.down('#ActRDMRDChild1Age').getValue()?rdManagerDetailsTab.down('#ActRDMRDChild1Age').getValue():""
                },
                {
                    "child_name": rdManagerDetailsTab.down('#ActRDMRDChild2Name').getValue(),
                    "child_age": rdManagerDetailsTab.down('#ActRDMRDChild2Age').getValue()?rdManagerDetailsTab.down('#ActRDMRDChild2Age').getValue():""
                },
                {
                    "child_name": rdManagerDetailsTab.down('#ActRDMRDChild3Name').getValue(),
                    "child_age": rdManagerDetailsTab.down('#ActRDMRDChild3Age').getValue()?rdManagerDetailsTab.down('#ActRDMRDChild3Age').getValue():""
                }
            ],
            "manager_rd_partner": [
                {
                    "partner_name": rdManagerDetailsTab.down('#ActRDMRDPartner1').getValue()
                },
                {
                    "partner_name": rdManagerDetailsTab.down('#ActRDMRDPartner2').getValue()
                }
            ],
            "reps_bluebook_teamusers": getUsersDataInArray()
        };



            TEST.company_contacts = getSpecificDataFromStore('vendor.CompanyContactStore') ;


        if(isRetailerDetailsView){

            this.config.isAdditionalInfoMoreFldsTap =true ;
            TEST.additional_fields = RMdatalink.app.getController('inhouse.DetailScreenController').
                                      getOtherInhoseUserDetails() ;

               this.config.isAdditionalInfoMoreFldsTap = false  ;
            TEST.manager_position = Ext.ComponentQuery.query('#ActRDMPositionId')[0].getValue() ;
        /*
             Ext.ComponentQuery.query('#RDStoreType')[0].getValue();
             Ext.ComponentQuery.query('#RDStoreLocations')[0].getValue();
             Ext.ComponentQuery.query('#RDStoreEmployees')[0].getValue();
             Ext.ComponentQuery.query('#RDStoreYrsInBusiness')[0].getValue();
             Ext.ComponentQuery.query('#RDStorePercProg')[0].getValue();
             Ext.ComponentQuery.query('#RDStorePercKind')[0].getValue();
             Ext.ComponentQuery.query('#RDStoreAdvertising')[0].getValue();
             Ext.ComponentQuery.query('#RDStoreMoBudget')[0].getValue();

        */
        }else{


          TEST.manager_position = Ext.ComponentQuery.query('#ActRDMPositionId')[0].getValue() ;
          TEST.design =  Ext.ComponentQuery.query('#RDStoreDesign')[0].getValue();
          TEST.SKU =   Ext.ComponentQuery.query('#RDStoreSKU')[0].getValue();
          TEST.no_of_rugs_images =   Ext.ComponentQuery.query('#RDStoreNoOfRugsImages')[0].getValue();
          TEST.no_of_additional_images =   Ext.ComponentQuery.query('#RDStoreNoOfAdditionalImages')[0].getValue();
          TEST.collections =   Ext.ComponentQuery.query('#RDStoreCollections')[0].getValue();



        }






        // *****  SET TEMP RECORD  FOR  RETAILER  **********
        if(isRetailerDetailsView)
        {


        var activeList  = Ext.ComponentQuery.query('#RDInStoreVendorsTab')[0].down("#mainList");

        var activeStore = activeList.getStore() ;


        var vendors = getArrayFromVendorStore(activeStore);

            TEST.vendors = vendors ;





            TEST.locations = this.getLocationData() ;

            var additionalInfoTab = Ext.ComponentQuery.query('#retailerAdditionalInfoTab')[0] ;

           // TEST.store_in_store_vendors = getSpecificDataFromStore('retailersStoreVendors');
           // TEST.store_online_vendors = getSpecificDataFromStore('retailersOnlineStoreVendors');

            TEST.manager_rd_years_at_store = rdManagerDetailsTab.down('#ActRDMRDYrsAtStore').getValue()?rdManagerDetailsTab.down('#ActRDMRDYrsAtStore').getValue():"";
            TEST.manager_rd_wife = rdManagerDetailsTab.down('#ActRDMRDWife').getValue();

            TEST.store_logo =  rdStoreTab.down('#RDUsersStoreLogoImage').getSrc();
            TEST.store_name = rdStoreTab.down('#RDStoreName').getValue();
            TEST.store_owner_firstname = rdStoreTab.down('#RDStoreOwner').getValue()?rdStoreTab.down('#RDStoreOwner').getValue().split(' ')[0]:"";
            TEST.store_owner_lastname = rdStoreTab.down('#RDStoreOwner').getValue().split(' ').length>1?rdStoreTab.down('#RDStoreOwner').getValue().split(' ')[1]:"";
            TEST.store_address_line1 =rdStoreTab.down('#RDStoreAddress').getValue();
            TEST.store_address_suite = rdStoreTab.down('#RDStoreSuite').getValue();
            TEST.store_city = rdStoreTab.down('#RDStoreCity').getValue();
            TEST.store_state = rdStoreTab.down('#RDStoreState').getValue();
            TEST.store_zip = rdStoreTab.down('#RDStoreZip').getValue()?rdStoreTab.down('#RDStoreZip').getValue():"";
            TEST.store_fax = rdStoreTab.down('#RDStoreFax').getValue()?rdStoreTab.down('#RDStoreFax').getValue():"";
            TEST.store_email =  rdStoreTab.down('#RDStoreEmail').getValue();
            TEST.store_phone = rdStoreTab.down('#RDStorePhone').getValue()?rdStoreTab.down('#RDStorePhone').getValue():"";
            TEST.store_phone_ext = rdStoreTab.down('#RDStorePhoneExt').getValue()?rdStoreTab.down('#RDStorePhoneExt').getValue():"";
            TEST.store_website = rdStoreTab.down('#RDStoreWebsite').getValue();
            TEST.store_type= rdStoreTab.down('#RDStoreType').getValue();
            TEST.store_size_sq_ft= rdStoreTab.down('#RDStoreSize').getValue()?rdStoreTab.down('#RDStoreSize').getValue():"";
            TEST.store_location= rdStoreTab.down('#RDStoreLocations').getValue()?rdStoreTab.down('#RDStoreLocations').getValue():"";

            TEST.store_employees= additionalInfoTab.down('#RDStoreEmployees').getValue()?additionalInfoTab.down('#RDStoreEmployees').getValue():"";
            TEST.store_yr_business= additionalInfoTab.down('#RDStoreYrsInBusiness').getValue()?additionalInfoTab.down('#RDStoreYrsInBusiness').getValue():"";
            TEST.store_inventory_tool= additionalInfoTab.down('#RDStoreInventoryTool').getValue();
            TEST.store_accounting_tool= additionalInfoTab.down('#RDStoreAccountingTool').getValue();
            TEST.store_alt_bussiness= additionalInfoTab.down('#RDStoreAltBusiness').getValue();
            TEST.store_percent_program= additionalInfoTab.down('#RDStorePercProg').getValue()?additionalInfoTab.down('#RDStorePercProg').getValue():"";
            TEST.store_percent_oneof_kind= additionalInfoTab.down('#RDStorePercKind').getValue()?additionalInfoTab.down('#RDStorePercKind').getValue():"";
            TEST.store_advertising= additionalInfoTab.down('#RDStoreAdvertising').getValue();
            TEST.store_monthly_budget= additionalInfoTab.down('#RDStoreMoBudget').getValue()?additionalInfoTab.down('#RDStoreMoBudget').getValue():"";



            TEST.store_challenges= additionalInfoTab.down('#rtAdditionalInfoChallenges').getValue();

            TEST.store_monthly_subscription= "";
            TEST.store_status= Ext.ComponentQuery.query('#RDStoreStatusList')[0].getSelection()[0].data.StatusName;
            TEST.store_note= "";
            TEST.store_inactive_reason= "";
            TEST.store_pending_approval= "";
            TEST.store_products_datalink= false;
            TEST.store_products_ecatalog= false;
            TEST.store_products_smart_cart= false;
            TEST.store_products_rm_plc= false;
            TEST.store_products_irugs= false;
            TEST.store_created_in_past= new Date();
            TEST.store_modified_in_past= "";
            TEST.store_performance = rdStoreTab.down('#RDStoreTabPerformance').getSelection()[0].data.storeperf.toUpperCase();

             TEST.account_no = Ext.ComponentQuery.query('#RDAccountDetails')[0].getValue();

            TEST.store_products = {

                datalink_status : Ext.ComponentQuery.query('#rtDatalinkStatusSelFld')[0].getValue(),
                ecatalog_status :Ext.ComponentQuery.query('#rtEcatalogStatusSelFld')[0].getValue(),
                ecommerce_status :Ext.ComponentQuery.query('#rtECommerceStatusSelFld')[0].getValue(),
                rmpro_status :Ext.ComponentQuery.query('#rtRM_proStatusSelFld')[0].getValue(),
                irugs_status : Ext.ComponentQuery.query('#rtirugzStatusSelFld')[0].getValue(),
                vip_status: Ext.ComponentQuery.query('#rtVipStatusSelFld')[0].getValue()

            };


            var storeProductsViewItems = Ext.ComponentQuery.query('#RDStoreProductsList')[0].getViewItems();
            /*for(var i=0;i<storeProductsViewItems.length;i++) {

                var checkbox = storeProductsViewItems[i].element.dom.querySelector('input[type="checkbox"]');
                switch(checkbox.getAttribute('data-name')) {
                    case 'Datalink':
                        TEST.store_products_datalink = checkbox.checked;
                        break;
                    case 'ECatalog':
                        TEST.store_products_ecatalog = checkbox.checked;
                        break;
                    case 'E-Commerce':
                        TEST.store_products_smart_cart = checkbox.checked;
                        break;
                    case 'RM PRO':
                        TEST.store_products_rm_plc = checkbox.checked;
                        break;
                    case 'iRugz':
                        TEST.store_products_irugs = checkbox.checked;
                        break;
                }
            }*/
        }
        // *****  SET TEMP RECORD  FOR  VENDOR  **********
        else
        {
          //  TEST.vendor_in_store_retailers = [] ;//getSpecificDataFromStore('retailersStoreVendors');
           // TEST.vendor_online_retailers = []; // getSpecificDataFromStore('retailersOnlineStoreVendors');


            TEST.vendor_resources = Ext.ComponentQuery.query('#RDVendorResourceTxtArea')[0].getValue();

               TEST.vendor_facebook = Ext.ComponentQuery.query('#RDStoreWebsiteFbFld')[0].getValue();
               TEST.vendor_twitter =  Ext.ComponentQuery.query('#RDStoreWebsiteTwFld')[0].getValue();
              TEST.vendor_linkedin =  Ext.ComponentQuery.query('#RDStoreWebsiteLnFld')[0].getValue();



           TEST.account_details = Ext.ComponentQuery.query('#RDAccountDetails')[0].getValue();

            TEST.manager_rd_years_at_co = rdManagerDetailsTab.down('#ActRDMRDYrsAtStore').getValue()?rdManagerDetailsTab.down('#ActRDMRDYrsAtStore').getValue():"";
            TEST.manager_rd_sig_other = rdManagerDetailsTab.down('#ActRDMRDWife').getValue();

            TEST.vendor_logo =  rdStoreTab.down('#RDUsersStoreLogoImage').getSrc();
            TEST.vendor_name = rdStoreTab.down('#RDStoreName').getValue();
            TEST.vendor_owner_firstname = rdStoreTab.down('#RDStoreOwner').getValue()?rdStoreTab.down('#RDStoreOwner').getValue().split(' ')[0]:"";
            TEST.vendor_owner_lastname = rdStoreTab.down('#RDStoreOwner').getValue().split(' ').length>1?rdStoreTab.down('#RDStoreOwner').getValue().split(' ')[1]:"";
            TEST.vendor_address_line1 =rdStoreTab.down('#RDStoreAddress').getValue();
            TEST.vendor_address_suite = rdStoreTab.down('#RDStoreSuite').getValue();
            TEST.vendor_city = rdStoreTab.down('#RDStoreCity').getValue();
            TEST.vendor_state = rdStoreTab.down('#RDStoreState').getValue();
            TEST.vendor_fax = rdStoreTab.down('#RDStoreFax').getValue()?rdStoreTab.down('#RDStoreFax').getValue():"";
            TEST.vendor_zip = rdStoreTab.down('#RDStoreZip').getValue()?rdStoreTab.down('#RDStoreZip').getValue():"";
            TEST.vendor_email =  rdStoreTab.down('#RDStoreEmail').getValue();
            TEST.vendor_phone = rdStoreTab.down('#RDStorePhone').getValue()?rdStoreTab.down('#RDStorePhone').getValue():"";
            TEST.vendor_phone_ext = rdStoreTab.down('#RDStorePhoneExt').getValue()?rdStoreTab.down('#RDStorePhoneExt').getValue():"";
            TEST.vendor_website = rdStoreTab.down('#RDStoreWebsite').getValue();
            TEST.vendor_type= rdStoreTab.down('#RDStoreType').getValue();
            TEST.vendor_size_sq_ft= rdStoreTab.down('#RDStoreSize').getValue()?rdStoreTab.down('#RDStoreSize').getValue():"";
            TEST.vendor_location= rdStoreTab.down('#RDStoreLocations').getValue()?rdStoreTab.down('#RDStoreLocations').getValue():"";

           /* TEST.vendor_employees= rdStoreTab.down('#RDStoreEmployees').getValue()?rdStoreTab.down('#RDStoreEmployees').getValue():"";
            TEST.vendor_yr_business= rdStoreTab.down('#RDStoreYrsInBusiness').getValue()?rdStoreTab.down('#RDStoreYrsInBusiness').getValue():"";
            TEST.vendor_inventory_tool= rdStoreTab.down('#RDStoreInventoryTool').getValue();
            TEST.vendor_accounting_tool= rdStoreTab.down('#RDStoreAccountingTool').getValue();
            TEST.vendor_alt_bussiness= rdStoreTab.down('#RDStoreAltBusiness').getValue();
            TEST.vendor_percent_program= rdStoreTab.down('#RDStorePercProg').getValue()?rdStoreTab.down('#RDStorePercProg').getValue():"";
            TEST.vendor_percent_oneof_kind= rdStoreTab.down('#RDStorePercKind').getValue()?rdStoreTab.down('#RDStorePercKind').getValue():"";

            TEST.vendor_advertising= rdStoreTab.down('#RDStoreAdvertising').getValue();
            TEST.vendor_monthly_budget= rdStoreTab.down('#RDStoreMoBudget').getValue()?rdStoreTab.down('#RDStoreMoBudget').getValue():"";
            TEST.vendor_monthly_subscription= "";
            */

            TEST.vendor_challenges= rdStoreTab.down('#RDStoreChallenges').getValue();
            TEST.vendor_status= 'ACTIVE';
            TEST.vendor_note= "";
            TEST.vendor_inactive_reason= "";
            TEST.vendor_pending_approval= "";
            TEST.vendor_created_in_past= new Date();
            TEST.vendor_modified_in_past= "";
            TEST.vendor_performance=rdStoreTab.down('#RDStoreTabPerformance').getSelection()[0].data.storeperf.toUpperCase();
        }

        return TEST;


        function getSpecificDataFromStore(storeName) {
             var data = new Array() ;
            data = Ext.getStore(storeName).getData().all;
            var dataToSet = new Array();
            for(var i=0;i<data.length;i++) {
                dataToSet.push(data[i].data);
            }
            return dataToSet;
        }

        function getDate(month,day,year) {

            console.log(Ext.ComponentQuery.query('#'+month)[0].getValue());
             console.log(Ext.ComponentQuery.query('#'+day)[0].getValue());
             console.log(Ext.ComponentQuery.query('#'+year)[0].getValue());

            return (Ext.ComponentQuery.query('#'+month)[0].getValue()+'/'+
                    Ext.ComponentQuery.query('#'+day)[0].getValue()+'/'+
                    Ext.ComponentQuery.query('#'+year)[0].getValue());
        }

        function getUsersDataInArray() {

            var vendorREPsDetails = Ext.getStore('vendor.REPsDetails');

            var userData = RMdatalink.app.getController('inhouse.DetailScreenController').getArrayDataFromStore(vendorREPsDetails);
            console.log("  userData   " , userData);
            return userData;
        }


        function getSpecificDataFromList(listName) {

            var store = Ext.ComponentQuery.query('#'+listName)[0].getStore() ;
            if(store)
            {
                var data = new Array() ;
                data = store.getData().all;
                var dataToSet = new Array();
                for(var i=0;i<data.length;i++) {
                    dataToSet.push(data[i].data);
                }
                return dataToSet;
            }
            else{
                return null;
            }
        }


        function getArrayFromVendorStore(store){

            var data = new Array();
            data = store.getData().items;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(
                      {
                          vendor_id :  data[i].data._id,
                          vendor_name: data[i].data.vendor_name,
                          type: "ACTIVE"
                      }


                   );
            }

            return dataToReturn ;

        }
    },

    validationForNewRecord: function() {
        this.removeErrorCls();

        var retailerDetailsMainTabPanel = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0];

        var RDStoreName = Ext.ComponentQuery.query('#RDStoreName')[0];


        var RDManagerFirstName = Ext.ComponentQuery.query('#RDManagerFirstName')[0];
        var RDManagerLastName = Ext.ComponentQuery.query('#RDManagerLastName')[0];
        var managerEmlFld = Ext.ComponentQuery.query('#RDManagerEmail')[0];


        var RDStoreNameText = RDStoreName.getValue();
        var RDManagerFirstNameText = RDManagerFirstName.getValue();
        var RDManagerLastNameText = RDManagerLastName.getValue();

        var validationForStore = true;
        var validationForManager = true;
        var activeTab = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].getActiveItem().getItemId();

        if(RDStoreNameText.length === 0 && activeTab == "RDStoresTab")
        {
            RDStoreName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForStore = false;
        }


        if(activeTab == "RDManagerTab")
        {
            if(RDManagerFirstNameText.length === 0)
            {
                RDManagerFirstName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
                validationForManager = false;
            }
            if(RDManagerLastNameText.length === 0)
            {
                RDManagerLastName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
                validationForManager = false;
            }

            if( managerEmlFld.getValue().length === 0 || !Ext.data.Validations.email(managerEmlFld, managerEmlFld.getValue()))
            {
                 managerEmlFld.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
                 validationResult = false ;

            }

        }

        if( !validationForStore)
        {
            retailerDetailsMainTabPanel.setActiveItem(retailerDetailsMainTabPanel.down("#RDStoresTab"));
            return false;
        }

        if( !validationForManager )
        {

            retailerDetailsMainTabPanel.setActiveItem(retailerDetailsMainTabPanel.down("#RDManagerTab"));
            return false;
        }

        return true;
    },

    removeErrorCls: function() {
        //   STORE FIELDS
        var emailField = Ext.ComponentQuery.query('#RDStoreEmail')[0];
        var phoneField = Ext.ComponentQuery.query('#RDStorePhone')[0];
        var websiteField = Ext.ComponentQuery.query('#RDStoreWebsite')[0];
        var zipField = Ext.ComponentQuery.query('#RDStoreZip')[0];
        var faxField = Ext.ComponentQuery.query('#RDStoreFax')[0];


        emailField.removeCls('x-rm-rdformErrorPanel');
        emailField.addCls('x-rm-rdformpanel');

        phoneField.removeCls('x-rm-rdformErrorPanel');
        phoneField.addCls('x-rm-rdformpanel');

        websiteField.removeCls('x-rm-rdformErrorPanel');
        websiteField.addCls('x-rm-rdformpanel');

        zipField.removeCls('x-rm-rdformErrorPanel');
        zipField.addCls('x-rm-rdformpanel');

        faxField.removeCls('x-rm-rdformErrorPanel');
        faxField.addCls('x-rm-rdformpanel');



        //   MANAGER FIELDS
        var emailFieldRDManager = Ext.ComponentQuery.query('#RDManagerEmail')[0];
        var phoneFieldRDManager = Ext.ComponentQuery.query('#RDManagerPhone')[0];
        var ActMgrZip = Ext.ComponentQuery.query('#ActMgrZip')[0];
        var RDManagerDirectPhone = Ext.ComponentQuery.query('#RDManagerDirectPhone')[0];


        emailFieldRDManager.removeCls('x-rm-rdformErrorPanel');
        emailFieldRDManager.addCls('x-rm-rdformpanel');

        phoneFieldRDManager.removeCls('x-rm-rdformErrorPanel');
        phoneFieldRDManager.addCls('x-rm-rdformpanel');

        RDManagerDirectPhone.removeCls('x-rm-rdformErrorPanel');
        RDManagerDirectPhone.addCls('x-rm-rdformpanel');

        ActMgrZip.removeCls('x-rm-rdformErrorPanel');
        ActMgrZip.addCls('x-rm-rdformpanel');




        //   MANAGER FIELDS RELATIONSHIP DETAILS

        var altEmailFieldRDManager = Ext.ComponentQuery.query('#RDMRDAltEmail')[0];
        var altPhoneFieldRDManager = Ext.ComponentQuery.query('#RDMRDAltPhone')[0];
        var altWebsiteFieldRDManager = Ext.ComponentQuery.query('#RDMRDWebsite')[0];

        altWebsiteFieldRDManager.removeCls('x-rm-rdformErrorPanel');
        altWebsiteFieldRDManager.addCls('x-rm-rdformpanel');

        altEmailFieldRDManager.removeCls('x-rm-rdformErrorPanel');
        altEmailFieldRDManager.addCls('x-rm-rdformpanel');

        altPhoneFieldRDManager.removeCls('x-rm-rdformErrorPanel');
        altPhoneFieldRDManager.addCls('x-rm-rdformpanel');


        var RDStoreName = Ext.ComponentQuery.query('#RDStoreName')[0];
        var RDManagerFirstName = Ext.ComponentQuery.query('#RDManagerFirstName')[0];
        var RDManagerLastName = Ext.ComponentQuery.query('#RDManagerLastName')[0];



        RDStoreName.removeCls('x-rm-rdformErrorPanel');
        RDStoreName.addCls('x-rm-rdformpanel');

        RDManagerFirstName.removeCls('x-rm-rdformErrorPanel');
        RDManagerFirstName.addCls('x-rm-rdformpanel');

        RDManagerLastName.removeCls('x-rm-rdformErrorPanel');
        RDManagerLastName.addCls('x-rm-rdformpanel');


        //************

        this.removeErrorClsForReps();
        this.removeErrorClsForContactCompany();
    },

    getREPsListDataInArray: function() {

            var userData = [];
            var userPhotos = Ext.ComponentQuery.query('#RDUsersAddPhotoImage');
            var userNames = Ext.ComponentQuery.query('#RDUsersName');
            var userFirstNames = Ext.ComponentQuery.query('#RDUsersFirstName');
            var userLastNames = Ext.ComponentQuery.query('#RDUsersLastName');
            var userEmails = Ext.ComponentQuery.query('#RDUsersEmail');
            var userPhones = Ext.ComponentQuery.query('#RDUsersPhone');
            var userComments = Ext.ComponentQuery.query('#RDUsersComment');
            var userRights = Ext.ComponentQuery.query('#RDUsersRightsList');

            for(var i=0 ; i<3 ; i++) {

                var userRightsData = [];
                var userRightsViewItems = userRights[i].getViewItems();
                for(var j=0;j<userRightsViewItems.length;j++) {

                    var checkbox = userRightsViewItems[j].element.dom.querySelector('input[type="checkbox"]');
                    userRightsData.push({
                        right_name: checkbox.getAttribute('data-rights'),
                        right_status: checkbox.checked
                    });

                }
                var isTeamUsersProfileDataAvailable = false ;
                if(RMdatalink.app.getController('RetailerDeatilsDataSet').config.TeamUsersProfile && RMdatalink.app.getController('RetailerDeatilsDataSet').config.TeamUsersProfile[i]){
                    isTeamUsersProfileDataAvailable= true ;
                }

                userData.push({
                    "tu_image_url": userPhotos[i].getSrc(),
                    "tu_username": userNames[i].getValue(),
                    "tu_firstname": userFirstNames[i].getValue(),
                    "tu_lastname": userLastNames[i].getValue(),
                    "tu_email": userEmails[i].getValue(),
                    "tu_phone": userPhones[i].getValue()?userPhones[i].getValue():"",
                    "tu_comments": userComments[i].getValue(),
                    "tu_access_rights": userRightsData,
                    "dos_and_donts":isTeamUsersProfileDataAvailable ? RMdatalink.app.getController('RetailerDeatilsDataSet').config.TeamUsersProfile[i].dos_and_donts : null,
                    "follow_ups":isTeamUsersProfileDataAvailable ? RMdatalink.app.getController('RetailerDeatilsDataSet').config.TeamUsersProfile[i].follow_ups:null,
                    "tu_relationsheep_details":isTeamUsersProfileDataAvailable ? RMdatalink.app.getController('RetailerDeatilsDataSet').config.TeamUsersProfile[i].tu_relationsheep_details : null

                });
            }

            RMdatalink.app.getController('RetailerDeatilsDataSet').config.TeamUsersProfile =null ;
            return userData;
    },

    fillTipsData: function(userData) {
        var doDontsStore = Ext.getStore('notifications.repsTipsdodonts');
        doDontsStore.removeAll();
        doDontsStore.sync();

        doDontsStore.setData(userData.tu_dos_and_donts);
        doDontsStore.sync();

        var followUpStore = Ext.getStore('notifications.repsTipsfollowsup');
        followUpStore.removeAll();
        followUpStore.sync();

        followUpStore.setData(userData.tu_follow_ups);
        followUpStore.sync();

        Ext.ComponentQuery.query('#RDUserProfileBlueStickyTextArea')[0].setValue(userData.tu_blue_notes);

    },

    unfillTipsData: function() {
        var doDontsStore = Ext.getStore('notificationsTipsDoDonts');
        doDontsStore.removeAll();
        doDontsStore.sync();
        doDontsStore.setData([
            {"notification":""},
            {"notification":""},
            {"notification":""},
            {"notification":""}
        ]);
        doDontsStore.sync();

        var followUpStore = Ext.getStore('notificationsTipsFollowsup');
        followUpStore.removeAll();
        followUpStore.sync();
        followUpStore.setData([
            {"notification":""},
            {"notification":""},
            {"notification":""},
            {"notification":""}
        ]);
        followUpStore.sync();

        Ext.ComponentQuery.query('#RDManagerBlueStickyTextArea')[0].setValue("");
        Ext.ComponentQuery.query('#RDCRMNotesBlueStickyTextArea')[0].setValue("");
    },

    fillVendorRepsTipDoDontFollowUp: function(selectedUserRecord) {

    },

    unFillTipsData: function() {
        //***********  FOR  REPS  ********
        doDontsStore = Ext.getStore('notifications.repsTipsdodonts');
        doDontsStore.removeAll();
        doDontsStore.sync();
        doDontsStore.setData([
            {"notification":""},
            {"notification":""},
            {"notification":""},
            {"notification":""}
        ]);
        doDontsStore.sync();

        followUpStore = Ext.getStore('notifications.repsTipsfollowsup');
        followUpStore.removeAll();
        followUpStore.sync();
        followUpStore.setData([
            {"notification":""},
            {"notification":""},
            {"notification":""},
            {"notification":""}
        ]);
        followUpStore.sync();

        Ext.ComponentQuery.query('#RDUserProfileBlueStickyTextArea')[0].setValue("");
    },

    validationForRepsInputFields: function() {
        // ******** VALIDATION  FOR  REPS  FIELDS *********

        var retailerDetailsMainTabPanel = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0];

        var phoneRegex = /^\(?\d{3}\)?-? *\d{3}-? *-?\d{4}$/;
        var zipRegex = /(^\d{5}$)|(^\d{5}-\d{4}$)/;

        var RDUserProfilePhone = Ext.ComponentQuery.query('#RDUserProfilePhone')[0];
        var RDUserProfilePhoneText  = RDUserProfilePhone.getValue();

        var RDUserProfileZip = Ext.ComponentQuery.query('#RDUserProfileZip')[0];
        var RDUserProfileZipText  = RDUserProfileZip.getValue();

        var RDUserProfileCellPhone =  Ext.ComponentQuery.query('#RDUserProfileCellPhone')[0];
        var RDUserProfileCellPhoneText  = RDUserProfileCellPhone.getValue();

        var RDUserProfileAltPhone =  Ext.ComponentQuery.query('#RDUserProfileAltPhone')[0];
        var RDUserProfileAltPhoneText  = RDUserProfileAltPhone.getValue();

        var validationForReps = true;
        var validationForRepsRelDetail = true;

        if( RDUserProfilePhoneText.length !== 0 && !phoneRegex.test(RDUserProfilePhoneText))
        {
            RDUserProfilePhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForReps = false;
        }

        if( RDUserProfileZipText.length !== 0 && !zipRegex.test(RDUserProfileZipText))
        {
            RDUserProfileZip.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForReps = false;
        }


        if( RDUserProfileCellPhoneText.length !== 0 && !phoneRegex.test(RDUserProfileCellPhoneText))
        {
            RDUserProfileCellPhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForReps = false;
        }


        if( RDUserProfileAltPhoneText.length !== 0 && !phoneRegex.test(RDUserProfileAltPhoneText))
        {
            RDUserProfileAltPhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForRepsRelDetail = false;
        }


        if( (!validationForReps || !validationForRepsRelDetail) )
        {
            retailerDetailsMainTabPanel.setActiveItem(retailerDetailsMainTabPanel.down("#RDUsersTab"));
           // retailerDetailsMainTabPanel.setActiveItem(1);
            //FOR SIDE PANEL
            if(!validationForRepsRelDetail)
            {
                var RDUserProfileSideTabPanel = Ext.ComponentQuery.query('#RDUserProfileSideTabPanel')[0];
                RDUserProfileSideTabPanel.setActiveItem(1);
            }
            return false;
        }

        return true;


    },

    validationForComContactInputFields: function() {
        // ******** VALIDATION  FOR  REPS  FIELDS *********

        var retailerDetailsMainTabPanel = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0];

        var phoneRegex = /^\(?\d{3}\)?-? *\d{3}-? *-?\d{4}$/;
        var zipRegex = /(^\d{5}$)|(^\d{5}-\d{4}$)/;

        var CmpContactProfilePhone = Ext.ComponentQuery.query('#CmpContactProfilePhone')[0];
        var CmpContactProfilePhoneText  = CmpContactProfilePhone.getValue();

        var CmpContactProfileCellPhone =  Ext.ComponentQuery.query('#CmpContactProfileCellPhone')[0];
        var CmpContactProfileCellPhoneText  = CmpContactProfileCellPhone.getValue();

        var CmpContactProfileZip =  Ext.ComponentQuery.query('#CmpContactProfileZip')[0];
        var CmpContactProfileZipText  = CmpContactProfileZip.getValue();

        var validationForCon = true;
         var validationForContactRelDetail = true;

        if( CmpContactProfilePhoneText.length !== 0 && !phoneRegex.test(CmpContactProfilePhoneText))
        {
            CmpContactProfilePhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForCon = false;
        }

        if( CmpContactProfileCellPhoneText.length !== 0 && !phoneRegex.test(CmpContactProfileCellPhoneText))
        {
            CmpContactProfileCellPhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForCon = false;
        }


        if( CmpContactProfileZipText.length !== 0 && !zipRegex.test(CmpContactProfileZipText))
        {
            CmpContactProfileZip.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForCon = false;
        }


        if( (!validationForCon || !validationForContactRelDetail) )
        {
             retailerDetailsMainTabPanel.setActiveItem(retailerDetailsMainTabPanel.down("#CmpContactTab"));
           // retailerDetailsMainTabPanel.setActiveItem(3);
            //FOR SIDE PANEL
        //     if(!validationForRepsRelDetail)
        //     {
        //         var RDUserProfileSideTabPanel = Ext.ComponentQuery.query('#RDUserProfileSideTabPanel')[0];
        //         RDUserProfileSideTabPanel.setActiveItem(1);
        //     }
            return false;
        }

        return true;


    },

    removeErrorClsForReps: function() {
        var RDUserProfilePhone = Ext.ComponentQuery.query('#RDUserProfilePhone')[0];
        var RDUserProfileCellPhone =  Ext.ComponentQuery.query('#RDUserProfileCellPhone')[0];
        var RDUserProfileAltPhone =  Ext.ComponentQuery.query('#RDUserProfileAltPhone')[0];
        var RDUserProfileZip = Ext.ComponentQuery.query('#RDUserProfileZip')[0];

        RDUserProfileZip.removeCls('x-rm-rdformErrorPanel');
        RDUserProfileZip.addCls('x-rm-rdformpanel');

        RDUserProfilePhone.removeCls('x-rm-rdformErrorPanel');
        RDUserProfilePhone.addCls('x-rm-rdformpanel');

        RDUserProfileCellPhone.removeCls('x-rm-rdformErrorPanel');
        RDUserProfileCellPhone.addCls('x-rm-rdformpanel');

        RDUserProfileAltPhone.removeCls('x-rm-rdformErrorPanel');
        RDUserProfileAltPhone.addCls('x-rm-rdformpanel');


        var rfName = Ext.ComponentQuery.query('#RDUserProfileFirstName')[0];
        var rlName = Ext.ComponentQuery.query('#RDUserProfileLastName')[0];
        var remail = Ext.ComponentQuery.query('#RDUserProfileEmail')[0];

        rfName.removeCls('x-rm-rdformErrorPanel');
        rfName.addCls('x-rm-rdformpanel');


        rlName.removeCls('x-rm-rdformErrorPanel');
        rlName.addCls('x-rm-rdformpanel');


        remail.removeCls('x-rm-rdformErrorPanel');
        remail.addCls('x-rm-rdformpanel');

    },

    removeErrorClsForContactCompany: function() {
        var CmpContactProfilePhone = Ext.ComponentQuery.query('#CmpContactProfilePhone')[0];
        var CmpContactProfileCellPhone =  Ext.ComponentQuery.query('#CmpContactProfileCellPhone')[0];

        var CmpContactProfileZip =  Ext.ComponentQuery.query('#CmpContactProfileZip')[0];

        CmpContactProfileZip.removeCls('x-rm-rdformErrorPanel');
        CmpContactProfileZip.addCls('x-rm-rdformpanel');

        CmpContactProfilePhone.removeCls('x-rm-rdformErrorPanel');
        CmpContactProfilePhone.addCls('x-rm-rdformpanel');

        CmpContactProfileCellPhone.removeCls('x-rm-rdformErrorPanel');
        CmpContactProfileCellPhone.addCls('x-rm-rdformpanel');


        var rfName = Ext.ComponentQuery.query('#CmpContactProfileFirstName')[0];
        var rlName = Ext.ComponentQuery.query('#CmpContactProfileLastName')[0];
        var remail = Ext.ComponentQuery.query('#CmpContactProfileEmail')[0];


        rfName.removeCls('x-rm-rdformErrorPanel');
        rfName.addCls('x-rm-rdformpanel');


        rlName.removeCls('x-rm-rdformErrorPanel');
        rlName.addCls('x-rm-rdformpanel');

        remail.removeCls('x-rm-rdformErrorPanel');
        remail.addCls('x-rm-rdformpanel');

    },

    hideSideContainerForREPs: function() {
        Ext.ComponentQuery.query('#RDUsersTab')[0].setActiveItem(0);
        var container = Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0] ;
        var sideContainer = container.parent.down('#RDSideContainer');
        var storeSideContainer = sideContainer.down('#RDStoreSideContainer');
        var managerSideContainer = sideContainer.down('#RDManagerSideContainer');
        var crmNotesSideContainer = sideContainer.down('#RDCRMNotesSideContainer');
        var userProfileSideContainer = sideContainer.down('#RDUserProfileSideContainer');
        sideContainer.setHidden(true);
        storeSideContainer.setHidden(true);
        managerSideContainer.setHidden(true);
        crmNotesSideContainer.setHidden(true);
        userProfileSideContainer.setHidden(true);
    },

    setResetRetailersDetailView: function() {

    },

    loadActiveRetailersForVendors: function() {
          var importFrmCsvController = RMdatalink.app.getController('ImportCSV') ;



            var phones = [] ;


            for(var i =0 ; i < importFrmCsvController.config.retailerForVendor.length ; i++){


                phones.push(importFrmCsvController.config.retailerForVendor[i].retailer_phone) ;
            }


            RMdatalink.app.getController('VendorRetailerRelations').config.activeRelData =
            {
               collection: dbEnv + "rdl_masterretailerrecords",
               pageNo:1,
               pageSize: 50,
               sortBy:{},
               query:

                   {
                       store_phone:{
                           $in:
                           phones
                       }

                   }
            };


            RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1,pageSize: 50 ,sortBy:{},
           query:

           {
               store_phone:{
               $in:
               phones
           }},

           fields:{}},success,error);



         var searchCriteria =  RMdatalink.app.getController('VendorRetailerRelations').config.activeRelData;


        function success(){

            setMaxPageSize(arguments[0]) ;


            setRetailersList(arguments[0].items) ;

            Ext.ComponentQuery.query('#retailerAtVendorPNoLbl')[0].setHtml(searchCriteria.pageNo) ;

            RMdatalink.app.getController('VendorRetailerRelations').setFilterForProspectRetailers();

             Ext.ComponentQuery.query('#inStoreVendorsRetailersCLbl')[0].setHtml("Total Retailers : "+arguments[0].count) ;
        }

        function error(){

        //    errorCallBack() ;

        }



        function setMaxPageSize(response){

           var retVendrRel = RMdatalink.app.getController('VendorRetailerRelations');
            if( (response.count  % searchCriteria.pageSize) == 0){
                    retVendrRel.config.maxPageNo =  parseInt(response.count  / searchCriteria.pageSize) ;
            }
            else{

                retVendrRel.config.maxPageNo =  parseInt(response.count  / searchCriteria.pageSize) + 1;
            }


        }



        function setRetailersList(data){


            var prospectList  = Ext.ComponentQuery.query('#RDInStoreVendorsTab')[0].down("#mainList");


              var prospectStore = prospectList.getStore() ;
            prospectStore.removeAll();
            prospectStore.sync();

            prospectStore.setData(data) ;

            prospectStore.sync();

              prospectList.selectAll() ;



        }
    },

    loadActiveVendorsForRetailers: function() {

        console.error('VUZ1');

        var vendorsMasterStr = Ext.getStore( 'vendors.Master');

        var records = new Array() ;



        var selectedUserRecord = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;
        console.error('VUZ2');

        var vndrs = selectedUserRecord.record.data.vendors ;
        var rt_id = selectedUserRecord.record.data._id;
        var rt_phn = selectedUserRecord.record.data.store_phone ;





        setRetailersList(getVendorsForRetailer()) ;

        var dataToAdd =  getVendoersForRetailersByProduct('retailers_ecommerce');
        if(dataToAdd.length)
        {
            setRetailersListByProduct( dataToAdd, 'RDForECommerce') ;
        }


        var dataOfVip = getVipVendors();

        if(dataOfVip.length )
        {
            setRetailersListByProduct (dataOfVip , "RDForVIP");
        }


        RMdatalink.app.getController('VendorRetailerRelations').setFilterForProspectVendors() ;




        //setRetailersListByProduct
        //RDForECommerce
        console.warn(getVendoersForRetailersByProduct('retailers_ecommerce'));

        this.loadVdrInfoTotals() ;



        function getVipVendors(){

            var selectedUserRecord = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;
            var ecommerceInfo = selectedUserRecord.record.data.e_commerce_info;

            var arrayOfVendors = [];
            if( ecommerceInfo ){

            }else{
                return arrayOfVendors;
            }

            var ecomVendor = ecommerceInfo.additional_vendors;
            var vendorPartner = ecommerceInfo.vip_vendor;

            //Account_No
            if(vendorPartner){
                var vRecord = findVendorBy_name(vendorPartner);
                var dataToPush =   vRecord.raw;
                dataToPush.Account_No = ecommerceInfo.account_no;
                arrayOfVendors.push(   dataToPush );
            }
            for(var i=0; ecomVendor && i <ecomVendor.length ; i++){

                var vendor_name = ecomVendor[i].vendor_name;


                var vendorRecord = findVendorBy_name(vendor_name);
                if(vendorRecord){
                }else{
                    continue;
                }
                var dataToPush =   vendorRecord.raw;
                dataToPush.Account_No = ecomVendor[i].account_no;
                arrayOfVendors.push( dataToPush);
            }

            return arrayOfVendors;

        }


        function getVendorsForRetailer(){

            var vendorForRetailer = [] ;
            var product_type = "datalink";

            var vendors = vendorsMasterStr.data.all ;


            for(var i=0; i < vendors.length ; i++){
                var vRecord = vendors[i];

                var assocRtlrs = vendors[i].data.retailers ;

                if(assocRtlrs)
                {

                    for(var k=0; k < assocRtlrs.length ; k++ )
                    {

                        if(assocRtlrs[k].retailer_id)
                        {

                            if(assocRtlrs[k].retailer_id == rt_id  && ( !assocRtlrs[k].product_type || product_type == assocRtlrs[k].product_type ) )
                            {

                                vendorForRetailer.push(
                                    {
                                        vendor_name:vRecord.data.vendor_name ,
                                        collections:vRecord.data.collections ,
                                        design:vRecord.data.design ,
                                        SKU:vRecord.data.SKU,
                                        no_of_images:vRecord.data.no_of_images,
                                        no_of_additional_images:vRecord.data.no_of_additional_images,
                                        vendor_id: vRecord.data._id,
                                        Account_No:assocRtlrs[k].Account_No || getAccountNoForRetailerAndVendor(vRecord) ||' '
                                    }

                                );
                            }

                        }
                        else
                        {

                            if(assocRtlrs[k].retailer_phone == rt_phn )
                            {
                                vendorForRetailer.push(
                                    {
                                        vendor_name:vRecord.data.vendor_name ,
                                        collections:vRecord.data.collections ,
                                        design:vRecord.data.design ,
                                        SKU:vRecord.data.SKU,
                                        no_of_images:vRecord.data.no_of_images,
                                        no_of_additional_images:vRecord.data.no_of_additional_images,
                                        vendor_id: vRecord.data._id,
                                        Account_No:assocRtlrs[k].Account_No || getAccountNoForRetailerAndVendor(vRecord) || ' '
                                    }

                                );

                            }
                        }
                    }

                }
            }
            return vendorForRetailer ;
        }




        function getVendoersForRetailersByProduct(product_type_key){

            var vendorForRetailer = [] ;
            if(product_type_key){

            }else{
                return vendorForRetailer;
            }
            var vendors = vendorsMasterStr.data.all ;


            for(var i=0; i < vendors.length ; i++){
                var vRecord = vendors[i];

                var assocRtlrs = vendors[i].data[product_type_key] ;

                if(assocRtlrs)
                {

                    for(var k=0; k < assocRtlrs.length ; k++ )
                    {

                        if(assocRtlrs[k].retailer_id)
                        {

                            if(assocRtlrs[k].retailer_id == rt_id )
                            {
                                vendorForRetailer.push(
                                    {
                                        vendor_name:vRecord.data.vendor_name ,
                                        collections:vRecord.data.collections ,
                                        design:vRecord.data.design ,
                                        SKU:vRecord.data.SKU,
                                        no_of_images:vRecord.data.no_of_images,
                                        no_of_additional_images:vRecord.data.no_of_additional_images,
                                        vendor_id: vRecord.data._id,
                                        Account_No:assocRtlrs[k].Account_No || getAccountNoForRetailerAndVendor(vRecord) ||' '
                                    }

                                );
                            }

                        }
                        else
                        {

                            if(assocRtlrs[k].retailer_phone == rt_phn )
                            {
                                vendorForRetailer.push(
                                    {
                                        vendor_name:vRecord.data.vendor_name ,
                                        collections:vRecord.data.collections ,
                                        design:vRecord.data.design ,
                                        SKU:vRecord.data.SKU,
                                        no_of_images:vRecord.data.no_of_images,
                                        no_of_additional_images:vRecord.data.no_of_additional_images,
                                        vendor_id: vRecord.data._id,
                                        Account_No:assocRtlrs[k].Account_No || getAccountNoForRetailerAndVendor(vRecord) || ' '
                                    }

                                );

                            }
                        }
                    }

                }
            }
            return vendorForRetailer ;



        }





        function setRetailersList(data){


            var prospectList  = Ext.ComponentQuery.query('#RDInStoreVendorsTab')[0].down("#mainList");


            var prospectStore = prospectList.getStore() ;
            console.error("REMOVINF DATA");
            prospectStore.removeAll();
            prospectStore.sync();
            console.error(data);
            prospectStore.setData(data) ;

            prospectStore.sync();

            prospectList.selectAll() ;

            Ext.ComponentQuery.query('#RDStoreSideTabPanel #inStoreVendorsRetailersCLbl')[0].setHtml("Total Vendors : "+ data.length ) ;

            if(data.length == 0){

                Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0].setActiveItem(1);

            }else{

                Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0].setActiveItem(0);
            }


        }

        //RDForECommerce
        function setRetailersListByProduct(data ,productTabId){

            var prospectList  = Ext.ComponentQuery.query('#' +productTabId)[0].down("#mainList");
            var prospectStore = prospectList.getStore() ;
            if(prospectStore){
                prospectStore.removeAll();
                prospectStore.sync();
                prospectStore.setData(data) ;
                prospectStore.sync();



            }else{
                prospectList.setData(data) ;
            }
            prospectList.selectAll() ;
            Ext.ComponentQuery.query('#' + productTabId + ' ' + '#inStoreVendorsRetailersCLbl')[0].setHtml("Total Vendors : "+ data.length ) ;

            //     if(data.length == 0){

            //         Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0].setActiveItem(1);

            //     }else{

            //          Ext.ComponentQuery.query('#RDStoreSideTabPanel')[0].setActiveItem(0);
            //     }




        }

        function getAccountNoForRetailerAndVendor(){
            return '';
        }


    },

    destroyLocations: function() {
        var containerPanel = Ext.ComponentQuery.query('#retailerLocationsFldSet')[0];
        containerPanel.removeAll( true, false ) ;
    },

    getLocationData: function() {
        /*


        locationFormPanel

        locationAddress
        locationSuite
        locationCity
        locationState
        locationZip
        locationPhone
        locationPhoneExt
        locationFax
        locationStoreType
        locationStoreSqFt

        */

        var locationForms =  Ext.ComponentQuery.query('#locationFormPanel') ;

        var locations = [] ;


        for(var i=0; i < locationForms.length ; i++){
            var objTopush = {
                index:i,
                location_name:locationForms[i].down('#locationStoreName').getValue(),
                address :locationForms[i].down('#locationAddress').getValue(),
                suit:locationForms[i].down('#locationSuite').getValue(),
                city:locationForms[i].down('#locationCity').getValue(),
                state:locationForms[i].down('#locationState').getValue(),
                zip:locationForms[i].down('#locationZip').getValue(),
                phone:locationForms[i].down('#locationPhone').getValue(),
                phone_ext:locationForms[i].down('#locationPhoneExt').getValue(),
                fax:locationForms[i].down('#locationFax').getValue(),
                store_type:locationForms[i].down('#locationStoreType').getValue(),
                store_sq_ft:locationForms[i].down('#locationStoreSqFt').getValue()

            };

            locations.push(objTopush ) ;

        }


        return locations;
    },

    createAndSetLocations: function(locations) {

        // this.createLocation() ;


        //Ext.ComponentQuery.query('#deleteLocationLbl')[0].setHidden(true) ;


        if(locations)
        {
            for(var k=1;k<locations.length ; k++){

                this.createLocation() ;

            }







            var locationForms =  Ext.ComponentQuery.query('#locationFormPanel') ;


            for(var i=0; i < locationForms.length ; i++){

                    locationForms[i].down('#locationStoreName').setValue(locations[i].location_name) ;
                    locationForms[i].down('#locationAddress').setValue(locations[i].address);
                    locationForms[i].down('#locationSuite').setValue(locations[i].suit);
                    locationForms[i].down('#locationCity').setValue(locations[i].city) ;
                    locationForms[i].down('#locationState').setValue(locations[i].state);
                    locationForms[i].down('#locationZip').setValue(locations[i].zip) ;
                    locationForms[i].down('#locationPhone').setValue(locations[i].phone);
                    locationForms[i].down('#locationPhoneExt').setValue(locations[i].phone_ext);
                    locationForms[i].down('#locationFax').setValue(locations[i].fax) ;
                    locationForms[i].down('#locationStoreType').setValue(locations[i].store_type) ;
                    locationForms[i].down('#locationStoreSqFt').setValue(locations[i].store_sq_ft);


            }


        }
    },

    createLocation: function() {
        var containerPanel = Ext.ComponentQuery.query('#retailerLocationsFldSet')[0];

        var newChildpanel = new Ext.Panel( {
                        height: '275px',
                        margin: '0 0 10px 0',
        //              width: '90%',
                        items: [
                            {
                                xtype: 'label',
                                html: '',
                                cls: 'labelCssForNewLocationTab',
                                margin: '0 0 10px 28px'
                            },
                            {
                                xtype: 'formpanel',
                                action: 'setScrollBarVisible',
                                cls: 'x-rm-rdformpanel',
                                height: 240,
                                itemId: 'locationFormPanel',
                                width: '100%',
                                layout: {
                                    align: 'center',
                                    type: 'vbox'
                                },
                                scrollable: true,
                                items: [
                                    {
                                        xtype: 'textfield',
                                        itemId: 'locationStoreName',
                                        label: 'Store Name',
                                        labelWidth: '110px'
                                    },


                                    {
                                        xtype: 'textfield',
                                        itemId: 'locationAddress',
                                        label: 'Address',
                                        labelWidth: '110px'
                                    },
                                    {
                                        xtype: 'textfield',
                                        action: 'clearIconTap',
                                        itemId: 'locationSuite',
                                        label: 'Suite #',
                                        labelWidth: '110px'
                                    },
                                    {
                                        xtype: 'textfield',
                                        itemId: 'locationCity',
                                        label: 'City',
                                        labelWidth: '110px'
                                    },
                                    {
                                        xtype: 'fieldset',
                                        layout: {
                                            align: 'center',
                                            type: 'hbox'
                                        },
                                        items: [
                                            {
                                                xtype: 'textfield',
                                                itemId: 'locationState',
                                                width: '60%',
                                                label: 'State',
                                                labelWidth: '110px',
                                                maxLength: 5,
                                                action:"autoSuggestionField"
                                            },
                                            {
                                                xtype: 'textfield',
                                                action: 'clearIconTap',
                                                actionChange: 'textChange',
                                                itemId: 'locationZip',
                                                width: '40%',
                                                label: 'Zip',
                                                labelWidth: '50px',
                                                maxLength: 5
                                            }
                                        ]
                                    },

                                    {
                                        xtype: 'fieldset',
                                        layout: {
                                            align: 'center',
                                            type: 'hbox'
                                        },
                                        items: [

                                            {
                                                xtype: 'textfield',
                                                action: 'clearIconTap',
                                                actionChange: 'textChange',
                                                width: '60%',
                                                itemId: 'locationPhone',
                                                label: 'Phone',
                                                labelWidth: '110px',
                                                maxLength: 16
                                            },
                                            {
                                                xtype: 'textfield',
                                                action: 'clearIconTap',
                                                actionChange: 'textChange',
                                                itemId: 'locationPhoneExt',
                                                width: '40%',
                                                label: 'Ext',
                                                labelWidth: '50px',
                                                maxLength: 10
                                            }
                                        ]
                                    },

                                     {
                                        xtype: 'textfield',
                                        action: 'clearIconTap',
                                        actionChange: 'textChange',
                                        itemId: 'locationFax',

                                        label: 'Fax',
                                        labelWidth: '110px',
                                        maxLength: 16
                                    },

                                    {
                                        xtype: 'fieldset',
                                        layout: {
                                            align: 'center',
                                            type: 'hbox'
                                        },
                                        items: [

                                            {
                                                xtype: 'textfield',
                                                action: 'clearIconTap',
                                                actionChange: 'textChange',
                                                width: '50%',
                                                itemId: 'locationStoreType',
                                                label: 'Store Type',
                                                labelWidth: '110px'
                                            },
                                            {
                                                xtype: 'textfield',
                                                action: 'clearIconTap',
                                                actionChange: 'textChange',
                                                itemId: 'locationStoreSqFt',
                                                width: '50%',
                                                label: 'Sq.Ft.',
                                                labelWidth: '50px'
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: 'label',
                                html: 'Delete Location',
                                action:'deleteLocation',
                                itemId:'deleteLocationLbl',
                                margin: '0 45%',
                                width: '90%',
                                cls: 'labelCssForNewLocationTab pointerCursor'
                            },
                            {
                                xtype: 'image',
                                height: 25,
                                margin: '5 50%',
                                width: 31,
                                src:'resources/images/retailerDetail/location_separator.png'
                            }
                        ]
                    });


        containerPanel.add(newChildpanel);

        this.updateNoOfLocations() ;
    },

    updateRTVDNotes: function() {
                var isRetailerDetailsView = RMdatalink.app.getController('UINav').isRetailerDetailsView;
                var masterStore =  isRetailerDetailsView ? Ext.getStore('retailersMaster'):Ext.getStore('vendors.Master');


                var selectedUserRecord = RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();


            if( !( Object.keys(selectedUserRecord).length  )   ){
                // USER CLICKED ON ADD NEW RETAILER BTN

                return ;
            }

        var notes = getSpecificDataFromStore('retailersDetailsNotes') ;
        var _id = selectedUserRecord.record.data._id ;
        var dataToUpdate = {

            notes:notes
        } ;
                    Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });

                    RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , _id , suc, err);


                    function suc(){
                         selectedUserRecord.record.set("notes",notes) ;
                        updateNoteBadgeText() ;

                         Ext.Viewport.setMasked(false);



                    }
                    function err(){
                            Ext.Viewport.setMasked(false);
                    }




        function getSpecificDataFromStore(storeName) {
             var data = new Array() ;
            data = Ext.getStore(storeName).getData().all;
            var dataToSet = new Array();
            for(var i=0;i<data.length;i++) {
                dataToSet.push(data[i].data);
            }
            return dataToSet;
        }

        function updateNoteBadgeText(){

              if(notes && notes.length > 0){
                    Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].getTabBar().getAt(6).setBadgeText(notes.length);
            }
            else{

                    Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].getTabBar().getAt(6).setBadgeText();
            }

        }
    },

    setRetailersFirstLocation: function(data) {

                    var locationForms =  Ext.ComponentQuery.query('#locationFormPanel') ;


                    var i=0 ;
                    locationForms[i].down('#locationAddress').setValue(data.store_address_line1);
                    locationForms[i].down('#locationCity').setValue(data.store_city ) ;
                    locationForms[i].down('#locationState').setValue(data.store_state);
                    locationForms[i].down('#locationZip').setValue(data.store_zip ) ;
                    locationForms[i].down('#locationFax').setValue(data.store_fax ) ;
                 // locationForms[i].down('#locationPhone').setValue(locations[i].phone);


    },

    loadVdrInfoTotals: function(parentTab) {
            parentTab = parentTab || 'RDStoreSideTabPanel';

        var prospectList  = Ext.ComponentQuery.query('#' + parentTab +' ' + '#RDInStoreVendorsTab')[0].down("#mainList");
        var vdrStore = prospectList.getStore() ;
        var parentPanel = Ext.ComponentQuery.query('#' + parentTab +' ' + ' #rtlrVdrAssociationTotalFldSet')[0] ;
        //RDStoreSideTabPanel


        var totalSKU = 0 ;
        var totalCollection = 0 ;
        var totalDesigns = 0 ;


        var vendors ;
        try{

           vendors = vdrStore.getData().all ;

        }catch(e){

             console.log("ERROR WAS THROWN" , e);
             vendors = [];
        }

        for(var i=0 ; i < vendors.length ; i++){

            totalSKU += parseInt(vendors[i].data.SKU,0) ;
            totalCollection += parseInt(vendors[i].data.collections,0) ;
            totalDesigns += parseInt(vendors[i].data.design,0) ;

        }



        parentPanel.down('#rtDtlVdrCollectionTotalLbl').setHtml(totalCollection);
        parentPanel.down('#rtDtlVdrDesignTotalLbl').setHtml(totalDesigns);
        parentPanel.down('#rtDtlVdrSKUTotalLbl').setHtml(totalSKU);
    },

    onRetailerTap: function(dataview, index, target, record, e, eOpts) {
        //dataview, index, target, record, e, eOpts
        var attrToSearch = RMdatalink.util.globalConfig.getListAttrForDelHandling();
        var targetEl = e.target;



        if( RMdatalink.util.globalConfig.isAttributePresentInTarget( attrToSearch,targetEl )  ){

            var attrVak = targetEl.getAttribute(attrToSearch);
            var nameAttr = RMdatalink.util.globalConfig.getManager_LastNameDelegateClassForTap();
            var storeAttr = RMdatalink.util.globalConfig.getStore_nameDelegateClassForTap();
        //     var place = RMdatalink.util.globalConfig.getUrlForRetailerCard();

            var varibleToSet = setVariable();

            var retailersMaincontentpanel = Ext.ComponentQuery.query('#retailersMaincontentpanel')[0];

            switch (attrVak){


                case storeAttr:
                    setMask() ;
                    showRtDtl() ;

        //                         RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);

        //                         Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDStoresTab');
        //                         RMdatalink.app.getController('UINav').onPanelAddretailertapped(retailersMaincontentpanel);

        //                        Ext.ComponentQuery.query('#rtDetlViewSubscriptionsBtn')[0].fireEvent("tap");
                    break;

                default:

                     //RMdatalink.app.getController('UINav').redirectTo('card16');
                    console.log('DONT FIRE ANY THING');
            }
        }


        function setVariable(){

            return {

                placeClicked:  attrVak,
                record:record,
                index:index
            };
        }


        function setMask(){
            Ext.Viewport.setMasked({
                            xtype: 'loadmask'
                        });
        }

        function showRtDtl(){

            Ext.Function.defer( gotoRtDtl, 100, this);
        }

        function gotoRtDtl(){

                                  RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);

                                Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDStoresTab');
                                RMdatalink.app.getController('UINav').onPanelAddretailertapped(retailersMaincontentpanel);
                                RMdatalink.app.getController('UINav').isRetailerDetailsView = true;
                               Ext.ComponentQuery.query('#rtDetlViewSubscriptionsBtn')[0].fireEvent("tap");


        }
    },

    updateNoOfLocations: function() {

        var locationForms =  Ext.ComponentQuery.query('#locationFormPanel') ;


        Ext.ComponentQuery.query('#RDStoreLocations')[0].setValue(locationForms.length ) ;
    },

    saveRTProductSetup: function() {
        var rtRecord =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow().record ;
        var masterStore = Ext.getStore('retailersMaster');



        var dataToUpdate = {} ;


         dataToUpdate.store_products = {

                datalink_status : Ext.ComponentQuery.query('#rtDatalinkStatusSelFld')[0].getValue(),
                ecatalog_status :Ext.ComponentQuery.query('#rtEcatalogStatusSelFld')[0].getValue(),
                ecommerce_status :Ext.ComponentQuery.query('#rtECommerceStatusSelFld')[0].getValue(),
                rmpro_status :Ext.ComponentQuery.query('#rtRM_proStatusSelFld')[0].getValue(),
                irugs_status : Ext.ComponentQuery.query('#rtirugzStatusSelFld')[0].getValue(),
                vip_status : Ext.ComponentQuery.query('#rtVipStatusSelFld')[0].getValue()

            };


         var prevRec = rtRecord.get('store_products') ;

        if(
             (!prevRec )||

            (dataToUpdate.store_products.datalink_status && dataToUpdate.store_products.datalink_status != prevRec.datalink_status ) ||

          (dataToUpdate.store_products.ecatalog_status && dataToUpdate.store_products.ecatalog_status != prevRec.ecatalog_status ) ||

           (dataToUpdate.store_products.ecommerce_status && dataToUpdate.store_products.ecommerce_status != prevRec.ecommerce_status ) ||

           (dataToUpdate.store_products.rmpro_status && dataToUpdate.store_products.rmpro_status != prevRec.rmpro_status ) ||

           (dataToUpdate.store_products.irugs_status && dataToUpdate.store_products.irugs_status != prevRec.irugs_status )  ||

           (dataToUpdate.store_products.vip_status && dataToUpdate.store_products.vip_status != prevRec.vip_status )


        ){



                    rtRecord.set('store_products',dataToUpdate.store_products);




                    RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);



        }
         function suc(){

                        //rtRecord.set('product_billng',recToUpdate.product_billng);

                          RMdatalink.app.getController('Main').updateRetailerRecords("store_products",dataToUpdate.store_products, rtRecord.get('_id')) ;



                    }
                    function err(){

                    }









    },

    setRtlAccDtl: function() {
         var selectedUserRecord = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;

         var record = selectedUserRecord.record  ;
        var name = record.data.store_name.toUpperCase() ;

          Ext.ComponentQuery.query('#storeNameOrderLabelItemID')[0].setHtml(
                '<div class="x-rm-rdstoreother-details"><div>'+name+'</div>'+
                '<a href="#card2"">ACCOUNT NO #'+record.data.account_no+'</a></div>'
            );
    },

    setAccNoForNewRt: function() {
        //db.dev_rdl_masterretailerrecords.find({account_no: { $exists: true}},{account_no:1}).sort({account_no:1/-1}).limit(-1)
            Ext.ComponentQuery.query('#RDAccountDetails')[0].setValue("");
             RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1 ,pageSize: -1 ,sortBy:{account_no:1/-1},
                 query:{account_no: { $exists: true}},
                fields:{account_no:1}},success,error);

            var accountNo = 9999 ;
            function success(){

                accountNo = arguments[0].items[0].account_no ;// parseInt(arguments[0].items[0].account_no,1) ;

                var temp = parseInt(accountNo) ;
                temp = temp + 1 ;

                Ext.ComponentQuery.query('#RDAccountDetails')[0].setValue(temp);
            }

            function error(){

            }
    },

    checkForDuplicateAccountNo: function() {


        var that = this ;
          var tempACCNo = Ext.ComponentQuery.query('#RDAccountDetails')[0].getValue();
        if(tempACCNo == ""){

            that.saveRetailersDetailedView() ;
            return ;
        }

        var selectedRow = RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();

                //RMdatalink.util.globalConfig.setDataInRetailerScreenForSaveOrCancel( {}  );

                console.log("selectedRow" ,selectedRow);

                if(!Object.keys(selectedRow).length){
                    that.saveRetailersDetailedView() ;
                    return ;

                }

        var recData = selectedRow.record.data ;

        var rtId = recData._id ;



         Ext.Viewport.setMasked({
                            xtype: 'loadmask',message:"Validating Account Number..."
                        });




          RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1 ,pageSize: 10 ,sortBy:{},
                                      query:{
                                                  _id: { $ne: rtId } ,
                                                  account_no:tempACCNo
                                            },
                                 fields:{account_no:1}},success,error);


            function success(){

                if(arguments[0].items.length > 0){
                     that.config.accNoChk = 0 ;
                     Ext.Viewport.setMasked(false);
                     Ext.Msg.alert('Alert.', "This account is already given to another retailer.", Ext.emptyFn);
                }else{

                    that.saveRetailersDetailedView() ;
                }

            }

            function error(){
                that.saveRetailersDetailedView() ;
            }
    },

    onCancelEditBtnTap: function(button, component) {
        console.log("WOHOO");
            if(button.getText() == "Edit"){

                 component.down('#detailsSaveBtn').setHidden(false);
                 button.setText("Cancel") ;
                 this.disableEnableComponents(false) ;
                 this.setTemplateOfListByEditingMode(true , true);


            }else{

                component.down('#detailsSaveBtn').setHidden(true);
                 button.setText("Edit") ;
                 this.disableEnableComponents(true) ;
                 this.setTemplateOfListByEditingMode(false , true);

            }

    },

    disableEnableComponents: function(status) {




            this.config.isEditMode = ! status ;

            var rtvPanel = Ext.ComponentQuery.query('#RDretailers_vendorsDetailViewContainer')[0] ;



            var edtCanclbBtn = rtvPanel.down('#detailsEditCancelBtn') ;

            if(status){
                     rtvPanel.down('#detailsSaveBtn').setHidden(true);
                     edtCanclbBtn.setText("Edit") ;


            }else{

                rtvPanel.down('#detailsSaveBtn').setHidden(false);
                edtCanclbBtn.setText("Cancel") ;
            }




        rtvPanel.down('#headerEditingLbl').setHidden(status);

        Ext.ComponentQuery.query('#RDStoreTabFormPanel')[0].setDisabled(status);
        Ext.ComponentQuery.query('#retailerEcommerceForm')[0].setDisabled(status);


                var component = Ext.ComponentQuery.query('#RDStoresTab')[0];
        Ext.ComponentQuery.query('#rm_selectFileForStore')[0].setDisabled(status);




        var selectFlds = document.getElementsByClassName('rtDtllsinputFlds');

        for( var i = 0 ; i< selectFlds.length ; i++ ){

            selectFlds[i].disabled = status  ;
        }

        rtvPanel.down('#rtDetlViewSubscriptionsBtn').setDisabled(!status);


        rtvPanel.down('#RDStoreTabResetPwdBtn').setDisabled(status);

        rtvPanel.down('#rtDtlProductStatusForm').setDisabled(status);
        rtvPanel.down('#rtAdditionalInfoForm').setDisabled(status);
        rtvPanel.down('#retailerLocationAddBtn').setDisabled(status);
        rtvPanel.down('#CmpContactDelBtn').setDisabled(status);
        rtvPanel.down('#CmpContactAddBtn').setDisabled(status);

        rtvPanel.down('#REPSDelBtn').setDisabled(status);
        rtvPanel.down('#REPSAddBtn').setDisabled(status);
        rtvPanel.down('#RDTechSupportAddBtn').setDisabled(status);
        rtvPanel.down('#RDTechSupportDelBtn').setDisabled(status);
        rtvPanel.down('#RDTechSupportLogsStatusSelectFld').setDisabled(status);

        rtvPanel.down('#RDNotesAddBtn').setDisabled(status);
        rtvPanel.down('#RDNotesDelBtn').setDisabled(status);
        rtvPanel.down('#RDNotepadNote').setDisabled(status);
        rtvPanel.down('#RDManagerBlueStickyTextArea').setDisabled(status);
        rtvPanel.down('#RDManagerRelationDetailsForm').setDisabled(status);
        rtvPanel.down('#RDCRMNotesBlueStickyTextArea').setDisabled(status);

        rtvPanel.down('#RDUserProfileBlueStickyTextArea').setDisabled(status);
        rtvPanel.down('#RDUserProfileRelationDetailsForm').setDisabled(status);
        rtvPanel.down('#ActRDManagerBlueStickyTextArea').setDisabled(status);
        rtvPanel.down('#ActRDManagerRelationDetailsForm').setDisabled(status);

        /*
        rtvPanel.down('#').setDisabled(status);
        */


        // Ext.ComponentQuery.query('#RDInStoreVendorList')[0].down('#mainList').setDisableSelection(status);
        Ext.ComponentQuery.query('#CmpContactMainListWithHeader')[0].down('#mainList').setDisableSelection(status);

        Ext.ComponentQuery.query('#rtDtlNotesLsPanel')[0].down('#mainList').setDisableSelection(status);
        Ext.ComponentQuery.query('#RDCRMList')[0].down('#mainList').setDisableSelection(status);

        // Ext.ComponentQuery.query('#RDInStoreVendorsList')[0].down('#mainList').setDisableSelection(status);
        // Ext.ComponentQuery.query('#RDOnlineVendorsList')[0].down('#mainList').setDisableSelection(status);



    },

    onTapOfProductList: function(dataview, index, target, record, e, eOpts) {
        ///THIS FUNCTION IS CALLED WHEN ITEM TAP PRESENT IN onRDStoreProductsListSelect FUNCTION DETERMINES THAT USER HAS TAPPED TO VIEW DIFFERENT LIST

            var pospectActiveListContainer = Ext.ComponentQuery.query("#pospectActiveListContainer")[0];



        // index set is
        /*
        *
        * 1 - E-commerce
        * 0 - Datalink
        *  Other can be added if neccessary.But Do Not Disturb this index
        *
        *
        *
        *
        *
        *
        *
        */

        if(record.data.ProductName == "E-Commerce"){


            console.log("USER WANT TO SEE E-COMMERCE LIST");


                pospectActiveListContainer.setActiveItem(1);
        }else if(record.data.ProductName ==  "VIP"){


            console.log("USER WANTS TO SEE VIP LIST");
             pospectActiveListContainer.setActiveItem(2);
        }else{

        //        var pospectActiveListContainer = Ext.ComponentQuery.query("#pospectActiveListContainer")[0];
                pospectActiveListContainer.setActiveItem(0);

            console.log("SHOW THEM LIST ");

        }
    }

});