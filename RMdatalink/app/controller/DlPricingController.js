/*
 * File: app/controller/DlPricingController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.DlPricingController', {
    extend: 'Ext.app.Controller',

    config: {
        isPricingUpdated: false,

        control: {
            "selectfield[itemId=pricingPolicySkuAddlImgsIncrementSelectFld]": {
                change: 'onSkuAddlImagesPolicySelectfieldChange'
            },
            "selectfield[itemId=datalinkPoductBundeleSelectFld]": {
                change: 'ondatalinkPoductBundeleSelectFldChange'
            },
            "selectfield[itemId=dlVendorBundleSelectFld]": {
                change: 'ondlVendorBundleSelectFldChange'
            },
            "selectfield[itemId=policySelectSI]": {
                change: 'onpolicySelectSIChange'
            },
            "selectfield[itemId=policySelectAI]": {
                change: 'onpolicySelectAIChange'
            },
            "selectfield[itemId=discountPolicySlct]": {
                change: 'ondiscountPolicySlctChange'
            },
            "selectfield[itemId=SKUdiscountPolicySlct]": {
                change: 'onSKUdiscountPolicySlctChange'
            },
            "selectfield[itemId=dlpolicySelectVendors]": {
                change: 'ondlpolicySelectVendorsChange'
            }
        }
    },

    onSkuAddlImagesPolicySelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {
        if(!newValue){

            return ;
        }

        console.log(newValue) ;
        var slStr = Ext.getStore('DlVdPricingSkuImgsAddlImages') ;

        var dIndex = slStr.findExact('value',newValue) ;
        var data = slStr.getData().all[dIndex].data.policy ;

         var list =   Ext.ComponentQuery.query('#pricingPolicySkuImgsAddImgsListPnl')[0].down("#mainList");
         RMdatalink.util.globalMethods.fillListDataByListObject(list,data);

        var rec = slStr.getData().all[dIndex].data ;


        RMdatalink.app.getController('BillingDetailsController').updateVdrsAsAddlImgPolicyChange(rec);

        this.setDefaultDlTpl() ;

        var timeout = setTimeout(function(){

                              var vndStr = Ext.getStore('vendors.Master') ;
                                vndStr.clearFilter();

                                RMdatalink.app.getController('BillingDetailsController').loadVendorTotalCountData() ;

                                var dlList = Ext.ComponentQuery.query('#dataLinkListItemID')[0].down('#pricingList') ;
                                dlList.refresh();
                                clearTimeout(timeout);
                            },100);



    },

    ondatalinkPoductBundeleSelectFldChange: function(selectfield, newValue, oldValue, eOpts) {
        if(!newValue){
            return ;
        }

        var form = Ext.ComponentQuery.query('#datalinkProductSetupSideP1')[0] ;

        var store = selectfield.getStore() ;

        var data = null ;
        var i = 0 ;
        for(i=0 ; i < store.getData().all.length ; i++){

            if(newValue == store.getData().all[i].data.value ){
                data = store.getData().all[i].data ;
                break ;
            }
        }

        if(!data){
            data = store.getData().all[i-1].data ;
        }

        form.down('#datalinkPoductBundeleTextFld').setValue(data.text) ;

        form.down('#datalinkPoductBundelePriceTextFld').setValue(data.price) ;

        form.down('#addUpdate').setText("Update");


        this.selectDlProducts(data.products) ;
    },

    ondlVendorBundleSelectFldChange: function(selectfield, newValue, oldValue, eOpts) {
        if(!newValue){
            return ;
        }

        var form = Ext.ComponentQuery.query('#datalinkVendorBundleSetupPanel')[0] ;

        var store = selectfield.getStore() ;

        var data = null ;
        var i = 0 ;
        for(i=0 ; i < store.getData().all.length ; i++){

            if(newValue == store.getData().all[i].data.value ){
                data = store.getData().all[i].data ;
                break ;
            }
        }

        if(!data){
            data = store.getData().all[i-1].data ;
        }

        form.down('#dlVendorBundleTxtFld').setValue(data.text) ;

        form.down('#dlVendorPriceFld').setValue(data.price) ;

        form.down('#addUpdate').setText("Update");


        this.selectDlVendors(data.vendors) ;
    },

    onpolicySelectSIChange: function(selectfield, newValue, oldValue, eOpts) {
        if(!newValue){
            return ;
        }

        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgsSetUpPanel')[0] ;

        var store = selectfield.getStore() ;

        var data = null ;
        var i = 0 ;
        for(i=0 ; i < store.getData().all.length ; i++){

            if(newValue == store.getData().all[i].data.value ){
                data = store.getData().all[i].data ;
                break ;
            }
        }

        if(!data){
            data = store.getData().all[i-1].data ;
        }

        form.down('#range').setValue(data.range) ;

        form.down('#stdStart').setValue(data.std_start) ;
        form.down('#stdIncrement').setValue(data.std_increment) ;

        form.down('#promoStart').setValue(data.promo_start) ;
        form.down('#promoIncrement').setValue(data.promo_increment);


        form.down('#policyText').setValue(data.text) ;

        form.down('#addUpdate').setText("Update");
    },

    onpolicySelectAIChange: function(selectfield, newValue, oldValue, eOpts) {

        if(!newValue){
            return ;
        }

        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgs_addlImgsSetUpPanel')[0] ;

        var store = selectfield.getStore() ;

        var data = null ;
        var i = 0 ;
        for(i=0 ; i < store.getData().all.length ; i++){

            if(newValue == store.getData().all[i].data.value ){
                data = store.getData().all[i].data ;
                break ;
            }
        }

        if(!data){
            data = store.getData().all[i-1].data ;
        }

        form.down('#range').setValue(data.range) ;

        form.down('#stdStart').setValue(data.std_start) ;
        form.down('#stdIncrement').setValue(data.std_increment) ;

        form.down('#promoStart').setValue(data.promo_start) ;
        form.down('#promoIncrement').setValue(data.promo_increment);


        form.down('#policyText').setValue(data.text) ;

        form.down('#addUpdate').setText("Update");
    },

    ondiscountPolicySlctChange: function(selectfield, newValue, oldValue, eOpts) {

        if(!newValue){
            return ;
        }

        var form = Ext.ComponentQuery.query('#dlVdrPricingVdrDiscountSetUpPanel')[0] ;

        var store = selectfield.getStore() ;

        var data = null ;
        var i = 0 ;
        for(i=0 ; i < store.getData().all.length ; i++){

            if(newValue == store.getData().all[i].data.value ){
                data = store.getData().all[i].data ;
                break ;
            }
        }

        if(!data){
            data = store.getData().all[i-1].data ;
        }

        form.down('#range').setValue(data.range) ;

        form.down('#start').setValue(data.disc_start) ;
        form.down('#increment').setValue(data.disc_increment) ;


        form.down('#discountPolicySlctTxt').setValue(data.text) ;

        form.down('#addUpdate').setText("Update");



    },

    onSKUdiscountPolicySlctChange: function(selectfield, newValue, oldValue, eOpts) {

        if(!newValue){
            return ;
        }

        var form = Ext.ComponentQuery.query('#dlVdrPricingSKUDiscountSetUpPanel')[0] ;

        var store = selectfield.getStore() ;

        var data = null ;
        var i = 0 ;
        for(i=0 ; i < store.getData().all.length ; i++){

            if(newValue == store.getData().all[i].data.value ){
                data = store.getData().all[i].data ;
                break ;
            }
        }

        if(!data){
            data = store.getData().all[i-1].data ;
        }

        form.down('#range').setValue(data.range) ;

        form.down('#start').setValue(data.disc_start) ;
        form.down('#increment').setValue(data.disc_increment) ;


        form.down('#discountPolicySlctTxt').setValue(data.text) ;

        form.down('#addUpdate').setText("Update");



    },

    ondlpolicySelectVendorsChange: function(selectfield, newValue, oldValue, eOpts) {
        if(!newValue){
            return ;
        }
        function f1(val){

            if(val.product_price && val.product_price.ecom && val.product_price.ecom.standard_price )
            {
             return formatNum(values.product_price.ecom.standard_price) ;
            }

            return "0.00" ;


        }

        function f2(val){

            if(val.product_price && val.product_price.ecom && val.product_price.ecom.promotional_price )
            {
             return formatNum(values.product_price.ecom.promotional_price) ;
            }

            return "0.00" ;


        }


        function f3(val){

            if(val.product_price && val.product_price.ecom && val.product_price.ecom.standard_price_addlimg )
            {
             return formatNum(values.product_price.ecom.standard_price_addlimg) ;
            }

            return "0.00" ;


        }

        function f4(val){

            if(val.product_price && val.product_price.ecom && val.product_price.ecom.promotional_price_addlimg )
            {
             return formatNum(values.product_price.ecom.promotional_price_addlimg) ;
            }

            return "0.00" ;


        }

        var component = Ext.ComponentQuery.query('#dataLinkListItemID')[0] ;
            var headers = component.down("#pricingListHeader");
                    headers.setData([{is_selected:false}]);

            headers.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="border-bottom: 1px solid #9b9b9b; background-color: gainsboro;font-weight: bold;color: #555;font-size: 1.0em;padding:0 0px 0 0px !important;height:64px;">',
                           '    <div style="width: 4%;padding-top: 44px;">',
                           '        <div style="width: 19px; height:19px;{[this.getCartImage(values)]}" {[RMdatalink.util.globalConfig.getListAttrForDelHandling()]} ="onCartTap"  ></div>',
                           '    </div>',
                           '    <div class="rightBorderDiv" style="width: 8%;text-align: center;padding-top: 44px;" data-name="vendor_name">',
                           '        Vendor&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',

                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;padding-top: 44px;" data-name="sku">',
                           '        SKU&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',

                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;padding-top: 44px;" data-name="collections">',
                           '        Collection&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;padding-top: 44px;" data-name="design">',
                           '        Design&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',


                           '    <div class="rightBorderDiv" style=" width: 6.4%;text-align: center;padding-top: 44px;" data-name="no_of_images">',
                           '        Images&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',

                           '    <div class="rightBorderDiv" style=" width: 6.4%;text-align: center;padding-top: 24px;" data-name="no_of_additional_images">',
                           '     <div style="">Addl.</div><div style="width:100%;">Images<img src="resources/images/button_icons/downArrow.png"/></div>   ',

                          /* '        Addl. Images&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',*/
                           '    </div>',

                           '    <div class="rightBorderDiv" style=" width: 28%;text-align: center;">',
                           '    <div style="border-bottom: 1px solid #9b9b9b;">SKUs + Images</div>     ',
                           '    <div style="border-bottom: 1px solid #9b9b9b;"> <div style="width:50%;border-right: 1px solid #9b9b9b; float: left;">Value Calculator</div><div style="width:100%;">Price</div></div>     ',
                           '    <div> <div style="width:25%;border-right: 1px solid #9b9b9b; float: left;">Hrs</div><div style="width:25%;border-right: 1px solid #9b9b9b; float: left;">Days</div><div style="width:25%;float: left;border-right: 1px solid #9b9b9b;">Std</div> <div style="width:100%;">Promo</div></div>     ',
                           '    </div>',


                           '    <div class="rightBorderDiv" style=" width: 28%;text-align: center;">',
                           '    <div style="border-bottom: 1px solid #9b9b9b;">SKUs + Images + Addl Images</div>     ',
                           '    <div style="border-bottom: 1px solid #9b9b9b;"> <div style="width:50%;border-right: 1px solid #9b9b9b; float: left;">Value Calculator</div><div style="width:100%;">Price</div></div>     ',
                           '    <div> <div style="width:25%;border-right: 1px solid #9b9b9b; float: left;">Hrs</div><div style="width:25%;border-right: 1px solid #9b9b9b; float: left;">Days</div><div style="width:25%;float: left;border-right: 1px solid #9b9b9b;">Std</div> <div style="width:100%;">Promo</div></div>     ',
                           '    </div>',
                           '</div>',
                           {
                               getCartImage:function(values){
                                   if(values.is_selected){
                                       return "background-image: url('resources/images/retailerDetail/cart_selected.png') !important;";
                                   }

                                   return "background-image: url('resources/images/retailerDetail/cart_unselected.png') !important;" ;
                               }
                           }
                          )
            );


        headers.setHeight(66);
                     headers.setMode('MULTI');
                headers.addCls('x-rm-rdvendorslist');
            headers.refresh();
            var list = component.down('#pricingList');

           list.setStore('vendors.Master');

         //   list.setStore('vendorTempRecordStore');//'vendors.Master'
        //      '    <div style="width: 10%;" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(SKU)]}</div>',



             list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;padding:0 0px 0 0px !important;">',

                           '    <div style="width: 4%;">',
                           '        <div style="width: 19px; height:19px;"    {[RMdatalink.util.globalConfig.getListAttrForDelHandling()]} ="onCartTap" ></div>',
                           '    </div>',

                           '    <div class="rightBorderDiv" style="width: 8%;padding-left:10px;" >{vendor_name}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.SKU)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.collections)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.design)]}</div>',

                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.no_of_images)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.no_of_additional_images)]}</div>',

                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" >{[this.calHrsBySkuImages(values)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" >{[this.calDaysBySkuImages(values)]}</div>',

                           '  <div class="rightBorderDiv" style="width: 6.98%;" > <div style="float: left;">$</div>  <input type="text" style="width: 80%;text-align: right;height: 18px;" class="x-rm-pricing-input-field prodDlSetupFlds" data-id="{_id}" value="{[formatNum(values.dl_std)]}" field="standard_price" maxlength="8"',
                           '      onchange="RMdatalink.app.getController(\'ecomPricingController\').onupdateVdr(this,\'dl_std\');" /></div>',
                           '  <div class="rightBorderDiv" style="width: 6.98%;" > <div style="float: left;">$</div>  <input type="text" style="width: 80%;text-align: right;height: 18px;" class="x-rm-pricing-input-field prodDlSetupFlds" data-id="{_id}" value="{[formatNum(values.dl_promo)]}" field="promotional_price" maxlength="8"',
                           '      onchange="RMdatalink.app.getController(\'ecomPricingController\').onupdateVdr(this,\'dl_promo\');" /></div>',




                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" >{[this.calHrsBySkuImagesAddlImages(values)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" >{[this.calDaysBySkuImagesAddlImages(values)]}</div>',

                           '  <div  class="rightBorderDiv" style="width: 6.98%;" > <div style="float: left;">$</div>  <input type="text" style="width: 80%;text-align: right;height: 18px;" class="x-rm-pricing-input-field prodDlSetupFlds" data-id="{_id}" value="{[formatNum(values.dl_std_addl)]}" field="standard_price_addlimg" maxlength="8"',
                           '      onchange="RMdatalink.app.getController(\'ecomPricingController\').onupdateVdr(this,\'dl_std_addl\');" /></div>',
                           '  <div  class="rightBorderDiv" style="width: 6.98%;" > <div style="float: left;">$</div>  <input type="text" style="width: 80%;text-align: right;height: 18px;" class="x-rm-pricing-input-field prodDlSetupFlds" data-id="{_id}" value="{[formatNum(values.dl_promo_addl)]}" field="promotional_price_addlimg" maxlength="8"',
                           '      onchange="RMdatalink.app.getController(\'ecomPricingController\').onupdateVdr(this,\'dl_promo_addl\');" /></div>',



                           '</div>',
                            {
                               getCalculatedValue: function(sku){
                                   if(sku)
                                   {
                                       var  result = (sku * 5)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               },

                                 calHrsBySkuImages: function(values){

                                   var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;
                                    var time_taken_images = 5 ;
                                    var time_taken_images_addl_images = 10 ;


                                    if(pricingData && pricingData[0]){

                                         time_taken_images = pricingData[0].time_taken_images  ;
                                         time_taken_images_addl_images = pricingData[0].time_taken_images_addl_images ;


                                    }


                                   if(values.SKU && values.no_of_images)
                                   {
                                       var sku = parseInt(values.SKU) + parseInt(values.no_of_images) ;
                                       var  result = (sku * time_taken_images)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               },


                                 calDaysBySkuImages: function(values){

                                   var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;
                                    var time_taken_images = 5 ;
                                    var time_taken_images_addl_images = 10 ;


                                    if(pricingData && pricingData[0]){

                                         time_taken_images = pricingData[0].time_taken_images  ;
                                         time_taken_images_addl_images = pricingData[0].time_taken_images_addl_images ;


                                    }


                                   if(values.SKU && values.no_of_images)
                                   {
                                       var sku = parseInt(values.SKU) + parseInt(values.no_of_images) ;
                                       var  result = (sku * time_taken_images)/60 ;
                                       result = result / 8 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               },

                                 calHrsBySkuImagesAddlImages: function(values){

                                    var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;
                                    var time_taken_images = 5 ;
                                    var time_taken_images_addl_images = 10 ;


                                    if(pricingData && pricingData[0]){

                                         time_taken_images = pricingData[0].time_taken_images  ;
                                         time_taken_images_addl_images = pricingData[0].time_taken_images_addl_images ;


                                    }


                                   if(values.SKU && values.no_of_images && values.no_of_additional_images )
                                   {
                                       var sku = parseInt(values.SKU) + parseInt(values.no_of_images) +parseInt(values.no_of_additional_images) ;
                                       var  result = (sku * time_taken_images_addl_images)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               },

                                  calDaysBySkuImagesAddlImages: function(values){


                                     var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;
                                    var time_taken_images = 5 ;
                                    var time_taken_images_addl_images = 10 ;


                                    if(pricingData && pricingData[0]){

                                         time_taken_images = pricingData[0].time_taken_images  ;
                                         time_taken_images_addl_images = pricingData[0].time_taken_images_addl_images ;


                                    }

                                   if(values.SKU && values.no_of_images && values.no_of_additional_images )
                                   {
                                       var sku = parseInt(values.SKU) + parseInt(values.no_of_images) +parseInt(values.no_of_additional_images) ;
                                       var  result = (sku * time_taken_images_addl_images)/60 ;
                                        result = result / 8 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               }

                           }

                          )
            );

                list.setItemHeight(22);
                list.setMode('MULTI');
                list.addCls('x-rm-rdvendorslist');


        var form = Ext.ComponentQuery.query('#DlVdrPricingbyVendorsPanel')[0] ;
        form.down('#policyText').setValue(newValue);

        form.down('#addUpdate').setText("Update");



        var vdrStr = Ext.getStore('vendors.Master') ;

        var store = selectfield.getStore() ;

        var data = null ;
        var i = 0 ;
        for(i=0 ; i < store.getData().all.length ; i++){

            if(newValue == store.getData().all[i].data.value ){
                data = store.getData().all[i].data ;
                break ;
            }
        }

        if(!data){
            data = store.getData().all[i-1].data ;
        }

        for(var i= 0 ; i < data.policy.length ; i++){


            var vid = data.policy[i].vendor_id ;

            var rec = getVrec(vid);

            rec.set("dl_std",data.policy[i].dl_std);
            rec.set("dl_promo",data.policy[i].dl_promo);
            rec.set("dl_std_addl",data.policy[i].dl_std_addl);
            rec.set("dl_promo_addl",data.policy[i].dl_promo_addl);
        }



        function getVrec(vid1){

            var ss = Ext.getStore('vendors.Master');

                 for(var i=0 ; i < ss.getData().all.length; i++){

        		if(ss.getData().all[i].data._id == vid1){
        			return ss.getData().all[i] ;
        		}

        	}
        	return null ;
        }

         Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].reset() ;
         Ext.ComponentQuery.query('#pricingPolicySkuAddlImgsIncrementSelectFld')[0].reset() ;

        /*
        ecompolicySelectVendors

        ecomVendorBundleSelectFld
        ecompricingPolicySkuIncrementSelectFld
        ecompricingPolicySkuAddlImgsIncrementSelectFld
        ecomDiscountPolicyVendorsIncrementSelectFld
        ecomDiscountPolicySKUIncrementSelectFld

        */
    },

    updateVendorPricing: function() {



        var dataToUpdate = {

            vendor_pricing_vendors:[]
        };


        var form = Ext.ComponentQuery.query('#DlVdrPricingbyVendorsPanel')[0] ;

        var fieldStore = form.down('#dlpolicySelectVendors').getStore() ;

        var policyText = form.down('#policyText').getValue() ;

        var isAddNew = form.down('#addUpdate').getText() == "Add" ;

        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var curOptVal =  form.down('#dlpolicySelectVendors').getValue();

        if(!options || options.length === 0 ){


            options = [] ;
        }


        var tempRec = {

                text :policyText,
                value: policyText,
                policy:getPolicyArray()


            };

        if(isAddNew){
            options.push(tempRec);

            fieldStore.add(tempRec);
        }else{

            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

             options[opIndex]= tempRec ;

            fieldStore.getAt(opIndex).set(tempRec) ;


        }
        //  Ext.ComponentQuery.query('#productDatalinkMainPanel')[0].setMasked( {
        //                 xtype: 'loadmask'
        //             });
        var store = Ext.getStore('pricing.MainStore') ;

        //this.config.isPricingUpdated = true ;

        dataToUpdate.vendor_pricing_vendors = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;

        this.updatePricingStore(_id,'vendor_pricing_vendors',dataToUpdate.vendor_pricing_vendors );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);

        if(isAddNew){

            form.down('#policyText').setValue("");

            form.down('#addUpdate').setText("Add");

            form.down('#dlpolicySelectVendors').reset();
        }

        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }


        function getPolicyArray(){
            var policy = [] ;

            var vdrStore = Ext.getStore('vendors.Master');
           var tarr = RMdatalink.util.globalMethods.getArrayDataFromStore(vdrStore) ;

            for(var i=0; i < tarr.length ; i++){


                var temp = {
                    vendor_id:tarr[i]._id

                };

                    temp.dl_std =tarr[i].dl_std ;
                    temp.dl_promo=tarr[i].dl_promo ;
                    temp.dl_std_addl=tarr[i].dl_std_addl ;
                    temp.dl_promo_addl=tarr[i].dl_promo_addl ;
                policy.push(temp) ;
            }


            return policy ;


        }

        /*

        product_price.ecom.standard_price
        product_price.ecom.promotional_price

        product_price.ecom.standard_price_addlimg
        product_price.ecom.promotional_price_addlimg

        */
    },

    setDefaultDlTpl: function() {
         Ext.ComponentQuery.query('#dlpolicySelectVendors')[0].reset() ;

        var component = Ext.ComponentQuery.query('#dataLinkListItemID')[0] ;
        var list = component.down('#pricingList');
             list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;padding:0 0px 0 0px !important;">',

                           '    <div style="width: 4%;">',
                           '        <div style="width: 19px; height:19px;"    {[RMdatalink.util.globalConfig.getListAttrForDelHandling()]} ="onCartTap" ></div>',
                           '    </div>',

                           '    <div class="rightBorderDiv boldText" style="width: 8%;padding-left:10px;" >{vendor_name}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.SKU)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.collections)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.design)]}</div>',

                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.no_of_images)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.4%;text-align: center;" >{[formatNormalNum(values.no_of_additional_images)]}</div>',

                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" >{[this.calHrsBySkuImages(values)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" >{[this.calDaysBySkuImages(values)]}</div>',

                         '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" > $ {[formatNum(values.product_price.datalink.standard_price)]} </div>',
                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" > $ {[formatNum(values.product_price.datalink.promotional_price)]} </div>',



                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" >{[this.calHrsBySkuImagesAddlImages(values)]}</div>',
                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" >{[this.calDaysBySkuImagesAddlImages(values)]}</div>',

                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" > $ {[formatNum(values.product_price.datalink.standard_price_addlimg)]} </div>',
                           '    <div class="rightBorderDiv" style="width: 6.98%;text-align: center;" > $ {[formatNum(values.product_price.datalink.promotional_price_addlimg)]} </div>',



                           '</div>',
                            {
                               getCalculatedValue: function(sku){
                                   if(sku)
                                   {
                                       var  result = (sku * 5)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               },

                                 calHrsBySkuImages: function(values){

                                   var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;
                                    var time_taken_images = 5 ;
                                    var time_taken_images_addl_images = 10 ;


                                    if(pricingData && pricingData[0]){

                                         time_taken_images = pricingData[0].time_taken_images  ;
                                         time_taken_images_addl_images = pricingData[0].time_taken_images_addl_images ;


                                    }


                                   if(values.SKU && values.no_of_images)
                                   {
                                       var sku = parseInt(values.SKU) + parseInt(values.no_of_images) ;
                                       var  result = (sku * time_taken_images)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               },


                                 calDaysBySkuImages: function(values){

                                   var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;
                                    var time_taken_images = 5 ;
                                    var time_taken_images_addl_images = 10 ;


                                    if(pricingData && pricingData[0]){

                                         time_taken_images = pricingData[0].time_taken_images  ;
                                         time_taken_images_addl_images = pricingData[0].time_taken_images_addl_images ;


                                    }


                                   if(values.SKU && values.no_of_images)
                                   {
                                       var sku = parseInt(values.SKU) + parseInt(values.no_of_images) ;
                                       var  result = (sku * time_taken_images)/60 ;
                                       result = result / 8 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               },

                                 calHrsBySkuImagesAddlImages: function(values){

                                    var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;
                                    var time_taken_images = 5 ;
                                    var time_taken_images_addl_images = 10 ;


                                    if(pricingData && pricingData[0]){

                                         time_taken_images = pricingData[0].time_taken_images  ;
                                         time_taken_images_addl_images = pricingData[0].time_taken_images_addl_images ;


                                    }


                                   if(values.SKU && values.no_of_images && values.no_of_additional_images )
                                   {
                                       var sku = parseInt(values.SKU) + parseInt(values.no_of_images) +parseInt(values.no_of_additional_images) ;
                                       var  result = (sku * time_taken_images_addl_images)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               },

                                  calDaysBySkuImagesAddlImages: function(values){


                                     var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;
                                    var time_taken_images = 5 ;
                                    var time_taken_images_addl_images = 10 ;


                                    if(pricingData && pricingData[0]){

                                         time_taken_images = pricingData[0].time_taken_images  ;
                                         time_taken_images_addl_images = pricingData[0].time_taken_images_addl_images ;


                                    }

                                   if(values.SKU && values.no_of_images && values.no_of_additional_images )
                                   {
                                       var sku = parseInt(values.SKU) + parseInt(values.no_of_images) +parseInt(values.no_of_additional_images) ;
                                       var  result = (sku * time_taken_images_addl_images)/60 ;
                                        result = result / 8 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               }

                           }

                          )
            );
    },

    initialsePricingList: function() {
        var that = this ;

        var headers =  Ext.ComponentQuery.query('#pricingPolicySkuImgsAddImgsListPnl')[0].down("#headerList");
            headers.setData([{}]);
            headers.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;border-bottom: 1px solid #9b9b9b; background-color: gainsboro;font-weight: bold;color: #555;font-size: 0.8em;">',
                           '    <div style="width: 22%;margin-left:10px;" data-name="from_sku">',
                           '        FROM&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 22%;" data-name="to_sku">',
                           '        TO&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 27%;" data-name="standard">',
                           '        STANDARD&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 27%;" data-name="promotional">',
                           '        PROMOTIONAL&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );
            headers.refresh();
            // ** MAIN LIST ****
            var list =   Ext.ComponentQuery.query('#pricingPolicySkuImgsAddImgsListPnl')[0].down("#mainList");

            // list.setStore(Ext.getStore("pricing.datalink_pricing"));

            list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                           '    <div style="width: 22%;text-align: center;" >{from}</div>',
                           '    <div style="width: 22%;text-align: center;" >{to}</div>',
                           '  <div style="width: 26%;" > <div style="float: left;">$</div>  <input type="text" style="width: 80%;text-align: right;height: 18px;" class="x-rm-pricing-input-field prodDlSetupFlds" data-id="{id}" value="{[formatNum(values.std)]}" field="standardPricingPolicy" maxlength="8"',

                           '      onchange="RMdatalink.app.getController(\'DlPricingController\').onUpdateSkuImgAddlImgs(this,\'std\');" /></div>',
                           '  <div style="width: 26%;" > <div style="float: left;">$</div>  <input type="text" style="width: 80%;text-align: right;height: 18px;" class="x-rm-pricing-input-field prodDlSetupFlds" data-id="{id}" value="{[formatNum(values.promo)]}" field="promotionalPricingPolicy" maxlength="8"',

                           '      onchange="RMdatalink.app.getController(\'DlPricingController\').onUpdateSkuImgAddlImgs(this,\'promo\');" /></div>',
                           '</div>'

                          )
            );















          var headers1 =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down("#headerList"); //component.innerItems[1].innerItems[0];
            headers1.setData([{}]);
            headers1.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;border-bottom: 1px solid #9b9b9b; background-color: gainsboro;font-weight: bold;color: #555;font-size: 0.92em;">',
                           '    <div style="width: 30%;text-align: center;" data-name="of_vendors">',
                           '        From&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 30%;text-align: center;" data-name="discount_level">',
                           '       To&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 35%;text-align: center;" data-name="discount_level">',
                           '       %&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );
            headers1.refresh();
            // ** MAIN LIST ****
            var list1 =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down("#mainList"); //component.innerItems[1].innerItems[1];

            list1.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                            '    <div style="width: 30%;text-align: center;" >{from}</div>',
                           '    <div style="width: 30%;text-align: center;" >{to}</div>',

                           '  <div style="width: 35%;" > <div style="float: left;">%</div>  <input type="text" style="width: 60%;margin-left: 12%;text-align: center;height: 18px;" class="x-rm-pricing-input-field prodDlSetupFlds" data-id="{id}" value="{disc}" field="discountPricingPolicy" maxlength="4"',

                           '      onchange="RMdatalink.app.getController(\'DlPricingController\').onUpdateVdrDiscount(this,\'disc\');"  /></div>',


                           '</div>'

                          )
            );




          var headers2 =  Ext.ComponentQuery.query('#pricingPolicySKUDiscountList')[0].down("#headerList"); //component.innerItems[1].innerItems[0];
            headers2.setData([{}]);
            headers2.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;border-bottom: 1px solid #9b9b9b; background-color: gainsboro;font-weight: bold;color: #555;font-size: 0.92em;">',
                           '    <div style="width: 30%;text-align: center;" data-name="of_vendors">',
                           '        From&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 30%;text-align: center;" data-name="discount_level">',
                           '       To&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 35%;text-align: center;" data-name="discount_level">',
                           '       %&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );
            headers2.refresh();
            // ** MAIN LIST ****
            var list2 =  Ext.ComponentQuery.query('#pricingPolicySKUDiscountList')[0].down("#mainList"); //component.innerItems[1].innerItems[1];

            list2.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                            '    <div style="width: 30%;text-align: center;" >{from}</div>',
                           '    <div style="width: 30%;text-align: center;" >{to}</div>',

                           '  <div style="width: 35%;" > <div style="float: left;">%</div>  <input type="text" style="width: 60%;margin-left: 12%;text-align: center;height: 18px;" class="x-rm-pricing-input-field prodDlSetupFlds" data-id="{id}" value="{disc}" field="discountPricingPolicy" maxlength="4"',

                           '      onchange="RMdatalink.app.getController(\'DlPricingController\').onUpdateSKUDiscount(this,\'disc\');"  /></div>',


                           '</div>'

                          )
            );




    },

    updatePricingStore: function(_id, key, value) {
        this.config.isPricingUpdated = true ;

        var store = Ext.getStore('pricing.MainStore') ;

        var recIndex = store.findExact('_id',_id) ;

        if( recIndex != -1 ){

            var record = store.getAt(recIndex) ;
            record.set(key,value);

        }

         RMdatalink.app.getController('BillingDetailsController').config.pricingData[0][key] = value ;
    },

    initialseDlVdrPricing: function() {
        var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;

        if(!pricingData[0].vendor_pricing_sku_images){

            return ;
        }

        var DlVdPricingSkuImgsStr = Ext.getStore('DlVdPricingSkuImgs') ;

        DlVdPricingSkuImgsStr.removeAll();

        DlVdPricingSkuImgsStr.setData(pricingData[0].vendor_pricing_sku_images);

        var DlVdPricingSkuImgsAddlImages = Ext.getStore('DlVdPricingSkuImgsAddlImages') ;

        DlVdPricingSkuImgsAddlImages.removeAll();

        DlVdPricingSkuImgsAddlImages.setData(pricingData[0].vendor_pricing_sku_images_addl_images);


        var DlVdPricingVdrDiscount = Ext.getStore('DlVdPricingVdrDiscount') ;

        DlVdPricingVdrDiscount.removeAll();

        DlVdPricingVdrDiscount.setData(pricingData[0].vendor_pricing_vdr_discount);


        var DatalinkProductBundle = Ext.getStore('DatalinkProductBundle') ;

        DatalinkProductBundle.removeAll();

        DatalinkProductBundle.setData(pricingData[0].datalink_vendor_bundle);



        var DatalinkProductBundle = Ext.getStore('DatalinkProductBundle') ;

        DatalinkProductBundle.removeAll();

        DatalinkProductBundle.setData(pricingData[0].datalink_bundle);



        var DatalinkVendors = Ext.getStore('DatalinkVendors') ;

        DatalinkVendors.removeAll();

        DatalinkVendors.setData(pricingData[0].datalink_vendor_bundle);


        //////

        var DlVdPricingSKUDiscount = Ext.getStore('DlVdPricingSKUDiscount') ;

        DlVdPricingSKUDiscount.removeAll();

        DlVdPricingSKUDiscount.setData(pricingData[0].vendor_pricing_sku_discount);


        // /

        var DlPricingVendors = Ext.getStore('DlPricingVendors') ;

        DlPricingVendors.removeAll();

        DlPricingVendors.setData(pricingData[0].vendor_pricing_vendors);

    },

    getSkuImgsPolicy: function() {

        if(! this.validateSkuImgs()){

            Ext.Msg.alert("Error","All fields are mandatory.");
            return ;
        }


        var dataToUpdate = {

            vendor_pricing_sku_images:[]
        };


        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgsSetUpPanel')[0] ;

        var fieldStore = form.down('#policySelectSI').getStore() ;


        var range = parseFloat(form.down('#range').getValue()) ;

        var stdStart =  parseFloat(form.down('#stdStart').getValue()) ;
        var stdIncrement =  parseFloat(form.down('#stdIncrement').getValue()) ;

        var promoStart =  parseFloat(form.down('#promoStart').getValue()) ;
        var promoIncrement =  parseFloat(form.down('#promoIncrement').getValue()) ;


        var policyText = form.down('#policyText').getValue() ;

        var isAddNew = form.down('#addUpdate').getText() == "Add" ;

        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var curOptVal =  form.down('#policySelectSI').getValue();

        if(!options || options.length === 0 ){


            options = [] ;
        }


        var tempRec = {

                text :policyText,
                value: policyText,
                policy:getPolicyArray(),
                range:range,
                std_start:stdStart,
                std_increment:stdIncrement,
                promo_start:promoStart,
                promo_increment:promoIncrement

            };

        if(isAddNew){
            options.push(tempRec);

            fieldStore.add(tempRec);
        }else{

            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

             options[opIndex]= tempRec ;

            fieldStore.getAt(opIndex).set(tempRec) ;


        }
        //  Ext.ComponentQuery.query('#productDatalinkMainPanel')[0].setMasked( {
        //                 xtype: 'loadmask'
        //             });
        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.vendor_pricing_sku_images = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;

        this.updatePricingStore(_id,'vendor_pricing_sku_images',dataToUpdate.vendor_pricing_sku_images );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);

        if(isAddNew){

            this.clearSkuImgsFlds();
        }

        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }


        function getPolicyArray(){
            var policy = [] ;
            var from = 0 ;
            var maxRange = 100000 ;
            var stdPrice = stdStart ;
            var promoPrice = promoStart ;
            var to = from + range ;
            while(to <= maxRange)
            {
                policy.push({

                    from:from,
                    to:to ,
                    std:stdPrice,
                    promo:promoPrice

                });

                from = to + 1 ;
                to = to + range ;
                stdPrice += stdIncrement ;
                promoPrice += promoIncrement ;



            }

            if(to > maxRange && from < maxRange )
            {
             to = maxRange ;

             policy.push({

                    from:from,
                    to:to ,
                    std:stdPrice,
                    promo:promoPrice

                });
            }



            return policy ;


        }
    },

    deleteSkuImgs: function() {

        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgsSetUpPanel')[0] ;

        var fieldStore = form.down('#policySelectSI').getStore() ;
        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var curOptVal =  form.down('#policySelectSI').getValue();

        if(!curOptVal || curOptVal == ""){

            return ;
        }
            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

        fieldStore.removeAt(opIndex);

        options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var dataToUpdate = {

            vendor_pricing_sku_images:[]
        };

        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.vendor_pricing_sku_images = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;

        this.updatePricingStore(_id,'vendor_pricing_sku_images',dataToUpdate.vendor_pricing_sku_images );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);


        this.clearSkuImgsFlds();


        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }
    },

    validateSkuImgs: function() {
        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgsSetUpPanel')[0] ;



        var result =true ;

        var temp = null ;

        // temp = form.down('#policySelectSI').getValue() ;
        // if(!temp || temp === ""){

        //     result = false ;
        // }

        temp = form.down('#policyText').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#range').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#stdStart').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }


        temp = form.down('#stdIncrement').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }


        temp = form.down('#promoStart').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#promoIncrement').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }


        return result ;
    },

    clearSkuImgsFlds: function() {

        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgsSetUpPanel')[0] ;


        form.down('#range').setValue("") ;

        form.down('#stdStart').setValue("") ;
        form.down('#stdIncrement').setValue("") ;

        form.down('#promoStart').setValue("") ;
        form.down('#promoIncrement').setValue("");


        form.down('#policyText').setValue("") ;

        form.down('#addUpdate').setText("Add");

        form.down('#policySelectSI').reset();
        //form.down('#policySelectSI').setValue(null);
    },

    validateSkuImgsAddlImgs: function() {
        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgs_addlImgsSetUpPanel')[0] ;



        var result =true ;

        var temp = null ;

        // temp = form.down('#policySelectAI').getValue() ;
        // if(!temp || temp === ""){

        //     result = false ;
        // }

        temp = form.down('#policyText').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#range').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#stdStart').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }


        temp = form.down('#stdIncrement').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }


        temp = form.down('#promoStart').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#promoIncrement').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }


        return result ;
    },

    updateSkuImgsAddlImgs: function() {

        if(! this.validateSkuImgsAddlImgs()){

            Ext.Msg.alert("Error","All fields are mandatory.");
            return ;
        }


        var dataToUpdate = {

            vendor_pricing_sku_images:[]
        };


        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgs_addlImgsSetUpPanel')[0] ;

        var fieldStore = form.down('#policySelectAI').getStore() ;


        var range = parseFloat(form.down('#range').getValue()) ;

        var stdStart =  parseFloat(form.down('#stdStart').getValue()) ;
        var stdIncrement =  parseFloat(form.down('#stdIncrement').getValue()) ;

        var promoStart =  parseFloat(form.down('#promoStart').getValue()) ;
        var promoIncrement =  parseFloat(form.down('#promoIncrement').getValue()) ;


        var policyText = form.down('#policyText').getValue() ;

        var isAddNew = form.down('#addUpdate').getText() == "Add" ;

        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var curOptVal =  form.down('#policySelectAI').getValue();

        if(!options || options.length === 0 ){


            options = [] ;
        }


        var tempRec = {

                text :policyText,
                value: policyText,
                policy:getPolicyArray(),
                range:range,
                std_start:stdStart,
                std_increment:stdIncrement,
                promo_start:promoStart,
                promo_increment:promoIncrement

            };

        if(isAddNew){
            options.push(tempRec);

            fieldStore.add(tempRec);
        }else{

            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

             options[opIndex]= tempRec ;

            fieldStore.getAt(opIndex).set(tempRec) ;


        }
        //  Ext.ComponentQuery.query('#productDatalinkMainPanel')[0].setMasked( {
        //                 xtype: 'loadmask'
        //             });
        var store = Ext.getStore('pricing.MainStore') ;

        //this.config.isPricingUpdated = true ;

        dataToUpdate.vendor_pricing_sku_images_addl_images = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;

        this.updatePricingStore(_id,'vendor_pricing_sku_images_addl_images',dataToUpdate.vendor_pricing_sku_images_addl_images );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);

        if(isAddNew){

            this.clearImgsAddlImgs();
        }

        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }


        function getPolicyArray(){
            var policy = [] ;
            var from = 0 ;
            var maxRange = 100000 ;
            var stdPrice = stdStart ;
            var promoPrice = promoStart ;
            var to = from + range ;
            while(to <= maxRange)
            {
                policy.push({

                    from:from,
                    to:to ,
                    std:stdPrice,
                    promo:promoPrice

                });

                from = to + 1 ;
                to = to + range ;
                stdPrice += stdIncrement ;
                promoPrice += promoIncrement ;



            }

            if(to > maxRange && from < maxRange )
            {
             to = maxRange ;

             policy.push({

                    from:from,
                    to:to ,
                    std:stdPrice,
                    promo:promoPrice

                });
            }



            return policy ;


        }
    },

    deleteImgsAddlImgs: function() {

        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgs_addlImgsSetUpPanel')[0] ;

        var fieldStore = form.down('#policySelectAI').getStore() ;
        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var curOptVal =  form.down('#policySelectAI').getValue();

        if(!curOptVal || curOptVal == ""){

            return ;
        }
            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

        fieldStore.removeAt(opIndex);

        options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var dataToUpdate = {

            vendor_pricing_sku_images_addl_images:[]
        };

        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.vendor_pricing_sku_images_addl_images = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;
        this.updatePricingStore(_id,'vendor_pricing_sku_images_addl_images',dataToUpdate.vendor_pricing_sku_images_addl_images );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);


        this.clearImgsAddlImgs();


        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }
    },

    clearImgsAddlImgs: function() {

        var form = Ext.ComponentQuery.query('#dlVdrPricingSku_imgs_addlImgsSetUpPanel')[0] ;


        form.down('#range').setValue("") ;

        form.down('#stdStart').setValue("") ;
        form.down('#stdIncrement').setValue("") ;

        form.down('#promoStart').setValue("") ;
        form.down('#promoIncrement').setValue("");


        form.down('#policyText').setValue("") ;

        form.down('#addUpdate').setText("Add");

        form.down('#policySelectAI').reset();
        //form.down('#policySelectAI').setValue(null);
    },

    validateVdrDiscountPolicy: function() {
        var form = Ext.ComponentQuery.query('#dlVdrPricingVdrDiscountSetUpPanel')[0] ;



        var result =true ;

        var temp = null ;



        temp = form.down('#discountPolicySlctTxt').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#range').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#start').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }


        temp = form.down('#increment').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        return result ;
    },

    updateVdrDiscount: function() {

        if(! this.validateVdrDiscountPolicy()){

            Ext.Msg.alert("Error","All fields are mandatory.");
            return ;
        }


        var dataToUpdate = {

            vendor_pricing_vdr_discount:[]
        };


        var form = Ext.ComponentQuery.query('#dlVdrPricingVdrDiscountSetUpPanel')[0] ;

        var fieldStore = form.down('#discountPolicySlct').getStore() ;


        var range = parseFloat(form.down('#range').getValue()) ;

        var start =  parseFloat(form.down('#start').getValue()) ;
        var increment =  parseFloat(form.down('#increment').getValue()) ;


        var policyText = form.down('#discountPolicySlctTxt').getValue() ;

        var isAddNew = form.down('#addUpdate').getText() == "Add" ;

        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;

        var curOptVal =  form.down('#discountPolicySlct').getValue();

        if(!options || options.length === 0 ){


            options = [] ;
        }


        var tempRec = {

                text :policyText,
                value: policyText,
                policy:getPolicyArray(),
                range:range,
                disc_start:start,
                disc_increment:increment

            };

        if(isAddNew){
            options.push(tempRec);

            fieldStore.add(tempRec);
        }else{

            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

             options[opIndex]= tempRec ;

            fieldStore.getAt(opIndex).set(tempRec) ;


        }
        //  Ext.ComponentQuery.query('#productDatalinkMainPanel')[0].setMasked( {
        //                 xtype: 'loadmask'
        //             });
        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.vendor_pricing_vdr_discount = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;

        this.updatePricingStore(_id,'vendor_pricing_vdr_discount',dataToUpdate.vendor_pricing_vdr_discount );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);

        if(isAddNew){

            this.clearVdrDisc();
        }

        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }


        function getPolicyArray(){

            var policy = [] ;
            var from = 0 ;
            var maxRange = 100 ;

            var dStart = start ;

            var to = from + range ;

            while(to <= maxRange)
            {
                policy.push({

                    from:from,
                    to:to ,
                    disc:dStart

                });

                from = to + 1 ;
                to = to + range ;
                dStart += increment ;



            }

            if(to > maxRange && from < maxRange )
            {
             to = maxRange ;

             policy.push({

                    from:from,
                    to:to ,
                    disc:dStart

                });
            }



            return policy ;


        }
    },

    deleteVdrDisc: function() {

        var form = Ext.ComponentQuery.query('#dlVdrPricingVdrDiscountSetUpPanel')[0] ;

        var fieldStore = form.down('#discountPolicySlct').getStore() ;
        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var curOptVal =  form.down('#discountPolicySlct').getValue();

        if(!curOptVal || curOptVal == ""){

            return ;
        }
            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

        fieldStore.removeAt(opIndex);

        options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var dataToUpdate = {

            vendor_pricing_vdr_discount:[]
        };

        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.vendor_pricing_vdr_discount = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;
        this.updatePricingStore(_id,'vendor_pricing_vdr_discount',dataToUpdate.vendor_pricing_vdr_discount );
         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);


        this.clearVdrDisc();


        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }
    },

    clearVdrDisc: function() {

        var form = Ext.ComponentQuery.query('#dlVdrPricingVdrDiscountSetUpPanel')[0] ;


        form.down('#range').setValue("") ;

        form.down('#start').setValue("") ;
        form.down('#increment').setValue("") ;


        form.down('#discountPolicySlctTxt').setValue("") ;

        form.down('#addUpdate').setText("Add");

        form.down('#discountPolicySlct').reset();
        //form.down('#discountPolicySlct').setValue(null);
    },

    validateSkuDiscPolicy: function() {
        var form = Ext.ComponentQuery.query('#dlVdrPricingSKUDiscountSetUpPanel')[0] ;



        var result =true ;

        var temp = null ;



        temp = form.down('#discountPolicySlctTxt').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#range').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#start').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }


        temp = form.down('#increment').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        return result ;
    },

    updateSKUDisc: function() {

        if(! this.validateSkuDiscPolicy()){

            Ext.Msg.alert("Error","All fields are mandatory.");
            return ;
        }


        var dataToUpdate = {

            vendor_pricing_sku_discount:[]
        };


        var form = Ext.ComponentQuery.query('#dlVdrPricingSKUDiscountSetUpPanel')[0] ;

        var fieldStore = form.down('#SKUdiscountPolicySlct').getStore() ;


        var range = parseFloat(form.down('#range').getValue()) ;

        var start =  parseFloat(form.down('#start').getValue()) ;
        var increment =  parseFloat(form.down('#increment').getValue()) ;


        var policyText = form.down('#discountPolicySlctTxt').getValue() ;

        var isAddNew = form.down('#addUpdate').getText() == "Add" ;

        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;

        var curOptVal =  form.down('#SKUdiscountPolicySlct').getValue();

        if(!options || options.length === 0 ){


            options = [] ;
        }


        var tempRec = {

                text :policyText,
                value: policyText,
                policy:getPolicyArray(),
                range:range,
                disc_start:start,
                disc_increment:increment

            };

        if(isAddNew){
            options.push(tempRec);

            fieldStore.add(tempRec);
        }else{

            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

             options[opIndex]= tempRec ;

            fieldStore.getAt(opIndex).set(tempRec) ;


        }
        //  Ext.ComponentQuery.query('#productDatalinkMainPanel')[0].setMasked( {
        //                 xtype: 'loadmask'
        //             });
        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.vendor_pricing_sku_discount = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;

        this.updatePricingStore(_id,'vendor_pricing_sku_discount',dataToUpdate.vendor_pricing_sku_discount );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);

        if(isAddNew){

            this.clearSKUDisc();
        }

        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }


        function getPolicyArray(){

            var policy = [] ;
            var from = 0 ;
            var maxRange = 10000 ;

            var dStart = start ;

            var to = from + range ;

            while(to <= maxRange)
            {
                policy.push({

                    from:from,
                    to:to ,
                    disc:dStart

                });

                from = to + 1 ;
                to = to + range ;
                dStart += increment ;



            }

            if(to > maxRange && from < maxRange )
            {
             to = maxRange ;

             policy.push({

                    from:from,
                    to:to ,
                    disc:dStart

                });
            }



            return policy ;


        }
    },

    deleteSkuDisc: function() {

        var form = Ext.ComponentQuery.query('#dlVdrPricingSKUDiscountSetUpPanel')[0] ;

        var fieldStore = form.down('#SKUdiscountPolicySlct').getStore() ;
        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var curOptVal =  form.down('#SKUdiscountPolicySlct').getValue();

        if(!curOptVal || curOptVal == ""){

            return ;
        }
            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

        fieldStore.removeAt(opIndex);

        options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var dataToUpdate = {

            vendor_pricing_sku_discount:[]
        };

        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.vendor_pricing_sku_discount = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;
        this.updatePricingStore(_id,'vendor_pricing_sku_discount',dataToUpdate.vendor_pricing_sku_discount );
         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);


        this.clearSKUDisc();


        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }
    },

    clearSKUDisc: function() {

        var form = Ext.ComponentQuery.query('#dlVdrPricingSKUDiscountSetUpPanel')[0] ;


        form.down('#range').setValue("") ;

        form.down('#start').setValue("") ;
        form.down('#increment').setValue("") ;


        form.down('#discountPolicySlctTxt').setValue("") ;

        form.down('#addUpdate').setText("Add");

        form.down('#SKUdiscountPolicySlct').reset();
        //form.down('#discountPolicySlct').setValue(null);
    },

    updateTimeTakenFlds: function() {


        var form = Ext.ComponentQuery.query('#dlVdrPricingTimeTknToUploadPanel')[0] ;


        var dataToUpdate = {
            time_taken_images: form.down('#vdrTimeTknSkuImagsFld').getValue() ,
            time_taken_images_addl_images: form.down('#vdrTimeTknSkuImagsAddlImgsFld').getValue()
        };



        var store = Ext.getStore('pricing.MainStore') ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;

        this.updatePricingStore(_id,'time_taken_images',dataToUpdate.time_taken_images );
        this.updatePricingStore(_id,'time_taken_images_addl_images',dataToUpdate.time_taken_images_addl_images );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);

        var dlList = Ext.ComponentQuery.query('#dataLinkListItemID')[0].down('#pricingList') ;
        dlList.refresh();

        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }

    },

    validateDlProductBundle: function() {
        var form = Ext.ComponentQuery.query('#datalinkProductSetupSideP1')[0] ;



        var result =true ;

        var temp = null ;



        temp = form.down('#datalinkPoductBundeleTextFld').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#datalinkPoductBundelePriceTextFld').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        return result ;
    },

    updateProductBundle: function() {

        if(! this.validateDlProductBundle()){

            Ext.Msg.alert("Error","All fields are mandatory.");
            return ;
        }


        var dataToUpdate = {

            datalink_bundle:[]

        };


        var form = Ext.ComponentQuery.query('#datalinkProductSetupSideP1')[0] ;

        var fieldStore = form.down('#datalinkPoductBundeleSelectFld').getStore() ;




        var policyText = form.down('#datalinkPoductBundeleTextFld').getValue() ;
        var price = form.down('#datalinkPoductBundelePriceTextFld').getValue() ;


        var isAddNew = form.down('#addUpdate').getText() == "Add" ;

        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;

        var curOptVal =  form.down('#datalinkPoductBundeleSelectFld').getValue();

        if(!options || options.length === 0 ){


            options = [] ;
        }


        var tempRec = {

                text :policyText,
                value: policyText,
                products:getPolicyArray(),
                price:price

            };


        if(isAddNew){
            options.push(tempRec);

            fieldStore.add(tempRec);
        }else{

            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

             options[opIndex]= tempRec ;

             fieldStore.getAt(opIndex).set(tempRec) ;


        }
        //  Ext.ComponentQuery.query('#productDatalinkMainPanel')[0].setMasked( {
        //                 xtype: 'loadmask'
        //             });
        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.datalink_bundle = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;

        this.updatePricingStore(_id,'datalink_bundle',dataToUpdate.datalink_bundle );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);

        if(isAddNew){

            this.clearProductBundle();
        }

        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }


        function getPolicyArray(){

            var dlList = Ext.ComponentQuery.query('#datalinkMainListContainer')[0].down('#mainList') ;

            var selection = dlList.getSelection() ;
            var tArray = [] ;

            for( var i =0 ; i < selection.length; i++ ){

                tArray.push({

                    product_id:selection[i].data._id

                });

            }

            return tArray;


        }
    },

    deleteProductBundle: function() {

        var form = Ext.ComponentQuery.query('#datalinkProductSetupSideP1')[0] ;

        var fieldStore = form.down('#datalinkPoductBundeleSelectFld').getStore() ;
        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var curOptVal =  form.down('#datalinkPoductBundeleSelectFld').getValue();

        if(!curOptVal || curOptVal == ""){

            return ;
        }
            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

        fieldStore.removeAt(opIndex);

        options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var dataToUpdate = {

            datalink_bundle:[]
        };

        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.datalink_bundle = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;
        this.updatePricingStore(_id,'datalink_bundle',dataToUpdate.datalink_bundle );
         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);


        this.clearProductBundle();


        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }
    },

    clearProductBundle: function() {

        var form = Ext.ComponentQuery.query('#datalinkProductSetupSideP1')[0] ;


        form.down('#datalinkPoductBundeleTextFld').setValue("") ;

        form.down('#datalinkPoductBundelePriceTextFld').setValue("") ;

        form.down('#addUpdate').setText("Add");

        form.down('#datalinkPoductBundeleSelectFld').reset();
        //form.down('#discountPolicySlct').setValue(null);
    },

    selectDlProducts: function(selection) {

        if(!selection){
            return ;
        }


        var dlList = Ext.ComponentQuery.query('#datalinkMainListContainer')[0].down('#mainList') ;
        var store = dlList.getStore() ;

        dlList.deselectAll() ;

        for(var i=0 ; i < selection.length ; i ++){

            var rIndex = store.findExact('_id',selection[i].product_id) ;

            if(rIndex !== -1){
                dlList.select(store.getAt(rIndex),true,true);
            }
        }

         RMdatalink.app.getController('DatalinkController').onRmProSelectUnselect();
    },

    validateDlVendorBundle: function() {
        var form = Ext.ComponentQuery.query('#datalinkVendorBundleSetupPanel')[0] ;



        var result =true ;

        var temp = null ;



        temp = form.down('#dlVendorBundleTxtFld').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        temp = form.down('#dlVendorPriceFld').getValue() ;
        if(!temp || temp === ""){

            result = false ;
        }

        return result ;
    },

    updateVendorBundle: function() {

        if(! this.validateDlVendorBundle()){

            Ext.Msg.alert("Error","All fields are mandatory.");
            return ;
        }


        var dataToUpdate = {

            datalink_vendor_bundle:[]

        };


        var form = Ext.ComponentQuery.query('#datalinkVendorBundleSetupPanel')[0] ;

        var fieldStore = form.down('#dlVendorBundleSelectFld').getStore() ;




        var policyText = form.down('#dlVendorBundleTxtFld').getValue() ;
        var price = form.down('#dlVendorPriceFld').getValue() ;


        var isAddNew = form.down('#addUpdate').getText() == "Add" ;

        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;

        var curOptVal =  form.down('#dlVendorBundleSelectFld').getValue();

        if(!options || options.length === 0 ){


            options = [] ;
        }


        var tempRec = {

                text :policyText,
                value: policyText,
                vendors:getPolicyArray(),
                price:price

            };


        if(isAddNew){
            options.push(tempRec);

            fieldStore.add(tempRec);
        }else{

            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

             options[opIndex]= tempRec ;

             fieldStore.getAt(opIndex).set(tempRec) ;


        }
        //  Ext.ComponentQuery.query('#productDatalinkMainPanel')[0].setMasked( {
        //                 xtype: 'loadmask'
        //             });
        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.datalink_vendor_bundle = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;

        this.updatePricingStore(_id,'datalink_vendor_bundle',dataToUpdate.datalink_vendor_bundle );

         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);

        if(isAddNew){

            this.clearVendorBundle();
        }

        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }


        function getPolicyArray(){

            var dlList = Ext.ComponentQuery.query('#dataLinkListItemID')[0].down('#pricingList') ;

            var selection = dlList.getSelection() ;
            var tArray = [] ;

            for( var i =0 ; i < selection.length; i++ ){

                tArray.push({

                    vendor_id:selection[i].data._id

                });

            }

            return tArray;


        }
    },

    deleteVendorBundle: function() {

        var form = Ext.ComponentQuery.query('#datalinkVendorBundleSetupPanel')[0] ;

        var fieldStore = form.down('#dlVendorBundleSelectFld').getStore() ;
        var options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var curOptVal =  form.down('#dlVendorBundleSelectFld').getValue();

        if(!curOptVal || curOptVal == ""){

            return ;
        }
            var opIndex = 0 ;
            while(opIndex < options.length && curOptVal !== options[opIndex].value){
                opIndex++;
            }

            if(opIndex == options.length){
                opIndex--;
            }

        fieldStore.removeAt(opIndex);

        options = RMdatalink.util.globalMethods.getArrayDataFromStore(fieldStore) ;
        var dataToUpdate = {

            datalink_vendor_bundle:[]
        };

        var store = Ext.getStore('pricing.MainStore') ;

        dataToUpdate.datalink_vendor_bundle = options ;

        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;
        this.updatePricingStore(_id,'datalink_vendor_bundle',dataToUpdate.datalink_vendor_bundle );
         RMdatalink.iwa.rdl.doUpdateCollection(store, dataToUpdate , _id, success, error);


        this.clearVendorBundle();


        function success(){
            Ext.Viewport.setMasked(false);



        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }
    },

    clearVendorBundle: function() {

        var form = Ext.ComponentQuery.query('#datalinkVendorBundleSetupPanel')[0] ;


        form.down('#dlVendorBundleTxtFld').setValue("") ;

        form.down('#dlVendorPriceFld').setValue("") ;

        form.down('#addUpdate').setText("Add");

        form.down('#dlVendorBundleSelectFld').reset();
        //form.down('#discountPolicySlct').setValue(null);
    },

    selectDlVendors: function(selection) {

        if(!selection){
            return ;
        }


        var dlList = Ext.ComponentQuery.query('#dataLinkListItemID')[0].down('#pricingList') ;
        var store = dlList.getStore() ;

        dlList.deselectAll() ;

        for(var i=0 ; i < selection.length ; i ++){

            var rIndex = store.findExact('_id',selection[i].vendor_id) ;

            if(rIndex !== -1){
                dlList.select(store.getAt(rIndex),true,true);
            }
        }

        // RMdatalink.app.getController('DatalinkController').onRmProSelectUnselect();

          RMdatalink.app.getController('BillingDetailsController').loadVendorTotalCountData();
    },

    onDatalinkVendorSelectUnSelect: function() {

        var dlList = Ext.ComponentQuery.query('#dataLinkListItemID')[0].down('#pricingList') ;
        var store = dlList.getStore() ;

    },

    onUpdateSkuImgsStore: function(inputFld, record_key) {
        console.log(record_key);

        var list =   Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down("#mainList");

        var store = list.getStore();

        var _id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;
        value = value.replace(",","");

        var recIndex = store.findExact('id',_id) ;

        if(recIndex == -1){
            return ;
        }


        var record = store.getAt(recIndex) ;

        record.set(record_key,value) ;



        var selectfield = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0] ;


        var data = RMdatalink.util.globalMethods.getArrayDataFromStore(store) ;

        var slstore = selectfield.getStore() ;

        var slVal = selectfield.getValue() ;

        var rIndex = slstore.findExact('value',slVal) ;

        if(rIndex != -1){

            console.log("record found");
            var slRec = slstore.getAt(rIndex) ;

            slRec.set('policy',data);

        }
    },

    onUpdateSkuImgAddlImgs: function(inputFld, record_key) {
        var list =   Ext.ComponentQuery.query('#pricingPolicySkuImgsAddImgsListPnl')[0].down("#mainList");

        var store = list.getStore();

        var _id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;
        value = value.replace(",","");

        var recIndex = store.findExact('id',_id) ;

        if(recIndex == -1){
            return ;
        }


        var record = store.getAt(recIndex) ;

        record.set(record_key,value) ;



        var selectfield = Ext.ComponentQuery.query('#pricingPolicySkuAddlImgsIncrementSelectFld')[0] ;


        var data = RMdatalink.util.globalMethods.getArrayDataFromStore(store) ;

        var slstore = selectfield.getStore() ;

        var slVal = selectfield.getValue() ;

        var rIndex = slstore.findExact('value',slVal) ;

        if(rIndex != -1){

            console.log("record found");
            var slRec = slstore.getAt(rIndex) ;

            slRec.set('policy',data);

        }
    },

    onUpdateVdrDiscount: function(inputFld, record_key) {
        var list =   Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down("#mainList");

        var store = list.getStore();

        var _id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;

        value = value.replace(",","");
        var recIndex = store.findExact('id',_id) ;

        if(recIndex == -1){
            return ;
        }


        var record = store.getAt(recIndex) ;

        record.set(record_key,value) ;




        var selectfield = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0] ;


        var data = RMdatalink.util.globalMethods.getArrayDataFromStore(store) ;

        var slstore = selectfield.getStore() ;

        var slVal = selectfield.getValue() ;

        var rIndex = slstore.findExact('value',slVal) ;

        if(rIndex != -1){

            console.log("record found");
            var slRec = slstore.getAt(rIndex) ;

            slRec.set('policy',data);

        }
    },

    onUpdateSKUDiscount: function(inputFld, record_key) {
        var list =   Ext.ComponentQuery.query('#pricingPolicySKUDiscountList')[0].down("#mainList");

        var store = list.getStore();

        var _id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;

        value = value.replace(",","");
        var recIndex = store.findExact('id',_id) ;

        if(recIndex == -1){
            return ;
        }


        var record = store.getAt(recIndex) ;

        record.set(record_key,value) ;




        var selectfield = Ext.ComponentQuery.query('#DiscountPolicySKUIncrementSelectFld')[0] ;


        var data = RMdatalink.util.globalMethods.getArrayDataFromStore(store) ;

        var slstore = selectfield.getStore() ;

        var slVal = selectfield.getValue() ;

        var rIndex = slstore.findExact('value',slVal) ;

        if(rIndex != -1){

            console.log("record found");
            var slRec = slstore.getAt(rIndex) ;

            slRec.set('policy',data);

        }
    },

    SAVEDatalinkSetup: function() {

        var pricingData = RMdatalink.app.getController('BillingDetailsController').config.pricingData ;
        dataToUpdate = {} ;
        dataToUpdate.state_values = {} ;

        var selectfield = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0] ;
        var slstore = selectfield.getStore() ;
        var data = RMdatalink.util.globalMethods.getArrayDataFromStore(slstore) ;
        var slVal = selectfield.getValue() ;

        dataToUpdate.vendor_pricing_sku_images = data ;

        dataToUpdate.state_values.vendor_pricing_sku_images = slVal ;

        ///////////////////////////

        selectfield = Ext.ComponentQuery.query('#pricingPolicySkuAddlImgsIncrementSelectFld')[0] ;
        slstore = selectfield.getStore() ;
        data = RMdatalink.util.globalMethods.getArrayDataFromStore(slstore) ;
        slVal = selectfield.getValue() ;

        dataToUpdate.vendor_pricing_sku_images_addl_images = data ;

        dataToUpdate.state_values.vendor_pricing_sku_images_addl_images = slVal ;


        ///////////////////////////

        selectfield = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0] ;
        slstore = selectfield.getStore() ;
        data = RMdatalink.util.globalMethods.getArrayDataFromStore(slstore) ;
        slVal = selectfield.getValue() ;

        dataToUpdate.vendor_pricing_vdr_discount = data ;

        dataToUpdate.state_values.vendor_pricing_vdr_discount = slVal ;


        ///////////////////////////

        selectfield = Ext.ComponentQuery.query('#dlVendorBundleSelectFld')[0] ;

        slVal = selectfield.getValue() ;

        dataToUpdate.state_values.datalink_vendor_bundle = slVal ;

        ///////////////////////////


        selectfield = Ext.ComponentQuery.query('#datalinkPoductBundeleSelectFld')[0] ;

        slVal = selectfield.getValue() ;

        dataToUpdate.state_values.datalink_bundle = slVal ;


        ///////////////////////////

        selectfield = Ext.ComponentQuery.query('#DiscountPolicySKUIncrementSelectFld')[0] ;
        slstore = selectfield.getStore() ;
        data = RMdatalink.util.globalMethods.getArrayDataFromStore(slstore) ;
        slVal = selectfield.getValue() ;

        dataToUpdate.vendor_pricing_sku_discount = data ;

        dataToUpdate.state_values.vendor_pricing_sku_discount = slVal ;

        ///////////////////////////////////////////////////////
        var pricingStore = Ext.getStore('pricing.MainStore') ;
        var _id = RMdatalink.app.getController('BillingDetailsController').config.pricingData[0]._id ;


        this.updatePricingStore(_id,'vendor_pricing_sku_images',dataToUpdate.vendor_pricing_sku_images );
        this.updatePricingStore(_id,'vendor_pricing_sku_images_addl_images',dataToUpdate.vendor_pricing_sku_images_addl_images );
        this.updatePricingStore(_id,'vendor_pricing_vdr_discount',dataToUpdate.vendor_pricing_vdr_discount );
        this.updatePricingStore(_id,'datalink_vendor_bundle',dataToUpdate.datalink_vendor_bundle );
        this.updatePricingStore(_id,'datalink_bundle',dataToUpdate.datalink_bundle );
        this.updatePricingStore(_id,'state_values',dataToUpdate.state_values );


         Ext.Viewport.setMasked({
                            xtype: 'loadmask',message:"Loading..."
                        });

         RMdatalink.iwa.rdl.doUpdateCollection(pricingStore, dataToUpdate , _id, success, error);


        function success(){


            Ext.Viewport.setMasked(false);
         RMdatalink.app.getController('DatalinkController').enableDisableDlFlds(true);
          Ext.Msg.alert('Success.', "Datalink setup saved successfully.", Ext.emptyFn);




        }

        function error(){
            Ext.Viewport.setMasked(false);
            alert("priceing update error");
        }



    }

});