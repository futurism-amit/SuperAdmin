/*
 * File: app/controller/FilterDropDown.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.FilterDropDown', {
    extend: 'Ext.app.Controller',
    alias: 'controller.FilterDropDown',

    config: {
        control: {
            "filterDropDown": {
                filterwithdata: 'onFilterWithData'
            }
        }
    },

    onFilterWithData: function(sheet, filterData) {

        var activeCard = Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem();
        var activeTab = activeCard.down('tabpanel').getActiveItem();

        var currentList = activeTab.down('list');
        var currentStore = currentList.getStore();

        // ****  IF  LIST IS  EMPTY  ********
        if(!currentStore)
        {
            return;
        }

        currentStore.clearFilter();                   //remove all existing filters, if any

        var checkedItems = filterData.productSubscriptions;
        var storeKeys = currentStore.getModel().getFields().keys;

        for(var i=0;i<checkedItems.length;i++) {
            if(storeKeys.indexOf(checkedItems[i].filterKey) !== -1) {
                if(checkedItems[i].filterValue)
                    currentStore.filter(checkedItems[i].filterKey, checkedItems[i].filterValue);
                else {
                    //console.log("remove "+checkedItems[i].filterKey+" filter");
                }
            }
        }

        var monthlyRange = filterData.monthlyRange;
        var owedRange = filterData.owedRange;

        var minMonthly=0, maxMonthly=0;
        var minOwed=0, maxOwed=0;

        for(var i=0;i<monthlyRange.length;i++) {
            if(monthlyRange[i].filterKey === 'from')
                minMonthly = monthlyRange[i].filterValue;
            else
                maxMonthly = monthlyRange[i].filterValue;
        }

        if(storeKeys.indexOf('store_monthly_subscription') !== -1) {
            if(minMonthly >= 0 && maxMonthly > 0 && minMonthly < maxMonthly) {

                var monthlyRangeFilter = new Ext.util.Filter({
                    filterFn: function(item) {

                        var data = parseFloat(item.data.store_monthly_subscription.replace("$",'').replace(",",""));
                        if(minMonthly<data && data<=maxMonthly)
                            return true;
                        return false;
                    }
                });
                currentStore.filter([monthlyRangeFilter]);
            }
        }

        for(var i=0;i<owedRange.length;i++) {
            if(owedRange[i].filterKey === 'from')
                minOwed = owedRange[i].filterValue;
            else
                maxOwed = owedRange[i].filterValue;
        }

        if(storeKeys.indexOf('owed') !== -1) {

            if(minOwed >= 0 && maxOwed > 0 && minOwed < maxOwed) {

                var owedRangeFilter = new Ext.util.Filter({
                    filterFn: function(item) {

                        var data = parseFloat(item.data.owed.replace("$",'').replace(",",""));
                        if(minOwed<data && data<=maxOwed)
                            return true;
                        return false;
                    }
                });
                currentStore.filter([owedRangeFilter]);
            }
        }



        if(storeKeys.indexOf('store_modified_in_past') !== -1) {

            if(filterData.modifiedInPastDays>0) {

                var currentDate = new Date();
                var modifiedInPastFilter = new Ext.util.Filter({
                    filterFn: function(item) {
                        var lastModifiedDate = new Date(item.data.store_modified_in_past);
                        var differenceInDays = Ext.Date.diff(lastModifiedDate,currentDate,Ext.Date.DAY);

                        if(differenceInDays<=filterData.modifiedInPastDays)
                            return true;
                        return false;
                    }
                });
                currentStore.filter([modifiedInPastFilter]);
            }
        }


        if(storeKeys.indexOf('store_created_in_past') !== -1) {

            if(filterData.createdInPastDays>0) {

                var currentDate = new Date();
                var createdInPastFilter = new Ext.util.Filter({
                    filterFn: function(item) {
                        var lastCreatedDate = new Date(item.data.store_created_in_past);
                        var differenceInDays = Ext.Date.diff(lastCreatedDate,currentDate,Ext.Date.DAY);

                        if(differenceInDays<=filterData.createdInPastDays)
                            return true;
                        return false;
                    }
                });
                currentStore.filter([createdInPastFilter]);
            }
        }


        if(storeKeys.indexOf('overDue') !== -1) {
            if(filterData.pastDueFor>0) {
                var createdPastDueForFilter = new Ext.util.Filter({
                    filterFn: function(item) {
                        if(item.data.overDue === filterData.pastDueFor)
                            return true;
                        return false;
                    }
                });
                currentStore.filter([createdPastDueForFilter]);
            }
        }


        //*********  FOR VENDOR FILTER  *********

        if(storeKeys.indexOf('vendor_modified_in_past') !== -1) {

            if(filterData.modifiedInPastDays>0) {

                var currentDate = new Date();
                var modifiedInPastFilter = new Ext.util.Filter({
                    filterFn: function(item) {
                        var lastModifiedDate = new Date(item.data.vendor_modified_in_past);
                        var differenceInDays = Ext.Date.diff(lastModifiedDate,currentDate,Ext.Date.DAY);

                        if(differenceInDays<=filterData.modifiedInPastDays)
                            return true;
                        return false;
                    }
                });
                currentStore.filter([modifiedInPastFilter]);
            }
        }


        if(storeKeys.indexOf('vendor_created_in_past') !== -1) {
            if(filterData.createdInPastDays>0) {
                var currentDate = new Date();
                var createdInPastFilter = new Ext.util.Filter({
                    filterFn: function(item) {
                        var lastCreatedDate = new Date(item.data.vendor_created_in_past);
                        var differenceInDays = Ext.Date.diff(lastCreatedDate,currentDate,Ext.Date.DAY);

                        if(differenceInDays<=filterData.createdInPastDays)
                            return true;
                        return false;
                    }
                });
                currentStore.filter([createdInPastFilter]);
            }
        }

    }

});