/*
 * File: app/controller/ProductBillingController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.ProductBillingController', {
    extend: 'Ext.app.Controller',

    config: {
        productKey: 'product_rmpro',
        rmProPackValue: 0,

        control: {
            "list[itemId=RDStoreProductsList]": {
                itemtap: 'onRDStoreProductsListSelect'
            },
            "button[itemId=productBillingSheetCancel]": {
                tap: 'onproductBillingSheetCancelTap'
            },
            "list[itemId=rmProSelectPackageList]": {
                select: 'onrmProSelectPackageListSelect'
            },
            "textfield[itemId=rtBillMonthlyMemberShipFld]": {
                change: 'onrtBillMonthlyMemberShipFldChange'
            },
            "button[itemId=rtBillingSaveBtn]": {
                tap: 'onrtBillingSaveBtnTap'
            },
            "button[itemId=productBillingShowSubscriptionBtn]": {
                tap: 'onProductBillingShowSubscriptionBtnTap'
            },
            "button[itemId=invoiceDatalinkProductSetupBtn]": {
                tap: 'oninvoiceDatalinkProductSetupBtnTap'
            },
            "button[itemId=invoiceRMPROProductSetupBtn]": {
                tap: 'oninvoiceRMPROProductSetupBtnTap'
            }
        }
    },

    onRDStoreProductsListSelect: function(dataview, index, target, record, e, eOpts) {

        if(record.data.ProductName == "RM PRO")
        {
            this.getBillingSheet().show();
            this.intRMPROBilling() ;
            this.displayRMPROBillig(target);
        }
        else if(record.data.ProductName == "Datalink"){
            this.getBillingSheet().show();
            this.initDatalinkBilling() ;
            this.displayDatalinkBilling(target);
        }

         RMdatalink.app.getController('RetailerDeatilsDataSet').saveRTProductSetup();
    },

    onproductBillingSheetCancelTap: function(button, e, eOpts) {
        this.hideProductBillingSheet();
    },

    onrmProSelectPackageListSelect: function(dataview, record, eOpts) {
        console.log(record);

              // RMdatalink.app.getController('BillingDetailsController').config.pricingData[3].active_pricing_policy = parseInt(record.data.value,0) ;




        this.config.rmProPackValue =  record.data.value ;

        if(record.data.value == "5")
        {
            Ext.ComponentQuery.query('#rmProModulesForRtList')[0].setFlex(0.14);
        }else{

            Ext.ComponentQuery.query('#rmProModulesForRtList')[0].setFlex( 1 );
        }


        var packName = '<div style="font-size: 14px;margin-left: 10px;">' + record.data.text+ '</div>' ;
        Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageNameLabel').setHtml( packName );

        Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageBundlePriceLbl').setHtml( '<div style="margin-right: 38px;font-size: small;"> Bundle Price ::'+record.data.rm_pro_bundle_price+'</div>');

        this.fillModuleLists() ;
        var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;

        //var moduleStore = moduleList.getStore() ;
        var moduleStore = Ext.getStore('products.BillingRmproModules') ;

        var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;

        var rm_pro_modules = record.data.rm_pro_modules ;

        //this.fillModuleLists() ;


        //moduleList.selectAll();

        //module_listed_order
        // for(var i = 0 ; i < moduleStore.getData().all.length; i++ ){

        //     var rec = moduleStore.getAt(i) ;
        //     rec.set('module_listed_order',(100+ i));

        // }


        var adOnsStore = addOnsList.getStore() ;
         for(var i =0 ; i< rm_pro_modules.length; i++){

            var recIndex = adOnsStore.findExact('_id', rm_pro_modules[i].module_id ) ;

            if(recIndex != -1)
            {

                addOnsList.select(adOnsStore.getAt(recIndex),true,true) ;


            }
         }


        // for(var i =0 ; i< rm_pro_modules.length; i++){

        //     var recIndex = moduleStore.findExact('_id', rm_pro_modules[i].module_id ) ;

        //     if(recIndex != -1)
        //     {

        //         moduleStore.getAt(recIndex).set('module_listed_order',i );



        //     }
        // }

        this.calculateBillingPrices() ;
    },

    onrtBillMonthlyMemberShipFldChange: function(textfield, newValue, oldValue, eOpts) {




        this.calculateBillingDiscount() ;
    },

    onrtBillingSaveBtnTap: function(button, e, eOpts) {
        //     var initActData = Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].getValue() ;


        //     if(!initActData && initActData == "" ){

        //         Ext.Msg.alert("Alert","Initial Activation date required to save product setup.",Ext.emptyFn );
        //         return ;
        //     }




        if(this.config.productKey == "product_rmpro" )
        {

                this.saveRtProductBilling() ;

        }
        else{

                this.saveProductDatalinkBilling() ;

        }



    },

    onProductBillingShowSubscriptionBtnTap: function(button, e, eOpts) {

        if(this.config.productKey == "product_rmpro" )
        {

                this.saveRtProductBilling(true) ;

        }
        else{

                this.saveProductDatalinkBilling(true) ;

        }



    },

    oninvoiceDatalinkProductSetupBtnTap: function(button, e, eOpts) {
           Ext.ComponentQuery.query('#rtBillingSheetCancelBtn')[0].fireEvent("tap");


            this.getBillingSheet().show();
            this.initDatalinkBilling() ;
            this.displayDatalinkBilling();


    },

    oninvoiceRMPROProductSetupBtnTap: function(button, e, eOpts) {


           Ext.ComponentQuery.query('#rtBillingSheetCancelBtn')[0].fireEvent("tap");


            this.getBillingSheet().show();
            this.intRMPROBilling() ;
            this.displayRMPROBillig();

    },

    displayRMPROBillig: function(target) {
        //retailerBillingSheet



        // this.initProductRtBilling() ;


        this.setRM_PROPackageList() ;
        this.setRM_proModules() ;


        this.initProductRtBilling() ;


        //this.fillModuleLists() ;

         var that = this ;
         var timeout = setTimeout(function(){
                    that.calculateBillingPrices() ;
         },100);


        var record = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection()[0] ;
        var packName = '<div style="font-size: 14px;margin-left: 10px;">' + record.data.text+ '</div>' ;
        Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageNameLabel').setHtml( packName );


        Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageBundlePriceLbl').setHtml( '<div style="margin-right: 80px;font-size: small;"> Bundle Price ::$ '+record.data.rm_pro_bundle_price+'</div>');


        var rm_pro_modules = record.data.rm_pro_modules ;
        var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;

        var adOnsStore = addOnsList.getStore() ;
         for(var i =0 ; i< rm_pro_modules.length; i++){

            var recIndex = adOnsStore.findExact('_id', rm_pro_modules[i].module_id ) ;

            if(recIndex != -1)
            {

                addOnsList.select(adOnsStore.getAt(recIndex),true,true) ;


            }
         }
    },

    getBillingSheet: function() {
        if(Ext.ComponentQuery.query("#retailerBillingSheet")[0])
        {

         return Ext.ComponentQuery.query("#retailerBillingSheet")[0];

        }else{

         return Ext.widget('retailerBillingSheet');
        }

    },

    setRM_PROPackageList: function() {

           var billingController =  RMdatalink.app.getController('BillingDetailsController') ;

        if(billingController.config.pricingData){


                RMdatalink.util.globalMethods.fillListData('#rmProSelectPackageList',billingController.config.pricingData[3].pricing_policy);

        }

        // Ext.ComponentQuery.query('#rmProSelectPackageList')[0].select(0,false,true) ;
        // Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(0,false,true) ;
    },

    setRM_proModules: function() {


        var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;

        var rmproStore = Ext.getStore('products.RMProStore') ;


        rmProBillingStore.removeAll();
        rmProBillingStore.sync() ;

        var data = getArrayDataFromStore(rmproStore) ;

        var qunty = 1 ;
        for(var i=0 ; i< data.length ; i ++){

            qunty =   data[i].quantity ?  data[i].quantity  : 1 ;
            data[i].trial = "";
            data[i].quantity = qunty ;
            data[i].per_month = 1 ;

        }

        rmProBillingStore.setData(data);
        rmProBillingStore.sync() ;



        var rtDiscountStore = Ext.getStore('products.BillingDiscount') ;
        var rmProDiscount = Ext.getStore('products.RMProDiscountStore');

        rtDiscountStore.removeAll();
        rtDiscountStore.sync() ;

        rtDiscountStore.setData(getArrayDataFromStore(rmProDiscount));
        rtDiscountStore.sync() ;





          function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }


    },

    updateBillPrices: function() {

        var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;

        var rateList = Ext.ComponentQuery.query('#rmProSelectRateList')[0] ;


    },

    updateModuleList: function(inputFld, record_key) {
        console.log(inputFld.attributes['data-id'].value) ;

        var _id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;

        var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;
        var recIndex = rmProBillingStore.findExact('_id',_id) ;

        if(recIndex == -1){
            return ;
        }


        var record = rmProBillingStore.getAt(recIndex) ;

        record.set(record_key,value) ;


        this.calculateBillingPrices() ;
    },

    calculateBillingPrices: function() {

        var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;
        var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;
        var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;


        var rateKey = Ext.ComponentQuery.query('#rmProSelectRateList')[0].getSelection()[0].data.value ;

        /*

        module_standard_price
        module_promotional_price

        */


        for(var i=0; i < rmProBillingStore.getData().all.length; i++){

            var tRec = rmProBillingStore.getAt(i);

            var qty = tRec.get("quantity") ? parseInt(tRec.get("quantity"),0) : 1 ;
            var rate = tRec.get(rateKey) ? parseInt(tRec.get(rateKey),0) : 1 ;

            var stdRate = tRec.get("module_standard_price") ? parseInt(tRec.get("module_standard_price"),0) : 1 ;
            var promoRate = tRec.get("module_promotional_price") ? parseInt(tRec.get("module_promotional_price"),0) : 1 ;

            var per_month = qty * rate ;

            var stdPerMonth = qty * stdRate ;

            var promoPerMonth = qty * promoRate ;

            tRec.set("per_month",per_month);

            tRec.set("standard_total",stdPerMonth);
            tRec.set("promotional_total",promoPerMonth);


            tRec.dirty = true ;

        }

        rmProBillingStore.sync() ;



        var selectedModules = addOnsList.getSelection() ;

        var totalMonthlyMemberShip = 0 ;

        var totalStandardMonthlyMbrShip = 0 ;
        var totalPromotionalMonthlyMbrShip = 0 ;

        for(var i=0 ; i <selectedModules.length ; i++){

            totalMonthlyMemberShip +=  parseInt(selectedModules[i].get('per_month'),0)  ;

            totalStandardMonthlyMbrShip +=  parseInt(selectedModules[i].get('standard_total'),0)  ;
            totalPromotionalMonthlyMbrShip +=  parseInt(selectedModules[i].get('promotional_total'),0)  ;

        }

        ////if product RM-PRO
        if(this.config.productKey == "product_rmpro")
        {
            var record = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection()[0] ;

            if(record.data.rm_pro_bundle_price)
            {
                totalMonthlyMemberShip += parseInt(record.data.rm_pro_bundle_price,0) ;

                totalStandardMonthlyMbrShip += parseInt(record.data.rm_pro_bundle_price,0) ;
                totalPromotionalMonthlyMbrShip += parseInt(record.data.rm_pro_bundle_price,0) ;
            }
        }


        Ext.ComponentQuery.query('#rtBillTotalMonthlyMbrShipFld')[0].setValue(totalMonthlyMemberShip) ;


        //if(this.config.productKey == "product_rmpro"){
            this.calculateBillingDiscount();
        //}

        //textThroughLine
        /*
        var discounList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');

        var yrlyDiscount = discounList.getSelection();

        if(yrlyDiscount.length > 0){

            yrlyDiscount = yrlyDiscount[0] ;
        }
        */

         Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].setHtml("$ "+totalStandardMonthlyMbrShip);
        Ext.ComponentQuery.query('#rmProPrmotionalPriceTotalLbl')[0].setHtml("$ "+totalPromotionalMonthlyMbrShip);

        if(rateKey == "module_standard_price" )
        {
         Ext.ComponentQuery.query('#rmProPrmotionalPriceTotalLbl')[0].setHidden(true);

          Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].setWidth("20%");

             Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].removeCls('textThroughLine');
        }else{

             Ext.ComponentQuery.query('#rmProPrmotionalPriceTotalLbl')[0].setHidden(false);

          Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].setWidth("10%");

             Ext.ComponentQuery.query('#rmProStdPriceTotalLbl')[0].setCls('textThroughLine');
        }
    },

    onModuleListSelectUnSelect: function() {

         var that = this ;
         var timeout = setTimeout(function(){
                    that.calculateBillingPrices() ;
         },100);
    },

    calculateBillingDiscount: function() {
        var newValue = Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].getValue() ;

        if(!newValue && newValue == ""){

            return ;
        }

        var discFldValue = (Ext.ComponentQuery.query('#rtBillTotalMonthlyMbrShipFld')[0].getValue() - parseFloat(newValue) ).toFixed(2);

        Ext.ComponentQuery.query('#rtBillDiscountTxtFld')[0].setValue(discFldValue);

        Ext.ComponentQuery.query('#rtBillYearlyMemberShipFld')[0].setValue( (parseFloat(newValue) * 12).toFixed(2) );



        var rtDiscountStore = Ext.getStore('products.BillingDiscount') ;

        var yrlyMbrShip = Ext.ComponentQuery.query('#rtBillYearlyMemberShipFld')[0].getValue() ;

        if( !yrlyMbrShip || yrlyMbrShip == ""){
            return ;
        }


        for(var i = 0 ; i < rtDiscountStore.getData().all.length; i++ ){

            var rec = rtDiscountStore.getAt(i) ;
            var discount_total = (yrlyMbrShip * (100 - rec.get('discount_value')) )/100 ;
            var discount_saving = yrlyMbrShip - discount_total ;
            var discount_per_month = discount_total / 12 ;

            var duration = rec.get('discount_duration') ;

            if(! duration){
                duration = i + 1;
            }

                discount_total =  Math.round(discount_total) ;
                discount_saving =  Math.round(discount_saving) ;
                discount_per_month =  Math.round(discount_per_month) ;

            rec.set('discount_total',discount_total * duration );
            rec.set('discount_saving',discount_saving * duration  );
            rec.set('discount_per_month',discount_per_month);

            rec.dirty = true;
        }

        rtDiscountStore.sync() ;
    },

    initProductRtBilling: function() {
        //Retailer RM-PRO Billing

        var rtRecord =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow().record ;

        if(Ext.ComponentQuery.query('#rtBillingHeaderLabel')[0])
        {
            Ext.ComponentQuery.query('#rtBillingHeaderLabel')[0].setHtml(rtRecord.get('store_name') + " : RMPro product setup");
        }


        this.config.rtProduct = rtRecord.get('products');


        var product_billng = rtRecord.get('product_billng') ;

        console.log(product_billng) ;

        if(!product_billng || ! product_billng.product_rmpro){


            Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(0,false,true) ;
            Ext.ComponentQuery.query('#rmProSelectPackageList')[0].select(0,false,false) ;
           // Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(0,false,true) ;

            return ;
        }


        console.log(product_billng) ;


        var selectedPackage = product_billng.product_rmpro.selected_package ;
        var selectedRate = product_billng.product_rmpro.selected_rate == "module_standard_price" ? 0 : 1 ;
        var monthlyMbrShip = product_billng.product_rmpro.monthly_membership ;
        var intActDate =  product_billng.product_rmpro.initial_activation_date ;



        if(! intActDate)
        {
            intActDate = RMdatalink.util.globalMethods.getAmToday();
        }
        Ext.ComponentQuery.query('#rmProSelectPackageList')[0].select((selectedPackage-1),false,true) ;

        Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(selectedRate,false,false) ;

        if(Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0])
        {
            Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].setValue(intActDate) ;
        }
        Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].setValue(monthlyMbrShip) ;

        var modules = product_billng.product_rmpro.product_modules ;

        this.fillModuleLists() ;

        this.selectModulefrmModuleId(modules) ;

        Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].setValue( product_billng.product_rmpro.commissionable_ammount);
        Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].setValue( product_billng.product_rmpro.commission_percent) ;

        var salesPersonsStore = Ext.getStore('products.RtSalesPersonStore') ;

        salesPersonsStore.removeAll();
        salesPersonsStore.sync();

        salesPersonsStore.setData(product_billng.product_rmpro.sales_persons);
        salesPersonsStore.sync();



         var paymentPrdList = Ext.ComponentQuery.query('#rmProPaymentFreqList')[0];

         var paymentPrd = 1;

        if(product_billng.product_rmpro.payment_frequency){

             paymentPrd = parseInt(product_billng.product_rmpro.payment_frequency, 0);

        }else{

            paymentPrd = parseInt(product_billng.product_rmpro.payment_period, 0);
        }


        if(!paymentPrd){

            paymentPrdList.select(0);
        }else{

            var paymentPrdStore = paymentPrdList.getStore() ;
             var searchValForPayPrd = paymentPrd.toString() ;

            var recIndexForPayPrd = paymentPrdStore.findExact('value',searchValForPayPrd);

            if(recIndexForPayPrd != -1){

                paymentPrdList.select(recIndexForPayPrd) ;
            }





        }


        var contractTermList = Ext.ComponentQuery.query('#rmProSlctTermList')[0];

         var contractPeriod =  parseInt(product_billng.product_rmpro.contract_period, 0);

        if(!contractPeriod){

            contractTermList.select(0);
        }else{
                var contractStore = contractTermList.getStore() ;

             var searchValForContract = contractPeriod.toString() ;

            var recIndexForContract = contractStore.findExact('value',searchValForContract);

            if(recIndexForContract != -1){

                contractTermList.select(recIndexForContract) ;
            }

        //     switch(contractPeriod){

        //             case 12:
        //              paymentPrdList.select(0);
        //             break;

        //             case 24:
        //              paymentPrdList.select(1);
        //             break;

        //             case 36:
        //              paymentPrdList.select(2);
        //             break;
        //     }
        }


        var discountList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');

         var discountValue =  parseInt(product_billng.product_rmpro.advance_payment_period, 0);
        var discountStore = discountList.getStore() ;

        if(!contractPeriod){


        }else{


            var searchVal = (discountValue/12).toString() ;

            var recIndex = discountStore.findExact('discount_duration',searchVal);

            if(recIndex != -1){

                discountList.select(recIndex) ;
            }

        }

         Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].setValue(product_billng.product_rmpro.contract_start_date ) ;

        /*
         commissionable_ammount:Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue(),
            commission_percent:Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue(),
            sales_persons:getSalesPersons()
        */
    },

    saveRtProductBilling: function(showSubscription) {
        //this.config.rtProduct = rtRecord.get('products');

        /*


        rtBillDiscountTxtFld
        rtBillMonthlyMemberShipFld
        rtBillYearlyMemberShipFld


        product_billng
        {
            product_rmpro
            {
            initial_activation_date
            selected_package:
            selected_rate:
            monthly_membership
            product_modules:[
            {
                module_id:
                trial:
                quantity:
            }

            ]

            }

        }
        */

        var that = this ;
        var rtRecord =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow().record ;

        var recToUpdate ={product_billng : rtRecord.get('product_billng') ? rtRecord.get('product_billng') : {} };

        var rateKey = Ext.ComponentQuery.query('#rmProSelectRateList')[0].getSelection()[0].data.value ;
        var monthlyMbrShip = Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].getValue() ;
        var masterStore = Ext.getStore('retailersMaster');

        var initActData = Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].getValue() ;

        var temp = recToUpdate.product_billng ? ( recToUpdate.product_billng.product_rmpro ? recToUpdate.product_billng.product_rmpro : {} ) : {} ;

        console.log("*******************************");
        console.log(temp);


            temp.initial_activation_date = initActData;
            temp.selected_package = getSelectedPackage() ;
            temp.selected_rate = rateKey ;
            temp.monthly_membership  = monthlyMbrShip ;
            temp.product_modules = that.getSelectedModules() ;
            temp.commissionable_ammount = Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue() ;
            temp.commission_percent = Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue() ;
            temp.sales_persons = getSalesPersons() ;

            temp.payment_period = getPayemntPeriod() ;

            temp.advance_payment_period = getAdvancePaymentPeriod() ;

            temp.contract_period = getContractPeriod() ;

            temp.payment_frequency = getPayemntPeriod() ;

        if(!temp.due_date )
        {

            temp.due_date =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;

        /*

            if(!initActData){

                Ext.Msg.alert("Initial Activation date required to save product setup.");
                return ;
            }



            var todaysDate = new Date() ;
            var tempDate = new Date() ;

            tempDate.setDate("01");


            var actDateObj = new Date(initActData) ;

            if(actDateObj < tempDate )
            {

                    temp.due_date = (todaysDate.getMonth() + 2) + "/"+ (actDateObj.getDate())+"/" + todaysDate.getFullYear();

                    temp.payment_period_start =  (todaysDate.getMonth() + 1 ) + "/"+ (actDateObj.getDate())+"/" + todaysDate.getFullYear(); // temp.due_date ;

                     todaysDate.setMonth(todaysDate.getMonth()+1);

                     temp.payment_period_end = (todaysDate.getMonth() + 1 ) + "/"+ (actDateObj.getDate())+"/" + todaysDate.getFullYear();
            }
            else{




                     temp.due_date = (actDateObj.getMonth() + 2) + "/"+ (actDateObj.getDate())+"/" + actDateObj.getFullYear();

                     temp.payment_period_start = temp.due_date ;

                     actDateObj.setMonth(actDateObj.getMonth()+1);

                     temp.payment_period_end = (actDateObj.getMonth() + 1 ) + "/"+ (actDateObj.getDate())+"/" + actDateObj.getFullYear();




            }

        */
        }


                    var paymentInterval = 1 ;
                    if( temp.advance_payment_period){

                        paymentInterval = temp.advance_payment_period ;

                        temp.payment_period = paymentInterval ;

                    }else{

                        paymentInterval =  temp.payment_period ;
                    }


                     paymentInterval = parseInt(paymentInterval,0) ;

                    if(! temp.payment_period_start ||   temp.payment_period_start == "")
                    {
                     temp.payment_period_start =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;
                    }

                    temp.contract_start_date =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;

                     var tempEndDate = new Date(temp.payment_period_start) ;


                     tempEndDate.setMonth(tempEndDate.getMonth() + paymentInterval) ;

                     temp.payment_period_end = (tempEndDate.getMonth() + 1 ) + "/"+ (tempEndDate.getDate())+"/" + tempEndDate.getFullYear();



                     recToUpdate.product_billng.product_rmpro =  temp ;


        // recToUpdate.product_billng.product_rmpro = {
        //     initial_activation_date:initActData,
        //     selected_package: getSelectedPackage() ,
        //     selected_rate:rateKey,
        //     monthly_membership:monthlyMbrShip ,
        //     product_modules:that.getSelectedModules(),
        //     commissionable_ammount:Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue(),
        //     commission_percent:Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue(),
        //     sales_persons:getSalesPersons()
        // };

        console.log(recToUpdate) ;

        Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });

           RMdatalink.iwa.rdl.doUpdateCollection(masterStore, recToUpdate , rtRecord.get('_id'), suc, err);


                    function suc(){

                        //rtRecord.set('product_billng',recToUpdate.product_billng);

                           RMdatalink.app.getController('Main').updateRetailerRecords("product_billng",recToUpdate.product_billng, rtRecord.get('_id')) ;

                        Ext.Viewport.setMasked(false);
                        that.hideProductBillingSheet();

                        if(showSubscription){

                            RMdatalink.app.getController('InvoiceController').showSubscriptionPage();
                        }


                    }
                    function err(){
                            Ext.Viewport.setMasked(false);
                    }

        function getSelectedPackage(){

            var recs = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection() ;

            return recs[0].data.value ;

        }


        function getSalesPersons(){
            return getArrayDataFromStore(Ext.getStore('products.RtSalesPersonStore'));
        }



          function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }



        function getPayemntPeriod(){


            var paymentPrdList = Ext.ComponentQuery.query('#rmProPaymentFreqList')[0];

            if(paymentPrdList.getSelection().length == 0 ){
                return 1;
            }

            var paymentPrd = paymentPrdList.getSelection()[0];

            return  paymentPrd.data.value ;
        }

        function getAdvancePaymentPeriod(){

            var discounList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');

            if(discounList.getSelection().length == 0 ){
                return null;
            }

            var yrlyDiscount = discounList.getSelection()[0];
            var tempPrd = parseInt(yrlyDiscount.data.discount_duration,0 ) * 12 ;
            return   tempPrd ;

        }


        function getContractPeriod(){


            var contractTermList = Ext.ComponentQuery.query('#rmProSlctTermList')[0];

            if(contractTermList.getSelection().length == 0 ){
                return 12;
            }

            var contract = contractTermList.getSelection()[0];

            return  contract.data.value ;
        }
    },

    getSelectedModules: function() {


        var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;

        var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;
        var records = moduleList.getSelection().concat(addOnsList.getSelection()) ;
        //concat


        var dataToReturn = [] ;
        for(var i =0 ; i < records.length; i++){

            dataToReturn.push(
                {
                    module_id:records[i].get('_id'),
                    trial:records[i].get('trial'),
                    quantity:records[i].get('quantity')
                }
            );
        }

        return dataToReturn ;
    },

    selectModulefrmModuleId: function(modules) {
        //        RMdatalink.app.getController('BillingDetailsController').config.pricingData[3].active_pricing_policy =  0;

        //               RMdatalink.app.getController('BillingDetailsController').loadRM_PROData() ;



        var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;

        var moduleStore = moduleList.getStore() ;

        var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;

        var adOnsStore = addOnsList.getStore() ;

        for(var i = 0 ; i < modules.length; i++){


            var recIndex = moduleStore.findExact("_id",modules[i].module_id);

            if(recIndex != -1){

                var record = moduleStore.getAt(recIndex) ;

                // record.set('quantity',modules[i].quantity);
                  record.set('trial',modules[i].trial);

                moduleList.select(record,true,true ) ;


            }
        }

        for(var i = 0 ; i < modules.length; i++){


            var recIndex = adOnsStore.findExact("_id",modules[i].module_id);

            if(recIndex != -1){

                var record = adOnsStore.getAt(recIndex) ;

                  record.set('quantity',modules[i].quantity);
                  record.set('trial',modules[i].trial);

                addOnsList.select(record,true,true ) ;


            }
        }


        if(RMdatalink.app.getController('LoginHandler').config.isRetailerLogin)
        {

            var selectedAddOns = addOnsList.getSelection() ;

            var rtAddons = [] ;

            for(var i =0 ; i < selectedAddOns.length ; i ++ ){

                rtAddons.push(selectedAddOns[i].data) ;
            }

            adOnsStore.removeAll();
            adOnsStore.sync() ;

            adOnsStore.setData(rtAddons);
            adOnsStore.sync() ;


            addOnsList.selectAll() ;







        }








    },

    hideProductBillingSheet: function() {
        this.getBillingSheet().hide();
        this.getBillingSheet().destroy() ;
    },

    fillModuleLists: function() {
        var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;


        /*
        RMdatalink.util.globalMethods.fillListData('#rmProSelectPackageList',billingController.config.pricingData[3].pricing_policy);

        products.BillingFromPackages
        products.BillingModuleAddons

          var recs = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection() ;

            return recs[0].data.value ;

        */
         var recs = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection() ;
         var modules = recs[0].data.rm_pro_modules ;

        var allModules = recs[0].data.data ;

        var packageStore = Ext.getStore('products.BillingFromPackages') ;
        var addOnsStore = Ext.getStore('products.BillingModuleAddons') ;

        addOnsStore.removeAll();
        addOnsStore.sync();

        packageStore.removeAll();
        packageStore.sync();

        for(var i= 0 ; i < rmProBillingStore.getData().all.length; i++){

            var tRec = rmProBillingStore.getAt(i) ;

            var dataTOUpdate  = getQtyStdPromoPrice(tRec.get("_id"));

            var dataToUpdateForAddOns = getStdPromoPriceForAddons(tRec.get("_id"));


             if(dataTOUpdate)
                {
                    tRec.set(dataTOUpdate) ;
                }


            if(chckForPackageModule(tRec.get("_id")))
            {




                // tRec.set("quantity",tempQty ? tempQty : 1);
                packageStore.addData(tRec.data) ;

            }else
            {

        //               if(dataToUpdateForAddOns)
        //               {
        //                     tRec.set(dataToUpdateForAddOns) ;
        //               }


                 //tRec.set("quantity",tempQty ? tempQty : 1);
                 addOnsStore.addData(tRec.data) ;

            }

        }
        addOnsStore.sync();

        packageStore.sync();

        var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;
        moduleList.selectAll() ;

        function chckForPackageModule(_id){

         //   var recs = Ext.ComponentQuery.query('#rmProSelectPackageList')[0].getSelection() ;
          //  var modules = recs[0].data.rm_pro_modules ;

            for(var i =0 ; i < modules.length ; i++){

                if(_id == modules[i].module_id){
                    return true ;
                }
            }

            return false ;
        }

        /*
        promotional_price: "50"
        quantity: "3"
        standard_price: "85"
        */


        function getQtyStdPromoPrice(m_id){

            for(var i =0 ; i < allModules.length ; i++){

                if(allModules[i].product_id == m_id){

                    return {
                        module_promotional_price: allModules[i].promotional_price,
                        module_standard_price :allModules[i].standard_price,
                        quantity : allModules[i].quantity
                    };
                }
            }

            return null ;
        }


        function getStdPromoPriceForAddons(m_id){

            for(var i =0 ; i < allModules.length ; i++){

                if(allModules[i].product_id == m_id){

                    return {
                        module_promotional_price: allModules[i].promotional_price,
                        module_standard_price :allModules[i].standard_price
                    };
                }
            }

            return null ;
        }
    },

    getBillingSheetDatalink: function() {
        if(Ext.ComponentQuery.query("#retailerBillingSheetDatalink")[0])
        {

         return Ext.ComponentQuery.query("#retailerBillingSheetDatalink")[0];

        }else{

         return Ext.widget('retailerBillingSheetDatalink');
        }

    },

    initDatalinkBilling: function() {
        /*

        productKey


        recToUpdate.product_billng.product_rmpro = {
            initial_activation_date:initActData,
            selected_package: getSelectedPackage() ,
            selected_rate:rateKey,
            monthly_membership:monthlyMbrShip ,
            product_modules:that.getSelectedModules(),
            commissionable_ammount:Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue(),
            commission_percent:Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue(),
            sales_persons:getSalesPersons()
        };



        productRmproSlctTermLbl
        rmProSlctTermList

        productRmproPaymentFreqLbl
        rmProPaymentFreqList

        */

        this.config.productKey = "product_datalink" ;

        var retailerBillingSheet = Ext.ComponentQuery.query('#retailerBillingSheet')[0] ;

        retailerBillingSheet.down('#rtBillingSlctPackLbl').setHidden(true);
        retailerBillingSheet.down('#rmProSelectPackageList').setHidden(true);
        //retailerBillingSheet.down('#rmProDiscountsForRtList').setHidden(true);


        // retailerBillingSheet.down('#productRmproSlctTermLbl').setHidden(true);
        // retailerBillingSheet.down('#rmProSlctTermList').setHidden(true);
        // retailerBillingSheet.down('#productRmproPaymentFreqLbl').setHidden(true);
        // retailerBillingSheet.down('#rmProPaymentFreqList').setHidden(true);


        retailerBillingSheet.down('#rmProModulesForRtList').setHeight(30);


        retailerBillingSheet.down('#productDatalinkVdrDiscTtlLbl').setHidden(true);
        retailerBillingSheet.down('#productDatalinkVdrDiscLst').setHidden(true);


        this.resetProductBillingView() ;
    },

    displayDatalinkBilling: function(target) {

        this.setDatalinkModules() ;


        this.initProductDatalinkModuleSelection() ;


         var that = this ;
         var timeout = setTimeout(function(){
                    that.calculateBillingPrices() ;
         },1000);



        var packName = '' ;
        Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageNameLabel').setHtml( packName );


        Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#productPackageBundlePriceLbl').setHtml('');

    },

    setDatalinkModules: function() {


        var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;

        var datalinkStore = Ext.getStore('products.DatalinkMain') ;


        rmProBillingStore.removeAll();
        rmProBillingStore.sync() ;


        var data = getArrayDataFromStore(datalinkStore) ;

        var vendorPricing = this.getSumVendorsPromotionalStandardPrice();


        for(var i=0 ; i< data.length ; i ++){

            data[i].trial = "";
            data[i].quantity = 1;
            data[i].per_month = 1 ;

            if( data[i].module_sku == "DL-DATA"){
                  data[i].module_standard_price = vendorPricing.standard_price ;
                  data[i].module_promotional_price = vendorPricing.promotional_price ;
                  data[i].quantity = vendorPricing.quantity;
            }
        }

        rmProBillingStore.setData(data);
        rmProBillingStore.sync() ;



        var rtDiscountStore = Ext.getStore('products.BillingDiscount') ;
        var rmProDiscount = Ext.getStore('products.DatalinkDiscountStore');

        rtDiscountStore.removeAll();
        rtDiscountStore.sync() ;



        rtDiscountStore.setData(getArrayDataFromStore(rmProDiscount));
        rtDiscountStore.sync() ;





          function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }


    },

    initProductDatalinkModuleSelection: function() {
        //Retailer RM-PRO Billing

        var rtRecord =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow().record ;

        Ext.ComponentQuery.query('#rtBillingHeaderLabel')[0].setHtml(rtRecord.get('store_name') + " : Datalink product setup");



        this.config.rtProduct = rtRecord.get('products');


        var product_billng = rtRecord.get('product_billng') ;

        console.log(product_billng) ;
        this.fillDatalinkModuleList() ;

        if(!product_billng || ! product_billng.product_datalink){


            Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(0,false,true) ;


            return ;
        }


        console.log(product_billng) ;


        var selectedRate = product_billng.product_datalink.selected_rate == "module_standard_price" ? 0 : 1 ;
        var monthlyMbrShip = product_billng.product_datalink.monthly_membership ;
        var intActDate =  product_billng.product_datalink.initial_activation_date ;

        if(! intActDate)
        {
            intActDate = RMdatalink.util.globalMethods.getAmToday();
        }

        Ext.ComponentQuery.query('#rmProSelectRateList')[0].select(selectedRate,false,false) ;

        Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].setValue(intActDate) ;
        Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].setValue(monthlyMbrShip) ;

        var modules = product_billng.product_datalink.product_modules ;

        // this.fillDatalinkModuleList() ;

        this.selectModulefrmModuleId(modules) ;


        ///New Product setup implementation


         var paymentPrdList = Ext.ComponentQuery.query('#rmProPaymentFreqList')[0];

         var paymentPrd = 1;

        if(product_billng.product_rmpro.payment_frequency){

             paymentPrd = parseInt(product_billng.product_rmpro.payment_frequency, 0);

        }else{

            paymentPrd = parseInt(product_billng.product_rmpro.payment_period, 0);
        }


        if(!paymentPrd){

            paymentPrdList.select(0);
        }else{

            var paymentPrdStore = paymentPrdList.getStore() ;
             var searchValForPayPrd = paymentPrd.toString() ;

            var recIndexForPayPrd = paymentPrdStore.findExact('value',searchValForPayPrd);

            if(recIndexForPayPrd != -1){

                paymentPrdList.select(recIndexForPayPrd) ;
            }





        }


        var contractTermList = Ext.ComponentQuery.query('#rmProSlctTermList')[0];

         var contractPeriod =  parseInt(product_billng.product_rmpro.contract_period, 0);

        if(!contractPeriod){

            contractTermList.select(0);
        }else{
                var contractStore = contractTermList.getStore() ;

             var searchValForContract = contractPeriod.toString() ;

            var recIndexForContract = contractStore.findExact('value',searchValForContract);

            if(recIndexForContract != -1){

                contractTermList.select(recIndexForContract) ;
            }


        }


        var discountList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');

         var discountValue =  parseInt(product_billng.product_rmpro.advance_payment_period, 0);
        var discountStore = discountList.getStore() ;

        if(!contractPeriod){


        }else{


            var searchVal = (discountValue/12).toString() ;

            var recIndex = discountStore.findExact('discount_duration',searchVal);

            if(recIndex != -1){

                discountList.select(recIndex) ;
            }

        }

         Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].setValue(product_billng.product_rmpro.contract_start_date ) ;



    },

    fillDatalinkModuleList: function() {
        var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;



        var packageStore = Ext.getStore('products.BillingFromPackages') ;
        var addOnsStore = Ext.getStore('products.BillingModuleAddons') ;

        addOnsStore.removeAll();
        addOnsStore.sync();

        packageStore.removeAll();
        packageStore.sync();




        for(var i= 0 ; i < rmProBillingStore.getData().all.length; i++){

            var tRec = rmProBillingStore.getAt(i) ;


            addOnsStore.add(tRec) ;


        }


        addOnsStore.sync();



    },

    intRMPROBilling: function() {
        /*

        productKey


        recToUpdate.product_billng.product_rmpro = {
            initial_activation_date:initActData,
            selected_package: getSelectedPackage() ,
            selected_rate:rateKey,
            monthly_membership:monthlyMbrShip ,
            product_modules:that.getSelectedModules(),
            commissionable_ammount:Ext.ComponentQuery.query('#rtBillingCommissionableAmtFld')[0].getValue(),
            commission_percent:Ext.ComponentQuery.query('#rtBillingCommissionPercentFld')[0].getValue(),
            sales_persons:getSalesPersons()
        };




        rtBillingSlctPackLbl
        rmProSelectPackageList

        */

        this.config.productKey = "product_rmpro" ;

        var retailerBillingSheet = Ext.ComponentQuery.query('#retailerBillingSheet')[0] ;

        retailerBillingSheet.down('#productDatalinkVdrDiscTtlLbl').setHidden(true);
        retailerBillingSheet.down('#productDatalinkVdrDiscLst').setHidden(true);
    },

    resetProductBillingView: function() {
        var rmProBillingStore = Ext.getStore('products.BillingRmproModules') ;



        var packageStore = Ext.getStore('products.BillingFromPackages') ;
        var addOnsStore = Ext.getStore('products.BillingModuleAddons') ;

        addOnsStore.removeAll();
        addOnsStore.sync();

        packageStore.removeAll();
        packageStore.sync();

        rmProBillingStore.removeAll();
        rmProBillingStore.sync();
    },

    saveProductDatalinkBilling: function(showSubscription) {

        var that = this ;
        var rtRecord =  RMdatalink.util.globalConfig.getDataToShowInSettingWindow().record ;

        var recToUpdate ={product_billng : rtRecord.get('product_billng') ? rtRecord.get('product_billng') : {} };

        var rateKey = Ext.ComponentQuery.query('#rmProSelectRateList')[0].getSelection()[0].data.value ;
        var monthlyMbrShip = Ext.ComponentQuery.query('#rtBillMonthlyMemberShipFld')[0].getValue() ;
        var masterStore = Ext.getStore('retailersMaster');

        var initActData = Ext.ComponentQuery.query('#rtProductBillIntActDateFld')[0].getValue() ;


        var temp = recToUpdate.product_billng ? (recToUpdate.product_billng.product_datalink ? recToUpdate.product_billng.product_datalink : {}) : {} ;


        console.log("*******************************");
        console.log(temp);

            temp.initial_activation_date = initActData ;
            temp.selected_rate = rateKey ;
            temp.monthly_membership  = monthlyMbrShip  ;
            temp.product_modules = that.getSelectedModules() ;
          temp.payment_period = getPayemntPeriod() ;

            temp.advance_payment_period = getAdvancePaymentPeriod() ;

            temp.contract_period = getContractPeriod() ;

            temp.payment_frequency = getPayemntPeriod() ;

        if(!temp.due_date )
        {

            temp.due_date =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;

        /*

            if(!initActData){

                Ext.Msg.alert("Initial Activation date required to save product setup.");
                return ;
            }



            var todaysDate = new Date() ;
            var tempDate = new Date() ;

            tempDate.setDate("01");


            var actDateObj = new Date(initActData) ;

            if(actDateObj < tempDate )
            {

                    temp.due_date = (todaysDate.getMonth() + 2) + "/"+ (actDateObj.getDate())+"/" + todaysDate.getFullYear();

                    temp.payment_period_start =  (todaysDate.getMonth() + 1 ) + "/"+ (actDateObj.getDate())+"/" + todaysDate.getFullYear(); // temp.due_date ;

                     todaysDate.setMonth(todaysDate.getMonth()+1);

                     temp.payment_period_end = (todaysDate.getMonth() + 1 ) + "/"+ (actDateObj.getDate())+"/" + todaysDate.getFullYear();
            }
            else{




                     temp.due_date = (actDateObj.getMonth() + 2) + "/"+ (actDateObj.getDate())+"/" + actDateObj.getFullYear();

                     temp.payment_period_start = temp.due_date ;

                     actDateObj.setMonth(actDateObj.getMonth()+1);

                     temp.payment_period_end = (actDateObj.getMonth() + 1 ) + "/"+ (actDateObj.getDate())+"/" + actDateObj.getFullYear();




            }

        */
        }


                    var paymentInterval = 1 ;
                    if( temp.advance_payment_period){

                        paymentInterval = temp.advance_payment_period ;

                        temp.payment_period = paymentInterval ;

                    }else{

                        paymentInterval =  temp.payment_period ;
                    }


                     paymentInterval = parseInt(paymentInterval,0) ;

                     if(! temp.payment_period_start ||   temp.payment_period_start == "")
                    {
                     temp.payment_period_start =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;
                    }

                    temp.contract_start_date =  Ext.ComponentQuery.query('#productRmProSlctTermStrtDtFld')[0].getValue() ;

                     var tempEndDate = new Date(temp.payment_period_start) ;


                     tempEndDate.setMonth(tempEndDate.getMonth() + paymentInterval) ;

                     temp.payment_period_end = (tempEndDate.getMonth() + 1 ) + "/"+ (tempEndDate.getDate())+"/" + tempEndDate.getFullYear();


        recToUpdate.product_billng.product_datalink = temp ; //{} ;


        // recToUpdate.product_billng.product_datalink = {
        //     initial_activation_date:initActData,
        //     selected_rate:rateKey,
        //     monthly_membership:monthlyMbrShip ,
        //     product_modules:that.getSelectedModules()

        // };

        console.log(recToUpdate) ;

        Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });

           RMdatalink.iwa.rdl.doUpdateCollection(masterStore, recToUpdate , rtRecord.get('_id'), suc, err);


                    function suc(){

                        //rtRecord.set('product_billng',recToUpdate.product_billng);

                          RMdatalink.app.getController('Main').updateRetailerRecords("product_billng",recToUpdate.product_billng, rtRecord.get('_id')) ;


                        Ext.Viewport.setMasked(false);
                        that.hideProductBillingSheet();

                         if(showSubscription){

                            RMdatalink.app.getController('InvoiceController').showSubscriptionPage();
                        }


                    }
                    function err(){
                            Ext.Viewport.setMasked(false);
                    }



          function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }


        function getPayemntPeriod(){


            var paymentPrdList = Ext.ComponentQuery.query('#rmProPaymentFreqList')[0];

            if(paymentPrdList.getSelection().length == 0 ){
                return 1;
            }

            var paymentPrd = paymentPrdList.getSelection()[0];

            return  paymentPrd.data.value ;
        }

        function getAdvancePaymentPeriod(){

            var discounList = Ext.ComponentQuery.query('#rmProDiscountsForRtListPanel')[0].down('#mainList');

            if(discounList.getSelection().length == 0 ){
                return null;
            }

            var yrlyDiscount = discounList.getSelection()[0];
            var tempPrd = parseInt(yrlyDiscount.data.discount_duration,0 ) * 12 ;
            return   tempPrd ;

        }


        function getContractPeriod(){


            var contractTermList = Ext.ComponentQuery.query('#rmProSlctTermList')[0];

            if(contractTermList.getSelection().length == 0 ){
                return 12;
            }

            var contract = contractTermList.getSelection()[0];

            return  contract.data.value ;
        }
    },

    getSumVendorsPromotionalStandardPrice: function() {

        /*
                Ext.getStore('vendors.Master')

                product_price
                    datalink: Object
                        promotional_price: "49"
                        standard_price: "69"
        */



        var prospectList  = Ext.ComponentQuery.query('#RDInStoreVendorsTab')[0].down("#mainList");

        var prospectStore = prospectList.getStore() ;

        var vendorStore =  Ext.getStore('vendorTempRecordStore') ;

        var specificrtVdrs =  prospectStore.getData().all ;

        var dataToReturn = {
            promotional_price :0,
            standard_price:0,
            quantity:1
        } ;

        for(var i=0; i < specificrtVdrs.length ; i++){

           var vendor_name = specificrtVdrs[i].data.vendor_name;

           var recIndex = vendorStore.findExact('vendor_name',vendor_name);

            if(recIndex != -1)
            {
                    var record = vendorStore.getAt(recIndex) ;
                    if(record.data.product_price && record.data.product_price.datalink){

                         dataToReturn.standard_price += parseInt(record.data.product_price.datalink.standard_price) ;
                         dataToReturn.promotional_price += parseInt(record.data.product_price.datalink.promotional_price) ;
                    }
            }
        }

        if(specificrtVdrs.length > 0)
        {
             dataToReturn.standard_price  = Math.round(dataToReturn.standard_price /specificrtVdrs.length) ;
            dataToReturn.promotional_price = Math.round(dataToReturn.promotional_price /specificrtVdrs.length) ;

            dataToReturn.quantity = specificrtVdrs.length ;
        }

        console.log(dataToReturn) ;

        return dataToReturn ;
    },

    setResetModuleListHeight: function() {
        var moduleList = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down('#mainList') ;
        var addOnsList = Ext.ComponentQuery.query('#rtProductAddOnsModuleLst')[0] ;
        var headers = Ext.ComponentQuery.query('#rmProModulesForRtListPanel')[0].down("#headerList");

    }

});