/*
 * File: app/controller/BillingDetailsController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.BillingDetailsController', {
    extend: 'Ext.app.Controller',

    config: {
        billingRecord: {
            
        },
        pricingData: null,
        activePricingPolicyStore: 'pricing.datalink_pricing',
        activeDiscountPolicyStore: ' pricing.datalink_discount',
        activeFunctionalityStore: 'pricing.datalink_functionality',
        doNotSaveStoreData: false,
        isPricingDataloaded: false,
        isNoActionToChangePolicy: false,

        control: {
            "tabpanel[itemId=billingTabPanel]": {
                activeitemchange: 'onBillingTabpanelActiveItemChange'
            },
            "container[actionInit=containerInit]": {
                initialize: 'onTabPanelContainerInitialize'
            },
            "tabpanel[action=onActiveItemChanged]": {
                activeitemchange: 'onPricingTabpanelActiveItemChange'
            },
            "selectfield[itemId=pricingPolicySkuIncrementSelectFld]": {
                change: 'onpricingPolicySkuIncrementSelectFldChange'
            },
            "selectfield[itemId=DiscountPolicyVendorsIncrementSelectFld]": {
                change: 'onDiscountPolicyVendorsIncrementSelectFldChange'
            },
            "selectfield[itemId=rm_proPricingPolicySelectFld]": {
                change: 'onRMPROPolicySelectfieldChange'
            }
        }
    },

    onBillingTabpanelActiveItemChange: function(container, value, oldValue, eOpts) {
        return ;

        var list = null;
        var billingMasterStore =  Ext.getStore("billingMasterStore");
        var  retailersMaster = Ext.getStore("retailersMaster");

        billingMasterStore.clearFilter();


        switch(value._itemId) {
            case 'allTab':
                list = Ext.ComponentQuery.query("#allListContainerItemID")[0].down('#billingList');
                break;
            case 'paidTab':
                list = (Ext.ComponentQuery.query("#paidListContainerItemID")[0].down('#billingList'));
                billingMasterStore.filter('status','Paid');

                break;
            case 'pastDueTab':
                list = (Ext.ComponentQuery.query("#pastDueListContainerItemID")[0].down('#billingList'));
                billingMasterStore.filter('status','Past');

                break;
            case 'reviewTab':
                list = (Ext.ComponentQuery.query("#reviewListContainerItemID")[0].down('#billingList'));
                billingMasterStore.filter('status','Review');

                break;

        }

         //  *********  CLEAR  LIST  FILTER  ***********

        if(list.getStore())
        {
            list.getStore().clearFilter();
        }

        //**********   SET DATA TO THE LIST   ********************
        var listData = [];

        for(var i = 0; i<retailersMaster.getCount() ;i++)
        {
            var retailerRecord =  retailersMaster.getAt(i).data;
            var billingIndex = billingMasterStore.findExact('id', retailerRecord.id);
            var billingRecord = billingMasterStore.getAt(billingIndex);
            if(billingRecord)
            {
                billingRecord = billingRecord.data;



                var oneRowRecord =
                    {
                        "order_no" : retailerRecord.order_no,
                        "store_name" : retailerRecord.store_name,
                        "manager_lastname" : retailerRecord.manager_lastname,
                        "manager_firstname" : retailerRecord.manager_firstname,
                        "store_products_datalink" : retailerRecord.store_products_datalink,
                        "store_products_ecatalog" : retailerRecord.store_products_ecatalog,
                        "store_products_smart_cart" : retailerRecord.store_products_smart_cart,
                        "store_products_rm_plc" : retailerRecord.store_products_rm_plc,
                        "store_products_irugs" : retailerRecord.store_products_irugs,
                        "store_monthly_subscription" : retailerRecord.store_monthly_subscription,
                        "status" : billingRecord.status,
                        "overDue" : billingRecord.overDue,
                        "owed" : billingRecord.owed,
                        "store_online_vendors":retailerRecord.store_online_vendors,
                        "store_in_store_vendors":retailerRecord.store_in_store_vendors
                    };


                listData.push(oneRowRecord);
            }
        }
        RMdatalink.util.globalMethods.fillListDataByListObject(list,listData);
        list.refresh();
    },

    onTabPanelContainerInitialize: function(component, eOpts) {
        // *********  FOR  BILLING TAB  ***********************
        /*
        if(component.down("#billingListHeader"))
        {
            var headers = component.down("#billingListHeader");
            headers.setData([{}]);
            headers.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main">',

                           '    <div style="width: 10%;" data-name="store_order">',
                           '        Order&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 12%;" data-name="store_name">',
                           '        Store&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 10%;" data-name="manager_lastname">',
                           '        LastName&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 10%;" data-name="manager_firstname">',
                           '        FirstName&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 5%;" data-name="store_products_datalink">',
                           '        Data&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 5%;" data-name="store_products_ecatalog">',
                           '        eCat&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 5%;" data-name="store_products_smart_cart">',
                           '        Cart&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 5%;" data-name="store_products_rm_plc">',
                           '        RMPro&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 10%;" data-name="status">',
                           '        Status&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 10%;" data-name="overDue">',
                           '        Overdue&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 10%;" data-name="owed">',
                           '        Owed&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 8%;" data-name="store_monthly_subscription">',
                           '        Monthly&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );
            headers.refresh();
            var list = component.down('#billingList');

            list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main">',
                           '    <div style="width: 10%;" class="pointerCursor" >{order_no}{[this.setImageExclamationMark(values.status)]}</div>',
                           '    <div style="width: 12%;" class="pointerCursor" {[RMdatalink.util.globalConfig.getListAttrForDelHandling()]} = "{[RMdatalink.util.globalConfig.getStore_nameDelegateClassForTap()]}" >{store_name}</div>',
                           '    <div style="width: 10%;" class="pointerCursor" {[RMdatalink.util.globalConfig.getListAttrForDelHandling()]} = "{[RMdatalink.util.globalConfig.getManager_LastNameDelegateClassForTap()]}" >{manager_lastname}</div>',
                           '    <div style="width: 10%;" class="pointerCursor" {[RMdatalink.util.globalConfig.getListAttrForDelHandling()]} = "{[RMdatalink.util.globalConfig.getManager_LastNameDelegateClassForTap()]}">{manager_firstname}</div>',
                           '    <div style="width: 5%;" class="checkRound">',
                           '        <div style="width: 9px; height:9px;background-color:{[this.getCheckBoxRound(values.store_products_datalink)]}"></div>',
                           '    </div>',
                           '    <div style="width: 5%;" class="checkRound">',
                           '        <div style="width: 9px; height:9px;background-color:{[this.getCheckBoxRound(values.store_products_ecatalog)]}"></div>',
                           '    </div>',
                           '    <div style="width: 5%;" class="checkRound">',
                           '        <div style="width: 9px; height:9px;background-color:{[this.getCheckBoxRound(values.store_products_smart_cart)]}"></div>',
                           '    </div>',
                           '    <div style="width: 5%;" class="checkRound">',
                           '        <div style="width: 9px; height:9px;background-color:{[this.getCheckBoxRound(values.store_products_rm_plc)]}"></div>',
                           '    </div>',
                           '    <div style="width: 10%;" >{status}</div>',
                           '    <div style="width: 10%;" >{overDue}</div>',
                           '    <div style="width: 10%;" >${[this.setOwedMonthlyField(values.owed)]}</div>',
                           '    <div style="width: 8%;">${[this.setOwedMonthlyField(values.store_monthly_subscription)]}</div>',
                           '</div>',
                           {
                               getCheckBoxRound: function(value){
                                   if(value)
                                       return '#2EC1DA';
                                   else
                                       return '#F3F3F4';

                               }

                           },
                           {
                               setImageExclamationMark: function(status){
                                   if(status === 'Review')
                                       return '<img src="resources/images/retailerDetail/exclamation_mark.PNG" style="margin-left:10px;width: 5px;height: 17px;"/>';
                                   else
                                       return '';

                               }

                           },
                           {
                               setOwedMonthlyField: function(value){
                                   if(value === 0)
                                       return "0.00";
                                   else
                                   {
                                       var sumStr = ""+ value;
                                       var sumStrSplit0 = sumStr.split('.')[0];

                                       var len = sumStrSplit0.length;
                                       if(len > 3)
                                       {
                                           sumStr1 = sumStrSplit0.substr(0,(len-3));
                                           sumStr2 = sumStrSplit0.substr((len-3),(len-1));
                                           sumStrSplit0 =  sumStr1 + ',' + sumStr2 ;
                                       }

                                       if(sumStr.split('.')[1])
                                       return sumStrSplit0 + '.' +sumStr.split('.')[1];
                                       else
                                       {
                                         return  sumStrSplit0;
                                       }
                                   }


                               }

                           }
                          )
            );
        }*/
        // *********  FOR  PRICING TAB  ***********************
        if (component.down("#pricingListHeader"))
        {
            /*

            dataLinkTab
            ecataLogTab
            smartCartTab
            rmPLCTab
            iRugsTab

            */

            switch(component.getItemId()){

                case "dataLinkTab":
                case "ecataLogTab":
                case "smartCartTab":

            var headers = component.down("#pricingListHeader");
            headers.setData([{}]);

            headers.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 95%;">',

                           '    <div style="width: 20%;margin-left:10px;" data-name="vendor_name">',
                           '        Vendor&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 12%;" data-name="collections">',
                           '        Collection&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 14%;" data-name="design">',
                           '        Design&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 10%;" data-name="sku">',
                           '        SKU&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 15%;" data-name="standard_price">',
                           '        Standard Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 18%;" data-name="promotional_price">',
                           '        Promotional Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 18%;" data-name="">',
                           '        Value Calculator&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );



            headers.refresh();
            var list = component.down('#pricingList');

           list.setStore('vendors.Master');

         //   list.setStore('vendorTempRecordStore');//'vendors.Master'
        //      '    <div style="width: 10%;" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(SKU)]}</div>',


            if(component.getItemId() == "dataLinkTab")
            {
             list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                           '    <div style="width: 20%;margin-left:10px;" >{vendor_name}</div>',
                           '    <div style="width: 12%;" >{collections}</div>',
                           '    <div style="width: 11%;" >{design}</div>',
                         '    <div style="width: 10%;" >{SKU}</div>',
                           '    <input type="text" style="width: 15%;"  class="x-rm-pricing-input-field" data-id="{id}" field="standard" value="{product_price.datalink.standard_price}"  maxlength="8"',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'vendorDetailRecords\');" onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <input type="text" style="width: 18%;"  class="x-rm-pricing-input-field" data-id="{id}" field="promotional" value="{product_price.datalink.promotional_price}"  maxlength="8" ',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'vendorDetailRecords\');" ',
                           ' onkeypress=" return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <div style="width: 15%;" >{[this.getCalculatedValue(values.SKU)]}</div>',
                           '</div>',
                            {
                               getCalculatedValue: function(sku){
                                   if(sku)
                                   {
                                       var  result = (sku * 5)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               }

                           }

                          )
            );


            }else if(component.getItemId() == "ecataLogTab"){


                   list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                           '    <div style="width: 20%;margin-left:10px;" >{vendor_name}</div>',
                           '    <div style="width: 12%;" >{collections}</div>',
                           '    <div style="width: 11%;" >{design}</div>',
                         '    <div style="width: 10%;" >{SKU}</div>',
                           '    <input type="text" style="width: 15%;"  class="x-rm-pricing-input-field" data-id="{id}" field="standard" value="{product_price.ecatalog.standard_price}"  maxlength="8"',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'vendorDetailRecords\');" onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <input type="text" style="width: 18%;"  class="x-rm-pricing-input-field" data-id="{id}" field="promotional" value="{product_price.ecatalog.promotional_price}"  maxlength="8" ',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'vendorDetailRecords\');" ',
                           ' onkeypress=" return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <div style="width: 15%;" >{[this.getCalculatedValue(values.SKU)]}</div>',
                           '</div>',
                            {
                               getCalculatedValue: function(sku){
                                   if(sku)
                                   {
                                       var  result = (sku * 5)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               }

                           }

                          )
            );


            }else if(component.getItemId() == "smartCartTab"){


                       list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                           '    <div style="width: 20%;margin-left:10px;" >{vendor_name}</div>',
                           '    <div style="width: 12%;" >{collections}</div>',
                           '    <div style="width: 11%;" >{design}</div>',
                         '    <div style="width: 10%;" >{SKU}</div>',
                           '    <input type="text" style="width: 15%;"  class="x-rm-pricing-input-field" data-id="{id}" field="standard" value="{product_price.ecommerce.standard_price}"  maxlength="8"',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'vendorDetailRecords\');" onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <input type="text" style="width: 18%;"  class="x-rm-pricing-input-field" data-id="{id}" field="promotional" value="{product_price.ecommerce.promotional_price}"  maxlength="8" ',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'vendorDetailRecords\');" ',
                           ' onkeypress=" return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <div style="width: 15%;" >{[this.getCalculatedValue(values.SKU)]}</div>',
                           '</div>',
                            {
                               getCalculatedValue: function(sku){
                                   if(sku)
                                   {
                                       var  result = (sku * 5)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               }

                           }

                          )
            );


            }

            //  ****  FOR TOTAL LIST  ***********

            var totalsList = component.down('#pricingTotalsList');
            totalsList.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                           '    <div style="width: 8%;">TOTALS</div>',
                           '    <div style="width: 15%;">{vendor_count}&nbsp; Vendors</div>',
                           '    <div style="width: 12%;">{collection_count}&nbsp; </div>',
                           '    <div style="width: 12%;">{design_count}&nbsp; </div>',
                           '    <div style="width: 12%;">{sku_count}&nbsp;</div>',
                            '    <div style="width: 16%;">{total_std_price}&nbsp; </div>',
                            '    <div style="width: 16%;">{total_promo_price}&nbsp; </div>',
                            '    <div style="width: 12%;">{total_calculated_value}&nbsp; </div>',
                           '</div>'

                          )
            );


                    break;
                case "rmPLCTab":

                    component.down('#pricingListHeaderLabel').setHtml("RM-PRO Pricing");

          /*******************************************RM-PRO-PRICING*********************************************/
                    var headers = component.down("#pricingListHeader");
            headers.setData([{}]);
           /* headers.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 95%;">',

                           '    <div style="width: 20%;margin-left:10px;" data-name="name">',
                           '        Vendor&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 12%;" data-name="collection">',
                           '        Collection&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 14%;" data-name="design">',
                           '        Design&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 10%;" data-name="sku">',
                           '        SKU&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 15%;" data-name="standard_price">',
                           '        Standard Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 18%;" data-name="promotional_price">',
                           '        Promotional Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 18%;" data-name="">',
                           '        Calculated Value&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );*/

            headers.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 95%;">',

                           '    <div style="width: 20%;margin-left:10px;" data-name="module_name">',
                           '        Product&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 30%;" data-name="module_description">',
                           '        Description&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',

                           '    <div style="width: 15%;" data-name="module_standard_price">',
                           '        Standard Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 18%;" data-name="module_promotional_price">',
                           '        Promotional Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );



            headers.refresh();
            var list = component.down('#pricingList');
            list.setStore('products.RMProStore');
        //      '    <div style="width: 10%;" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(SKU)]}</div>',

             list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                           '    <div style="width: 20%;margin-left:10px;" >{module_name}</div>',
                           '    <div style="width: 30%;" >{module_description}</div>',
                           '    <input type="text" style="width: 15%;"  class="x-rm-pricing-input-field" data-id="{id}" field="standard" value="{module_standard_price}"  maxlength="8"',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'RMPRODetailRecords\');" onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <input type="text" style="width: 18%;"  class="x-rm-pricing-input-field" data-id="{id}" field="promotional" value="{module_promotional_price}"  maxlength="8" ',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'RMPRODetailRecords\');" ',
                           ' onkeypress=" return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <div style="width: 15%;" >{[this.getCalculatedValue(values.SKU)]}</div>',
                           '</div>'
                          )
            );




          /*  list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                           '    <div style="width: 20%;margin-left:10px;" >{name}</div>',
                           '    <div style="width: 12%;" >{collection}</div>',
                           '    <div style="width: 11%;" >{design}</div>',
                           '    <div style="width: 10%;" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(values.sku)]}</div>',
                           '    <input type="text" style="width: 15%;"  class="x-rm-pricing-input-field" data-id="{id}" field="standard" value="{standard_price}"  maxlength="8"',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'vendorDetailRecords\');" onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <input type="text" style="width: 18%;"  class="x-rm-pricing-input-field" data-id="{id}" field="promotional" value="{promotional_price}"  maxlength="8" ',
                           '        onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'vendorDetailRecords\');" ',
                           ' onkeypress=" return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" />',
                           '    <div style="width: 15%;" >{[this.getCalculatedValue(values.sku)]}</div>',
                           '</div>',
                            {
                               getCalculatedValue: function(sku){
                                   if(sku)
                                   {
                                       var  result = (sku * 5)/60 ;
                                       result =    Math.round(result * 100) / 100 ;
                                       return result ;
                                   }

                                       return 0 ;

                               }

                           }

                          )
            );
        */
            //  ****  FOR TOTAL LIST  ***********

        //     var totalsList = component.down('#pricingTotalsList');
        //     totalsList.setItemTpl(
        //         Ext.create('Ext.XTemplate',
        //                    '<div class="x-rm-listtpl-main" style="width: 100%;">',
        //                    '    <div style="width: 10%;">TOTALS</div>',
        //                    '    <div style="width: 12%;">{name}&nbsp; Vendors</div>',
        //                    '    <div style="width: 15%;">{collection}&nbsp; Collections</div>',
        //                    '    <div style="width: 15%;">{design}&nbsp; Designs</div>',
        //                    '    <div style="width: 15%;">{sku}&nbsp; SKUs</div>',
        //                    '</div>'
        //                   )
        //     );






                    break;
                case "iRugsTab":

                    break;

            }

            }

        // *********  FOR  PRICING TAB SIDE CONTAINER  ***********************

        if(component.title === 'PRICING POLICY')
        {
            // **********  FOR 1ST LIST  ***************

            /*
                pricingPolicy1stList
                pricingPolicy2ndList
        */
            var headers =  Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down("#headerList"); //   //(this is bad coding thats why i removed it (From Yury))component.innerItems[0].innerItems[0];
            headers.setData([{}]);
            headers.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 98%;">',
                           '    <div style="width: 22%;margin-left:10px;" data-name="from_sku">',
                           '        FROM SKU&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 22%;" data-name="to_sku">',
                           '        TO SKU&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 27%;" data-name="standard">',
                           '        STANDARD&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 27%;" data-name="promotional">',
                           '        PROMOTIONAL&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );
            headers.refresh();
            // ** MAIN LIST ****
            var list =   Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down("#mainList");//component.innerItems[0].innerItems[1];
            list.setStore(Ext.getStore("pricing.datalink_pricing"));

            list.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',
                           '    <div style="width: 22%;margin-left:10px;" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(values.from_sku)]}</div>',
                           '    <div style="width: 22%;" >{[RMdatalink.util.globalMethods.SetCommaForNumericField(values.to_sku)]}</div>',
                           '    <input type="text" style="width: 27%;"  class="x-rm-pricing-input-field" data-id="{id}" value="{standard}" field="standardPricingPolicy" maxlength="8"',
                           '     onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" ',
                           '      onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'productDetailRecords\');" />',
                           '    <input type="text" style="width: 27%;"  class="x-rm-pricing-input-field" data-id="{id}" value="{promotional}" field="promotionalPricingPolicy" maxlength="8"',
                           '      onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" ',
                           '      onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'productDetailRecords\');" />',
                           '</div>'

                          )
            );

            // **********  FOR 2nd LIST  ***************
            var headers1 =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down("#headerList"); //component.innerItems[1].innerItems[0];
            headers1.setData([{}]);
            headers1.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 98%;">',
                           '    <div style="width: 35%;margin-left:10px;" data-name="of_vendors">',
                           '        #OF VENDORS&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 35%;" data-name="discount_level">',
                           '       DISCOUNT LEVEL&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );
            headers1.refresh();
            // ** MAIN LIST ****
            var list1 =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down("#mainList"); //component.innerItems[1].innerItems[1];
            list1.setStore(Ext.getStore("pricing.datalink_discount"));

            list1.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',

                           '    <input type="text" style="width: 35%;margin-left:10px;"  class="x-rm-pricing-input-field" data-id="{id}" value="{of_vendors}" field="vendorsPricingPolicy" maxlength="4"',
                           '         onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" ',
                           '      onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'productDetailRecords\');" />',
                           '    <input type="text" style="width: 10%;padding-left:7px;"  class="x-rm-pricing-input-field" data-id="{id}" value="{discount_level}" field="discountPricingPolicy" maxlength="4"',
                           '        onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" ',
                           '      onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'productDetailRecords\');"  />',
                           '    <div style="margin-top: 2px;">%</div>',
                           '</div>'

                          )
            );
        }
        else if(component.title === 'FUNCTIONALITY')
        {

            var headers =   Ext.ComponentQuery.query('#fuctionalityList')[0].down("#headerList"); //component.innerItems[0].innerItems[0];
            headers.setData([{}]);
            headers.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 98%;">',
                           '    <div style="width: 35%;margin-left:10px;" data-name="pricing_function">',
                           '        Function&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style="width: 30%;" data-name="standard_price">',
                           '        Standard Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '    <div style=" width: 35%;" data-name="promotional_price">',
                           '        Promotional Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                           '    </div>',
                           '</div>'
                          )
            );
            /*        '    <div style="width: 35%;margin-left:10px;" >{pricing_function}</div>',

                           */
            headers.refresh();
            // ** MAIN LIST ****
            var list5 = Ext.ComponentQuery.query('#functionalityTab')[0].down("#mainList"); // component.innerItems[0].innerItems[1];
            list5.setStore('pricing.datalink_functionality');
            list5.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-listtpl-main" style="width: 100%;">',

                           '    <input type="text" style="width: 35%;"  class="x-rm-pricing-input-field" data-id="{id}" value="{pricing_function}" field="pricing_function" maxlength="30"',

                           '      onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'productDetailRecords\');" />',





                           '    <input type="text" style="width: 30%;"  class="x-rm-pricing-input-field" data-id="{id}" value="{standard_price}" field="standardFunctionality" maxlength="8"',
                           '     onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);"',
                           '      onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'productDetailRecords\');" />',

                           '    <input type="text" style="width: 30%;"  class="x-rm-pricing-input-field" data-id="{id}" value="{promotional_price}" field="promotionalFunctionality" maxlength="8"',
                           '     onkeypress="return RMdatalink.app.getController(\'BillingDetailsController\').isNumberKey(event,this);" ',
                           '      onchange="RMdatalink.app.getController(\'BillingDetailsController\').savePricingEditableFieldsData(this,\'productDetailRecords\');" />',

                           '</div>'

                          )
            );
        }
            else if(component.title === 'PERMISSION')
            {


                var headers =  component.innerItems[0].innerItems[0];
                headers.setData([{}]);
                headers.setItemTpl(
                    Ext.create('Ext.XTemplate',
                               '<div class="x-rm-listtpl-main" style="width: 90%;">',
                               '    <div style="width: 30%;margin-left:10px;" data-name="name">',
                               '        Name&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                               '    </div>',
                               '    <div style="width: 30%;" data-name="design">',
                               '        Design&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                               '    </div>',
                               '    <div style=" width: 30%;" data-name="sku">',
                               '        SKU&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                               '    </div>',
                               '</div>'
                              )
                );
                headers.refresh();
                // ** MAIN LIST ****
                var list =  component.innerItems[0].innerItems[1];

                list.setItemHeight(22);

                list.setMode('MULTI');
                list.addCls('x-rm-rdvendorslist');
                list.addCls('x-rm-rdvendorsPermissionlist');
                var  vendorDetailsRecodsStore = Ext.getStore("vendorDetailsRecodsStore");
                list.setStore(vendorDetailsRecodsStore);



                var listTpl = Ext.create('Ext.XTemplate',
                                         '<div class="x-rm-listtpl-main pointerCursor" style="width: 90%;">',
                                         '    <div style="width: 30%;margin-left:10px;">{name}</div>',
                                         '    <div style="width: 30%;">{design}</div>',
                                         '    <div style="width: 30%;">{[RMdatalink.util.globalMethods.SetCommaForNumericField(values.sku)]}</div>',
                                         '    <div style="width: 10%;">',
                                         '        <div style="width: 22px; height:17px;"></div>',
                                         '    </div>',
                                         '</div>'
                                        );

                list.setItemTpl(listTpl);
            }


    },

    onPricingTabpanelActiveItemChange: function(container, value, oldValue, eOpts) {
        if(container._itemId === 'pricingDetailsMainTabPanel')
        {
            var totalsList = null ;
            var list = null ;

            switch(value.title) {

                case 'DATALINK':

                    list = Ext.ComponentQuery.query("#dataLinkListItemID")[0].down('#pricingList');
                    totalsList = Ext.ComponentQuery.query("#dataLinkListItemID")[0].down('#pricingTotalsList');

                    this.setDataForPricingSideContainer(1);
                    this.setDataForPricingList(list,0,1,totalsList);

                    break;

                case 'ECATALOG':
                    list = (Ext.ComponentQuery.query("#eCatalogListItemID")[0].down('#pricingList'));
                    totalsList = Ext.ComponentQuery.query("#eCatalogListItemID")[0].down('#pricingTotalsList');
                    this.setDataForPricingSideContainer(2);
                    this.setDataForPricingList(list,1,2,totalsList);

                    break;

                case 'E-COMMERCE':
                    list = (Ext.ComponentQuery.query("#smartCartListItemID")[0].down('#pricingList'));
                    totalsList = Ext.ComponentQuery.query("#smartCartListItemID")[0].down('#pricingTotalsList');
                    this.setDataForPricingSideContainer(3);
                    this.setDataForPricingList(list,2,3,totalsList);

                    break;

                case 'RM PRO':
                    list = (Ext.ComponentQuery.query("#rmPLCListItemID")[0].down('#pricingList'));
                    totalsList = Ext.ComponentQuery.query("#rmPLCListItemID")[0].down('#pricingTotalsList');
                    this.setDataForPricingSideContainer(4);
                    this.setDataForPricingList(list,3,4,totalsList);

                    break;

                case 'IRUGZ':
                    list = (Ext.ComponentQuery.query("#iRugzListItemID")[0].down('#pricingList'));
                    totalsList = Ext.ComponentQuery.query("#iRugzListItemID")[0].down('#pricingTotalsList');
                    this.setDataForPricingSideContainer(5);
                    this.setDataForPricingList(list,4,5,totalsList);

                    break;
            }
        }


        if(container._itemId === 'discountsTabPanel')
        {

            RMdatalink.app.getController('discount.DiscountTabHandler').clearAddNewDiscountForm();


            switch(value.title) {

                case 'DATALINK':

                    break;

                case 'ECATALOG':

                    break;

                case 'E-COMMERCE':


                    break;

                case 'RM PRO':

                    break;

                case 'IRUGZ':


                    break;
            }
        }




    },

    onpricingPolicySkuIncrementSelectFldChange: function(selectfield, newValue, oldValue, eOpts) {
        console.log(newValue) ;
        //alert("change"+ this.config.doNotSaveStoreData );


        /*

                from_sku: "0"
                id: 1
                promotional: "29"
                standard: "29"
                to_sku: "2500"


        */

        /*

               "id": 1,
                    "product_name": "Datalink",
                    "active_pricing_policy":"500",
                    "active_discount_policy":"5",
                    "pricing_policy":[
                            {
                                "text":"Pricing Policy1",
                                "value":"500",
                                "data":

        */

        ////////////////////////

        if(this.config.doNotSaveStoreData){
            return ;
        }


        if(! newValue){

            return ;
        }

        var recordIndex = 0 ;
        var skuPricingPolicyStore =  Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down("#mainList").getStore() ;

        switch(skuPricingPolicyStore.getStoreId()){

                  case 'pricing.datalink_pricing':

                                recordIndex = 0 ;

                  break;

                 case 'pricing.ecatalog_pricing':

                                recordIndex = 1 ;

                  break;

                 case 'pricing.smart_cart_pricing':

                                recordIndex = 2 ;

                  break;

        }


        this.config.pricingData[recordIndex].active_pricing_policy = newValue ;
        var isRecordFoundFornewValue = false ;
        var pricingPolicyOldRecords = new Array() ;

        for(var k =0; k< this.config.pricingData[recordIndex].pricing_policy.length; k++){

            if(this.config.pricingData[recordIndex].pricing_policy[k].value == oldValue && ! this.config.doNotSaveStoreData ){
               console.log("SAVE");
                this.config.pricingData[recordIndex].pricing_policy[k].data =  getArrayDataFromStore(skuPricingPolicyStore );
            }
         //fillStore
            if(this.config.pricingData[recordIndex].pricing_policy[k].value == newValue && this.config.pricingData[recordIndex].pricing_policy[k].data.length >  2 ){
             pricingPolicyOldRecords = this.config.pricingData[recordIndex].pricing_policy[k].data ;
               isRecordFoundFornewValue =true ;
            }


        }

        if(isRecordFoundFornewValue)
        {
             fillStore(skuPricingPolicyStore,pricingPolicyOldRecords);
             isRecordFoundFornewValue = false ;
             return ;
        }
        ////////////////////////////////////////
        var pricingSKUStore = skuPricingPolicyStore;
        var newData = new Array() ;
        var maxSKU = 100000 ;
        var minSKU = 0 ;
        var increment = newValue ;

        var from = minSKU ;
        var to = increment ;
        while(to < maxSKU){

            newData.push(
                {
                            "from_sku":  from,
                            "promotional": "0",
                            "standard": "0",
                            "to_sku": to
                }
            );

            from = to +1 ;
            to = to + increment ;

        }

         to = maxSKU ;

            newData.push(
                {
                            "from_sku":  from,
                            "promotional": "0",
                            "standard": "0",
                            "to_sku": to
                }
            );


        pricingSKUStore.removeAll();
        pricingSKUStore.sync();

        pricingSKUStore.setData(newData);
        pricingSKUStore.sync() ;


        this.loadVendorTotalCountData() ;

        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(data[i].data);
            }

            return dataToReturn ;
         }



        function fillStore(store,data){
            store.removeAll();
            store.sync() ;


            store.setData(data) ;
            store.sync();
        }

    },

    onDiscountPolicyVendorsIncrementSelectFldChange: function(selectfield, newValue, oldValue, eOpts) {
        console.log(newValue) ;

        if(this.config.doNotSaveStoreData){
            return ;
        }


        if(! newValue){

            return ;
        }

        /*
        discount_level: "5"
        id: 1
        of_vendors: "5"
        */

        /*

               "id": 1,
                    "product_name": "Datalink",
                    "active_pricing_policy":"500",
                    "active_discount_policy":"5",
                    "discount_policy": [
                               {
                                    "text":"Discount Policy1",
                                    "value":"5",
                                    "data":[
                                           ]
                               },

        */

        ////////////////////////

        var discountStore =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down("#mainList").getStore() ;
        var recordIndex = 0 ;


        switch(discountStore.getStoreId()){

                  case 'pricing.datalink_discount':

                                recordIndex = 0 ;

                  break;
                   case 'pricing.ecatlog_discount':

                                recordIndex = 1 ;

                  break;
                   case 'pricing.smart_cart_discount':

                                recordIndex = 2 ;

                  break;

        }






        this.config.pricingData[recordIndex].active_discount_policy = newValue ;
        var isRecordFoundFornewValue = false ;
        var discountPolicyOldRecords = new Array() ;

        for(var k =0; k< this.config.pricingData[recordIndex].discount_policy.length; k++){

            if(this.config.pricingData[recordIndex].discount_policy[k].value == oldValue && !this.config.doNotSaveStoreData ){
                console.log("SAVE");
                this.config.pricingData[recordIndex].discount_policy[k].data =  getArrayDataFromStore(discountStore );
            }
         //fillStore
            if(this.config.pricingData[recordIndex].discount_policy[k].value == newValue && this.config.pricingData[recordIndex].discount_policy[k].data.length >  2 ){
             discountPolicyOldRecords = this.config.pricingData[recordIndex].discount_policy[k].data ;
               isRecordFoundFornewValue =true ;
            }


        }

        if(isRecordFoundFornewValue)
        {
             fillStore(discountStore,discountPolicyOldRecords);
             isRecordFoundFornewValue = false ;
             return ;
        }
        ////////////////////////////////////////


        var newData = new Array() ;
        var maxOfVendors = 80 ;
        var minOfVendors = 0 ;
        var increment = newValue ;

        var from = minOfVendors ;

        while(from  < maxOfVendors){

            newData.push(
                {
                            "of_vendors":  from,
                            "discount_level": "0"
                }
            );

            from = from + increment ;

        }

         from = maxOfVendors ;

              newData.push(
                    {
                                "of_vendors":  from,
                                "discount_level": "0"
                    }
                );




        discountStore.removeAll();
        discountStore.sync();

        discountStore.setData(newData);
        discountStore.sync() ;



        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(data[i].data);
            }

            return dataToReturn ;
         }



        function fillStore(store,data){
            store.removeAll();
            store.sync() ;


            store.setData(data) ;
            store.sync();
        }

    },

    onRMPROPolicySelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {
        var that = this ;

        if(oldValue && ! that.config.isNoActionToChangePolicy){

            Ext.Msg.confirm("Confirm","Are you sure you want to change the pricing policy?.",onMessageAns ,this);


            function onMessageAns(action,opt,confirmBox){


                if(action == "yes"){

                     that.config.pricingData[3].active_pricing_policy = newValue;

                     that.loadRM_PROData() ;

                     that.updateRMProPricing() ;

                }else{

                    that.config.isNoActionToChangePolicy = true ;
                    selectfield.setValue(oldValue);
                }


            }

        }
        else{

             that.config.isNoActionToChangePolicy = false ;

            this.config.pricingData[3].active_pricing_policy = newValue;

            this.loadRM_PROData() ;
        }


    },

    setDataForPricingList: function(list, productIndexInStore, productID, totalsList) {




        console.log(productIndexInStore) ;
        var store = list.getStore() ;

        switch(productIndexInStore.toString()){

             case "4":


                break;


            case "3":




                break;
        }




        /*
        var productDetailsRecordsStore =  Ext.getStore("productDetailsRecordsStore");
        var  vendorDetailsRecodsStore = Ext.getStore("vendorDetailsRecodsStore");
        var listDiscount = null;
        var listPermission = null;
        var listData = [];
        var listDataDiscount = [];


        // ******  DESELECT ALL VENDORS IN PERMISSION LIST *******
        listPermission = Ext.ComponentQuery.query("#permissionList")[0].down('#mainList');
        listPermission.deselectAll();


        //  ***********   FILTER RECORD BY DATA LINK PRODUCT  **********
        vendorDetailsRecodsStore.filterBy(function(record){

            for(var i = 0 ; i < record.data.products.length ; i ++ )
            {
                if(record.data.products[i].id === productID)
                {
                    return record;
                }
            }
        });

        //   ************   SET  LIST DATA  ***********
        listData = [];
        var standard_priceValue = null;
        var promotional_priceValue = null;
        for(var i = 0; i<vendorDetailsRecodsStore.getCount();i++)
        {
            var vendorRecord = vendorDetailsRecodsStore.getAt(i).data;

            for(var j = 0; j < vendorRecord.products.length ; j++)
            {
                if(vendorRecord.products[j].id === productID)
                {
                    standard_priceValue = vendorRecord.products[j].standard_price;
                    promotional_priceValue = vendorRecord.products[j].promotional_price;
                    listPermission.select(vendorDetailsRecodsStore.getAt(i) , true, true);

                }
            }


            var oneRowRecord =
                {
                    "id" : vendorRecord.id,
                    "name" : vendorRecord.name,
                    "collection" : vendorRecord.collection,
                    "design" : vendorRecord.design,
                    "sku" : vendorRecord.sku,
                    "standard_price" : standard_priceValue,
                    "promotional_price" : promotional_priceValue
                };

            listData.push(oneRowRecord);
        }


        RMdatalink.util.globalMethods.fillListDataByListObject(list,listData);
        list.refresh();

        //  ***  RSET STORE  ******
        vendorDetailsRecodsStore.clearFilter();
        Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].setActiveItem(0);
        listData = [];

        //  ****  FOR TOTAL LIST  ***********

        var storeList = list.getStore();
        var totalCollection = 0 , totalSku = 0 , totalDesign = 0;

        if(!storeList)
        {
            return;
        }

        storeList.each(function(record,id)
                       {

                           totalCollection += parseFloat(record.get('collection'));
                           totalSku += parseFloat(record.get('sku').replace(",",''));
                           totalDesign += parseFloat(record.get('design'));
                       });

        var oneRowRecord =
            {
                "name" : storeList.getCount(),
                "collection" : RMdatalink.util.globalMethods.SetCommaForNumericField(totalCollection),
                "design" :  RMdatalink.util.globalMethods.SetCommaForNumericField(totalDesign),
                "sku" :RMdatalink.util.globalMethods.SetCommaForNumericField(totalSku)
            };

        listData.push(oneRowRecord);

        if(totalsList){
            RMdatalink.util.globalMethods.fillListDataByListObject(totalsList,listData);
            totalsList.refresh();
        }

        */
    },

    isNumberKey: function(evt, inputField) {

        var value = inputField.value;
        var charCode = (evt.which) ? evt.which : event.keyCode ;
        console.log(value);
        if((value.indexOf('.') !=-1 || value === '' )&& charCode == 46)
        {
          return false;
        }
        if (charCode > 31 && (charCode != 46 &&(charCode < 48 || charCode > 57)))
        {
           return false;
        }

        return true;


    },

    savePricingEditableFieldsData: function(field, list) {
        if(this.config.doNotSaveStoreData){
            return ;
        }



        var productDetailsRecordsStore =  Ext.getStore("productDetailsRecordsStore");
        var  vendorDetailsRecodsStore = Ext.getStore("vendorDetailsRecodsStore");





        var pricingPolicyStore =     Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down("#mainList").getStore() ;        //Ext.getStore("pricing.datalink_pricing");
        var pricingDiscountPolicyStore =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down("#mainList").getStore(); //Ext.getStore("pricing.datalink_discount");
        var pricingFunctionalityStore = Ext.ComponentQuery.query('#functionalityTab')[0].down("#mainList").getStore() ;//Ext.getStore("pricingFunctionalityStore");



        var id = field.getAttribute('data-id') ;
        var fieldName = field.getAttribute('field') ;
        var price = field.value ;

        // console.log("***** id ." , id , " fieldName " ,fieldName , " price " ,price);

        var activeItem = Ext.ComponentQuery.query("#pricingDetailsMainTabPanel")[0].getActiveItem();
        var productID = -1;

        switch(activeItem.title) {

            case 'DATALINK':
                productID = 1;
                break;

            case 'ECATALOG':
                productID = 2;
                break;

            case 'E-COMMERCE':
                productID = 3;
                break;

            case 'RM PRO':
                productID = 4;
                break;

            case 'IRUGZ':
                productID = 5;
                break;
        }


        switch(list){

            case "RMPRODetailRecords":
                var rmProStore = Ext.getStore('products.RMProStore') ;

                var recordIndex = rmProStore.findExact('id',id);
                var record = rmProStore.getAt(recordIndex);


                        switch(fieldName) {

                            case 'standard':
                                record.set('module_standard_price',price );
                                break;

                            case 'promotional':
                                record.set('module_promotional_price',price );
                                break;
                        }



                break;

            case "vendorDetailRecords":

                return ;
                id = parseInt(id);
                var recordIndex = vendorDetailsRecodsStore.findExact('id',id);
                var record = vendorDetailsRecodsStore.getAt(recordIndex);
                var productsArray = record.data.products ;

                for(var j = 0; j < productsArray.length ; j++)
                {
                    if(productsArray[j].id === productID)
                    {
                        switch(fieldName) {

                            case 'standard':
                                productsArray[j].standard_price = price;
                                break;

                            case 'promotional':
                                productsArray[j].promotional_price = price;
                                break;
                        }
                    }
                }

                record.set('products',productsArray);
                vendorDetailsRecodsStore.sync();

                break;

            case "productDetailRecords":

                //var record = productDetailsRecordsStore.getById(productID);
                var rowRecord = null;
                switch(fieldName) {

                    case 'standardPricingPolicy':
                    case 'promotionalPricingPolicy':
                        rowRecord = pricingPolicyStore.getById(id);
                        if(fieldName === 'standardPricingPolicy')
                        {
                            rowRecord.set("standard", price);
                            //rowRecord.standard = price ;
                        }
                        else
                        {
                            rowRecord.set("promotional", price);
                            //rowRecord.promotional = price ;
                        }
                        var pricingPolicyArray = [] ;
                        for(var j = 0; j < pricingPolicyStore.getCount() ; j++)
                        {
                            pricingPolicyArray.push(pricingPolicyStore.getAt(j).data);
                        }

                        this.updaePricingData(pricingPolicyStore.getStoreId()) ;
                     //   record.set('pricing_policy_sku_range',pricingPolicyArray);

                        break;

                    case 'standardFunctionality':
                    case 'promotionalFunctionality':
                    case 'pricing_function':
                        rowRecord = pricingFunctionalityStore.getById(id);
                       if(fieldName === 'standardFunctionality')
                        {
                            rowRecord.set("standard_price", price);
                            //rowRecord.standard = price ;
                        }
                        else if(fieldName == 'pricing_function'){

                             rowRecord.set("pricing_function", price);

                            }
                        else
                        {
                            rowRecord.set("promotional_price", price);
                            //rowRecord.promotional = price ;
                        }

                      /*  var functionalityArray = [] ;
                        for(var j = 0; j < pricingFunctionalityStore.getCount() ; j++)
                        {
                            functionalityArray.push(pricingFunctionalityStore.getAt(j).data);
                        }
                     */
                          this.updaePricingData(pricingFunctionalityStore.getStoreId()) ;
                      //  record.set('functionality',functionalityArray);
                        break;

                    case 'vendorsPricingPolicy':
                    case 'discountPricingPolicy':
                         rowRecord = pricingDiscountPolicyStore.getById(id);
                        if(fieldName === 'vendorsPricingPolicy')
                        {
                            rowRecord.set("of_vendors", price);
                            //rowRecord.standard = price ;
                        }
                        else
                        {
                            rowRecord.set("discount_level", price);
                            //rowRecord.promotional = price ;
                        }
                        var pricingDiscountArray = [] ;
                        for(var j = 0; j < pricingDiscountPolicyStore.getCount() ; j++)
                        {
                            pricingDiscountArray.push(pricingDiscountPolicyStore.getAt(j).data);
                        }

                           this.updaePricingData(pricingDiscountPolicyStore.getStoreId()) ;
                     //   record.set('pricing_policy_discounts_levels',pricingDiscountArray);
                        break;
                }

                break;
        }

    },

    setDataForPricingSideContainer: function(id) {

         Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].setHidden(false);

         Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(1).setHidden(false);
         Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(2).setHidden(false);


        console.log(id) ;

        var pricingPolicyList =     Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down("#mainList");
        var pricingDiscountPolicyList =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down("#mainList");
        var pricingFunctionalityList = Ext.ComponentQuery.query('#functionalityTab')[0].down("#mainList");

        /*


        pricing.smart_cart_pricing
        pricing.smart_cart_discount
        pricing.smart_cart_functionality


        */

        var pricingSelectFld = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0];
        var discountSelectFld = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0];


        this.config.doNotSaveStoreData = true ;
        var oldValue = null;
        var newValue = null;

        switch(id){

            case 1:


                pricingPolicyList.setStore('pricing.datalink_pricing') ;
                pricingDiscountPolicyList.setStore('pricing.datalink_discount');
                pricingFunctionalityList.setStore('pricing.datalink_functionality') ;

                if( this.config.pricingData ){

                    pricingSelectFld.setValue(this.config.pricingData[0].active_pricing_policy);
                    discountSelectFld.setValue(this.config.pricingData[0].active_discount_policy);


                    this.loadPricingPolicy(this.config.pricingData[0].active_pricing_policy,null);
                    this.loadDiscountPolicy(this.config.pricingData[0].active_discount_policy,null);
                    this.LoadFunctionalityStore(0);

                }
                 Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(1).setHidden(true);
                Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(2).setHidden(true);

                break;

            case 2:

                pricingPolicyList.setStore('pricing.ecatalog_pricing') ;
                pricingDiscountPolicyList.setStore('pricing.ecatlog_discount');
                pricingFunctionalityList.setStore('pricing.ecatalog_functionality') ;

                 if( this.config.pricingData ){

                    pricingSelectFld.setValue(this.config.pricingData[1].active_pricing_policy);
                    discountSelectFld.setValue(this.config.pricingData[1].active_discount_policy);


                    this.loadPricingPolicy(this.config.pricingData[1].active_pricing_policy,null);
                    this.loadDiscountPolicy(this.config.pricingData[1].active_discount_policy,null);
                   this.LoadFunctionalityStore(1);

                }

                break;

            case 3:

                if(!this.config.pricingData[2]){
                    break ;
                }
                pricingPolicyList.setStore('pricing.smart_cart_pricing') ;
                pricingDiscountPolicyList.setStore('pricing.smart_cart_discount');
                pricingFunctionalityList.setStore('pricing.smart_cart_functionality') ;

                 if( this.config.pricingData ){


                    pricingSelectFld.setValue(this.config.pricingData[2].active_pricing_policy);

                     discountSelectFld.setValue(this.config.pricingData[2].active_discount_policy);

                    this.loadPricingPolicy(this.config.pricingData[2].active_pricing_policy,null);
                    this.loadDiscountPolicy(this.config.pricingData[2].active_discount_policy,null);
                   this.LoadFunctionalityStore(2);


                }


                break;
            case 4:

                Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].setActiveItem(0);
                Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(1).setHidden(true);
                Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].getTabBar().getAt(2).setHidden(true);

                  Ext.ComponentQuery.query('#pricingSideContainerItemID')[0].setHidden(true);

             //   pricingPolicyList.setStore('pricing.RM_proPricing') ;
             //   pricingDiscountPolicyList.setStore('pricing.RM_proDiscount');
             //   pricingFunctionalityList.setStore(null) ;



                break;

            default:
                 pricingPolicyList.setStore(null) ;
                pricingDiscountPolicyList.setStore(null);
                pricingFunctionalityList.setStore(null) ;

                break ;

        }




        this.config.doNotSaveStoreData = false ;


        /*
        var pricingPolicyStore =  Ext.getStore("pricingPolicyStore");
        var pricingDiscountPolicyStore = Ext.getStore("pricingDiscountPolicyStore");
        var pricingFunctionalityStore = Ext.getStore("pricingFunctionalityStore");
        var productDetailsRecordsStore =  Ext.getStore("productDetailsRecordsStore");

        var storeData = productDetailsRecordsStore.getById(id);


        pricingPolicyStore.removeAll();
        pricingPolicyStore.sync();


        pricingFunctionalityStore.removeAll();
        pricingFunctionalityStore.sync();

        pricingDiscountPolicyStore.removeAll();
        pricingDiscountPolicyStore.sync();

        if(storeData)
        {
        pricingPolicyStore.setData(storeData.data.pricing_policy_sku_range);
        pricingPolicyStore.sync();

        pricingFunctionalityStore.setData(storeData.data.functionality);
        pricingFunctionalityStore.sync();

        pricingDiscountPolicyStore.setData(storeData.data.pricing_policy_discounts_levels);
        pricingDiscountPolicyStore.sync();
        }

        */
    },

    pricingSavedButtonFunctionality: function() {
        console.log("PRICING SAVE BUTTON TAP");

        if(Ext.ComponentQuery.query('#pricingDetailsMainTabPanel')[0].getActiveItem().getItemId() == "rmPLCTab"){

            this.updateRMProPricing() ;
            return ;
        }


        var pricingMainStore = Ext.getStore('pricing.MainStore') ;

        var datalinkRecord = pricingMainStore.getAt(this.config.pricingData[0].searchIndex);
        var ecatlogRecord = pricingMainStore.getAt(this.config.pricingData[1].searchIndex);
        var smarCartRecord =  pricingMainStore.getAt(this.config.pricingData[2].searchIndex);


                    datalinkRecord.set(this.config.pricingData[0] );
                    datalinkRecord.dirty= true;
                     pricingMainStore.sync() ;

                    ecatlogRecord.set(this.config.pricingData[1] );
                    ecatlogRecord.dirty= true;
                     pricingMainStore.sync() ;
                    smarCartRecord.set(this.config.pricingData[2] );
                    smarCartRecord.dirty= true;

                     pricingMainStore.sync() ;

        this.updateVendorsForPricing();


        /*
        var  vendorDetailsRecodsStore = Ext.getStore("vendorDetailsRecodsStore");
        var listPermission = Ext.ComponentQuery.query("#permissionList")[0].down('#mainList');
        var selectedItems = listPermission.selected.items;

        var idArray = [];

        var activeItem = Ext.ComponentQuery.query("#pricingDetailsMainTabPanel")[0].getActiveItem();
        var pricingList = activeItem.down('#pricingList');
        var pricingTotalsList = activeItem.down('#pricingTotalsList');

        var productID = -1;

        switch(activeItem.title) {

            case 'DATALINK':
                productID = 1;
                break;

            case 'ECATALOG':
                productID = 2;
                break;

            case 'SMART CART':
                productID = 3;
                break;

            case 'RM PLC':
                productID = 4;
                break;

            case 'IRUGZ':
                productID = 5;
                break;
        }

        //console.log("productID " ,productID);



        for(var j = 0 ; j<selectedItems.length; j++ )
        {

               idArray.push(selectedItems[j].data.id);
              // console.log(selectedItems[j].data.id);
        }

        for(var j = 0 ; j<vendorDetailsRecodsStore.getCount(); j++ )
        {
            var vendorRecord = vendorDetailsRecodsStore.getAt(j);
            var idToSearch = vendorRecord.data.id;
            var isSelected = false;
            var haveToAdd = true;
            var haveToDelete = false;
            var productArray = vendorDetailsRecodsStore.getAt(j).data.products;
            //console.log(idToSearch);
            // console.log(productArray);

            // FIRST CHECK THIS ID IS SELECTED OR NOT
            for(var k = 0 ; k < idArray.length; k++ )
            {
                if(idArray[k] === idToSearch )
                {
                    isSelected = true;
                    break;
                }
            }

             // ***********  NOW CHECK ALREADY PRSENT IN STORE ??? ***********
            if(isSelected)
            {
                for(var i = 0 ; i < productArray.length; i++ )
                {
                    //console.log("productArray[i].id  ", productArray[i].id);
                    //console.log("idToSearch  ", idToSearch);
                    if(productArray[i].id === productID)
                    {
                        haveToAdd = false;
                        break;
                    }
                }

                //  ********** ADD PRODUCT FOR THIS VENDOR  ************
                if(haveToAdd)
                {

                    //console.log("True haveToAdd  ", idToSearch);

                    var oneRowRecord =
                        {
                            "id" : productID,
                            "standard_price" : "0.00",
                            "promotional_price" : "0.00"

                        };

                    productArray.push(oneRowRecord);
                    vendorRecord.set("products" , productArray);
                    //console.log("vendorRecord  ", vendorRecord);
                }



            }
            // *********  NOT SELECTED  ************
            else
            {
               var i = 0;
               for(i = 0 ; i < productArray.length; i++ )
                {
                    if(productArray[i].id === productID)
                    {
                        haveToDelete = true;
                        break;
                    }
                }

                // ********** ADD PRODUCT FOR THIS VENDOR *********
                if(haveToDelete)
                {
                    //console.log("True haveToDelete  ", idToSearch);
                    productArray.splice(i , 1);
                    vendorRecord.set("products" , productArray);
                    //console.log("vendorRecord  ", vendorRecord);
                }

            }


        }


        this.setDataForPricingList(pricingList,(productID-1),productID,pricingTotalsList);
        pricingList.refresh();

        Ext.Msg.alert('Success.', 'Record Updated Successfuly.', Ext.emptyFn);
        */


        //Ext.Msg.alert('Success.', 'Record Updated Successfuly.', Ext.emptyFn);
    },

    onBillingListItemTap: function() {
        /*MOVE THIS HANDLER TO CONTROLLER*/
        var attrToSearch = RMdatalink.util.globalConfig.getListAttrForDelHandling();
        var targetEl = e.target;

        var  retailersMasterStore = Ext.getStore("retailersMaster");
        // ********  FIND RECORD FROM MASTER STORE USING 'store_name'  ********
        var indexRetailersMaster = retailersMasterStore.find("store_name",record.data.store_name);

        if( RMdatalink.util.globalConfig.isAttributePresentInTarget( attrToSearch,targetEl )  ){

            var attrVak = targetEl.getAttribute(attrToSearch);
            var nameAttr = RMdatalink.util.globalConfig.getManager_LastNameDelegateClassForTap();
            var storeAttr = RMdatalink.util.globalConfig.getStore_nameDelegateClassForTap();

            var varibleToSet = setVariable();
            var retailersMaincontentpanel = Ext.ComponentQuery.query('#retailersMaincontentpanel')[0];

            switch (attrVak){

                case nameAttr:  RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);
                    Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDManagerTab');
                    RMdatalink.app.getController('UINav').onPanelAddretailertapped(retailersMaincontentpanel);

                    break;
                case storeAttr: RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);
                    Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDStoresTab');
                    RMdatalink.app.getController('UINav').onPanelAddretailertapped(retailersMaincontentpanel);

                    break;
                default:console.log('DONT FIRE ANY THING');
            }
        }

        function setVariable(){

            return {

                placeClicked:  attrVak,
                record:retailersMasterStore.getAt(indexRetailersMaster),
                index:index
            };
        }
    },

    setProductsSbscriptionData: function(title, list) {
         var totalsList = null ;


            switch(title) {

                case 'DATALINK':

                    this.setDataForPricingList(list,0,1,totalsList);

                    break;

                case 'ECATALOG':

                    this.setDataForPricingList(list,1,2,totalsList);

                    break;

                case 'E-COMMERCE':

                    this.setDataForPricingList(list,2,3,totalsList);

                    break;

                case 'RM PLC':
                     this.setDataForPricingList(list,3,4,totalsList);

                    break;

                case 'IRUGZ':

                    this.setDataForPricingList(list,4,5,totalsList);

                    break;
            }
    },

    loadPricingStores: function() {
        /*

               "id": 1,
                    "product_name": "Datalink",
                    "active_pricing_policy":"500",
                    "active_discount_policy":"5",
                    "pricing_policy":[
                            {
                                "text":"Pricing Policy1",
                                "value":"500",
                                "data":



        pricing.datalink_discount
        pricing.datalink_pricing
        pricing.datalink_functionality


        pricing.ecatalog_pricing
        pricing.ecatlog_discount
        pricing.ecatalog_functionality


        pricing.smart_cart_pricing
        pricing.smart_cart_discount
        pricing.smart_cart_functionality



        */

        var pricingMainStore = Ext.getStore('pricing.MainStore') ;

        var pricingData = getArrayDataFromStore(pricingMainStore);


         this.config.pricingData = new Array() ;

         this.config.pricingData = pricingData;



        var f1 = new Array() ;
        var f2 = new Array() ;
        var f3 = new Array() ;



        // f1 = pricingData[0].functionality ;
        // f2 = pricingData[1].functionality ;
        // f3 = pricingData[2].functionality ;

        //  fillStore(Ext.getStore('pricing.datalink_functionality'),f1) ;
        //  fillStore(Ext.getStore('pricing.ecatalog_functionality'),f2 ) ;
        //  fillStore(Ext.getStore('pricing.smart_cart_functionality'),f3 ) ;


        if(!Ext.ComponentQuery.query('#pricingMainContentsPanel')[0]){

            return ;
        }

        Ext.ComponentQuery.query('#pricingMainContentsPanel')[0].setMasked(false);

        this.LoadFunctionalityStore(0);

        Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].setValue(pricingData[0].active_pricing_policy) ;

        var rmProStore = Ext.getStore('products.RMProStore') ;
        this.config.isPricingDataloaded = true ;

        if( rmProStore.getData().all.length == 0){

            RMdatalink.app.getController('RMProController').initRMproStore() ;
        }else{

            this.initialseRMProPricingPolicy() ;
        }



        //this.setRMPROPricingPolicySelectFld() ;

        /*
        var datalinkPricingPolicyData = new Array() ;

        for(var i=0;i<pricingData.length ;i++){


            if(pricingData[i].product_name == "Datalink"){
               var pricing_policy = pricingData[i].pricing_policy ;
                for(var j =0 ; j< pricing_policy.length ; j++){

                    if(pricing_policy[j].value == pricingData[i].active_pricing_policy){

                        datalinkPricingPolicyData = pricing_policy[j].data ;

                    }
                }
            }

        }



        console.log(datalinkPricingPolicyData);
        fillStore(Ext.getStore('pricing.datalink_pricing'),datalinkPricingPolicyData);

        */

        function fillStore(store,data){
            store.removeAll();
            store.sync() ;


            store.setData(data) ;
            store.sync();
        }



        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();


            var datalink;
            var ecatlog;
            var smartcart ;
            var rmPro ;
           for(var i=0; i < data.length ; i++){

                if(data[i].data.product_name == "Datalink" && data[i].data.active_pricing_policy ){
                    datalink = data[i].data;
                    datalink.searchIndex = i ;

                }

                if(data[i].data.product_name == "ECatalog" && data[i].data.active_pricing_policy ){

                    ecatlog = data[i].data;
                    ecatlog.searchIndex = i ;
                }

                 if(data[i].data.product_name == "Smart Cart" && data[i].data.active_pricing_policy ){

                    smartcart = data[i].data;
                      smartcart.searchIndex = i ;

                }

               if(data[i].data.product_name == "RM_PRO" && data[i].data.active_pricing_policy ){

                      rmPro = data[i].data;
                      rmPro.searchIndex = i ;

                }

          }

              dataToReturn.push(datalink);
              dataToReturn.push(ecatlog);
              dataToReturn.push(smartcart);

              dataToReturn.push(rmPro);

            console.log(dataToReturn);
            return dataToReturn ;
         }
    },

    updaePricingData: function(storeId) {

        var pricingStore = Ext.getStore(storeId) ;

        if(!pricingStore){

            console.error("No Store Found with id ::"+storeId);
            return ;
        }
        var _this = this ;

        var recordIndex = 0 ;
        var newValue = null ;

        switch(storeId){

            case 'pricing.datalink_discount':
                var recordIndex = 0 ;
                newValue = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0].getValue();
                saveDatalinkDiscountPolicy();
                break;
            case 'pricing.datalink_pricing':
                var recordIndex = 0 ;
                newValue = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].getValue();
                saveDatalinkPricingPolicy() ;

                break;
            case 'pricing.datalink_functionality':
                var recordIndex = 0 ;
                saveFunctionalityData() ;
                break;
        //////////////////////////////////////////////////////////////////////////////////////////////

                case 'pricing.ecatlog_discount':
                var recordIndex = 1 ;
                newValue = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0].getValue();
                saveDatalinkDiscountPolicy();
                break;
            case 'pricing.ecatalog_pricing':
                var recordIndex = 1 ;
                newValue = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].getValue();
                saveDatalinkPricingPolicy() ;

                break;
            case 'pricing.ecatalog_functionality':
                var recordIndex = 1 ;
                saveFunctionalityData() ;
                break;

        ////////////////////////////////////////////////////////////////////////////
           case 'pricing.smart_cart_discount':
                var recordIndex = 2 ;
                newValue = Ext.ComponentQuery.query('#DiscountPolicyVendorsIncrementSelectFld')[0].getValue();
                saveDatalinkDiscountPolicy();
                break;
            case 'pricing.smart_cart_pricing':
                var recordIndex = 2 ;
                newValue = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].getValue();
                saveDatalinkPricingPolicy() ;

                break;
            case 'pricing.smart_cart_functionality':
                var recordIndex = 2 ;
                saveFunctionalityData() ;
                break;
        }



        function saveFunctionalityData(){

            _this.config.pricingData[recordIndex].functionality =  getArrayDataFromStore(pricingStore);

        }



        function saveDatalinkPricingPolicy(){


            if(newValue){

                _this.config.pricingData[recordIndex].active_pricing_policy = newValue ;

                for(var k =0; k< _this.config.pricingData[recordIndex].pricing_policy.length; k++){

                    if(_this.config.pricingData[recordIndex].pricing_policy[k].value == newValue ){
                        _this.config.pricingData[recordIndex].pricing_policy[k].data =  getArrayDataFromStore(pricingStore);
                    }


                }

            }


        }


        function saveDatalinkDiscountPolicy(){


            if(newValue){

                _this.config.pricingData[recordIndex].active_discount_policy = newValue ;

                for(var k =0; k< _this.config.pricingData[recordIndex].discount_policy.length; k++){

                    if(_this.config.pricingData[recordIndex].discount_policy[k].value == newValue ){
                        _this.config.pricingData[recordIndex].discount_policy[k].data =  getArrayDataFromStore(pricingStore);
                    }


                }

            }


        }







        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(data[i].data);
            }

            return dataToReturn ;
         }



        function fillStore(store,data){
            store.removeAll();
            store.sync() ;


            store.setData(data) ;
            store.sync();
        }

    },

    loadPricingPolicy: function(newValue, oldValue) {
        console.log(newValue) ;
        //alert("change"+ this.config.doNotSaveStoreData );


        /*

                from_sku: "0"
                id: 1
                promotional: "29"
                standard: "29"
                to_sku: "2500"


        */

        /*

               "id": 1,
                    "product_name": "Datalink",
                    "active_pricing_policy":"500",
                    "active_discount_policy":"5",
                    "pricing_policy":[
                            {
                                "text":"Pricing Policy1",
                                "value":"500",
                                "data":

        */

        ////////////////////////

        if(! newValue){

            return ;
        }

        var recordIndex = 0 ;
        var skuPricingPolicyStore =  Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down("#mainList").getStore() ;

        switch(skuPricingPolicyStore.getStoreId()){

                  case 'pricing.datalink_pricing':

                                recordIndex = 0 ;

                  break;

                 case 'pricing.ecatalog_pricing':

                                recordIndex = 1 ;

                  break;

                 case 'pricing.smart_cart_pricing':

                                recordIndex = 2 ;

                  break;

        }


        this.config.pricingData[recordIndex].active_pricing_policy = newValue ;
        var isRecordFoundFornewValue = false ;
        var pricingPolicyOldRecords = new Array() ;

        for(var k =0; k< this.config.pricingData[recordIndex].pricing_policy.length; k++){

            if(this.config.pricingData[recordIndex].pricing_policy[k].value == oldValue && ! this.config.doNotSaveStoreData ){
               console.log("SAVE");
                this.config.pricingData[recordIndex].pricing_policy[k].data =  getArrayDataFromStore(skuPricingPolicyStore );
            }
         //fillStore
            if(this.config.pricingData[recordIndex].pricing_policy[k].value == newValue && this.config.pricingData[recordIndex].pricing_policy[k].data.length >  2 ){
             pricingPolicyOldRecords = this.config.pricingData[recordIndex].pricing_policy[k].data ;
               isRecordFoundFornewValue =true ;
            }


        }

        if(isRecordFoundFornewValue)
        {
             fillStore(skuPricingPolicyStore,pricingPolicyOldRecords);
             isRecordFoundFornewValue = false ;
             return ;
        }
        ////////////////////////////////////////
        var pricingSKUStore = skuPricingPolicyStore;
        var newData = new Array() ;
        var maxSKU = 100000 ;
        var minSKU = 0 ;
        var increment = newValue ;

        var from = minSKU ;
        var to = increment ;
        while(to < maxSKU){

            newData.push(
                {
                            "from_sku":  from,
                            "promotional": "0",
                            "standard": "0",
                            "to_sku": to
                }
            );

            from = to +1 ;
            to = to + increment ;

        }

         to = maxSKU ;

            newData.push(
                {
                            "from_sku":  from,
                            "promotional": "0",
                            "standard": "0",
                            "to_sku": to
                }
            );


        pricingSKUStore.removeAll();
        pricingSKUStore.sync();

        pricingSKUStore.setData(newData);
        pricingSKUStore.sync() ;



        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(data[i].data);
            }

            return dataToReturn ;
         }



        function fillStore(store,data){
            store.removeAll();
            store.sync() ;


            store.setData(data) ;
            store.sync();
        }

    },

    loadDiscountPolicy: function(newValue, oldValue) {
        console.log(newValue) ;



        /*
        discount_level: "5"
        id: 1
        of_vendors: "5"
        */

        /*

               "id": 1,
                    "product_name": "Datalink",
                    "active_pricing_policy":"500",
                    "active_discount_policy":"5",
                    "discount_policy": [
                               {
                                    "text":"Discount Policy1",
                                    "value":"5",
                                    "data":[
                                           ]
                               },

        */

        ////////////////////////

        var discountStore =  Ext.ComponentQuery.query('#pricingPolicy2ndList')[0].down("#mainList").getStore() ;
        var recordIndex = 0 ;


        switch(discountStore.getStoreId()){

                  case 'pricing.datalink_discount':

                                recordIndex = 0 ;

                  break;
                   case 'pricing.ecatlog_discount':

                                recordIndex = 1 ;

                  break;
                   case 'pricing.smart_cart_discount':

                                recordIndex = 2 ;

                  break;

        }






        this.config.pricingData[recordIndex].active_discount_policy = newValue ;
        var isRecordFoundFornewValue = false ;
        var discountPolicyOldRecords = new Array() ;

        for(var k =0; k< this.config.pricingData[recordIndex].discount_policy.length; k++){

            if(this.config.pricingData[recordIndex].discount_policy[k].value == oldValue && !this.config.doNotSaveStoreData ){
                console.log("SAVE");
                this.config.pricingData[recordIndex].discount_policy[k].data =  getArrayDataFromStore(discountStore );
            }
         //fillStore
            if(this.config.pricingData[recordIndex].discount_policy[k].value == newValue && this.config.pricingData[recordIndex].discount_policy[k].data.length >  2 ){
             discountPolicyOldRecords = this.config.pricingData[recordIndex].discount_policy[k].data ;
               isRecordFoundFornewValue =true ;
            }


        }

        if(isRecordFoundFornewValue)
        {
             fillStore(discountStore,discountPolicyOldRecords);
             isRecordFoundFornewValue = false ;
             return ;
        }
        ////////////////////////////////////////


        var newData = new Array() ;
        var maxOfVendors = 80 ;
        var minOfVendors = 0 ;
        var increment = newValue ;

        var from = minOfVendors ;

        while(from  < maxOfVendors){

            newData.push(
                {
                            "of_vendors":  from,
                            "discount_level": "0"
                }
            );

            from = from + increment ;

        }

         from = maxOfVendors ;

              newData.push(
                    {
                                "of_vendors":  from,
                                "discount_level": "0"
                    }
                );




        discountStore.removeAll();
        discountStore.sync();

        discountStore.setData(newData);
        discountStore.sync() ;



        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(data[i].data);
            }

            return dataToReturn ;
         }



        function fillStore(store,data){
            store.removeAll();
            store.sync() ;


            store.setData(data) ;
            store.sync();
        }

    },

    LoadFunctionalityStore: function(index) {
        var pricingFunctionalityStore = Ext.ComponentQuery.query('#functionalityTab')[0].down("#mainList").getStore() ;//Ext.getStore("pricingFunctionalityStore");


        pricingFunctionalityStore.removeAll();
        pricingFunctionalityStore.sync() ;

        pricingFunctionalityStore.setData(this.config.pricingData[index].functionality) ;
        pricingFunctionalityStore.sync();


    },

    updateVendorsForPricing: function() {
        var that = this ;
                    Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });


        var recordIndex = 0 ;
        var skuPricingPolicyStore =  Ext.ComponentQuery.query('#pricingPolicy1stList')[0].down("#mainList").getStore() ;
        var key = "datalink" ;
        switch(skuPricingPolicyStore.getStoreId()){

                  case 'pricing.datalink_pricing':
                    key = "datalink" ;
                                recordIndex = 0 ;

                  break;

                 case 'pricing.ecatalog_pricing':
                        key = "ecatalog" ;
                                recordIndex = 1 ;

                  break;

                 case 'pricing.smart_cart_pricing':
                        key = "ecommerce" ;
                                recordIndex = 2 ;

                  break;

        }

        console.log(skuPricingPolicyStore.getData() );
        /*

        from_sku: 0
        id: "ext-record-176"
        promotional: "100"
        standard: "19"
        to_sku: 500


        */

         var pricingPolicyIncrementValue = Ext.ComponentQuery.query('#pricingPolicySkuIncrementSelectFld')[0].getValue() ;

         var vendorStore = Ext.getStore('vendors.Master');


        var vendorCount = vendorStore.getData().all.length ;


        //for(var index =0 ; ; index++ )

        var index =0 ;
        var dataToUpdate = {};

        var vRecord = null ;

         updateVendor() ;

        function updateVendor()
        {

            if( index < vendorCount)
            {
               vRecord = vendorStore.getAt(index) ;

                if(!vRecord){
                    Ext.Viewport.setMasked(false);
                    return ;
                }
               var vSKU =  0 ;

                if( vRecord.data.SKU && vRecord.data.SKU != "" ){

                    vSKU = parseInt(vRecord.data.SKU) ;
                }

                var pIndex = parseInt(  vSKU/pricingPolicyIncrementValue);


                var stPrice = skuPricingPolicyStore.getData().all[pIndex].data.standard ;
                var promoPrice = skuPricingPolicyStore.getData().all[pIndex].data.promotional ;


                if(vRecord.data.product_price){
                    dataToUpdate = vRecord.data.product_price ;
                }

                dataToUpdate[key] ={} ;

                dataToUpdate[key].standard_price = stPrice ;
                dataToUpdate[key].promotional_price = promoPrice ;

                var data = {
                    product_price : dataToUpdate
                };
                RMdatalink.iwa.rdl.doUpdateCollection(vendorStore, data , vRecord.get('_id'), success , failuer );


            }else{

                //that.updatePricingVendorStore() ;
                console.log("vendors updated");

                Ext.Viewport.setMasked(false);
            }


        }



        function success(){

             vRecord.set("product_price",dataToUpdate );
            index++ ;
            updateVendor() ;
        }

        function failuer(){
            index++ ;
            updateVendor() ;
        }


    },

    updatePricingVendorStore: function() {
                            var tempArray = new Array();
                            tempArray = getArrayDataFromStore(Ext.getStore('vendors.Master'));

                            var tempVendorStore = Ext.getStore('vendorTempRecordStore') ;

                            tempVendorStore.removeAll();
                            tempVendorStore.sync();

                            tempVendorStore.setData(tempArray);
                            tempVendorStore.sync();





        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(data[i].data);
            }

            return dataToReturn ;
         }





    },

    loadRM_PROData: function() {

        console.log(this.config.pricingData[3]) ;

        var rmpProData = this.config.pricingData[3] ;

        RMdatalink.app.getController('RMProController').setRMPRODiscountStore() ;
        RMdatalink.app.getController('DatalinkController').setDatalinkDiscountStore() ;

        var atcivePricingPolicy =  rmpProData.active_pricing_policy ;
        atcivePricingPolicy =  parseInt(atcivePricingPolicy) - 1 ;

        var rmProStore = Ext.getStore('products.RMProStore') ;
        resetActivePolicy() ;
        //Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].setOptions(rmpProData.pricing_policy ) ;
        //Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].setValue( atcivePricingPolicy );

        //
        ///////////////////////////////////////////////////////////////////////////////////

        var modulesToSelect = rmpProData.pricing_policy[atcivePricingPolicy].rm_pro_modules ;
        var bundlePrice = rmpProData.pricing_policy[atcivePricingPolicy].rm_pro_bundle_price ;

        Ext.ComponentQuery.query('#rm_proBundlePriceTxtFld')[0].setValue(bundlePrice ? bundlePrice: "" ) ;

        var rmProList =  Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList') ;

        rmProList.deselectAll(true) ;

        var moduleRecIndex = -1 ;
        var moduleRec = [] ;

        if(modulesToSelect)
        for(var i=0; i <modulesToSelect.length; i++){

            moduleRecIndex = rmProStore.findExact('_id',modulesToSelect[i].module_id );

            if(moduleRecIndex != -1 ){

                moduleRec.push(rmProStore.getAt(moduleRecIndex)) ;

                rmProStore.getAt(moduleRecIndex).set("active_policy",atcivePricingPolicy);

            }
        }

        rmProList.select(moduleRec,false,true);


         RMdatalink.app.getController('RMProController').onRmProSelectUnselect();

        ///////////////////////////////////////////////////////////////////////////////////


        var pricingData = rmpProData.pricing_policy[atcivePricingPolicy].data ;

        if(! pricingData || pricingData.length == 0 ){
            return ;

        }






        loadRMproStoreForPricing();


        function loadRMproStoreForPricing(){



           var maxRec =  pricingData.length;

            for(var i=0 ; i < maxRec ; i++){

                    var recIndex = rmProStore.findExact("_id",pricingData[i].product_id );

                    var rec = rmProStore.getAt(recIndex) ;

                    if(rec)
                    {
                            rec.set("module_promotional_price",pricingData[i].promotional_price );
                            rec.set("module_standard_price",pricingData[i].standard_price );
                            rec.set("quantity",pricingData[i].quantity );

                    }//quantity

            }
        }


        function resetActivePolicy(){

            for(var i=0; i < rmProStore.getData().all.length ; i ++){

                var rmRec = rmProStore.getAt(i) ;

                rmRec.set("active_policy","99999");
                rmRec.dirty = true ;
            }

        }
    },

    updateRMProPricing: function() {
        //   Ext.Viewport.setMasked( {
        //                 xtype: 'loadmask'
        //             });

        var activePolicy = Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].getValue();

        var rmProStore = Ext.getStore('products.RMProStore') ;

        var rmpProData = this.config.pricingData[3] ;

        var searchIndex = rmpProData.searchIndex ;

        var pricingData = [];


        var rmProStoreData = rmProStore.getData().all ;


        for(var i =0 ; i < rmProStoreData.length; i++ ){

            pricingData.push({

                "product_id":rmProStoreData[i].data._id,
                "promotional_price":rmProStoreData[i].data.module_promotional_price,
                "standard_price":rmProStoreData[i].data.module_standard_price,
                "quantity":rmProStoreData[i].data.quantity

            });
        }



        activePolicy =  parseInt(activePolicy) - 1 ;

        this.config.pricingData[3].pricing_policy[activePolicy].data = pricingData ;
        ////////////////////////////////////////////////////////////////////////////////
        var selectedRec =  Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList').getSelection() ;

        this.config.pricingData[3].pricing_policy[activePolicy].rm_pro_modules = [] ;
        this.config.pricingData[3].pricing_policy[activePolicy].rm_pro_bundle_price = Ext.ComponentQuery.query('#rm_proBundlePriceTxtFld')[0].getValue() ;

        for( var i=0 ; i < selectedRec.length ; i++ ){

            this.config.pricingData[3].pricing_policy[activePolicy].rm_pro_modules.push({"module_id":selectedRec[i].get('_id')}) ;

        }

        ////////////////////////////////////////////////////////////////////////////////
        this.config.pricingData[3].active_pricing_policy = Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].getValue();

        rmpProData = this.config.pricingData[3] ;

        console.log(this.config.pricingData[3].pricing_policy[activePolicy].data );

        var pricingMainStore = Ext.getStore('pricing.MainStore') ;

        var rmPRORec = pricingMainStore.getAt(this.config.pricingData[3].searchIndex);



                    rmPRORec.set( this.config.pricingData[3] );
                    rmPRORec.dirty= true;
                     pricingMainStore.sync() ;


        var index = 0 ;



        function updateRMPRO(){

            if(index <  rmProStoreData.length){

                var dataToUpdate = {

                   "module_promotional_price":rmProStoreData[index].data.module_promotional_price,
                   "module_standard_price":rmProStoreData[index].data.module_standard_price,
                    "quantity":rmProStoreData[index].data.quantity
                };

            }else{

                  Ext.Viewport.setMasked(false);

            }
        }


        function success(){


        }

        function error(){


        }

        //  Ext.Viewport.setMasked(false);

        // Ext.Msg.alert("Alert","RM-PRO pricing policies updated successfully.",Ext.emptyFn);
    },

    setRMPROPricingPolicySelectFld: function() {
        var rmpProData = this.config.pricingData[3] ;

        var atcivePricingPolicy =  rmpProData.active_pricing_policy ;


        Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].setOptions(rmpProData.pricing_policy ) ;
        Ext.ComponentQuery.query('#rm_proPricingPolicySelectFld')[0].setValue( atcivePricingPolicy );


    },

    initialseRMProPricingPolicy: function() {
        this.setRMPROPricingPolicySelectFld() ;

        //this.loadRM_PROData();

    },

    loadVendorTotalCountData: function() {



            var vendorsMasterStr = Ext.getStore( 'vendors.Master');
            var vdrs = vendorsMasterStr.getData().all ;

            var totalSKU = 0 ;
            var totalCllections = 0 ;
            var totalDesigns = 0 ;
            var totalStdPrice = 0 ;
            var totalPromoPrice = 0 ;
            var totalCalculatedVal = 0 ;


            for(var i=0; i < vdrs.length ; i++){
                if( vdrs[i].data.SKU)
                {
                     totalSKU +=  parseInt(vdrs[i].data.SKU,0) ;
                      var  result = (parseInt(vdrs[i].data.SKU,0 )  * 5)/60 ;
                     result =    Math.round(result * 100) / 100 ;

                     totalCalculatedVal += result ;
                }
                if( vdrs[i].data.collections)
                     totalCllections += parseInt(vdrs[i].data.collections,0)  ;
                if(vdrs[i].data.design )
                     totalDesigns += parseInt(vdrs[i].data.design,0)  ;
                if(vdrs[i].data.product_price && vdrs[i].data.product_price.datalink )
                {
                     totalStdPrice +=  parseInt(vdrs[i].data.product_price.datalink.standard_price,0) ;
                     totalPromoPrice +=  parseInt(vdrs[i].data.product_price.datalink.promotional_price,0) ;
                }



            }

        var dataToSet = {
            vendor_count:  vdrs.length,
            collection_count:totalCllections,
            design_count:totalDesigns,
            sku_count:totalSKU,
            total_std_price:totalStdPrice,
            total_promo_price:totalStdPrice,
            total_calculated_value:totalCalculatedVal
        };

            var listIbj = Ext.ComponentQuery.query('#pricingDetailsMainTabPanel')[0].down('#dataLinkTab').down('#pricingTotalsList') ;
         RMdatalink.util.globalMethods.fillListDataByListObject(listIbj,[dataToSet]);
    },

    assignAccountNoToRetailers: function() {



                 var pStatus = null ;

                     pStatus =  {'$or':
                        [
                         {"store_products.datalink_status" : "ACTIVE"},
                         {"store_products.ecatalog_status" : "ACTIVE"},
                         {"store_products.ecommerce_status" :"ACTIVE"},
                         {"store_products.irugs_status" : "ACTIVE"},
                         {"store_products.rmpro_status" : "ACTIVE"}
                         ]} ;




                 RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1 ,pageSize: 50 ,sortBy:{"store_name":1},
                 query:pStatus,
                                             fields:{account_no:1}},success,error);


        var count = 0 ;
        var items = [] ;
        function success(){

            count = parseInt(arguments[0].count,0) ;
            items = arguments[0].items ;

            console.log(arguments);

            assignAccountNo() ;
        }


        function error(){

            console.log(arguments);
        }


        var index = 0 ;
        var masterStore = Ext.getStore('retailersMaster');

        function assignAccountNo(){

            if(items[index].account_no ){
                err();
                return ;
            }

            if(index < items.length)
            {
                var  accNo = 1001 + count + index ;

                var dataToUpdate = {
                    "account_no":accNo
                };

                 RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,items[index]._id , suc, err);
            }


        }

         function suc(){

             index++ ;
             assignAccountNo() ;
        }


         function err(){
               index++ ;
             assignAccountNo() ;
         }
    }

});