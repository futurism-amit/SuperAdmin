/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.Main', {
    extend: 'Ext.app.Controller',
    alias: 'controller.Main',

    requires: [
        'Ext.MessageBox'
    ],

    config: {
        refs: {
            cardRef: {
                selector: 'container',
                xtype: 'Ext.Container'
            }
        },

        control: {
            "cardRef": {
                actiontapped: 'onPanelActiontapped1'
            },
            "searchfield[itemId=RMSearchField]": {
                keyup: 'onSearchfieldKeyup',
                clearicontap: 'onSearchfieldClearicontap'
            },
            "component[action=setScrollBarVisible]": {
                initialize: 'onViewInitializeForScrollBarVisible'
            },
            "button[itemId=filterBtn]": {
                tap: 'onFilterButtonTap'
            },
            "dataview[actionSorting=sortingStore]": {
                itemtap: 'onListHeaderSortingItemTap'
            },
            "image[action=imageSelector]": {
                tap: 'onImageSelectorImageTap'
            },
            "image[action=profileImage]": {
                hide: 'onProfileImageHide'
            },
            "filefield[action=changeImageFile]": {
                hide: 'onImageAddFilefieldHide'
            },
            "component[cls=x-select-overlay]": {
                initialize: 'onSelectFldPanelInitialize'
            },
            "textfield[action=inputByDatePicker]": {
                initialize: 'onTextfieldinputByDatePickerInitialize'
            },
            "label[labelAction=dropDown]": {
                initialize: 'onDropDownLabelInitialize'
            },
            "textfield[action=valueGtZero]": {
                keyup: 'onTextfieldvalueGtZeroKeyup'
            }
        }
    },

    onPanelActiontapped1: function(container) {
        //console.log("in controller action tapped: "); vendorCardHeader billingCardHeader inHouseCardHeader
        //console.log(container.getItemId());
        if(container.getItemId() === "retailerCardHeader") {

            var tabpanel = container.parent.down('tabpanel');
            var activeTab = tabpanel.getActiveItem();
            var tabs = tabpanel.getInnerItems();

            var folderNames = [];
            for(var i=0;i<tabs.length-2;i++) {

                var status = false;
                if(activeTab === tabs[i])
                    status = true;
                folderNames.push({
                    checkStatus: status,
                    folderName:tabs[i].title,
                    storeName:tabs[i].down('list').getStore().getStoreId()
                });
            }
            Ext.ComponentQuery.query("#actionDDCheckList")[0].setData(folderNames);


            var currentStore = activeTab.down('list').getStore();
            //console.log(currentStore.getStoreId());

        }
        else {
            Ext.Msg.alert('Alert', 'Development in Progress.', Ext.emptyFn);
        }
    },

    onSearchfieldKeyup: function(textfield, e, eOpts) {
        var listToSearch = null;
        var store = null;

        listToSearch = textfield.parent.parent.parent.down("list");
        if(!listToSearch)
            return;
        store = listToSearch.getStore();
        if(!store)
            return;
        store.clearFilter();

        var value = textfield.getValue();
        var keysToSearch = store.getModel().getFields().keys;

        if (!value) {
            store.filterBy(function() {
                return true;
            });
        }
        else {
            var searches = value.split(' '),
                regexps = [],
                i;

            for (i = 0; i < searches.length; i++) {
                if (searches[i]) {
                   regexps.push(new RegExp(searches[i], 'i'));
                }
            }

            store.filterBy(function(record) {
                var matched = [];
                for (i = 0; i < regexps.length; i++) {
                    var search = regexps[i];
                    var recordAllowed = false;
                    for(var j=0 ; j<keysToSearch.length ; j++) {
                        if(record.get(keysToSearch[j]) === null || record.get(keysToSearch[j]) === undefined )
                            continue;
                        if(record.get(keysToSearch[j]).toString().match(search) &&
                           keysToSearch[j]!=="id" && !recordAllowed)
                            recordAllowed = true;
                    }
                    matched.push(recordAllowed);
                }

                if (regexps.length > 1 && matched.indexOf(false) != -1) {
                    return false;
                } else {
                    return matched[0];
                }
            });
        }
    },

    onSearchfieldClearicontap: function(textfield, e, eOpts) {
        var listToSearch = textfield.parent.parent.parent.down("list");
        if(!listToSearch)
            return;

        var store = listToSearch.getStore();
        if(!store)
            return;

        store.clearFilter();
    },

    onViewInitializeForScrollBarVisible: function(component, eOpts) {

                var setupPCScrollbar = function(container) {
                                var isMobile = (navigator.appVersion.toLowerCase().indexOf("mobile") > -1 || navigator.appVersion.toLowerCase().indexOf("ipad") > -1);
                                if (!isMobile) {
                                    if (container.isXType('selectfield'))
                                        container = container.down('list');// Add support for selectbuttons
                                    if (!Ext.isFunction(container.getScrollable) || !container.getScrollable() || !Ext.isFunction(container.getScrollable().getScroller))
                                        return console.warn("Attempting to apply pc scroller to non-container item");
                                    container.getScrollable().getScroller().setDisabled(true);
                                    container.getScrollable(false);
                                    var scrollContainers = Ext.DomQuery.select('.x-scroll-container', container.element.dom);
                                    var scrollBars = Ext.DomQuery.select('.x-scroll-indicator', container.element.dom);
                                    for (var i = 0; i < scrollContainers.length; i++) {
                                        scrollContainers[i].style.overflow = "auto";
                                    }
                                    for (var i = 0; i < scrollBars.length; i++) {
                                        scrollBars[i].offsetHeight = scrollContainers[0].offsetHeight;
                                        scrollBars[i].clientHeight = scrollContainers[0].clientHeight;
                                        scrollBars[i].style.zIndex = "-1";
                                    }
                                }
                            };

                setupPCScrollbar(component) ;

        /*


                component.getScrollable().getIndicators().y.show() ;

                component.getScrollable().setIndicatorsHidingDelay(0);

                component.getScrollable().getScroller().addListener('scrollend', function(that){
                                                                                                if(that.maxPosition.y != that.minPosition.y ){

                                                                                                        component.getScrollable().getIndicators().y.show() ;
                                                                                                    }
                                                                                               });

                component.getScrollable().getScroller().addListener('refresh', function(that,eopt){
                                                                                                   if(that.maxPosition.y == that.minPosition.y ){
                                                                                                       component.getScrollable().getIndicators().y.hide() ;

                                                                                                   }
                                                                                                   else{

                                                                                                       component.getScrollable().getIndicators().y.show() ;
                                                                                                   }

                                                                                                  } );

                                                                                                  */

    },

    onFilterButtonTap: function(button, e, eOpts) {
        if(Ext.getCmp("filterDropDown"))
            Ext.getCmp("filterDropDown").destroy();

        var popup = Ext.widget('filterDropDown');

        var filterDDList = Ext.ComponentQuery.query("#filterDDList")[0];


        switch(button.parent.getItemId()) {

            case 'retailerSeachViewItemID':

                filterDDList.setHeight(220);
                setCommonTpl();

                break;

            case 'billingSeachViewItemID':

                filterDDList.setHeight(330);
                setTPLForBilling();

                break;
            case 'RDNotesSearchViewItemID':

                filterDDList.setHeight(150);
                popup.down('#filterDDList').setItemTpl(
                    '<div class="x-rm-filter-tplmain">No Content</div>'
                );
                popup.down('#filterApplyBtn').setDisabled(true);

                break;

            case 'vendorSeachViewItemID':
            case 'inHouseSeachViewItemID':

                filterDDList.setHeight(80);
                setTplVendor();

                break;
        }


        popup.showBy(button);


        function setCommonTpl(){

            filterDDList.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-filter-tplmain">',
                           '    <div>',
                           '        <p>Product Subscriptions:</p>',
                           '        <div class="x-rm-filter-container">',
                           '            <div class="x-rm-filter-check">',
                           '                <input type="checkbox" name="filter-checkbox" data-name="store_products_datalink"/>',
                           '                <label>Datalink</label>',
                           '            </div>',
                           '            <div class="x-rm-filter-check">',
                           '                <input type="checkbox" name="filter-checkbox" data-name="store_products_smart_cart"/>',
                           '                <label>Cart</label>',
                           '            </div>',
                           '            <div class="x-rm-filter-check">',
                           '                <input type="checkbox" name="filter-checkbox" data-name="store_products_ecatalog"/>',
                           '                <label>eCatalog</label>',
                           '            </div>',
                           '            <div class="x-rm-filter-check">',
                           '                <input type="checkbox" name="filter-checkbox" data-name="store_products_rm_plc"/>',
                           '                <label>RMPro</label>',
                           '            </div>',
                           '        </div>',
                           '    </div>',
                           '    <div>',
                           '        <p>Monthly Subscription Range:</p>',
                           '        <div class="x-rm-filter-container">',
                           '            <div class="x-rm-filter-check">',
                           '                <span>From</span>',
                           '                <input type="text" maxlength="6" pattern="[0-9]*" placeholder="$" data-name="monthly_range" data-subname="from" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';"/>',
                           '            </div>',
                           '            <div class="x-rm-filter-check">',
                           '                <span>To</span>',
                           '                <input type="text" maxlength="6" pattern="[0-9]*" placeholder="$" data-name="monthly_range" data-subname="to" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';"/>',
                           '            </div>',
                           '        </div>',
                           '    </div>',
                           '    <div>',
                           '        <div class="x-rm-filter-container">',
                           '            <div class="x-rm-filter-days">',
                           '                <span>Modified in Past</span>',
                           '                <input style = "margin-left: 6px;" maxlength="3" type="text" pattern="[0-9]*" data-name="modified_in_past" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';" />',
                           '                <span>Days</span>',
                           '            </div>',
                           '            <div class="x-rm-filter-days">',
                           '                <span>Created in Past</span>',
                           '                <input style = "margin-left: 12px;" maxlength="3" type="text" pattern="[0-9]*" data-name="created_in_past" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';" />',
                           '                <span>Days</span>',
                           '            </div>',
                           '        </div>',
                           '    </div>',
                           '</div>'
                          )
            );
            filterDDList.refresh();
        }

        //***********  set Tpl Billing  ************

        function setTPLForBilling(){

            filterDDList.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-filter-tplmain">',
                           '    <div style = "height: 25% !important;" >',
                           '        <p>Product Subscriptions:</p>',
                           '        <div class="x-rm-filter-container">',
                           '            <div class="x-rm-filter-check">',
                           '                <input type="checkbox" name="filter-checkbox" data-name="store_products_datalink"/>',
                           '                <label>Datalink</label>',
                           '            </div>',
                           '            <div class="x-rm-filter-check">',
                           '                <input type="checkbox" name="filter-checkbox" data-name="store_products_smart_cart"/>',
                           '                <label>Cart</label>',
                           '            </div>',
                           '            <div class="x-rm-filter-check">',
                           '                <input type="checkbox" name="filter-checkbox" data-name="store_products_ecatalog"/>',
                           '                <label>eCatalog</label>',
                           '            </div>',
                           '            <div class="x-rm-filter-check">',
                           '                <input type="checkbox" name="filter-checkbox" data-name="store_products_rm_plc"/>',
                           '                <label>RMPro</label>',
                           '            </div>',
                           '        </div>',
                           '    </div>',
                           '    <div style = "height: 37% !important;">',
                           '        <div class="x-rm-filter-container">',
                           '            <div style = "margin-bottom: 3px;">Monthly Subscription Range:</div>',
                           '            ',
                           '            <div style = "margin-bottom: 6px;" class="x-rm-filter-check">',
                           '                <span>From</span>',
                           '                <input type="text" maxlength="6" pattern="[0-9]*" placeholder="$" data-name="monthly_range" data-subname="from" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';"/>',
                           '            </div>',
                           '            <div style = "margin-bottom: 6px;" class="x-rm-filter-check">',
                           '                <span>To</span>',
                           '                <input type="text" pattern="[0-9]*" maxlength="6" placeholder="$" data-name="monthly_range" data-subname="to" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';"/>',
                           '            </div>',
                           '            ',
                           '            <div>Payment Owed Range:</div>',
                           '            ',
                           '            <div style = "margin-top: 3px;" class="x-rm-filter-check">',
                           '                <span>From</span>',
                           '                <input  type="text" pattern="[0-9]*" maxlength="6" placeholder="$" data-name="owed_range" data-subname="from" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';"/>',
                           '            </div>',
                           '            <div style = "margin-top: 3px;" class="x-rm-filter-check">',
                           '                <span>To</span>',
                           '                <input type="text" pattern="[0-9]*" maxlength="6" placeholder="$" data-name="owed_range" data-subname="to" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';"/>',
                           '            </div>',
                           '            ',
                           '        </div>',
                           '    </div>',
                           '    <div>',
                           '        <div class="x-rm-filter-container">',
                           '            <div style = "margin-top: 10px;" class="x-rm-filter-days">',
                           '                <span>Modified in Past</span>',
                           '                <input style = "margin-left: 6px;" maxlength="3" type="text" pattern="[0-9]*" data-name="modified_in_past" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';" />',
                           '                <span>Days</span>',
                           '            </div>',
                           '            <div class="x-rm-filter-days">',
                           '                <span>Created in Past</span>',
                           '                <input  style = "margin-left: 12px;" maxlength="3" type="text" pattern="[0-9]*" data-name="created_in_past" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';" />',
                           '                <span>Days</span>',
                           '            </div>',
                           '            <div class="x-rm-filter-days">',
                           '                <span>Past due for</span>',
                           '                <input style = "margin-left: 27px;" maxlength="3" type="text" pattern="[0-9]*" data-name="past_due_for" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';" />',
                           '                <span>Days</span>',
                           '            </div>',
                           '            <div class="x-rm-filter-days">',
                           '                <span>Due in</span>',
                           '                <input style = "margin-left: 56px;" maxlength="3" type="text" pattern="[0-9]*" data-name="due_in" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';" />',
                           '                <span>Days</span>',
                           '            </div>',
                           '        </div>',
                           '    </div>',
                           '</div>'
                          )
            );
            filterDDList.refresh();
        }



        //***********  set Tpl Vendor  ************

        function setTplVendor(){

            filterDDList.setItemTpl(
                Ext.create('Ext.XTemplate',
                           '<div class="x-rm-filter-tplmain">',
                           '    <div style= "border: none;">',
                           '        <div class="x-rm-filter-container">',
                           '            <div class="x-rm-filter-days">',
                           '                <span>Modified in Past</span>',
                           '                <input style = "margin-left: 6px;" maxlength="3" type="text" pattern="[0-9]*" data-name="modified_in_past" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';" />',
                           '                <span>Days</span>',
                           '            </div>',
                           '            <div class="x-rm-filter-days">',
                           '                <span>Created in Past</span>',
                           '                <input style = "margin-left: 12px;" maxlength="3" type="text" pattern="[0-9]*" data-name="created_in_past" onkeyup="if(!(/^[0-9]+$/.test(this.value))) this.value=\'\';" />',
                           '                <span>Days</span>',
                           '            </div>',
                           '        </div>',
                           '    </div>',
                           '</div>'
                          )
            );
            filterDDList.refresh();
        }


    },

    onListHeaderSortingItemTap: function(dataview, index, target, record, e, eOpts) {

        var targetEl = e.target;
        var listId = null;

        switch(dataview._itemId) {

            case 'billingListHeader':

                listId = '#billingList';
                break;

            case 'pricingListHeader':

                listId = '#pricingList';
                break;

            case 'inhouseListHeader':

                listId = '#inhouseList';
                break;

            case 'discountListHeader':

                listId = '#discountList';
                break;

            case 'retailerListHeader':

                listId = '#retailerList';
                break;

            case 'headerList':

                listId = '#mainList';
                break;

            case 'vendorListHeader':

                listId = '#vendorList';
                break;

            default:

                return;

        }


        if(targetEl.hasAttribute('data-name') || targetEl.parentNode.hasAttribute('data-name')) {
            var listToRefresh = dataview.parent.down(listId);
            var storeToSort = listToRefresh.getStore();

            //  *******  IF  LIST  IS  EMPTY  *****
            if(!storeToSort)
            {
                return;
            }
            console.log("STORE TO SORT FOUND");


            if(targetEl.hasAttribute('data-name')) {
                var childImage = targetEl.querySelectorAll('img')[0];
                if(childImage) {
                    if(childImage.getAttribute('src').indexOf('downArrow') !== -1) {

                        childImage.setAttribute('src','resources/images/button_icons/upArrow.png');
                        console.log(targetEl.getAttribute('data-name'));
                        storeToSort.sort(targetEl.getAttribute('data-name'),'ASC');
                    }
                    else {
                        childImage.setAttribute('src','resources/images/button_icons/downArrow.png');
                        console.log(targetEl.getAttribute('data-name'));
                        storeToSort.sort(targetEl.getAttribute('data-name'),'DESC');
                    }
                }
            }
            else {
                if(targetEl.getAttribute('src').indexOf('downArrow') !== -1) {
                    targetEl.setAttribute('src','resources/images/button_icons/upArrow.png');
                    console.log(  targetEl.parentNode.getAttribute('data-name') );
                    storeToSort.sort(targetEl.parentNode.getAttribute('data-name'),'ASC');
                }
                else {
                    targetEl.setAttribute('src','resources/images/button_icons/downArrow.png');
                    console.log( targetEl.parentNode.getAttribute('data-name')  );
                    storeToSort.sort(targetEl.parentNode.getAttribute('data-name'),'DESC');
                }
            }
            listToRefresh.refresh();
        }

    },

    onImageSelectorImageTap: function(image, e, eOpts) {
        return ;
        var fileFieldItemId = image.getItemId().substring(0,(image.getItemId().length - 5 ));

        var fileField = Ext.ComponentQuery.query('#'+fileFieldItemId)[0] ;






        // fileInput = fileField.down('fileinput') ;
        // console.log(fileInput);
        // var evt = document.createEvent('Event');
        // evt.initEvent('click', true, true);
        // fileInput.dispatchEvent(evt);
    },

    onProfileImageHide: function(component, eOpts) {
        component.setHidden(false);
        component.setDisabled(false);

        // var fileFieldItemId = component.getItemId().substring(0,(component.getItemId().length - 5 ));

        // var fileField = Ext.ComponentQuery.query('#'+fileFieldItemId)[0] ;


        // fileField.removeCls('x-rm-rdNophoto');
        // fileField.setCls('x-rm-rdaddphoto');
        //component.setSrc('resources/images/retailerDetail/add_photo.png');

        this.changeFileInputTitle();
    },

    onImageAddFilefieldHide: function(component, eOpts) {
        component.setHidden(false);
        component.setDisabled(false);

        // component.removeCls('x-rm-rdaddphoto');
        // component.setCls('x-rm-rdNophoto');

        //component.getParent.down('image').setSrc('resources/images/logos/default_User.jpg');

        this.changeFileInputTitle();
    },

    onSelectFldPanelInitialize: function(component, eOpts) {
        component = component.down('list');
                var setupPCScrollbar = function(container) {
                                var isMobile = (navigator.appVersion.toLowerCase().indexOf("mobile") > -1 || navigator.appVersion.toLowerCase().indexOf("ipad") > -1);
                                if (!isMobile) {
                                    if (container.isXType('selectfield'))
                                        container = container.down('list');// Add support for selectbuttons
                                    if (!Ext.isFunction(container.getScrollable) || !container.getScrollable() || !Ext.isFunction(container.getScrollable().getScroller))
                                        return console.warn("Attempting to apply pc scroller to non-container item");
                                    container.getScrollable().getScroller().setDisabled(true);
                                    container.getScrollable(false);
                                    var scrollContainers = Ext.DomQuery.select('.x-scroll-container', container.element.dom);
                                    var scrollBars = Ext.DomQuery.select('.x-scroll-indicator', container.element.dom);
                                    for (var i = 0; i < scrollContainers.length; i++) {
                                        scrollContainers[i].style.overflow = "auto";
                                    }
                                    for (var i = 0; i < scrollBars.length; i++) {
                                        scrollBars[i].offsetHeight = scrollContainers[0].offsetHeight;
                                        scrollBars[i].clientHeight = scrollContainers[0].clientHeight;
                                        scrollBars[i].style.zIndex = "-1";
                                    }
                                }
                            };

                setupPCScrollbar(component) ;

        component.setItemHeight(24);
    },

    onTextfieldinputByDatePickerInitialize: function(component, eOpts) {
        component.element.on("tap",function(){

            if(component.getDisabled()){
                return ;
            }

                function fn(newDate){


                    component.setValue(Ext.Date.format(newDate, "m/d/Y"));
                    RMdatalink.util.Calendar.hideCalendar();
                   //  component.setDisabled(false);

                }

                RMdatalink.util.Calendar.showCalendar(fn,component);

               // component.setDisabled(true);

                if(calendarPanelPicker)
                {
                    calendarPanelPicker.setZIndex(52);
                }

        });
    },

    onDropDownLabelInitialize: function(component, eOpts) {
        component.element.on('tap',function(){

            if(component.getParent().getHeight() == 26){
                 component.getParent().setHeight("auto");
                 component.getParent().getEl().query('img')[0].src = "resources/images/labelHeader/downArrow.png";
            }else{
                  component.getParent().setHeight(26);
                 component.getParent().getEl().query('img')[0].src = "resources/images/labelHeader/rightArrow.png";
            }


            if(component.getParent().getParent().getItemId() == 'productDatalinkaddUpdateFrmPanel'){
                RMdatalink.app.getController('DatalinkController').refreshDatalinkSideCntHeight() ;

            }

            if(component.getParent().getParent().getItemId() == 'productRMPROaddUpdateFrmPanel'){

                RMdatalink.app.getController('RMProController').refreshRmproSideBarHeight() ;
            }


        }) ;
    },

    onTextfieldvalueGtZeroKeyup: function(textfield, e, eOpts) {
        var newVal = textfield.getValue() ;

        if(newVal){

            if(isNaN(newVal) || parseFloat(newVal) <= 0){

                textfield.setValue("");

                return;
             }

        }
    },

    saveComment: function(field) {
        var store = Ext.getStore('RDCRM');
        if(field.hasAttribute('data-id')) {
            var record = store.findRecord('id',field.getAttribute('data-id'));
            record.set('comments',field.value);
        }
        store.sync();
    },

    saveTips: function(field, listName) {
        var doDontsStore;
        var doDontsRecord;

        switch(listName)
        {
            case 'doDonts':
                  console.log(" doDonts ");
                doDontsStore = Ext.getStore('notificationsTipsDoDonts');
                doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));
                doDontsRecord.set('notification',field.value);
                doDontsStore.sync();
                break;

            case 'managerDoDonts':
                console.log(" managerDoDonts ");
                doDontsStore = Ext.getStore('notifications.managerTipsdodonts');
                doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));
                doDontsRecord.set('notification',field.value);
                doDontsStore.sync();
                break;

            case 'repsDoDonts':
                console.log(" repsDoDonts ");
                doDontsStore = Ext.getStore('notifications.repsTipsdodonts');
                doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));
                doDontsRecord.set('notification',field.value);
                doDontsStore.sync();
                break;


            case 'followUps':
                followUpStore = Ext.getStore('notificationsTipsFollowsup');
                followUpRecord = followUpStore.findRecord('id',field.getAttribute('data-id'));
                followUpRecord.set('notification',field.value);
                followUpStore.sync();
                break;

            case 'managerFollowUps':
                doDontsStore = Ext.getStore('notifications.managerTipsfollowsup');
                doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));
                doDontsRecord.set('notification',field.value);
                doDontsStore.sync();
                break;

            case 'repsFollowUps':
                doDontsStore = Ext.getStore('notifications.repsTipsfollowsup');
                doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));
                doDontsRecord.set('notification',field.value);
                doDontsStore.sync();
                break;

               case 'actmanagerDoDonts':
                console.log(" managerDoDonts ");
                doDontsStore = Ext.ComponentQuery.query('#ActRDManagerDosDontList')[0].getStore();
                doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));
                doDontsRecord.set('notification',field.value);
                doDontsStore.sync();
                break;

                    case 'actmanagerFollowUps':
                doDontsStore = Ext.ComponentQuery.query('#ActRDManagerFollowUpsLists')[0].getStore();
                doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));
                doDontsRecord.set('notification',field.value);
                doDontsStore.sync();
                break;

        }

    },

    saveTipsForTUser: function(field, listName) {

        if(listName === 'doDonts') {

            var doDontsStore = Ext.getStore('notificationsTipsDoDonts');
            var doDontsRecord = doDontsStore.findRecord('id',field.getAttribute('data-id'));
            doDontsRecord.set('notification',field.value);
            doDontsStore.sync();
            //console.log("do donts saved");
        }
        else {

            var followUpStore = Ext.getStore('notificationsTipsFollowsup');
            var followUpRecord = followUpStore.findRecord('id',field.getAttribute('data-id'));
            followUpRecord.set('notification',field.value);
            followUpStore.sync();
            //console.log("followup saved");
        }
    },

    changeFileInputTitle: function() {
        var fileFields = Ext.DomQuery.select("input[type=file]") ;

        if(fileFields.length){
            for(var i=0; i < fileFields.length; i++){

                fileFields[i].title = "Change Photo";
            }

        }

    },

    onDeleteButtonTap: function(component) {
        var allVendorListContainer  = component.down("#allVendorListContainer");
        var vendorList = allVendorListContainer.down("#vendorList");
        var store = vendorList.getStore();
        var selectedRecords = vendorList.getSelection();

        if(Ext.isEmpty(selectedRecords)) {
            Ext.Msg.alert('Warning', 'Please select a record to delete', Ext.emptyFn);
            return;
        }
        else
        {
            store.remove(selectedRecords);
            store.sync();
            vendorList.refresh();
        }

        console.log(selectedRecords);
    },

    initialiseApp: function() {


        function loadStore(){
            var index = RMdatalink.app.getController('PaginationController').getCurrentActiveStoreId();
            var flag = RMdatalink.app.getController('PaginationController').config.storesLoadedFirstTime[index];
            if(! flag ){
                RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),false);
            }
        }

                  RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('PermisstionsStore') ;
                  loadStore();


                  RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('notificationsNew') ;
                  loadStore();


                  RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('vendors.Master') ;
                  loadStore();

                  RMdatalink.app.getController('PaginationController').config.storesLoadedFirstTime['vendors.Master'] = true ;


             //     RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('vendorDetailsRecodsStore') ;
             //     loadStore();

                  RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('products.DatalinkMain') ;
                  loadStore();





                  RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('billingMasterStore') ;
                  loadStore();

                   RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('TechSupportLogsStore') ;
                  loadStore();

                     RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('products.ecomMain') ;
                   loadStore();


                RMdatalink.app.getController('RMProController').initRMproStore() ;


                    Ext.getStore('inhouseMasterStore').setData([{
                        users:{},
                        reps:{}
                    }]);
                    Ext.getStore('inhouseMasterStore').sync();

                    Ext.getStore('discountsMasterStore').setData([{
                        datalink:{},
                        ecatalog:{},
                        smartcart:{},
                        rmplc:{},
                        irugz:{},
                        previousDiscounts:{}
                    }]);
                    Ext.getStore('discountsMasterStore').sync();


                    controllers= {

                            RetailerDeatilsDataSet:RMdatalink.app.getController('RetailerDeatilsDataSet')
                    };


                  RMdatalink.app.getController('PaginationController').initialiseRetailers() ;
                  this.handleLastSavedExpansionState();
    },

    handleLastSavedExpansionState: function(isSkipCustomFilter) {
        return;
        function Toexecute(){

            if(!isSkipCustomFilter)
            {

                var LoginHandler = RMdatalink.app.getController('LoginHandler') ;
                var _id = LoginHandler.config.userDetails._id ;
                var inhouseMasterStore = Ext.getStore('inhouseMasterStore');

                var orignialSate = LoginHandler.config.userDetails.expand_button_state;

                if(orignialSate == 0){

                    var hideExpandButton = Ext.ComponentQuery.query("#hideExpandButton");

                    for(var i=0;i<hideExpandButton.length; i++ ){
                        alert("orignialSate = " + orignialSate);
                        var btn = hideExpandButton[i];
                        var handler = bt.getHandler();
                        handler.call(btn , btn );
                    }

                }else{

                    return;
                }


            }


        }

    },

    updateRetailerRecords: function(dataKey, dataToUpdate, _id) {
        /*


        find rt using _id

        if dataKey == "ALL"

        update full rt record

        else

        update specific data key

        repeat above for all rt sores

        retailersMaster
        billingMasterStore
        retailerUsers
        retailerPending
        retailerHotProspects
        retailerProspects
        retailerInactive


        RMdatalink.app.getController('Main').updateRetailerRecords(dataKey,dataToUpdate,_id) ;


        */

        var retailersMaster = Ext.getStore('retailersMaster') ;

        var billingMasterStore = Ext.getStore('billingMasterStore') ;

        var retailerUsers = Ext.getStore('retailerUsers') ;

        var retailerPending = Ext.getStore('retailerPending') ;

        var retailerHotProspects = Ext.getStore('retailerHotProspects') ;

        var retailerProspects = Ext.getStore('retailerProspects') ;

        var retailerInactive = Ext.getStore('retailerInactive') ;



        var rtStores = [];

        rtStores.push(retailersMaster);

        rtStores.push(billingMasterStore);

        rtStores.push(retailerUsers);

        rtStores.push(retailerPending);

        rtStores.push(retailerHotProspects);

        rtStores.push(retailerProspects);

        rtStores.push(retailerInactive);


        for(var i= 0; i < rtStores.length ; i++ ){

            var recIndex = rtStores[i].findExact('_id',_id) ;

            if(recIndex == -1){
                break ;
            }

            var rtRecord = rtStores[i].getAt(recIndex);

            if(dataKey == "ALL" ){

                rtRecord.set(dataToUpdate);

            }else{

                rtRecord.set(dataKey,dataToUpdate);
            }
             rtRecord.dirty= true;
        }


         var varibleToSet = RMdatalink.util.globalConfig.getDataToShowInSettingWindow() ;
        if(dataKey == "ALL" ){

                varibleToSet.record.set(dataToUpdate);

            }else{

                varibleToSet.record.set(dataKey,dataToUpdate);
            }
           varibleToSet.record.dirty= true;
        varibleToSet.record.data[dataKey] = dataToUpdate ;
         RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);
    }

});