/*
 * File: app/controller/PaginationController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.PaginationController', {
    extend: 'Ext.app.Controller',

    config: {
        currentActiveStoreId: 'retailersMaster',
        scopeRequiredToLoadStores: {
            
        },
        storesLoadedFirstTime: {
            retailersMaster: false,
            inhouseMasterStore: false,
            discountsMasterStore: false,
            vendorDetailsRecodsStore: false,
            productDetailsRecordsStore: false,
            billingMasterStore: false,
            notificationsNew: false
        },
        next_backBtn: 0,

        control: {
            "button[itemId=backPageBtn]": {
                tap: 'onBackPageButtonTap'
            },
            "button[itemId=nextPageBtn]": {
                tap: 'onNextPageButtonTap'
            }
        }
    },

    onBackPageButtonTap: function(button, e, eOpts) {
        this.config.next_backBtn = -1 ;

        if(Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem().getItemId() == 'card-retailers')
        {
            this.loadStore(1,RMdatalink.util.DataLoader.getPageSize(),RMdatalink.util.DataLoader.getEnableCachig());
        }
        else{
            var storeId = this.getCurrentActiveStoreId();

            var store = Ext.getStore(storeId);

            var currentPageNo = store.getPageNo();
            var totalNoOfPages = 100; store.getTotalNoOfPages();

            if(currentPageNo > 1)
            {
            /* Here request Data loader to load next page */
            currentPageNo = currentPageNo - 1 ;

              this.loadStore(currentPageNo,RMdatalink.util.DataLoader.getPageSize(),RMdatalink.util.DataLoader.getEnableCachig());
            }

            store.setPageNo(currentPageNo);
        }
    },

    onNextPageButtonTap: function(button, e, eOpts) {
        this.config.next_backBtn =  1 ;

        if(Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem().getItemId() == 'card-retailers')
        {
            this.loadStore(1,RMdatalink.util.DataLoader.getPageSize(),RMdatalink.util.DataLoader.getEnableCachig());
        }
        else{
            var storeId = this.getCurrentActiveStoreId();

            var store = Ext.getStore(storeId);

            var currentPageNo = store.getPageNo();
            var totalNoOfPages = 100; store.getTotalNoOfPages();

            if(currentPageNo < totalNoOfPages)
            {
            /* Here request Data loader to load next page */
            currentPageNo = currentPageNo + 1 ;

              this.loadStore(currentPageNo,RMdatalink.util.DataLoader.getPageSize(),RMdatalink.util.DataLoader.getEnableCachig());
            }

            store.setPageNo(currentPageNo);

        }
    },

    loadStore: function(pageNo, pageSize, enableCaching) {

        var dataLoader = RMdatalink.util.DataLoader ;
        var scope = this.getScopeRequiredToLoadStores();
        var that = this ;
        var wasVendorMasterLoaded =false;
        var storeId = this.getCurrentActiveStoreId() ;
        switch(this.getCurrentActiveStoreId()){

            case 'retailersMaster':
                this.loadRetailersPaged({page_no:pageNo}) ;

                //dataLoader.loadRetailerMasterStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);

                break;

            case 'inhouseMasterStore':

                   Ext.ComponentQuery.query('#inhouseMainContentPanel')[0].setMasked( {
                        xtype: 'loadmask'
                    });

                dataLoader.loadInhouseMasterStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);

                break;

            case 'discountsMasterStore':
            dataLoader.loadDiscountMasterStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);

                break;

            case 'vendorDetailsRecodsStore':


                 dataLoader.loadVendorDetailStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);

                break;

            case 'productDetailsRecordsStore':

                if(Ext.ComponentQuery.query('#pricingMainContentsPanel')[0])
                {
                    Ext.ComponentQuery.query('#pricingMainContentsPanel')[0].setMasked( {
                            xtype: 'loadmask'
                        });
                }
                 dataLoader.loadProductDetailStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);

                break ;

            case 'billingMasterStore':
                RMdatalink.app.getController('SearchController').searchRtForBilling("","", pageNo ) ;


                //dataLoader.loadBillingMasterStore(scope, pageNo, pageSize,enableCaching,successCallBack,failuerCallBack );

                break;

            case 'notificationsNew':


                 dataLoader.loadNotificationStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);

                break;

            case 'vendors.Master':

                dataLoader.loadVendorMasterStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);
                wasVendorMasterLoaded = true;
                break;
            case 'TechSupportLogsStore':

                RMdatalink.app.getController('SearchController').doLoadTechSupport( pageNo, pageSize ,true, successCallBack,failuerCallBack );

                //dataLoader.loadTechLogStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);
                break;
            case 'PermisstionsStore':
                dataLoader.loadPermissionsStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);
                break;

            case 'products.RMProStore':

                if( Ext.ComponentQuery.query('#productRMproMainPanel')[0])
                {
                    Ext.ComponentQuery.query('#productRMproMainPanel')[0].setMasked( {
                        xtype: 'loadmask'
                    });
                }
                dataLoader.loadProductRMProStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);

                break;

            case 'products.DatalinkMain':
                if(Ext.ComponentQuery.query('#productDatalinkMainPanel')[0])
                {
                    Ext.ComponentQuery.query('#productDatalinkMainPanel')[0].setMasked( {
                        xtype: 'loadmask'
                    });
                }

                dataLoader.loadProductDatalinkStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);

                break;


            case 'products.ecomMain':
                if(Ext.ComponentQuery.query('#productecomMainPanel')[0])
                {
                    Ext.ComponentQuery.query('#productecomMainPanel')[0].setMasked( {
                        xtype: 'loadmask'
                    });
                }

                dataLoader.loadProductecomStore(scope, pageNo, pageSize,enableCaching ,successCallBack,failuerCallBack);

                break;

        }



        function successCallBack(){
             that.loadDependentStoresonMaster(storeId);

             that.config.storesLoadedFirstTime[storeId] = true ;




            if(wasVendorMasterLoaded){



            }









        }

        function failuerCallBack(){

        }





















    },

    loadDependentStoresonMaster: function(storeId) {

        switch(storeId){

            case 'retailersMaster':
               // RMdatalink.util.globalMethods.fillDataFromMasterStore.call(this, arguments);

                break;

            case 'products.RMProStore':

                //Ext.ComponentQuery.query('#productRMproMainPanel')[0].setMasked(false);
                if(RMdatalink.app.getController('RMProController').config.isPricingPolicyUpdated){
                        if(Ext.ComponentQuery.query('#productRMproMainPanel')[0])
                      {
                        RMdatalink.app.getController('RMProController').config.isPricingPolicyUpdated = false ;
                        RMdatalink.app.getController('BillingDetailsController').loadRM_PROData() ;
                        RMdatalink.app.getController('BillingDetailsController').updateRMProPricing() ;

                          Ext.ComponentQuery.query('#productRMproMainPanel')[0].setMasked(false);
                      }

                }else{
                        RMdatalink.app.getController('RMProController').loadPricingStore();

                        if(RMdatalink.app.getController('BillingDetailsController').config.isPricingDataloaded){
                            RMdatalink.app.getController('BillingDetailsController').initialseRMProPricingPolicy() ;
                        }
                }

                 RMdatalink.app.getController('RMProController').setRmProListHeight();

                break;
            case 'products.DatalinkMain':
               if( Ext.ComponentQuery.query('#productDatalinkMainPanel')[0])
               {
                    Ext.ComponentQuery.query('#productDatalinkMainPanel')[0].setMasked(false);

                    RMdatalink.app.getController('DatalinkController').setDlDataPrice() ;
                    RMdatalink.app.getController('DatalinkController').selectAllModules() ;

                    RMdatalink.app.getController('DatalinkController').setDatalinkListHeight() ;
               }


                break;

           case 'products.ecomMain':
               if( Ext.ComponentQuery.query('#productecomMainPanel')[0])
               {
                    Ext.ComponentQuery.query('#productecomMainPanel')[0].setMasked(false);

        //             RMdatalink.app.getController('DatalinkController').setDlDataPrice() ;
        //             RMdatalink.app.getController('DatalinkController').selectAllModules() ;

        //             RMdatalink.app.getController('DatalinkController').setDatalinkListHeight() ;
               }


                break;

            case 'inhouseMasterStore':

                    RMdatalink.app.getController('RetailerDeatilsDataSet').setInhouseData();

                      Ext.ComponentQuery.query('#inhouseMainContentPanel')[0].setMasked(false);
                    RMdatalink.app.getController('LoginHandler').hideUserRightInfoForInhouse() ;
                break;

            case 'discountsMasterStore':
        //             var discountsMasterStore = Ext.getStore('discountsMasterStore');
        //         discountsMasterStore.sync();


                      RMdatalink.app.getController('RetailerDeatilsDataSet').setDataForDiscountsTab();

                break;

            case 'vendorDetailsRecodsStore':


                break;

            case 'productDetailsRecordsStore':

                RMdatalink.app.getController('BillingDetailsController').loadPricingStores();
                if(Ext.ComponentQuery.query('#productRMproMainPanel')[0])
                {
                    Ext.ComponentQuery.query('#productRMproMainPanel')[0].setMasked(false);
                }
                break ;

            case 'billingMasterStore':


                break;

            case 'notificationsNew':


                break;
            case 'vendors.Master':



                RMdatalink.app.getController('VendorStatsController').loadVendorStats() ;
                RMdatalink.app.getController('SearchDropDownController').loadDropDownStore();
                RMdatalink.app.getController('DashBoardController').loadVIPStoreInDashBoard();


                break;

            case 'PermisstionsStore':

                RMdatalink.app.getController('LoginHandler').onPermissionsLoaded() ;

                break;

            case "TechSupportLogsStore":
                 Ext.Viewport.setMasked(false) ;

                break ;






        }






        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(data[i].data);
            }

            return dataToReturn ;
         }





    },

    loadRetailerDependentStores: function() {

    },

    loadVendorMasterDependentStore: function() {

    },

    rollBackStoreVariable: function(storeId) {

        var store = Ext.getStore(storeId);

        var currentPageNo = store.getPageNo();


        if(currentPageNo > 1){
            if(RMdatalink.util.DataLoader.getEnableCachig()){

                delete(store.config.cachedData[currentPageNo]);
            }

            currentPageNo = currentPageNo -1 ;
            store.setPageNo(currentPageNo);


        }



    },

    loadRetailersPaged: function(params) {



        var searchText = "" ;
        var store_status = "" ;
        var page_no = 1;

        var that = this ;





        if(Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem().getItemId() == 'card-retailers')
        {

          var activeTab = Ext.ComponentQuery.query('#retailersTabPanel')[0].getActiveItem();
          var activeTabId = activeTab.getItemId();

          var activeStore = activeTab.down('#retailerList').getStore();
          activeStore.setPageNo( activeStore.getPageNo() + (that.config.next_backBtn));


            if( activeStore.getPageNo() < 1){
                return ;
            }
            params.page_no = activeStore.getPageNo() ;

            searchText = activeTab.down('#rtVdrsSearchFld').getValue() ;

            switch(activeTabId){

                case "usersTab":
                    store_status = "ACTIVE" ;
                    break;
                case "prospectsTab":
                    store_status = "PROSPECTS" ;
                    break;
                case "hotProspectsTab":
                    store_status = "HOT_PROSPECTS" ;
                    break;
                case "inactiveTab":
                    store_status = "INACTIVE" ;
                    break;
                case "pendingTab":
                    store_status = "PENDING" ;
                    break;
                case "allRetailerTab":
                    store_status = "" ;
                    break;
            }

        }










        if(params){

            if( params.searchText  )
            {
                    searchText = params.searchText ;
            }
            if( params.store_status )
            {
                    store_status = params.store_status ;
            }
            if( params.page_no )
            {
                    page_no = params.page_no ;
            }

        }



        RMdatalink.app.getController('SearchController').searchRetailerByStatus(searchText,store_status, page_no ) ;
    },

    initialiseRetailers: function(isSkipCustomFilter) {

        if(!isSkipCustomFilter)
        {
            RMdatalink.app.getController('SearchController').initFilter()  ;

            return ;
        }


        var retailersStore = Ext.getStore('retailersMaster') ;
        retailersStore.setData([{}]);
        retailersStore.sync() ;
        retailersStore.removeAll();
        retailersStore.sync() ;


        //RMdatalink.app.getController('SearchController').searchRetailerByStatus("","",1 ) ;
        //RMdatalink.app.getController('SearchController').doSearchForRetailers("");

        var index =0 ;

        var totalRetailersFound = 0 ;


          var store_status = "ACTIVE";

            searchRetailerByStatus() ;







        function searchRetailerByStatus(){




            if(index < 5)
            {

                var searchText= "";
                var page_no = 1;

                switch(index){
                    case 0:
                    store_status = "ACTIVE" ;
                    break;
                    case 1:
                    store_status = "INACTIVE" ;
                    break;
                    case 2:
                     store_status = "HOT_PROSPECTS" ;
                    break;
                    case 3:
                     store_status = "PROSPECTS" ;
                    break;
                    case 4:
                     store_status = "PENDING" ;
                    break;
            }

           var tStatus = store_status ;
                 if(store_status=="PROSPECTS")
                 {
                     tStatus = "PROSPECT" ;
                 }else if(store_status == "HOT_PROSPECTS"){
                       tStatus = "HOT_PROSPECT" ;
                 }

                 var pStatus = null ;
                 if(store_status == "INACTIVE"){
                     pStatus =  {'$and':
                      [
                         {"store_products.datalink_status" : tStatus},
                         {"store_products.ecatalog_status" : tStatus},
                         {"store_products.ecommerce_status" :tStatus},
                         {"store_products.irugs_status" : tStatus},
                         {"store_products.rmpro_status" : tStatus},
                         {"store_products.vip_status" : tStatus}

                      ]} ;
                 }else
                 {
                     pStatus =  {'$or':
                        [
                         {"store_products.datalink_status" : tStatus},
                         {"store_products.ecatalog_status" : tStatus},
                         {"store_products.ecommerce_status" :tStatus},
                         {"store_products.irugs_status" : tStatus},
                         {"store_products.rmpro_status" : tStatus},
                         {"store_products.rmpro_vip" : tStatus}
                         ]} ;
                 }

                 var tquery = {'$and':[

                     {'$or':[
                                                    { "store_name": { $regex: searchText , $options: 'i' } },
                                                    { "store_state": { $regex: searchText  , $options: 'i' } },
                                                    { "store_city": { $regex: searchText  , $options: 'i' } },
                                                    { "store_zip": { $regex: searchText  , $options: 'i' } }
                             ]
                     },
                     pStatus

                ]} ;


                 debugger;
                 RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:page_no ,pageSize: 50 ,sortBy:{"store_name":1},
                 query:tquery,
                fields:{}},success,error);

               /* RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:page_no ,pageSize: 50 ,sortBy:{"store_name":1},query:
                 {'$and':[

                     {'$or':[
                                                    { "store_name": { $regex: searchText , $options: 'i' } },
                                                    { "store_state": { $regex: searchText , $options: 'i' } },
                                                    { "store_city": { $regex: searchText , $options: 'i' } },
                                                    { "store_zip": { $regex: searchText , $options: 'i' } }
                             ]
                     },
                     { "store_status": store_status }

                ]},fields:{}},success,error);*/
            }
            else{
                    RMdatalink.app.getController('SearchController').doSearchForRetailers("");
            }
        }





        function success(){

               setTotalList(arguments[0].count,arguments[0].items);

               setRetailersList(arguments[0].items) ;




            if(index == 0)
            {
                var maxP = arguments[0].count / 50 ;
                maxP = Math.ceil(maxP) ;
                 RMdatalink.app.getController('PaginationController').setRetailersActiveTabPageNo(maxP) ;

            }

               index++;
               searchRetailerByStatus();

        }

        function error(){

             index++;
             searchRetailerByStatus();
        }




        function setRetailersList(data){

            //retailersStore.addData( data ) ;

            var rtvStr = getStoreByRemovePreviousRetailers();
            rtvStr.setData(data);
            rtvStr.sync();
        }



        function setTotalList(count,items){

            totalRetailersFound += parseInt(count) ;

            var totalsList = null ;
            switch(store_status){
                case "ACTIVE":

                    totalsList = Ext.ComponentQuery.query('#usersTab')[0].down('#retailerTotalsList');

                    break;
                case "PROSPECTS":

                    totalsList = Ext.ComponentQuery.query('#prospectsTab')[0].down('#retailerTotalsList');

                    break;
                case "HOT_PROSPECTS":

                    totalsList = Ext.ComponentQuery.query('#hotProspectsTab')[0].down('#retailerTotalsList');

                    break;
                case "INACTIVE":

                    totalsList = Ext.ComponentQuery.query('#inactiveTab')[0].down('#retailerTotalsList');

                    break;
                case "PENDING":

                    totalsList = Ext.ComponentQuery.query('#pendingTab')[0].down('#retailerTotalsList');

                    break;
            }
         var totalMonthlyPrice = 0 ;

            for(var i=0 ; i < items.length ; i ++ ){

                  var tempTotalPayble =  getMonthlyPaying(items[i]) ;


                if(tempTotalPayble){

                    totalMonthlyPrice += parseFloat(tempTotalPayble,0);
                }
            }


            totalMonthlyPrice = totalMonthlyPrice.toFixed(2) ;

            if(totalsList){

                var tStore = totalsList.getStore();
                tStore.removeAll();
                tStore.sync();


                tStore.setData(
                 {

                    store_count:count,
                    city_count: "",
                    user_count:"",
                     monthly_payble: totalMonthlyPrice

                }
                );
                tStore.sync();
            }
          /*  if(totalsList){

                var tStore = totalsList.getStore();
                tStore.removeAll();
                tStore.sync();

                tStore.setData(
                 [
                 {

                    store_count:count,
                    city_count: "",
                    user_count:""

                }]
                );
                tStore.sync();
            }*/

         /*   var allTabTotalList = Ext.ComponentQuery.query('#allRetailerTab')[0].down('#retailerTotalsList');

            if(allTabTotalList){

                var alltStore = allTabTotalList.getStore();
                alltStore.removeAll();
                alltStore.sync();

                alltStore.setData([
                 {

                    store_count:totalRetailersFound,
                    city_count: "",
                    user_count:""

                }]
                );
                alltStore.sync();
            }
        */

        }


        function getStoreByRemovePreviousRetailers(){
             var rtStore = null ;
             switch(store_status){
                case "ACTIVE":

                    rtStore = Ext.ComponentQuery.query('#usersTab')[0].down('#retailerList').getStore();

                    break;
                case "PROSPECTS":

                    rtStore = Ext.ComponentQuery.query('#prospectsTab')[0].down('#retailerList').getStore();

                    break;
                case "HOT_PROSPECTS":

                    rtStore = Ext.ComponentQuery.query('#hotProspectsTab')[0].down('#retailerList').getStore();

                    break;

                case "INACTIVE":

                    rtStore = Ext.ComponentQuery.query('#inactiveTab')[0].down('#retailerList').getStore();

                    break;
                case "PENDING":

                    rtStore = Ext.ComponentQuery.query('#pendingTab')[0].down('#retailerList').getStore();

                    break;
                 default:
                    var retailersStore = Ext.getStore('retailersMaster') ;
                    rtStore = retailersStore;
                     break;


            }
            rtStore.removeAll();
            rtStore.sync();

            return rtStore;
        }



        function getMonthlyPaying(rec){

                               var value = 0 ;

                               if(rec.store_products && rec.product_billng)
                               {
                               if(rec.store_products.rmpro_status && rec.store_products.rmpro_status == "ACTIVE" && rec.product_billng && rec.product_billng.product_rmpro ){

                                   value += parseFloat(rec.product_billng.product_rmpro.monthly_membership,0) ;
                               }

                               if(rec.store_products.datalink_status && rec.store_products.datalink_status == "ACTIVE" && rec.product_billng && rec.product_billng.product_datalink ){

                                   value += parseFloat(rec.product_billng.product_datalink.monthly_membership,0) ;
                               }

                               value.toFixed(2);

                               if(value === 0)
                                   return "0.00";
                               else
                               {
                                   var sumStr = ""+ value;
                                   var sumStrSplit0 = sumStr.split('.')[0];

                                   var len = sumStrSplit0.length;
                                   if(len > 3)
                                   {
                                       sumStr1 = sumStrSplit0.substr(0,(len-3));
                                       sumStr2 = sumStrSplit0.substr((len-3),(len-1));
                                       sumStrSplit0 =  sumStr1 + ',' + sumStr2 ;
                                   }

                                   if(sumStr.split('.')[1])
                                       return sumStrSplit0 + '.' +sumStr.split('.')[1];
                                   else
                                   {
                                       return  sumStrSplit0;
                                   }
                               }
                               }
            return 0 ;

        }

    },

    handleLastSavedExpansionState: function(isSkipCustomFilter) {

    },

    setRetailersActiveTabPageNo: function(maxPage) {
        var that =this ;

        if(Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem().getItemId() == 'card-retailers')
        {
          var rtMainPanel = Ext.ComponentQuery.query('#retailersMaincontentpanel')[0] ;
          var activeTab = Ext.ComponentQuery.query('#retailersTabPanel')[0].getActiveItem();
          var activeTabId = activeTab.getItemId();

          var activeStore = activeTab.down('#retailerList').getStore();


          //rtMainPanel.down('#mainPageNoLbl').setHtml(activeStore.getPageNo() ) ;


           // alert("asds"+maxPage);
            if(maxPage){
                rtMainPanel.down('#mainPageNoLbl').setHtml(activeStore.getPageNo() +' of '+ maxPage ) ;

                activeStore.config.maxPageNo = maxPage ;
            }else{

                rtMainPanel.down('#mainPageNoLbl').setHtml(activeStore.getPageNo() +' of 1' ) ;
            }

        }
    }

});