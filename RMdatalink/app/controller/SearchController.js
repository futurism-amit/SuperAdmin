/*
 * File: app/controller/SearchController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.SearchController', {
    extend: 'Ext.app.Controller',

    config: {
        searchTimeOut: 1000,
        searchTme: 0,
        isSearch: false,
        isFromRetailerDetail: false,
        searchText: '',
        searchKey: 'ALL',
        doNotSave: false,

        control: {
            "button[action=searchRetailersBtn]": {
                tap: 'onretailersVendorsSerchBtnTap'
            },
            "searchfield[action=searchRetailers]": {
                keyup: 'onsearchRetailersFldAction'
            },
            "button[action=searchActiveRetailersBtn]": {
                tap: 'onsearchActiveRetailersBtnTap'
            },
            "searchfield[action=searchActiveRetailers]": {
                keyup: 'onsearchActiveRetailersfieldAction'
            },
            "button[itemId=retailersCustomFilterBtn]": {
                tap: 'onretailersCustomFilterBtnTap'
            },
            "button[itemId=customSearchApplyBtn]": {
                tap: 'oncustomSearchApplyBtnTap'
            },
            "selectfield[itemId=retailersCustomSearchSeletFld]": {
                change: 'onretailersCustomSearchSeletFldChange'
            },
            "selectfield[itemId=retailersProductStatusSearchSlctFld]": {
                change: 'onretailersProductStatusSearchSlctFldChange'
            },
            "searchfield[action=searchTechSupportLog]": {
                keyup: 'onsearchTechSupportLogKeyup'
            },
            "button[itemId=brwsTechSupportSerchBtn]": {
                tap: 'onbrwsTechSupportSerchBtnTap'
            },
            "searchfield[itemId=rtVdrsDateSearchFld]": {
                initialize: 'onrtVdrsDateSearchFldInitialize'
            }
        }
    },

    onretailersVendorsSerchBtnTap: function(button, e, eOpts) {

        var searchText = "" ;

        this.config.searchTme = 900 ;

         switch(this.config.searchKey){

                case "store_products.rmpro_status":
                case "store_products.irugs_status":
                case "store_products.ecommerce_status":
                case "store_products.ecatalog_status":
                case "store_products.datalink_status":

               searchText = button.getParent().down('#retailersProductStatusSearchSlctFld').getValue() ;


                break;
             case "user_since":
                searchText = button.getParent().down('#rtVdrsDateSearchFld').getValue() ;
                 break;

             default:
                searchText = button.getParent().down('#rtVdrsSearchFld').getValue() ;
                 break;
         }

         button.getParent().down('#rtVdrsSearchFld').setValue("") ;

        if(Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem().getItemId() == 'card-retailers')
        {

          var activeTab = Ext.ComponentQuery.query('#retailersTabPanel')[0].getActiveItem().getItemId();
          var store_status = "" ;
            switch(activeTab){

                case "usersTab":
                    store_status = "ACTIVE" ;

                    break;
                case "prospectsTab":
                    store_status = "PROSPECTS" ;
                    break;
                 case "hotProspectsTab":
                    store_status = "HOT_PROSPECTS" ;
                    break;

                case "inactiveTab":
                    store_status = "INACTIVE" ;
                    break;
                case "pendingTab":
                    store_status = "PENDING" ;
                    break;
                case "allRetailerTab":
                    store_status = "" ;
                    this.doSearchForRetailers(searchText ) ;

                    return;

            }


            this.searchRetailerByStatus(searchText,store_status,1 ) ;



        }
        else{
                this.doSearchForProspectRetailersAtVendor(searchText ) ;
        }

    },

    onsearchRetailersFldAction: function(textfield, e, eOpts) {


        var searchText = textfield.getValue() ;



        if(Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem().getItemId() == 'card-retailers')
        {

          var activeTab = Ext.ComponentQuery.query('#retailersTabPanel')[0].getActiveItem().getItemId();
          var store_status = "" ;
            switch(activeTab){

                case "usersTab":
                    store_status = "ACTIVE" ;
                    break;
                case "prospectsTab":
                    store_status = "PROSPECTS" ;
                    break;
                 case "hotProspectsTab":
                    store_status = "HOT_PROSPECTS" ;
                    break;
                case "inactiveTab":
                    store_status = "INACTIVE" ;
                    break;
                case "pendingTab":
                    store_status = "PENDING" ;
                    break;
                case "allRetailerTab":
                    this.doSearchForRetailers(searchText ) ;
                    break;
            }


            this.searchRetailerByStatus(searchText,store_status,1 ) ;



        }
        else{
                this.doSearchForProspectRetailersAtVendor(searchText ) ;
        }

    },

    onsearchActiveRetailersBtnTap: function(button, e, eOpts) {


        var searchText = button.getParent().down('#rtVdrsSearchFld').getValue() ;
        this.doSearchForActiveRetailers(searchText ) ;


    },

    onsearchActiveRetailersfieldAction: function(textfield, e, eOpts) {

                var searchText = textfield.getValue() ;

                this.doSearchForActiveRetailers(searchText ) ;
    },

    onretailersCustomFilterBtnTap: function(button, e, eOpts) {
        this.getCustomSearchComponent().showBy(button) ;
    },

    oncustomSearchApplyBtnTap: function(button, e, eOpts) {


        var doNotSave = this.config.doNotSave ;

        var that = this ;

         var rtMainPanel = Ext.ComponentQuery.query('#retailersMaincontentpanel')[0] ;
         rtMainPanel.down('#mainLoadingImg').setHidden(false) ;


        var form = button.getParent() ;

        var values = form.getValues() ;


        if(doNotSave)
        {
                var queryToExecute = getSearchQuery() ;
                        console.log(queryToExecute) ;

                        startSearch(queryToExecute) ;
        }
        else{
            if(Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem().getItemId() == 'card-retailers')
            {

              var activeTab = Ext.ComponentQuery.query('#retailersTabPanel')[0].getActiveItem().getItemId();
              var store_status = "" ;
                switch(activeTab){

                    case "allRetailerTab":

                        var queryToExecute = getSearchQuery() ;
                        console.log(queryToExecute) ;

                        startSearch(queryToExecute) ;


                        break;
                    case "":

                        break;
                    default :
                }


            }
        }

        function getSearchQuery(){

            var query = {} ;

            query.$and = [] ;





            if(values.AccNoChk){

                query.$and.push(
                    {
                        account_no:  { $regex:   values.AccNo , $options: 'i' }
                    }

                );
            }

            if(values.CityChk){
                 query.$and.push(
                    {
                        store_city: { $regex:   values.City, $options: 'i' }
                    }

                );
            }


             if(values.PhoneChk){
                 query.$and.push(
                    {
                        store_phone:  { $regex: values.Phone , $options: 'i' }
                    }

                );
            }


             if(values.StateChk){
                 query.$and.push(
                    {
                        store_state:  { $regex:   values.State , $options: 'i' }
                    }

                );
            }


             if(values.StoreEmailChk){
                 query.$and.push(
                    {
                        store_email:  { $regex:   values.StoreEmail , $options: 'i' }
                    }

                );
            }


            if(values.StoreNameChk){
                 query.$and.push(
                    {
                        store_name: { $regex:   values.StoreName , $options: 'i' }
                    }

                );
            }


           if(values.StoreWebsiteChk){
                 query.$and.push(
                    {
                        store_website: { $regex:   values.StoreWebsite , $options: 'i' }
                    }

                );
            }



           if(values.createdByChk){
                 query.$and.push(
                    {
                        created_by:   { $regex: values.createdBy , $options: 'i' }
                    }

                );
            }


             if(values.contactNameChk){
                 query.$and.push(
                    {
                        $or:[
                                {
                                    manager_firstname: { $regex: values.contactName , $options: 'i' }
                                },
                                {
                                    manager_lastname:{ $regex:values.contactName  , $options: 'i' }
                                }
                           ]


                    }

                );
            }


                 var temp = { $or:[] };
                 var q = {} ;
             if(values.allProdChk){




                 if(values.dlstatus){
                      q['store_products.datalink_status'] =  values.allProd  ;// { $regex: values.allProd  , $options: 'i' } ;
                     temp.$or.push(q);
                 }


                 if(values.rmprostatus){
                     q = {} ;
                      q["store_products.rmpro_status"] = values.allProd  ;//{ $regex: values.allProd  , $options: 'i' } ;
                     temp.$or.push(q);
                 }



                 if(values.iRugzStatus){
                     q = {} ;
                      q[ "store_products.irugs_status"] = values.allProd  ;//{ $regex: values.allProd  , $options: 'i' } ;
                     temp.$or.push(q);
                 }



                 if(values.eComstatus){
                     q = {} ;
                      q["store_products.ecommerce_status"] = values.allProd  ;//{ $regex: values.allProd  , $options: 'i' } ;
                     temp.$or.push(q);
                 }


                 if(values.eCatStatus){
                     q = {} ;
                      q["store_products.ecatalog_status"] =values.allProd  ;// { $regex: values.allProd  , $options: 'i' } ;
                    temp.$or.push(q);
                 }
                 if(values.vipStatus){
                     q = {} ;
                      q["store_products.vip_status"] =values.allProd  ;// { $regex: values.allProd  , $options: 'i' } ;
                    temp.$or.push(q);
                 }



                 query.$and.push(temp );
            }


                temp =  { $or:[] } ;
                if(values.dlstatus){
                    q = {} ;
                      q['store_products.datalink_status'] =  { $regex: ""  , $options: 'i' } ;
                     temp.$or.push(q);
                    //query.$and.push(q);
                 }


                 if(values.rmprostatus){
                     q = {} ;
                      q["store_products.rmpro_status"] =  { $regex: "" , $options: 'i' } ;
                      temp.$or.push(q);
                     //query.$and.push(q);
                 }



                 if(values.iRugzStatus){
                     q = {} ;
                      q[ "store_products.irugs_status"] = { $regex: "" , $options: 'i' } ;
                      temp.$or.push(q);
                     //query.$and.push(q);
                 }



                 if(values.eComstatus){
                     q = {} ;
                      q["store_products.ecommerce_status"] =  { $regex: "" , $options: 'i' } ;
                      temp.$or.push(q);
                     // query.$and.push(q);
                 }


                 if(values.eCatStatus){
                     q = {} ;
                      q["store_products.ecatalog_status"] = { $regex: "" , $options: 'i' } ;

                      temp.$or.push(q);
                     // query.$and.push(q);
                 }
                 if(values.vipStatus){
                     q = {} ;
                      q["store_products.vip_status"] = { $regex: "" , $options: 'i' } ;

                      temp.$or.push(q);

                 }

                    if(temp.$or.length > 0 ){
                      //   temp.$or.push(q);
                      query.$and.push(temp );
                    }



            if(values.createdAfterChk){

                 //searchQuery._id = { $lt: objectIdWithTimestamp(that.config.searchText ) }  ;
                    var tDate = new Date( values.createdAfter );
                    tDate.setDate(tDate.getDate() - 1);

                 query.$and.push(
                    {
                        user_since: { $gt : tDate }
                    }

                );
            }

            if(values.VendorPartnerChk &&  values.VendorPartner){



                 query.$and.push(
                    {
                        'e_commerce_info.vip_vendor': values.VendorPartner
                    }

                );
            }

        //VendorPartnerChk

            return query ;
        }











        ///////////////////////////////////////////////////////



        function startSearch(qry){
             that.config.isSearch = false ;

                 var searchQuery =  qry ;

            RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1,pageSize: 50 ,sortBy:{"store_name":1},
                                        query:searchQuery,fields:{}},success,error);



        }





        function success(){

             if(!doNotSave)
             {
                that.saveCustomFilter(values) ;
             }else{

                 that.config.doNotSave = false ;
             }
                rtMainPanel.down('#mainLoadingImg').setHidden(true) ;

                setRetailersList(arguments[0].items) ;
                  setTotalCount(arguments[0].count,arguments[0].items) ;



                Ext.ComponentQuery.query('#onlineVendorsRetailersCLbl')[0].setHtml("Total Retailers : "+arguments[0].count) ;

              var maxP = arguments[0].count / 50 ;
            maxP = Math.ceil(maxP) ;
            Ext.getStore('retailersMaster').config.maxPageNo = maxP ;
        }

        function error(){
            RMdatalink.app.getController('PaginationController').initialiseRetailers(true) ;
           that.config.isSearch = false ;

        }




        function setRetailersList(data){


          //  var prospectList  = Ext.ComponentQuery.query('#RDOnlineVendorsTab')[0].down("#mainList");


              var prospectStore = Ext.getStore('retailersMaster') ; // prospectList.getStore() ;

            prospectStore.removeAll();
            prospectStore.sync();

            prospectStore.setData(data) ;

            prospectStore.sync();

            //RMdatalink.app.getController('PaginationController').loadDependentStoresonMaster('retailersMaster');



        }


        function setTotalCount(count,items)
        {

              var allTabTotalList = Ext.ComponentQuery.query('#allRetailerTab')[0].down('#retailerTotalsList');


            if(allTabTotalList ){

                var alltStore = allTabTotalList.getStore();
                alltStore.removeAll();
                alltStore.sync();

                alltStore.setData([
                 {

                    store_count:count,
                    city_count: "",
                    user_count:""

                }]
                );
                alltStore.sync();
            }



        }



        function objectIdWithTimestamp(timestamp)
        {
            // Convert string date to Date object (otherwise assume timestamp is a date)
            if (typeof(timestamp) == 'string') {
                timestamp = new Date(timestamp);
            }

            // Convert date object to hex seconds since Unix epoch
            var hexSeconds = Math.floor(timestamp/1000).toString(16);

            // Create an ObjectId with that hex timestamp
            var constructedObjectId = ObjectId(hexSeconds + "0000000000000000");

            return constructedObjectId ;
        }





        /*


        Expired: null
        ExpiredChk: true
        ExpiredUnit: null


        Phone: "a"PhoneChk: true
        State: "a"
        StateChk: true

        StoreEmail: "a"
        StoreEmailChk: true

        StoreName: "a"
        StoreNameChk: true


        StoreWebsite: "a"
        StoreWebsiteChk: true

        allProd: "HOT_PROSPECT"
        allProdChk: true

        companyType: null
        companyTypeChk: true

        contactName: "a"
        contactNameChk: true
        createdAfter: "a"
        createdAfterChk: true
        createdBy: "a"
        createdByChk: true

        dlstatus: true
        eCatStatus: true
        eComstatus: true
        iRugzStatus: true
        picker: null
        rmprostatus: true

                  '$or':[
                                    { "store_name": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_state": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_city": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_zip": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_location": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_email": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "manager_firstname": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "manager_lastname": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.datalink_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.ecatalog_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.ecommerce_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.irugs_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.rmpro_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "created_by": { $regex: that.config.searchText  , $options: 'i' } }

                             ]
                          };

        }
        else{

            switch(that.config.searchKey){

                case "store_products.rmpro_status":
                case "store_products.irugs_status":
                case "store_products.ecommerce_status":
                case "store_products.ecatalog_status":
                case "store_products.datalink_status":



        */
    },

    onretailersCustomSearchSeletFldChange: function(selectfield, newValue, oldValue, eOpts) {

        this.config.searchKey = newValue ;

         switch(this.config.searchKey){

                case "store_products.rmpro_status":
                case "store_products.irugs_status":
                case "store_products.ecommerce_status":
                case "store_products.ecatalog_status":
                case "store_products.datalink_status":

                selectfield.getParent().down('#retailersProductStatusSearchSlctFld').setHidden(false);
                selectfield.getParent().down('#rtVdrsSearchFld').setHidden(true);
                 selectfield.getParent().down('#rtVdrsDateSearchFld').setHidden(true);

                break;
             case "user_since":
                 selectfield.getParent().down('#retailersProductStatusSearchSlctFld').setHidden(true);
                selectfield.getParent().down('#rtVdrsSearchFld').setHidden(true);
                 selectfield.getParent().down('#rtVdrsDateSearchFld').setHidden(false);
                 break;

             default:
                selectfield.getParent().down('#retailersProductStatusSearchSlctFld').setHidden(true);
                selectfield.getParent().down('#rtVdrsSearchFld').setHidden(false);
                selectfield.getParent().down('#rtVdrsDateSearchFld').setHidden(true);
                 break;
         }
    },

    onretailersProductStatusSearchSlctFldChange: function(selectfield, newValue, oldValue, eOpts) {

        var searchText =newValue ;

        this.config.searchTme = 900 ;

        if(Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem().getItemId() == 'card-retailers')
        {

          var activeTab = Ext.ComponentQuery.query('#retailersTabPanel')[0].getActiveItem().getItemId();
          var store_status = "" ;
            switch(activeTab){

                case "usersTab":
                    store_status = "ACTIVE" ;

                    break;
                case "prospectsTab":
                    store_status = "PROSPECTS" ;
                    break;
                 case "hotProspectsTab":
                    store_status = "HOT_PROSPECTS" ;
                    break;

                case "inactiveTab":
                    store_status = "INACTIVE" ;
                    break;
                case "pendingTab":
                    store_status = "PENDING" ;
                    break;
                case "allRetailerTab":
                    store_status = "" ;
                    this.doSearchForRetailers(searchText ) ;

                    return;

            }


            this.searchRetailerByStatus(searchText,store_status,1 ) ;



        }
        else{
                this.doSearchForProspectRetailersAtVendor(searchText ) ;
        }

    },

    onsearchTechSupportLogKeyup: function(textfield, e, eOpts) {


        this.doLoadTechSupport( 1, 50 ,false );
    },

    onbrwsTechSupportSerchBtnTap: function(button, e, eOpts) {
        console.log("SERACH");

        this.doLoadTechSupport( 1, 50 ,true );
    },

    onrtVdrsDateSearchFldInitialize: function(component, eOpts) {
        component.element.on("tap",function(){


                function fn(newDate){


                    component.setValue(Ext.Date.format(newDate, "m/d/Y"));
                    RMdatalink.util.Calendar.hideCalendar();
                     component.setDisabled(false);

                   RMdatalink.app.getController('SearchController').doInitRtSearch(component.getValue());

                }

                RMdatalink.util.Calendar.showCalendar(fn,component);
                component.setDisabled(true);

        });
    },

    doSearchForRetailers: function(searchText) {


        var that = this ;

         var rtMainPanel = Ext.ComponentQuery.query('#retailersMaincontentpanel')[0] ;
         rtMainPanel.down('#mainLoadingImg').setHidden(false) ;

        //isSearch


        that.config.searchText = searchText ;

        if(! that.config.isSearch ){

            createTimeOut() ;

        }else{

             that.config.searchTme = 100 ;
        }

        function createTimeOut(){

            that.config.isSearch = true ;

            Ext.Function.defer( onInterval , 100, that);


        }

        function onInterval(){

            that.config.searchTme += 100 ;

            if(that.config.searchTme < that.config.searchTimeOut)  {
                createTimeOut() ;
            } else{

                that.config.searchTme = 0 ;
                startSearch() ;
            }

        }


        //RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1,pageSize: 50 ,sortBy:{},query:{ "store_name": { $regex: searchText , $options: 'i' } } ,fields:{}},success,error);

        function startSearch(){
             that.config.isSearch = false ;

                 var searchQuery =  that.getSearchQuery("") ;
            /*
            {'$or':[
                                            { "store_name": { $regex: that.config.searchText , $options: 'i' } },
                                            { "store_state": { $regex: that.config.searchText , $options: 'i' } },
                                            { "store_city": { $regex: that.config.searchText , $options: 'i' } },
                                            { "store_zip": { $regex: that.config.searchText , $options: 'i' } }
                                        ]}
            */
            RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1,pageSize: 50 ,sortBy:{"store_name":1},
                                        query:searchQuery,fields:{}},success,error);



        }





        function success(){

                rtMainPanel.down('#mainLoadingImg').setHidden(true) ;

                setRetailersList(arguments[0].items) ;
                  setTotalCount(arguments[0].count,arguments[0].items) ;



                Ext.ComponentQuery.query('#onlineVendorsRetailersCLbl')[0].setHtml("Total Retailers : "+arguments[0].count) ;

              var maxP = arguments[0].count / 50 ;
            maxP = Math.ceil(maxP) ;
            Ext.getStore('retailersMaster').config.maxPageNo = maxP ;
        }

        function error(){

           that.config.isSearch = false ;
        }




        function setRetailersList(data){


          //  var prospectList  = Ext.ComponentQuery.query('#RDOnlineVendorsTab')[0].down("#mainList");


              var prospectStore = Ext.getStore('retailersMaster') ; // prospectList.getStore() ;

            prospectStore.removeAll();
            prospectStore.sync();

            prospectStore.setData(data) ;

            prospectStore.sync();

            //RMdatalink.app.getController('PaginationController').loadDependentStoresonMaster('retailersMaster');



        }


        function setTotalCount(count,items)
        {

              var allTabTotalList = Ext.ComponentQuery.query('#allRetailerTab')[0].down('#retailerTotalsList');


            if(allTabTotalList ){

                var alltStore = allTabTotalList.getStore();
                alltStore.removeAll();
                alltStore.sync();

                alltStore.setData([
                 {

                    store_count:count,
                    city_count: "",
                    user_count:""

                }]
                );
                alltStore.sync();
            }



        }


    },

    doSearchForActiveRetailers: function(searchText) {
          var importFrmCsvController = RMdatalink.app.getController('ImportCSV') ;



            var phones = [] ;


            for(var i =0 ; i < importFrmCsvController.config.retailerForVendor.length ; i++){


                phones.push(importFrmCsvController.config.retailerForVendor[i].retailer_phone) ;
            }






        //RMdatalink.app.getController('VendorRetailerRelations').searchRetailers(searchText) ;


        RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1,pageSize: 50 ,sortBy:{"store_name":1},query:{'$and':[
            { "store_name": { $regex: searchText , $options: 'i' } },
                 {
                       store_phone:{
                           $in:
                           phones
                       }

                   }
        ]},fields:{}},success,error);







        function success(){
        console.log(arguments[0].count) ;

           if(parseInt(arguments[0].count) > 0 )
           {
               setRetailersList(arguments[0].items) ;

           }



        }

        function error(){


        }




        function setRetailersList(data){


            var prospectList  = Ext.ComponentQuery.query('#RDInStoreVendorsTab')[0].down("#mainList");


              var prospectStore = prospectList.getStore() ;
            prospectStore.removeAll();
            prospectStore.sync();

            prospectStore.setData(data) ;

            prospectStore.sync();

              prospectList.selectAll() ;



        }
    },

    doSearchForProspectRetailersAtVendor: function(searchText) {


        var that = this ;
        //isSearch


        if(! that.config.isSearch ){

            createTimeOut() ;

        }else{

             that.config.searchTme = 100 ;
        }

        function createTimeOut(){

            that.config.isSearch = true ;

            Ext.Function.defer( onInterval , 100, that);


        }

        function onInterval(){

            that.config.searchTme += 100 ;

            if(that.config.searchTme < that.config.searchTimeOut)  {
                createTimeOut() ;
            } else{

                that.config.searchTme = 0 ;
                startSearch() ;
            }

        }


        //RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1,pageSize: 50 ,sortBy:{},query:{ "store_name": { $regex: searchText , $options: 'i' } } ,fields:{}},success,error);

        function startSearch(){
             that.config.isSearch = false ;
            RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1,pageSize: 50 ,sortBy:{"store_name":1},
                                        query:{'$or':[
                                            { "store_name": { $regex: searchText , $options: 'i' } },
                                            { "store_state": { $regex: searchText , $options: 'i' } },
                                            { "store_city": { $regex: searchText , $options: 'i' } },
                                            { "store_zip": { $regex: searchText , $options: 'i' } }
                                        ]},fields:{}},success,error);



        }





        function success(){

               setRetailersList(arguments[0].items) ;





            Ext.ComponentQuery.query('#onlineVendorsRetailersCLbl')[0].setHtml("Total Retailers : "+arguments[0].count) ;



        }

        function error(){

           that.config.isSearch = false ;
        }




        function setRetailersList(data){


          //  var prospectList  = Ext.ComponentQuery.query('#RDOnlineVendorsTab')[0].down("#mainList");


              var prospectStore = Ext.getStore('retailers.prospectRTForVendor') ; // prospectList.getStore() ;

            prospectStore.removeAll();
            prospectStore.sync();

            prospectStore.setData(data) ;

            prospectStore.sync();



            try{
                  var prospectList  = Ext.ComponentQuery.query('#RDOnlineVendorsTab')[0].down("#mainList");


                prospectList.deselectAll() ;
            }catch(ex){

                console.error(ex) ;
            }


        }


    },

    searchRetailerByStatus: function(searchText, store_status, page_no, productStatusQuery) {

         var rtMainPanel = Ext.ComponentQuery.query('#retailersMaincontentpanel')[0] ;
        // rtMainPanel.down('#mainLoadingImg').setHidden(false) ;
        var that = this ;


        if(this.config.isFromRetailerDetail){
        //    this.config.isFromRetailerDetail = false ;
            searchText = this.config.defaultSearchString ;
            store_status = this.config.defaultStoreStatus;

        }

        that.config.searchText = searchText ;

        //isSearch


        if(! that.config.isSearch ){

            createTimeOut() ;

        }else{

             that.config.searchTme = 100 ;
        }

        function createTimeOut(){

            that.config.isSearch = true ;

            Ext.Function.defer( onInterval , 100, that);


        }

        function onInterval(){

            that.config.searchTme += 100 ;

            if(that.config.searchTme < that.config.searchTimeOut)  {
                createTimeOut() ;
            } else{

                that.config.searchTme = 0 ;
                startSearch() ;
            }

        }



        function startSearch(){
                that.config.isSearch = false ;

         rtMainPanel.down('#mainLoadingImg').setHidden(false) ;

            if(store_status && store_status !== "")
             {

                 var tStatus = store_status ;
                 if(store_status=="PROSPECTS"){
                     tStatus = "PROSPECT" ;
                 }else if(store_status == "HOT_PROSPECTS"){
                       tStatus = "HOT_PROSPECT" ;
                 }

                 var pStatus = null ;
                 if(store_status == "INACTIVE"){
                     pStatus =  {'$and':
                      [
                         {"store_products.datalink_status" : tStatus},
                         {"store_products.ecatalog_status" : tStatus},
                         {"store_products.ecommerce_status" :tStatus},
                         {"store_products.irugs_status" : tStatus},
                         {"store_products.rmpro_status" : tStatus}
                      ]} ;
                 }else
                 {
                     pStatus =  {'$or':
                        [
                         {"store_products.datalink_status" : tStatus},
                         {"store_products.ecatalog_status" : tStatus},
                         {"store_products.ecommerce_status" :tStatus},
                         {"store_products.irugs_status" : tStatus},
                         {"store_products.rmpro_status" : tStatus}
                         ]} ;
                 }


                 var searchQuery =  that.getSearchQuery(store_status) ;
                 /*
                      {'$or':[
                                                    { "store_name": { $regex: that.config.searchText  , $options: 'i' } },
                                                    { "store_state": { $regex: that.config.searchText  , $options: 'i' } },
                                                    { "store_city": { $regex: that.config.searchText  , $options: 'i' } },
                                                    { "store_zip": { $regex: that.config.searchText  , $options: 'i' } }
                             ]}
                 */

                 var tquery = {'$and':[
                    searchQuery,
                     pStatus

                ]} ;


                 RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:page_no ,pageSize: 50 ,sortBy:{"store_name":1},
                 query:tquery,
                fields:{}},success,error);
             }else{

                var searchQuery =  that.getSearchQuery(store_status) ;
                 var tquery = {
                     '$and':
                     [

                    searchQuery

                ]} ;


                 RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:page_no ,pageSize: 50 ,sortBy:{"store_name":1},
                 query:tquery,
                fields:{}},success,error);

             }

        }



        var retailersStore = Ext.getStore('retailersMaster') ;


        function success(){



             rtMainPanel.down('#mainLoadingImg').setHidden(true) ;
                Ext.Viewport.setMasked(false);

            if(page_no > 1 && arguments[0].items.length ==0 ){


                rollBackStorePageNo() ;
                //retailersStore.setPageNo( parseInt(page_no) - 1 ) ;
                Ext.Msg.alert("Alert","Next page is not available.",Ext.emptyFn);
                return;
            }
               setRetailersList(arguments[0].items) ;
                setTotalList(arguments[0].count,arguments[0].items);

            var maxP = arguments[0].count / 50 ;
            maxP = Math.ceil(maxP) ;
             RMdatalink.app.getController('PaginationController').setRetailersActiveTabPageNo(maxP) ;



        }

        function error(){

             rtMainPanel.down('#mainLoadingImg').setHidden(true) ;
              Ext.Viewport.setMasked(false);
        }

        function rollBackStorePageNo(){
            var activeListStore = null ;
              switch(store_status){
                case "ACTIVE":

                    activeListStore = Ext.ComponentQuery.query('#usersTab')[0].down('#retailerList').getStore();

                    break;
                case "PROSPECTS":

                    activeListStore = Ext.ComponentQuery.query('#prospectsTab')[0].down('#retailerList').getStore();

                    break;
                case "HOT_PROSPECTS":

                    activeListStore = Ext.ComponentQuery.query('#hotProspectsTab')[0].down('#retailerList').getStore();

                    break;

                case "INACTIVE":

                    activeListStore = Ext.ComponentQuery.query('#inactiveTab')[0].down('#retailerList').getStore();

                    break;
                case "PENDING":

                    activeListStore = Ext.ComponentQuery.query('#pendingTab')[0].down('#retailerList').getStore();

                    break;
                  case "":
                      activeListStore = retailersStore ;
                      break;
            }

            if(activeListStore)
            {
                activeListStore.setPageNo( parseInt(page_no) - 1 ) ;
            }

        }


        function setTotalList(count,items){
            var totalsList = null ;


               switch(store_status){
                case "ACTIVE":

                    totalsList = Ext.ComponentQuery.query('#usersTab')[0].down('#retailerTotalsList');

                    break;
                case "PROSPECTS":

                    totalsList = Ext.ComponentQuery.query('#prospectsTab')[0].down('#retailerTotalsList');

                    break;
                case "HOT_PROSPECTS":

                    totalsList = Ext.ComponentQuery.query('#hotProspectsTab')[0].down('#retailerTotalsList');

                    break;

                case "INACTIVE":

                    totalsList = Ext.ComponentQuery.query('#inactiveTab')[0].down('#retailerTotalsList');

                    break;
                case "PENDING":

                    totalsList = Ext.ComponentQuery.query('#pendingTab')[0].down('#retailerTotalsList');

                    break;
                   case "":
                    totalsList = Ext.ComponentQuery.query('#allRetailerTab')[0].down('#retailerTotalsList');
                       break;
            }


               var totalMonthlyPrice = 0 ;

            for(var i=0 ; i < items.length ; i ++ ){

                  var tempTotalPayble =  getMonthlyPaying(items[i]) ;


                if(tempTotalPayble){

                    totalMonthlyPrice += parseFloat(tempTotalPayble,0);
                }
            }


            totalMonthlyPrice = totalMonthlyPrice.toFixed(2) ;

            if(totalsList){

                var tStore = totalsList.getStore();
                tStore.removeAll();
                tStore.sync();


                tStore.setData(
                 {

                    store_count:count,
                    city_count: "",
                    user_count:"",
                     monthly_payble: totalMonthlyPrice

                }
                );
                tStore.sync();
            }

        }

        function setRetailersList(data){

        if(that.config.isFromRetailerDetail){
            that.config.isFromRetailerDetail = false ;
        }else{

            //var rtsStore = getStoreByRemovePreviousRetailers();
            // removeCurrentStatusRetailers() ;
        }

            var rtsStore = getStoreByRemovePreviousRetailers();
            rtsStore.setData(data);
            rtsStore.sync();
            // retailersStore.addData( data ) ;


        // RMdatalink.app.getController('PaginationController').loadDependentStoresonMaster('retailersMaster');
        }

        function removeCurrentStatusRetailers(){
        return ;
            var record = retailersStore.findExact("store_status" , store_status);


            while(record != -1)
            {
                console.log(record) ;

                  console.log(store_status) ;
                retailersStore.removeAt( record ) ;

                record = retailersStore.find("store_status" , store_status);
            }
        }


        function getStoreByRemovePreviousRetailers(){
             var rtStore = null ;
             switch(store_status){
                case "ACTIVE":

                    rtStore = Ext.ComponentQuery.query('#usersTab')[0].down('#retailerList').getStore();

                    break;
                case "PROSPECTS":

                    rtStore = Ext.ComponentQuery.query('#prospectsTab')[0].down('#retailerList').getStore();

                    break;
                case "HOT_PROSPECTS":

                    rtStore = Ext.ComponentQuery.query('#hotProspectsTab')[0].down('#retailerList').getStore();

                    break;

                case "INACTIVE":

                    rtStore = Ext.ComponentQuery.query('#inactiveTab')[0].down('#retailerList').getStore();

                    break;
                case "PENDING":

                    rtStore = Ext.ComponentQuery.query('#pendingTab')[0].down('#retailerList').getStore();

                    break;
                 default:
                    rtStore = retailersStore;
                     break;


            }
            rtStore.removeAll();
            rtStore.sync();

            return rtStore;
        }



        function getMonthlyPaying(rec){

                               var value = 0 ;

                               if(rec.store_products && rec.product_billng)
                               {
                               if(rec.store_products.rmpro_status && rec.store_products.rmpro_status == "ACTIVE" && rec.product_billng && rec.product_billng.product_rmpro){

                                   value += parseFloat(rec.product_billng.product_rmpro.monthly_membership,0) ;
                               }

                               if(rec.store_products.datalink_status && rec.store_products.datalink_status == "ACTIVE" && rec.product_billng && rec.product_billng.product_datalink){

                                   value += parseFloat(rec.product_billng.product_datalink.monthly_membership,0) ;
                               }

                               value.toFixed(2);

                               if(value === 0)
                                   return "0.00";
                               else
                               {
                                   var sumStr = ""+ value;
                                   var sumStrSplit0 = sumStr.split('.')[0];

                                   var len = sumStrSplit0.length;
                                   if(len > 3)
                                   {
                                       sumStr1 = sumStrSplit0.substr(0,(len-3));
                                       sumStr2 = sumStrSplit0.substr((len-3),(len-1));
                                       sumStrSplit0 =  sumStr1 + ',' + sumStr2 ;
                                   }

                                   if(sumStr.split('.')[1])
                                       return sumStrSplit0 + '.' +sumStr.split('.')[1];
                                   else
                                   {
                                       return  sumStrSplit0;
                                   }
                               }
                               }
            return 0 ;

        }
    },

    getCustomSearchComponent: function() {
        if(Ext.ComponentQuery.query("#SearchDropDownView")[0])
        {

         return Ext.ComponentQuery.query("#SearchDropDownView")[0];

        }else{

         return Ext.widget('rtCustomSearchPanel');
        }

    },

    getSearchQuery: function(store_status) {
        var that = this ;
        var searchQuery = {};

        var selectFld = null ;
            switch(store_status){
                case "ACTIVE":

                    selectFld = Ext.ComponentQuery.query('#usersTab')[0].down('#retailersCustomSearchSeletFld');

                    break;
                case "PROSPECTS":

                    selectFld = Ext.ComponentQuery.query('#prospectsTab')[0].down('#retailersCustomSearchSeletFld');

                    break;
                case "HOT_PROSPECTS":

                    selectFld = Ext.ComponentQuery.query('#hotProspectsTab')[0].down('#retailersCustomSearchSeletFld');

                    break;

                case "INACTIVE":

                    selectFld = Ext.ComponentQuery.query('#inactiveTab')[0].down('#retailersCustomSearchSeletFld');

                    break;
                case "PENDING":

                    selectFld = Ext.ComponentQuery.query('#pendingTab')[0].down('#retailersCustomSearchSeletFld');

                    break;
                  case "":
                    selectFld = Ext.ComponentQuery.query('#allRetailerTab')[0].down('#retailersCustomSearchSeletFld');
                      break;

                  default:
                    selectFld = Ext.ComponentQuery.query('#allRetailerTab')[0].down('#retailersCustomSearchSeletFld');
                      break;
            }


        that.config.searchKey = selectFld.getValue() ;

        if(that.config.searchKey == "ALL")
        {
          searchQuery  = {


                        '$or':[
                                    { "store_name": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_state": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_city": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_zip": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_location": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_email": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "manager_firstname": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "manager_lastname": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.datalink_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.ecatalog_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.ecommerce_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.irugs_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "store_products.rmpro_status": { $regex: that.config.searchText  , $options: 'i' } },
                                    { "created_by": { $regex: that.config.searchText  , $options: 'i' } }

                             ]
                          };

        }
        else{

            switch(that.config.searchKey){

                case "store_products.rmpro_status":
                case "store_products.irugs_status":
                case "store_products.ecommerce_status":
                case "store_products.ecatalog_status":
                case "store_products.datalink_status":

                  //  searchQuery[that.config.searchKey] = { $regex: that.config.searchText  , $options: 'i' }  ;
                if( that.config.searchText == "ANY")
                {
                               searchQuery[that.config.searchKey]= { $regex: ""  , $options: 'i' }  ;
                }
                else{
                               searchQuery[that.config.searchKey]= that.config.searchText  ;
                    }

                    break;
                case "user_since":
                   //searchQuery._id = { $lt: objectIdWithTimestamp(that.config.searchText ) }  ;
                    var tDate = new Date(that.config.searchText );
                    tDate.setDate(tDate.getDate() - 1);
                    searchQuery[that.config.searchKey] = { $gt : tDate }  ;

                    //searchQuery._id = { $gt : tDate }  ;

                    break;
                default:
                    searchQuery[that.config.searchKey] = { $regex: that.config.searchText  , $options: 'i' }  ;

                    break;
            }



        }

        return searchQuery ;


        function objectIdWithTimestamp(timestamp)
        {
            // Convert string date to Date object (otherwise assume timestamp is a date)
            if (typeof(timestamp) == 'string') {
                timestamp = new Date(timestamp);
            }

            // Convert date object to hex seconds since Unix epoch
            var hexSeconds = Math.floor(timestamp/1000).toString(16);

            // Create an ObjectId with that hex timestamp
            var constructedObjectId = ObjectId(hexSeconds + "0000000000000000");

            return constructedObjectId ;
        }



        /*

        function objectIdWithTimestamp(timestamp)
        {
            // Convert string date to Date object (otherwise assume timestamp is a date)
            if (typeof(timestamp) == 'string') {
                timestamp = new Date(timestamp);
            }

            // Convert date object to hex seconds since Unix epoch
            var hexSeconds = Math.floor(timestamp/1000).toString(16);

            // Create an ObjectId with that hex timestamp
            var constructedObjectId = ObjectId(hexSeconds + "0000000000000000");

            return constructedObjectId
        }

        db.dev_rdl_masterretailerrecords.find({ _id: { $gt: objectIdWithTimestamp('5/28/2014') } })

        */

    },

    doSearchTechSupportLog: function(searchText, page_no, pageSize) {
        //   dbEnv +'rdl_tech_support_logs'   pageNo, pageSize, enableCachig, successCallBack, failuerCallBack)

        var techSupportMainPanel=  Ext.ComponentQuery.query('#browseLatestLogMainContainer')[0] ;
         techSupportMainPanel.down('#mainLoadingImg').setHidden(false) ;


            var tquery ={'$or':[
                                                    { "company": { $regex: searchText , $options: 'i' } },
                                                    { "crm_user": { $regex: searchText , $options: 'i' } },
                                                    { "problem": { $regex: searchText , $options: 'i' } },
                                                    { "time_start": { $regex: searchText  , $options: 'i' } }
                             ]};



                 RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_tech_support_logs",pageNo:page_no ,pageSize: 50 ,sortBy:{},
                 query:tquery,
                 fields:{}},success,error);



        function success(){
                 techSupportMainPanel.down('#mainLoadingImg').setHidden(true) ;
           console.log(arguments[0].items) ;

             if(page_no > 1 && arguments[0].items.length == 0 ){


                rollBackPageNo() ;
                Ext.Msg.alert("Alert","Next page is not available.",Ext.emptyFn);
                return;
            }


            setTechSupportLogStore(arguments[0].items) ;

             Ext.Viewport.setMasked(false) ;

             techSupportMainPanel.down('#mainPageNoLbl').setHtml(page_no) ;

        }

        function error(){
              Ext.Viewport.setMasked(false) ;

        }

        function setTechSupportLogStore(data){

            var techSupportLogStr = Ext.getStore('TechSupportLogsStore');

            techSupportLogStr.removeAll();
            techSupportLogStr.sync() ;

            techSupportLogStr.setData(data);
            techSupportLogStr.sync();
        }

        function rollBackPageNo(){
             var techSupportLogStr = Ext.getStore('TechSupportLogsStore');
            techSupportLogStr.setPageNo( parseInt(page_no) - 1 ) ;
        }

        /*
            company: "Anji Mountain"
            company_id: ""
            company_logo: ""
            crm_user: "patrickb"
            crm_user_id: ""
            id: "ext-record-1001"
            problem: "Need RugsUSA account #"
            product_id: "4"
            product_name: "RM PLC"
            solution: "123356"
            status: "Completed"
            status_id: "3"
            time_start: "2014-05-08 13:12:48"
            total_time: Object
            vendor_id: ""
        */
    },

    doLoadTechSupport: function(pageNo, pageSize, skipTypeTime, successCallBack, failuerCallBack) {
        console.log("SERACH");

        var that = this ;

        if(skipTypeTime){
            that.config.searchTme = 900 ;

        }


        if(! that.config.isSearch ){

            createTimeOut() ;

        }else{

             that.config.searchTme = 100 ;
        }

        function createTimeOut(){

            that.config.isSearch = true ;

            Ext.Function.defer( onInterval , 100, that);


        }

        function onInterval(){

            that.config.searchTme += 100 ;

            if(that.config.searchTme < that.config.searchTimeOut)  {
                createTimeOut() ;
            } else{

                that.config.searchTme = 0 ;
                startSearch() ;
            }

        }
        ///skipTypeTime


        function startSearch(){
                that.config.isSearch = false ;


                var searchText = Ext.ComponentQuery.query('#brwsTechSupportLogSearchFld')[0].getValue();


                that.doSearchTechSupportLog(searchText,pageNo,pageSize);
        }

    },

    doInitRtSearch: function(searchText) {


        this.config.searchTme = 900 ;

        if(Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem().getItemId() == 'card-retailers')
        {

          var activeTab = Ext.ComponentQuery.query('#retailersTabPanel')[0].getActiveItem().getItemId();
          var store_status = "" ;
            switch(activeTab){

                case "usersTab":
                    store_status = "ACTIVE" ;

                    break;
                case "prospectsTab":
                    store_status = "PROSPECTS" ;
                    break;
                 case "hotProspectsTab":
                    store_status = "HOT_PROSPECTS" ;
                    break;

                case "inactiveTab":
                    store_status = "INACTIVE" ;
                    break;
                case "pendingTab":
                    store_status = "PENDING" ;
                    break;
                case "allRetailerTab":
                    store_status = "" ;
                    this.doSearchForRetailers(searchText ) ;

                    return;

            }


            this.searchRetailerByStatus(searchText,store_status,1 ) ;



        }
        else{
                this.doSearchForProspectRetailersAtVendor(searchText ) ;
        }

    },

    searchRtForBilling: function(searchText, store_status, page_no, productStatusQuery) {
        store_status= "ACTIVE" ;
         var rtMainPanel = Ext.ComponentQuery.query('#billingMainContentPanel')[0] ;
        if(!rtMainPanel){

            return ;
        }

        // rtMainPanel.down('#mainLoadingImg').setHidden(false) ;
        var that = this ;


        if(this.config.isFromRetailerDetail){
        //    this.config.isFromRetailerDetail = false ;
            searchText = this.config.defaultSearchString ;
            store_status = this.config.defaultStoreStatus;

        }

        that.config.searchText = searchText ;

        //isSearch


        if(! that.config.isSearch ){

            createTimeOut() ;

        }else{

             that.config.searchTme = 100 ;
        }

        function createTimeOut(){

            that.config.isSearch = true ;

            Ext.Function.defer( onInterval , 100, that);


        }

        function onInterval(){

            that.config.searchTme += 100 ;

            if(that.config.searchTme < that.config.searchTimeOut)  {
                createTimeOut() ;
            } else{

                that.config.searchTme = 0 ;
                startSearch() ;
            }

        }



        function startSearch(){
                that.config.isSearch = false ;

         rtMainPanel.down('#mainLoadingImg').setHidden(false) ;

            if(store_status && store_status !== "")
             {

                 var tStatus = store_status ;
                 if(store_status=="PROSPECTS"){
                     tStatus = "PROSPECT" ;
                 }else if(store_status == "HOT_PROSPECTS"){
                       tStatus = "HOT_PROSPECT" ;
                 }

                 var pStatus = null ;
                 if(store_status == "INACTIVE"){
                     pStatus =  {'$and':
                      [
                         {"store_products.datalink_status" : tStatus},
                         {"store_products.ecatalog_status" : tStatus},
                         {"store_products.ecommerce_status" :tStatus},
                         {"store_products.irugs_status" : tStatus},
                         {"store_products.rmpro_status" : tStatus}
                      ]} ;
                 }else
                 {
                     pStatus =  {'$or':
                        [
                         {"store_products.datalink_status" : tStatus},
                         {"store_products.ecatalog_status" : tStatus},
                         {"store_products.ecommerce_status" :tStatus},
                         {"store_products.irugs_status" : tStatus},
                         {"store_products.rmpro_status" : tStatus}
                         ]} ;
                 }

        // that.getSearchQuery(store_status) ;
                 var searchQuery =

                      {'$or':[
                                                    { "store_name": { $regex: that.config.searchText  , $options: 'i' } },
                                                    { "store_state": { $regex: that.config.searchText  , $options: 'i' } },
                                                    { "store_city": { $regex: that.config.searchText  , $options: 'i' } },
                                                    { "store_zip": { $regex: that.config.searchText  , $options: 'i' } }
                             ]} ;

                 var tquery = {'$and':[
                    searchQuery,
                     pStatus

                ]} ;


                 RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:page_no ,pageSize: 50 ,sortBy:{"store_name":1},
                 query:tquery,
                fields:{}},success,error);
             }else{

                var searchQuery =  that.getSearchQuery(store_status) ;
                 var tquery = {
                     '$and':
                     [

                    searchQuery

                ]} ;


                 RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:page_no ,pageSize: 50 ,sortBy:{"store_name":1},
                 query:tquery,
                fields:{}},success,error);

             }

        }




        function success(){



             rtMainPanel.down('#mainLoadingImg').setHidden(true) ;
                Ext.Viewport.setMasked(false);

            if(page_no > 1 && arguments[0].items.length ==0 ){


                rollBackStorePageNo() ;

                Ext.Msg.alert("Alert","Next page is not available.",Ext.emptyFn);
                return;
            }
               setRetailersList(arguments[0].items) ;
                setTotalList(arguments[0].count);

          //   RMdatalink.app.getController('PaginationController').setRetailersActiveTabPageNo() ;



        }

        function error(){

             rtMainPanel.down('#mainLoadingImg').setHidden(true) ;
              Ext.Viewport.setMasked(false);
        }

        function rollBackStorePageNo(){

            var activeListStore =  Ext.getStore("billingMasterStore");


            if(activeListStore)
            {
                activeListStore.setPageNo( parseInt(page_no) - 1 ) ;
            }

        }


        function setTotalList(count){


        }

        function setRetailersList(data){

        if(that.config.isFromRetailerDetail){
            that.config.isFromRetailerDetail = false ;
        }else{


        }

            var rtsStore = getStoreByRemovePreviousRetailers();
            rtsStore.setData(data);
            rtsStore.sync();

        // RMdatalink.app.getController('PaginationController').loadDependentStoresonMaster('retailersMaster');
        }

        function removeCurrentStatusRetailers(){
        return ;

        }


        function getStoreByRemovePreviousRetailers(){

             var rtStore =  Ext.getStore("billingMasterStore");


            rtStore.removeAll();
            rtStore.sync();

            return rtStore;
        }

    },

    saveCustomFilter: function(filter) {




        var LoginHandler = RMdatalink.app.getController('LoginHandler') ;

        var _id = LoginHandler.config.userDetails._id ;
         var inhouseMasterStore = Ext.getStore('inhouseMasterStore');

        var dataToUpdate = {
            custom_filter:filter
        };


         RMdatalink.iwa.rdl.doUpdateCollection(inhouseMasterStore, dataToUpdate , _id, success, error);

        function success(){

        }

        function error(){


        }
    },

    initFilter: function() {

        var allRetailerTab = Ext.ComponentQuery.query('#allRetailerTab')[0] ;

        var button = allRetailerTab.down('#customSearchApplyBtn') ;

        var form = button.getParent() ;

        var LoginHandler = RMdatalink.app.getController('LoginHandler') ;


        var filter = LoginHandler.config.userDetails.custom_filter ;

        if(filter)
        {
            form.setValues(filter);
             this.config.doNotSave = true ;
            button.fireEvent('tap',button);
        }
        else{

              RMdatalink.app.getController('PaginationController').initialiseRetailers(true) ;
        }


    }

});