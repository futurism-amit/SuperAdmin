/*
 * File: app/controller/InvoiceController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.InvoiceController', {
    extend: 'Ext.app.Controller',

    config: {
        selectedRetailer: {
            
        },
        product_billing_rec: {
            
        },
        isManualChange: false,
        isSalesCommissionForRmPro: false,
        isSalesCommissionForDatalink: false,
        isFromBilling: false,
        product_type: 'product_rmpro',
        isVip: false,

        control: {
            "selectfield[itemId=invoiceRmProPaymentPrdSlFld]": {
                change: 'oninvoiceRmProPaymentPrdSlFldChange'
            },
            "selectfield[itemId=invoiceDatalinkPaymentPrdSlFld]": {
                change: 'oninvoiceDatalinkPaymentPrdSlFldChange'
            },
            "textfield[action=invoiceRMproCommission]": {
                change: 'oninvoiceRMproCommissionFldChange'
            },
            "textfield[action=invoiceDatalinkCommission]": {
                change: 'oninvoiceDatalinkCommissionFldChange',
                keyup: 'invoiceDatalinkCommissionKeyUp'
            },
            "textfield[action=calRmproBalDue]": {
                change: 'oninvoiceAmmountFldTextfieldChange',
                keyup: 'calRmproBalDueKeyUp'
            },
            "textfield[action=calDatalinkBalDue]": {
                change: 'oninvoiceDatalinkAmmountFldTextfieldChange',
                keyup: 'oncalDatalinkBalDueKeyup'
            },
            "button[itemId=rtDetlViewSubscriptionsBtn]": {
                tap: 'onrtDetlViewSubscriptionsBtnTap'
            },
            "button[itemId=rtBillingSheetSaveBtn]": {
                tap: 'onrtBillingSheetSaveBtnTap'
            },
            "button[itemId=rtBillingSheetCancelBtn]": {
                tap: 'onrtBillingSheetCancelBtnTap'
            },
            "textfield[eventAction=RMPROsubscriptionEdited]": {
                change: 'RMPROsubscriptionEditedChange'
            },
            "textfield[eventAction=DatalinkSubscriptionEdited]": {
                change: 'onDatalinkSubscriptionEditedChange'
            },
            "button[itemId=rtBillingSheetCreateNewInvoiceBtn]": {
                tap: 'onCreateNewInvoiceButtonTap'
            },
            "button[itemId=rtBillingSheetEditCancelBtn]": {
                tap: 'onEditCancelButtonTap'
            }
        }
    },

    oninvoiceRmProPaymentPrdSlFldChange: function(selectfield, newValue, oldValue, eOpts) {


        if(!newValue){
            return;
        }

        var that = this ;
        var product_key = this.config.product_type ;


        if(product_key == "product_rmpro")
        {
            this.setInvoiceRmproDiscount(newValue);
        }
        else{
            this.setInvoiceDatalinkDiscount(newValue);
        }

        /*

        rmProSubscrPaymentStartDateFld
        rmProSubscrPaymentEndDateFld


        */


        if( ! this.config.isManualChange ){

            return ;
        }




        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        var strtDate = new Date(rmProInvoicePanel.down('#rmProSubscrPaymentStartDateFld').getValue()) ;
        var endDate ;
        if(strtDate){

            endDate = strtDate.setMonth(strtDate.getMonth() + parseInt(newValue,0)) ;

            rmProInvoicePanel.down('#rmProSubscrPaymentEndDateFld').setValue(RMdatalink.util.globalMethods.getAMDate(endDate)) ;
        }



        var rtRecord = this.config.selectedRetailer ;

        var dataToUpdate = {

            product_billng :that.config.product_billing_rec  ///n
        };


        var product_rmpro = dataToUpdate.product_billng[product_key] ;   //.product_rmpro ;



        rmProInvoicePanel.down('#billingLiscencePrdLbl').setHtml("<b>Subscription License for " + newValue + " Month(s) From: "+ product_rmpro.payment_period_start + "   To: "+ RMdatalink.util.globalMethods.getAMDate(endDate) +"</b>") ;

          this.handleAmountPaid() ;

        var ratio = parseInt(newValue) / parseInt(product_rmpro.payment_period) ;
        var commisionableAmt =rmProInvoicePanel.down('#invoiceCommissionableAmtFld').getValue() ;
        if(commisionableAmt && commisionableAmt != ""){

            commisionableAmt = parseFloat(commisionableAmt) ;
            commisionableAmt = ratio * commisionableAmt ;

            rmProInvoicePanel.down('#invoiceCommissionableAmtFld').setValue(commisionableAmt);
        }
    },

    oninvoiceDatalinkPaymentPrdSlFldChange: function(selectfield, newValue, oldValue, eOpts) {
        this.setInvoiceDatalinkDiscount(newValue);

    },

    oninvoiceRMproCommissionFldChange: function(textfield, newValue, oldValue, eOpts) {
        this.onRmproCommissionChange() ;
    },

    oninvoiceDatalinkCommissionFldChange: function(textfield, newValue, oldValue, eOpts) {
        this.onDatalinkCommissionChange() ;
    },

    invoiceDatalinkCommissionKeyUp: function(textfield, e, eOpts) {
        this.onDatalinkCommissionChange() ;
    },

    oninvoiceAmmountFldTextfieldChange: function(textfield, newValue, oldValue, eOpts) {
        //this.calculateRMPROBalanceDue() ;
    },

    calRmproBalDueKeyUp: function(textfield, e, eOpts) {
        this.calculateRMPROBalanceDue() ;
    },

    oninvoiceDatalinkAmmountFldTextfieldChange: function(textfield, newValue, oldValue, eOpts) {

        this.calculateDatalinkBalanceDue() ;
    },

    oncalDatalinkBalDueKeyup: function(textfield, e, eOpts) {

        this.calculateDatalinkBalanceDue() ;
    },

    onrtDetlViewSubscriptionsBtnTap: function(button, e, eOpts) {

         RMdatalink.app.getController('RetailerDeatilsDataSet').saveRTProductSetup();

                var selectedUserRecord = RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();
                  if( !( Object.keys(selectedUserRecord).length  )   ){
                        // USER CLICKED ON ADD NEW RETAILER BTN

                        return ;
                    }
        getSubscriptionSheet().show() ;

        this.initInvoice( selectedUserRecord.record) ;


        var rtDtlsLbl = Ext.ComponentQuery.query('#billingSheetRtDtlsLbl')[0];

        var html = "<b>"+ selectedUserRecord.record.data.store_name + "</b>" ;

        rtDtlsLbl.setHtml(html) ;

        function getSubscriptionSheet(){

            if(Ext.ComponentQuery.query("#billingDetailSheet")[0])
            {

             return Ext.ComponentQuery.query("#billingDetailSheet")[0];

            }else{

             return Ext.widget('billingDetailSheet');
            }

        }
    },

    onrtBillingSheetSaveBtnTap: function(button, e, eOpts) {
                        if(RMdatalink.app.getController('InvoiceHistoryController').config.displayGeneratedInvoice )
                        {
                              RMdatalink.app.getController('InvoiceHistoryController').updateInvoice() ;
                        }
                        else{

                            RMdatalink.app.getController('InvoiceController').saveRmProInvoice();
                        }


    },

    onrtBillingSheetCancelBtnTap: function(button, e, eOpts) {

        var that = this ;
        var edtViewBtn = Ext.ComponentQuery.query('#rtBillingSheetEditCancelBtn')[0];

        if(edtViewBtn.getText() != "Edit" )
        {
          Ext.Msg.confirm("Confirm","View in edit mode, do you want to continue ?.",onMessageAns ,this);


            function onMessageAns(action,opt,confirmBox){


                if(action == "yes"){

                 goBack() ;

                }else{


                }


            }

        }else{

            goBack() ;
        }





        function  goBack(){
            if(that.config.isFromBilling)
            {
                RMdatalink.app.getController('UINav').onBackTextTap() ;
            }
            var billSheet = Ext.ComponentQuery.query("#billingDetailSheet")[0];

            billSheet.hide();


            //billSheet.destroy() ;
        }
    },

    RMPROsubscriptionEditedChange: function(textfield, newValue, oldValue, eOpts) {

        if( ! this.config.isManualChange){

            return ;
        }


        var product_key = this.config.product_type ;

        var duration = Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].getValue() ;




        var that = this ;
        var rtRecord = this.config.selectedRetailer ;

        var dataToUpdate = {

            product_billng : that.config.product_billing_rec //rtRecord.data.product_billng
        };

        var product_rmpro = dataToUpdate.product_billng[product_key] ;



        var paymntDurationYr = parseFloat(duration) / 12 ;


        var billingController =  RMdatalink.app.getController('BillingDetailsController') ;


        var discounts = billingController.config.pricingData[3].discount_policy ;
        var discountValue = 0 ;

        console.log(paymntDurationYr) ;


        if(product_key == "product_rmpro"){

                    discountValue = getPercentDiscount() ;
            }


        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        rmProInvoicePanel.down('#invoiceDiscountAppliedFld').setValue(discountValue);


        var subTotal = parseFloat(rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue()) ;


        var totalPayble = parseFloat(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue())  ;



        var totalSaving = (subTotal*  parseFloat(duration)  ) - totalPayble ;

        totalSaving += parseFloat(rmProInvoicePanel.down('#invoiceRmproSaving').getValue()) ;


        totalSaving = totalSaving.toFixed(2) ;
        totalPayble = totalPayble.toFixed(2) ;

        rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(totalPayble);
        rmProInvoicePanel.down('#invoiceTotalSavingFld').setValue(totalSaving);

        //rmProInvoicePanel.down('#invoiceAmmountFld').setValue(totalPayble);

        var due_date = rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').getValue() ;


        Ext.ComponentQuery.query('#billingRMProDtlsLbl')[0].setHtml("Due Date :"+ due_date +" invoice_no: "+product_rmpro.invoice_number+" <b>Total Payble : "+totalPayble + "$</b>" );




        function getPercentDiscount(){

            var discoutToReturn = 0 ;
            for(var i = discounts.length -1  ; i >= 0 ; i-- ){

               var lowerDuration = 0 ;

                if(i > 0){

                    lowerDuration = discounts[i-1].discount_duration ;
                }


               if( paymntDurationYr > lowerDuration && paymntDurationYr >= discounts[i].discount_duration ){

                   discoutToReturn = discounts[i].discount_value ;
                   return discoutToReturn ;
               }

            }

            return discoutToReturn ;
        }

    },

    onDatalinkSubscriptionEditedChange: function(textfield, newValue, oldValue, eOpts) {

        if( ! this.config.isManualChange){

            return ;
        }




        var duration = Ext.ComponentQuery.query('#invoiceDatalinkPaymentPrdSlFld')[0].getValue() ;

        var that = this ;
        var rtRecord = this.config.selectedRetailer ;

        var dataToUpdate = {

            product_billng : that.config.product_billing_rec //rtRecord.data.product_billng
        };

        var product_datalink = dataToUpdate.product_billng.product_datalink ;



        var paymntDurationYr = parseInt(duration) / 12 ;


        var billingController =  RMdatalink.app.getController('BillingDetailsController') ;


        var discounts = billingController.config.pricingData[0].advance_payment_discounts ;
        var discountValue = 0 ;

        console.log(paymntDurationYr) ;



        discountValue = getPercentDiscount() ;

        var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;

        rmProInvoicePanel.down('#invoiceDatalinkDiscountAppliedFld').setValue(discountValue);


        var subTotal = parseFloat(rmProInvoicePanel.down('#invoiceDatalinkSubtotal').getValue()) ;

        var totalPayble = parseFloat(product_datalink.monthly_membership) *  parseFloat(duration) ;



        if(discountValue > 0){

            totalPayble = ((totalPayble * (100-discountValue)) / 100) ;

        }

        var totalSaving = (subTotal*  parseFloat(duration)  ) - totalPayble ;
        totalSaving += parseFloat(rmProInvoicePanel.down('#invoiceDatalinkSaving').getValue()) ;

        totalSaving = totalSaving.toFixed(2) ;
        totalPayble = totalPayble.toFixed(2) ;

        rmProInvoicePanel.down('#invoiceDatalinkTotalPaybleFld').setValue(totalPayble);
        rmProInvoicePanel.down('#invoiceDatalinkTotalSavingFld').setValue(totalSaving);

        //rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').setValue(totalPayble);

        Ext.ComponentQuery.query('#billingDatalinkDtlsLbl')[0].setHtml("Due Date : "+product_datalink.due_date+" invoice_no: "+product_datalink.invoice_number+" <b>Total Payble : "+totalPayble + "$</b>" );

        function getPercentDiscount(){

            var discoutToReturn = 0 ;
            for(var i = discounts.length -1  ; i >= 0 ; i-- ){

               var lowerDuration = 0 ;

                if(i > 0){

                    lowerDuration = discounts[i-1].discount_duration ;
                }


               if( paymntDurationYr > lowerDuration && paymntDurationYr >= discounts[i].discount_duration ){

                   discoutToReturn = discounts[i].discount_value ;
                   return discoutToReturn ;
               }

            }

            return discoutToReturn ;
        }

    },

    onCreateNewInvoiceButtonTap: function(button, e, eOpts) {

        var invoiceType = Ext.ComponentQuery.query('#subscriptionScreenInvoiceTypeSlFld')[0].getValue() ;


                  RMdatalink.app.getController('InvoiceController').config.isSalesCommissionForRmPro = true ;

        RMdatalink.app.getController('InvoiceHistoryController').validateInvoiceForGenerarion(invoiceType) ; //("product_rmpro");
    },

    onEditCancelButtonTap: function(button, e, eOpts) {
        if(button.getText() == "Edit"){
            button.setText("Cancel");
            Ext.ComponentQuery.query('#rtBillingSheetSaveBtn')[0].setHidden(false) ;
        RMdatalink.app.getController('InvoiceController').disableEnableInvoice(false) ;
        }else{
            button.setText("Edit");
            Ext.ComponentQuery.query('#rtBillingSheetSaveBtn')[0].setHidden(true) ;
            RMdatalink.app.getController('InvoiceController').disableEnableInvoice(true) ;

            var historyList = Ext.ComponentQuery.query('#billingDtHistoryListPanel')[0].down('#mainList') ;

            var selection = historyList.getSelection() ;

            if(selection.length > 0){
                historyList.deselectAll() ;

                historyList.select(selection[0],false,false) ;
            }

        }
    },

    showSubscriptionPage: function() {
            var selectedUserRecord = RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();
                  if( !( Object.keys(selectedUserRecord).length  )   ){
                        // USER CLICKED ON ADD NEW RETAILER BTN

                        return ;
                    }
        getSubscriptionSheet().show() ;



        this.initInvoice( selectedUserRecord.record ) ;


        var rtDtlsLbl = Ext.ComponentQuery.query('#billingSheetRtDtlsLbl')[0];

        var html = "<b>"+ selectedUserRecord.record.data.store_name + "</b>" ;




        rtDtlsLbl.setHtml(html) ;

        function getSubscriptionSheet(){

            if(Ext.ComponentQuery.query("#billingDetailSheet")[0])
            {

             return Ext.ComponentQuery.query("#billingDetailSheet")[0];

            }else{

             return Ext.widget('billingDetailSheet');
            }

        }
    },

    initInvoice: function(record) {
        var that = this ;
        this.setIsVip(false);
        function msgHandler(){

            RMdatalink.app.getController('ProductBillingController').config.needToEdit = true ;
            var productSetpBtn = Ext.ComponentQuery.query('#invoiceRMPROProductSetupBtn')[0];
            productSetpBtn.fireEvent('tap',productSetpBtn);

        }
        function initRMpro()
        {



            var dataToUpdate = {

                product_billng : record.data.product_billng
            };
             that.resetRmproInvoice() ;

            if(
               dataToUpdate.product_billng  && dataToUpdate.product_billng.product_rmpro &&
               dataToUpdate.product_billng.product_rmpro.total_payble &&
               dataToUpdate.product_billng.product_rmpro.payment_period &&
               dataToUpdate.product_billng.product_rmpro.due_date
              )
            {

                dataToUpdate.product_billng.product_rmpro.payment_status = "unpaid" ;
                dataToUpdate.product_billng.product_rmpro.invoice_status = "active" ;
                currentInvoices.push(dataToUpdate.product_billng.product_rmpro);

                rmProndex = currentInvoices.length -1 ;

         /*    that.setRMProBillInVoice() ;

                that.setRMProBillingModules() ;

                that.setInvoiceRmproDiscount(Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].getValue());
        */

            } else{

                if(msg){
                    msg += ",RMPro " ;
                }else{
                    msg = "RMPro " ;
                }


            }


        }


        function initVIP()
        {



            var dataToUpdate = {

                product_billng : record.data.product_billng
            };

            var key = 'product_vip';
             that.resetRmproInvoice() ;

            if(dataToUpdate.product_billng  && dataToUpdate.product_billng[key] &&
               dataToUpdate.product_billng[key].total_payble &&
               dataToUpdate.product_billng[key].payment_period &&
               dataToUpdate.product_billng[key].due_date )
            {

                dataToUpdate.product_billng[key].payment_status = "unpaid" ;
                dataToUpdate.product_billng[key].invoice_status = "active" ;
                currentInvoices.push(dataToUpdate.product_billng[key]);

                rmProndex = currentInvoices.length -1 ;
                  that.setDatalinkBillingModules() ;


            } else{

                if(msg){
                    msg += ",VIP " ;
                }else{
                    msg = "VIP " ;
                }


            }
            that.config.product_type = 'product_vip';

        }




        ///////////////////////init datalink


        function initDataLink(){


            var dataToUpdate = {

                product_billng : record.data.product_billng
            };
             that.resetDatalinkInvoice() ;
            if(dataToUpdate.product_billng  && dataToUpdate.product_billng.product_datalink ){
                 dataToUpdate.product_billng.product_datalink.payment_status = "unpaid" ;
                dataToUpdate.product_billng.product_datalink.invoice_status = "active" ;

                currentInvoices.push(dataToUpdate.product_billng.product_datalink);
                that.setDatalinkBillInVoice() ;

                that.setDatalinkBillingModules() ;
                that.setInvoiceDatalinkDiscount(Ext.ComponentQuery.query('#invoiceDatalinkPaymentPrdSlFld')[0].getValue());

            }
            else{

                if(msg){
                    msg += ",Datalink " ;
                }else{
                    msg = "Datalink " ;
                }


            }


        }



        RMdatalink.app.getController('InvoiceHistoryController').config.displayGeneratedInvoice = false ;

        this.config.product_billing_rec  = null;

        this.config.selectedRetailer = record ;

        this.config.product_billing_rec =  record.data.product_billng ;

        var store_products = record.get('store_products') ;
        var msg = null ;

        that.config.isManualChange = false ;
        var currentInvoices = [] ;
        var rmProndex = 0 ;

        if(store_products.datalink_status && store_products.datalink_status == "ACTIVE"){

          //  this.loadVendorBillingData() ;

        //    Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0].setHidden(false);

          //  initDataLink() ;


        }else{

         //    Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0].setHidden(true);
        }


        if( ( store_products.rmpro_status && store_products.rmpro_status == "ACTIVE"  ) ||
            ( store_products.vip_status && store_products.vip_status == "ACTIVE"  )
          )
        {


          //  Ext.ComponentQuery.query('#productRmproInvoicePanel')[0].setHidden(false);


            if(  true &&    ( store_products.vip_status && store_products.vip_status == "ACTIVE"  ) )
            {
                    this.setIsVip(true);
                    initVIP();
            }else{
                    initRMpro() ;
            }




        }
        else
        {
             that.resetRmproInvoice() ;
             function allProductSetup(){

                var rtBillingSheetCancelBtn = Ext.ComponentQuery.query('#rtBillingSheetCancelBtn')[0];
                rtBillingSheetCancelBtn.fireEvent('tap',rtBillingSheetCancelBtn);

            }

             Ext.Msg.alert("Alert", " Please do product setup first. ",allProductSetup);
        }


        if(msg){


            Ext.Msg.alert("Alert", " Please do product setup for "+ msg,msgHandler);

        }

          that.config.isManualChange = true ;





        RMdatalink.app.getController('InvoiceHistoryController').initInvoiceHistory() ;



        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;
            rmProInvoicePanel.down('#InvoiceToNameLbl').setHtml(record.data.store_name );

        var currentInvoiceStr = Ext.getStore('CurrentInvoiceStore') ;
         currentInvoiceStr.removeAll() ;
         currentInvoiceStr.sync() ;

         currentInvoiceStr.setData(currentInvoices);
         currentInvoiceStr.sync() ;

         that.config.currentInvoice = [];// currentInvoices ;

        var currentInvoiceLst = Ext.ComponentQuery.query('#invoiceCurrentSubscriptionsListPanel')[0].down('#mainList');


         //currentInvoiceLst.select(rmProndex,false,false) ;
    },

    setRMProBillingModules: function() {

        console.log(this.config.selectedRetailer) ;

        ///debugger;

        //var rmProBilling = this.config.selectedRetailer.data.product_billng.product_rmpro ;

        var rmProBilling = this.config.product_billing_rec.product_rmpro ;

        var selectedPackageValue = rmProBilling.selected_package ;

        var selectedPackage = null ;

        var billingController =  RMdatalink.app.getController('BillingDetailsController') ;

        if(billingController.config.pricingData){

           var packages = billingController.config.pricingData[3].pricing_policy ;

            for(var i = 0 ;i < packages.length; i++){

                if(packages[i].value == selectedPackageValue){

                    selectedPackage = packages[i];
                    break;
                }
            }

        }else{

            return ;
        }



        Ext.ComponentQuery.query('#invoiceRmProBundelPriceLbl')[0].setHtml(selectedPackage.rm_pro_bundle_price);
        Ext.ComponentQuery.query('#invoiceRmProPackNameLbl')[0].setHtml(selectedPackage.text);

        var subTotal = 0;
        subTotal += parseFloat(selectedPackage.rm_pro_bundle_price) ;
        var actualTotal = 0 ;
        //rm_pro_bundle_price

        var allSelectedModules = rmProBilling.product_modules ;
        console.log("****");
        console.log(selectedPackage);
        console.log(allSelectedModules);


        var selectedRate = rmProBilling.selected_rate ;

        this.showHidePromoPrice(selectedRate);

        var rmProStore = Ext.getStore('products.RMProStore') ;
        var packageStore = Ext.getStore('products.BillingFromPackages') ;
        var addOnsStore = Ext.getStore('products.BillingModuleAddons') ;

        var allRecStr = Ext.getStore('printInvoice.subscribedModulesStore') ;

        allRecStr.removeAll();
        allRecStr.sync();

        addOnsStore.removeAll();
        addOnsStore.sync();

        packageStore.removeAll();
        packageStore.sync();

        for(var i= 0 ; i < allSelectedModules.length; i++){

            var stdPromoPrice = getPackageStdPromoPrice(allSelectedModules[i].module_id) ;
            var rmProRecIndex = rmProStore.findExact('_id',allSelectedModules[i].module_id);
            if(rmProRecIndex == -1){
                 continue;
            }
            var rmProRec = rmProStore.getAt(rmProRecIndex) ;
            actualTotal += parseFloat(allSelectedModules[i].quantity * stdPromoPrice[selectedRate]) ;
            var dataToAdd = {
                    _id:allSelectedModules[i].module_id,
                    module_name:rmProRec.get('module_name'),
                    module_listed_order:rmProRec.get('module_listed_order'),
                    trial:allSelectedModules[i].trial,
                    remark_val:allSelectedModules[i].remark_val,
                    quantity:allSelectedModules[i].quantity,
                    per_month:(allSelectedModules[i].quantity * stdPromoPrice[selectedRate]),
                    module_standard_price :stdPromoPrice.module_standard_price,
                    module_promotional_price:stdPromoPrice.module_promotional_price

                };

            allRecStr.addData(dataToAdd);
            if(checkForInPackage(allSelectedModules[i].module_id)){
                packageStore.addData(dataToAdd);
            }else{

                subTotal += parseFloat(allSelectedModules[i].quantity * stdPromoPrice[selectedRate]) ;
                addOnsStore.addData(dataToAdd);
            }

        }


        addOnsStore.sync();


        packageStore.sync();

        allRecStr.sync();


            console.error(allRecStr);

        this.setRmProPacksAddonsHeight() ;

        function checkForInPackage(module_id){

            var packageModules = selectedPackage.rm_pro_modules;

            for(var i =0 ;i < packageModules.length; i++){

                if(packageModules[i].module_id == module_id){

                    return true;
                }

            }

            return false ;
        }


        function getPackageStdPromoPrice(module_id){

             var packageModules = selectedPackage.data;


            for(var i =0 ;i < packageModules.length; i++){

                if(packageModules[i].product_id == module_id){

                    return {
                         module_promotional_price: packageModules[i].promotional_price,
                         module_standard_price: packageModules[i].standard_price
                    };
                }

            }

            return {
                module_promotional_price: "0",
                module_standard_price: "0"
            } ;
        }

        // /data:

        Ext.ComponentQuery.query('#invoiceRmproSubtotal')[0].setValue( formatNum(subTotal));
        Ext.ComponentQuery.query('#invoiceRmproSaving')[0].setValue( formatNum(actualTotal - subTotal));

        this.setCommisionRmproFlds(rmProBilling);
        this.setInvoiceRmproDiscount("1");
    },

    setDatalinkBillingModules: function() {
        var product_type = this.config.product_type ;


        if(false && this.getIsVip(true))
        {

            var rec =  RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();
                product_type = rec.record.data.product_billng.product_vip;

        }
        console.log(this.config.selectedRetailer) ;


        //var rmProBilling = this.config.selectedRetailer.data.product_billng.product_datalink ;
        var rmProBilling;
                if( this.getIsVip(true))
                {

                    var rec =  RMdatalink.util.globalConfig.getDataInRetailerScreenForSaveOrCancel();
                        //rmProBilling = rec.record.data.product_billng.product_vip;
                        product_type = 'product_vip';

                }
         rmProBilling = this.config.product_billing_rec[product_type] ;


        var billingController =  RMdatalink.app.getController('BillingDetailsController') ;

        var allRecStr = Ext.getStore('printInvoice.subscribedModulesStore') ;

        allRecStr.removeAll();
        allRecStr.sync();


        var subTotal = 0;

        var actualTotal = 0 ;

        var allSelectedModules = rmProBilling.product_modules ;

        console.log(allSelectedModules);

           allRecStr.setData(allSelectedModules);
        this.setRmProPacksAddonsHeight() ;




        for(var i=0; i < allSelectedModules.length ; i++){
            subTotal += parseFloat(allSelectedModules[i].per_month);
            actualTotal += parseFloat(allSelectedModules[i].standard_total);
        }


        Ext.ComponentQuery.query('#invoiceRmproSubtotal')[0].setValue( formatNum(subTotal));
        Ext.ComponentQuery.query('#invoiceRmproSaving')[0].setValue( formatNum(actualTotal - subTotal));

        //this.setCommisionRmproFlds(rmProBilling);
         this.setInvoiceDatalinkDiscount("1");
        //this.setInvoiceRmproDiscount("1");
    },

    showHidePromoPrice: function(selectedRate) {
        var  packListPanel = Ext.ComponentQuery.query('#invoiceRmProPackageListPanel')[0] ;
        var  addOnsListPanel = Ext.ComponentQuery.query('#invoiceRmProAddOnsListPanel')[0] ;

          var packList = packListPanel.down('#billingDetList') ;
          var addOnsList = addOnsListPanel.down('#billingDetList') ;

          var addOnsheaderList = addOnsListPanel.down('#billingDetListHeader') ;
         var packheaderList =    packListPanel.down('#billingDetListHeader') ;

        if(selectedRate == "module_standard_price"){
            addOnsheaderList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main">',
                       '    <div style="width: 6%;">',
                       '        <div style="width: 20px;" data-name="all"></div>',
                       '    </div>',

                       '    <div style="width: 20%;" data-name="module_name">',
                       '        Product Name&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 12%;" data-name="quantity">',
                       '        Qty&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_standard_price">',
                       '        Unit Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_promotional_price">',
                       '        ',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="per_month">',
                       '        Amount&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                       '</div>'
                      )
        );
        addOnsheaderList.refresh();

        addOnsList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main pointerCursor">',
                       '    <div style="width: 6%;">',
                       '    </div>',
                       '    <div style="width: 20%;">{module_name}</div>',
                       '    <div style="width: 12%;">{quantity}</div>',
                       '    <div style="width: 20%;padding-right: 1%;">{module_standard_price}</div>',
                       '    <div style="width: 20%;padding-right: 1%;"></div>',
                       '    <div style="width: 20%;padding-right: 1%;text-align: center;">{per_month}</div>',
                       '</div>'
                      )
        );

          addOnsList.refresh() ;

            //////////////////////////////
                packheaderList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main">',
                       '    <div style="width: 6%;">',
                       '        <div style="width: 20px;" data-name="all"></div>',
                       '    </div>',

                       '    <div style="width: 20%;" data-name="module_name">',
                       '        Product Name&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 12%;" data-name="quantity">',
                       '        Qty&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_standard_price">',
                       '        Unit Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_promotional_price">',
                       '        ',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="per_month">',
                       '        Amount&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                       '</div>'
                      )
        );
        packheaderList.refresh();

        packList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main pointerCursor">',
                       '    <div style="width: 6%;">',
                       '    </div>',
                       '    <div style="width: 20%;">{module_name}</div>',
                       '    <div style="width: 12%;">{quantity}</div>',
                       '    <div style="width: 20%;padding-right: 1%;">{module_standard_price}</div>',
                       '    <div style="width: 20%;padding-right: 1%;"></div>',
                       '    <div style="width: 20%;padding-right: 1%;"></div>',
                       '</div>'
                      )
        );

          packList.refresh() ;

            //////////////////////////////



        }else{


            addOnsheaderList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main">',
                       '    <div style="width: 6%;">',
                       '        <div style="width: 20px;" data-name="all"></div>',
                       '    </div>',

                       '    <div style="width: 20%;" data-name="module_name">',
                       '        Product Name&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 12%;" data-name="quantity">',
                       '        Qty&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_standard_price">',
                       '        Unit Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_promotional_price">',
                       '        Promotional Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="per_month">',
                       '        Amount&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                       '</div>'
                      )
        );
        addOnsheaderList.refresh();

        addOnsList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main pointerCursor">',
                       '    <div style="width: 6%;">',
                       '    </div>',
                       '    <div style="width: 20%;">{module_name}</div>',
                       '    <div style="width: 12%;">{quantity}</div>',
                       '    <div style="width: 20%;padding-right: 1%;">{module_standard_price}</div>',
                       '    <div style="width: 20%;padding-right: 1%;">{module_promotional_price}</div>',
                       '    <div style="width: 20%;padding-right: 1%;text-align: center;">{per_month}</div>',
                       '</div>'
                      )
        );

            addOnsList.refresh() ;
            //////////////////////////////

                packheaderList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main">',
                       '    <div style="width: 6%;">',
                       '        <div style="width: 20px;" data-name="all"></div>',
                       '    </div>',

                       '    <div style="width: 20%;" data-name="module_name">',
                       '        Product Name&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 12%;" data-name="quantity">',
                       '        Qty&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_standard_price">',
                       '        Unit Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_promotional_price">',
                       '        Promotional Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="per_month">',
                       '        Amount&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                       '</div>'
                      )
        );
        packheaderList.refresh();

        packList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main pointerCursor">',
                       '    <div style="width: 6%;">',
                       '    </div>',
                       '    <div style="width: 20%;">{module_name}</div>',
                       '    <div style="width: 12%;">{quantity}</div>',
                       '    <div style="width: 20%;padding-right: 1%;">{module_standard_price}</div>',
                       '    <div style="width: 20%;padding-right: 1%;">{module_promotional_price}</div>',
                       '    <div style="width: 20%;padding-right: 1%;"></div>',
                       '</div>'
                      )
        );

            packList.refresh() ;
        }
    },

    showHideDatalinkPromoPrice: function(selectedRate) {

        var  addOnsListPanel = Ext.ComponentQuery.query('#invoiceDatalinkAddOnsListPanel')[0] ;

          var addOnsList = addOnsListPanel.down('#billingDetList') ;

          var addOnsheaderList = addOnsListPanel.down('#billingDetListHeader') ;
        if(selectedRate == "module_standard_price"){
            addOnsheaderList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main">',
                       '    <div style="width: 6%;">',
                       '        <div style="width: 20px;" data-name="all"></div>',
                       '    </div>',

                       '    <div style="width: 20%;" data-name="module_name">',
                       '        Product Name&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 12%;" data-name="quantity">',
                       '        Qty&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_standard_price">',
                       '        Unit Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_promotional_price">',
                       '        ',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="per_month">',
                       '        Amount&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                       '</div>'
                      )
        );
        addOnsheaderList.refresh();

        addOnsList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main pointerCursor">',
                       '    <div style="width: 6%;">',
                       '    </div>',
                       '    <div style="width: 20%;">{module_name}</div>',
                       '    <div style="width: 12%;">{quantity}</div>',
                       '    <div style="width: 20%;padding-right: 1%;">{module_standard_price}</div>',
                       '    <div style="width: 20%;padding-right: 1%;"></div>',
                       '    <div style="width: 20%;padding-right: 1%;text-align: center;">{per_month}</div>',
                       '</div>'
                      )
        );

          addOnsList.refresh() ;

            //////////////////////////////


            //////////////////////////////



        }else{


            addOnsheaderList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main">',
                       '    <div style="width: 6%;">',
                       '        <div style="width: 20px;" data-name="all"></div>',
                       '    </div>',

                       '    <div style="width: 20%;" data-name="module_name">',
                       '        Product Name&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 12%;" data-name="quantity">',
                       '        Qty&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_standard_price">',
                       '        Unit Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="module_promotional_price">',
                       '        Promotional Price&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                        '    <div style="width: 20%;" data-name="per_month">',
                       '        Amount&nbsp;<img src="resources/images/button_icons/downArrow.png"/>',
                       '    </div>',
                       '</div>'
                      )
        );
        addOnsheaderList.refresh();

        addOnsList.setItemTpl(
            Ext.create('Ext.XTemplate',
                       '<div class="x-rm-listtpl-main pointerCursor">',
                       '    <div style="width: 6%;">',
                       '    </div>',
                       '    <div style="width: 20%;">{module_name}</div>',
                       '    <div style="width: 12%;">{quantity}</div>',
                       '    <div style="width: 20%;padding-right: 1%;">{module_standard_price}</div>',
                       '    <div style="width: 20%;padding-right: 1%;">{module_promotional_price}</div>',
                       '    <div style="width: 20%;padding-right: 1%;text-align: center;">{per_month}</div>',
                       '</div>'
                      )
        );

            addOnsList.refresh() ;
            //////////////////////////////

        }
    },

    setCommisionRmproFlds: function(rmProBilling) {
        //commissionable_ammount

        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        rmProInvoicePanel.down('#invoiceCommissionableAmtFld').setValue(rmProBilling.commissionable_ammount);

        rmProInvoicePanel.down('#invoiceCommissionPercentFld').setValue(rmProBilling.commission_percent);


        //rmProInvoicePanel.down('#invoiceAmmountFld').setValue(rmProBilling.commissionable_ammount);

        var commisson = parseFloat(rmProBilling.commissionable_ammount) * (parseFloat(rmProBilling.commission_percent)/100) ;

        rmProInvoicePanel.down('#invoiceCommissionFld').setValue(commisson);



    },

    setCommisionDatalinkFlds: function(rmProBilling) {
        //commissionable_ammount

        var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;

        rmProInvoicePanel.down('#invoiceDatalinkCommissionableAmtFld').setValue(rmProBilling.commissionable_ammount);

        rmProInvoicePanel.down('#invoiceDatalinkCommissionPercentFld').setValue(rmProBilling.commission_percent);


        //rmProInvoicePanel.down('#invoiceAmmountFld').setValue(rmProBilling.commissionable_ammount);

        var commisson = parseFloat(rmProBilling.commissionable_ammount) * (parseFloat(rmProBilling.commission_percent)/100) ;

        rmProInvoicePanel.down('#invoiceDatalinkCommissionFld').setValue(commisson);



    },

    setInvoiceRmproDiscount: function(duration, isHistoryInvoice) {
        var that = this ;
        var rtRecord = this.config.selectedRetailer ;

        var dataToUpdate = {

            product_billng : that.config.product_billing_rec //rtRecord.data.product_billng
        };

        var product_rmpro = dataToUpdate.product_billng.product_rmpro ;



        var paymntDurationYr = parseFloat(duration) / 12 ;


        var billingController =  RMdatalink.app.getController('BillingDetailsController') ;


        var discounts = billingController.config.pricingData[3].discount_policy ;
        var discountValue = 0 ;

        console.log(paymntDurationYr) ;



        discountValue = getPercentDiscount() ;

        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        rmProInvoicePanel.down('#invoiceDiscountAppliedFld').setValue(discountValue);

        var subTotal = rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue() ;
        subTotal = subTotal.replace(",","");
        subTotal = parseFloat(subTotal) ;


        var totalPayble = parseFloat(product_rmpro.monthly_membership) *   parseFloat(duration)  ;



        if(discountValue > 0){

            totalPayble = ((totalPayble * (100-discountValue)) / 100) ;

        }

        var totalSaving = (subTotal*  parseFloat(duration)  ) - totalPayble ;

        var tempSaving = rmProInvoicePanel.down('#invoiceRmproSaving').getValue();

        tempSaving = tempSaving.replace(",","");
        totalSaving += parseFloat(tempSaving) ;


        totalSaving = totalSaving.toFixed(2) ;
        totalPayble = totalPayble.toFixed(2) ;

        rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(formatNum(totalPayble));
        rmProInvoicePanel.down('#invoiceTotalSavingFld').setValue( formatNum(totalSaving));

        //rmProInvoicePanel.down('#invoiceAmmountFld').setValue(totalPayble);

        var headerHtml = "" ;
        if(isHistoryInvoice){

            headerHtml = "Due Date :"+product_rmpro.due_date+" invoice_no: "+product_rmpro.invoice_number+" <b>Total Payble $ : "+ formatNum(totalPayble) + "</b> <span style='color:red;'> PAID</span>"  ;

        }else{

            headerHtml = "Due Date :"+product_rmpro.due_date+" invoice_no: "+product_rmpro.invoice_number+" <b>Total Payble $ : "+ formatNum(totalPayble) + "$</b>"  ;
        }

        Ext.ComponentQuery.query('#billingRMProDtlsLbl')[0].setHtml(headerHtml);




        function getPercentDiscount(){

            var discoutToReturn = 0 ;
            for(var i = discounts.length -1  ; i >= 0 ; i-- ){

               var lowerDuration = 0 ;

                if(i > 0){

                    lowerDuration = discounts[i-1].discount_duration ;
                }


               if( paymntDurationYr > lowerDuration && paymntDurationYr >= discounts[i].discount_duration ){

                   discoutToReturn = discounts[i].discount_value ;
                   return discoutToReturn ;
               }

            }

            return discoutToReturn ;
        }

    },

    setInvoiceDatalinkDiscount: function(duration, isHistoryInvoice) {

        var product_key = this.config.product_type ;

         duration = Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].getValue() ;




        var that = this ;
        var rtRecord = this.config.selectedRetailer ;

        var dataToUpdate = {

            product_billng : that.config.product_billing_rec //rtRecord.data.product_billng
        };

        var product_rmpro = dataToUpdate.product_billng[product_key] ;



        var paymntDurationYr = parseFloat(duration) / 12 ;


        var billingController =  RMdatalink.app.getController('BillingDetailsController') ;


        var discounts = billingController.config.pricingData[3].discount_policy ;
        var discountValue = 0 ;

        console.log(paymntDurationYr) ;


        if(product_key == "product_rmpro"){

                    discountValue = getPercentDiscount() ;
            }


        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        rmProInvoicePanel.down('#invoiceDiscountAppliedFld').setValue(discountValue);


        var subTotal = parseFloat(rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue()) ;


        var totalPayble = parseFloat(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue())  ;



        var totalSaving = (subTotal*  parseFloat(duration)  ) - totalPayble ;

        totalSaving += parseFloat(rmProInvoicePanel.down('#invoiceRmproSaving').getValue()) ;


        totalSaving = totalSaving.toFixed(2) ;
        totalPayble = totalPayble.toFixed(2) ;

        rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(totalPayble);
        rmProInvoicePanel.down('#invoiceTotalSavingFld').setValue(totalSaving);

        //rmProInvoicePanel.down('#invoiceAmmountFld').setValue(totalPayble);


        this.handleAmountPaid() ;
        var due_date = rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').getValue() ;




        Ext.ComponentQuery.query('#billingRMProDtlsLbl')[0].setHtml("Due Date :"+ due_date +" invoice_no: "+product_rmpro.invoice_number+" <b>Total Payble : "+totalPayble + "$</b>" );




        function getPercentDiscount(){

            var discoutToReturn = 0 ;
            for(var i = discounts.length -1  ; i >= 0 ; i-- ){

               var lowerDuration = 0 ;

                if(i > 0){

                    lowerDuration = discounts[i-1].discount_duration ;
                }


               if( paymntDurationYr > lowerDuration && paymntDurationYr >= discounts[i].discount_duration ){

                   discoutToReturn = discounts[i].discount_value ;
                   return discoutToReturn ;
               }

            }

            return discoutToReturn ;
        }

    },

    updateSalesPersonsList: function(inputFld, record_key) {

        var _id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;

        var rmProBillingStore = Ext.getStore('products.RtSalesPersonStore') ;
        var recIndex = rmProBillingStore.findExact('_id',_id) ;

        if(recIndex == -1){
            return ;
        }


        var record = rmProBillingStore.getAt(recIndex) ;

        record.set(record_key,value) ;

        //rearrangeSalesCommission(rmProBillingStore,value,_id) ;


        function rearrangeSalesCommission(customersStore,value,updated_id){

            var updatedRecIndex = customersStore.findExact('_id',updated_id) ;

            var cStoreLength = customersStore.getData().all.length ;

            var maxCommission = 100 - parseFloat(value,0);

            var priorRecIndex = 0 ;

            if(cStoreLength == 1 ){
                customersStore.getAt(0).set('salesperson_commission',( 100 )) ;
                return ;
            }


            if(updatedRecIndex == 0){

                priorRecIndex = 1 ;
            }

            var equalDivision = (maxCommission / (cStoreLength - 1)).toFixed(2) ;

            equalDivision = parseFloat(equalDivision , 0 ) ;

            for(var i= (cStoreLength  - 1) ; i >= 0; i-- ){

                if(i != updatedRecIndex )
                {
                        if(i == priorRecIndex)
                        {
                            customersStore.getAt(i).set('salesperson_commission',(maxCommission - (equalDivision * (cStoreLength - 2 )) )) ;
                        }else
                        {
                            customersStore.getAt(i).set('salesperson_commission',( equalDivision )) ;
                        }
                }

            }




        }
    },

    updateDatalinkSalesPersonsList: function(inputFld, record_key) {

        var _id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;

        var rmProBillingStore = Ext.getStore('invoice.RtDatalinkSalesPersonStore') ;
        var recIndex = rmProBillingStore.findExact('_id',_id) ;

        if(recIndex == -1){
            return ;
        }


        var record = rmProBillingStore.getAt(recIndex) ;

        record.set(record_key,value) ;



    },

    setRmProPacksAddonsHeight: function() {


        var  packListPanel = Ext.ComponentQuery.query('#invoiceRmProPackageListPanel')[0] ;
        var  addOnsListPanel = Ext.ComponentQuery.query('#invoiceRmProAddOnsListPanel')[0] ;

        //var allRecrdsPanel = Ext.ComponentQuery.query('#allBillingModuleLstPanel')[0];

        var allRecrdsPanel = Ext.ComponentQuery.query('#InvoiceSubscriptionListPanel')[0];
        var allReList = allRecrdsPanel.down('#mainList') ;

          var packList = packListPanel.down('#billingDetList') ;
          var addOnsList = addOnsListPanel.down('#billingDetList') ;
        //getItemHeight()


        var packPanelHeight =  packList.getStore().getData().all.length * (packList.getItemHeight() +6 )+ 50 ;
        var addonsPanelHeight =  addOnsList.getStore().getData().all.length * addOnsList.getItemHeight() + 100 ;

        var allRecPanelHeight =  allReList.getStore().getData().all.length * allReList.getItemHeight() + 50 ;
        allRecrdsPanel.setHeight(allRecPanelHeight);
        Ext.ComponentQuery.query('#allBillingModuleLstPanel')[0].setHeight(allRecPanelHeight);
        var  packListSubPanel = Ext.ComponentQuery.query('#invoiceRmProPackageListSubPanel')[0] ;
        var  addOnsListSubPanel = Ext.ComponentQuery.query('#invoiceRmProAddOnsListSubPanel')[0] ;

        packListSubPanel.setHeight(packPanelHeight);
        addOnsListSubPanel.setHeight(addonsPanelHeight);


        var defaultText = "" ; // "width: 100% !important; margin: 10px 0px 0px 20px !important;" ;

        if(addOnsList.getStore().getData().all.length == 0){

            Ext.ComponentQuery.query('#invoiceRmProAddOnsListPanel')[0].getEl().dom.style.cssText = defaultText+"visibility: collapse;" ;
        }else{

            Ext.ComponentQuery.query('#invoiceRmProAddOnsListPanel')[0].getEl().dom.style.cssText = defaultText+"visibility: visible;" ;

        }

        //this.hiedeAllProductsPanel();

        var billingDtlForm = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;


        var finalTotalHeight = billingDtlForm.down('#invoiceRmproBillingFldsPanel').getHeight() +  billingDtlForm.down('#rmProextradtl').getHeight() + billingDtlForm.down('#InvoiceSubscriptionListPanel').getHeight() ;

        finalTotalHeight += 520 ;

        billingDtlForm.setHeight(finalTotalHeight) ;
    },

    setDatalinkPacksAddonsHeight: function() {


        var  addOnsListPanel = Ext.ComponentQuery.query('#invoiceDatalinkAddOnsListPanel')[0] ;

          var addOnsList = addOnsListPanel.down('#billingDetList') ;
        //getItemHeight( )


        var addonsPanelHeight =  addOnsList.getStore().getData().all.length * addOnsList.getItemHeight() + 100 ;

        var  addOnsListSubPanel = Ext.ComponentQuery.query('#invoiceDatalinkAddOnsListSubPanel')[0] ;


        addOnsListSubPanel.setHeight(addonsPanelHeight);

    },

    onRmproCommissionChange: function() {


        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        var amount = rmProInvoicePanel.down('#invoiceCommissionableAmtFld').getValue();
        var commission = rmProInvoicePanel.down('#invoiceCommissionPercentFld').getValue();


        var commissionValue = parseFloat(amount) * parseFloat(commission)/100 ;

        rmProInvoicePanel.down('#invoiceCommissionFld').setValue(commissionValue.toFixed(2) );
    },

    onDatalinkCommissionChange: function() {


        var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;

        var amount = rmProInvoicePanel.down('#invoiceDatalinkCommissionableAmtFld').getValue();
        var commission = rmProInvoicePanel.down('#invoiceDatalinkCommissionPercentFld').getValue();


        var commissionValue = parseFloat(amount) * parseFloat(commission)/100 ;
        rmProInvoicePanel.down('#invoiceDatalinkCommissionFld').setValue(commissionValue.toFixed(2) );
    },

    resetRmproInvoice: function() {
         Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].setValue(null) ;
         var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;


         var txtFlds = rmProInvoicePanel.query('textfield');

         for(var i=0; i<txtFlds.length ; i++){

            txtFlds[i].setValue("");
         }




         Ext.ComponentQuery.query('#billingRMProDtlsLbl')[0].setHtml("Total Payble : 0$" );

         rmProInvoicePanel.down('#InvoicemonthlySubscriptionLbl').setHtml(" $ ") ;
         rmProInvoicePanel.down('#billingLiscencePrdLbl').setHtml("<b>Subscription License for </b>") ;

         Ext.getStore('printInvoice.subscribedModulesStore').removeAll() ;

         rmProInvoicePanel.down('#InvoiceDueDateNoLbl').setHtml("Due Date:&nbsp;&nbsp;" );
         rmProInvoicePanel.down('#InvoiceNoLbl').setHtml("Invoice #:&nbsp;&nbsp;" );

         rmProInvoicePanel.down('#invoiceTopDateNoLbl').setHtml("Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" ) ;

         rmProInvoicePanel.down('#rtInvoiceCreatedUserDtlsLbl').setHtml("") ;
         rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHtml("") ;

         Ext.getStore('products.RtSalesPersonStore').removeAll() ;
         Ext.getStore('InvoicePaymentsStore').removeAll() ;
    },

    resetDatalinkInvoice: function() {
        Ext.ComponentQuery.query('#invoiceDatalinkPaymentPrdSlFld')[0].setValue(1) ;
        var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;


        var txtFlds = rmProInvoicePanel.query('textfield');

        for(var i=0; i<txtFlds.length ; i++){

            txtFlds[i].setValue("");
        }


        Ext.ComponentQuery.query('#billingDatalinkDtlsLbl')[0].setHtml("Total Payble : 0$" );

    },

    saveRmProInvoice: function(isGenerateInvoice, product_name) {


        var that = this ;



        var masterStore = Ext.getStore('retailersMaster');
        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        var rtRecord = this.config.selectedRetailer ;

        if(rtRecord.data.store_products.rmpro_status && rtRecord.data.store_products.rmpro_status == "ACTIVE" && rtRecord.data.product_billng.product_rmpro){
            //Continue execution

        }else{
            //check for datalink and break execution
             that.saveDatalinkInvoice(isGenerateInvoice,product_name) ;
             return ;
        }

        var dataToUpdate = {

            product_billng : that.config.product_billing_rec   //rtRecord.data.product_billng
        };

        var product_rmpro = dataToUpdate.product_billng.product_rmpro ;


        product_rmpro.commission_percent = rmProInvoicePanel.down('#invoiceCommissionPercentFld').getValue() ;
        product_rmpro.commissionable_ammount = rmProInvoicePanel.down('#invoiceCommissionableAmtFld').getValue() ;

        product_rmpro.sales_persons = getSalesPersons() ;

        product_rmpro.total_payble = rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue() ;
        product_rmpro.payment_period = rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() ;


        product_rmpro.past_due = rmProInvoicePanel.down('#invoicePastDueFld').getValue() ;
        product_rmpro.balance_due = rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue() ;

        product_rmpro.pay_date = rmProInvoicePanel.down('#invoicePayDateFld').getValue() ;
        product_rmpro.paid_by = rmProInvoicePanel.down('#invoicePaidByFld').getValue() ;
        product_rmpro.payment_method_detail = rmProInvoicePanel.down('#invoicePaymentDetailFld').getValue() ;
        product_rmpro.cc_approval = rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue() ;

        product_rmpro.proccessed_by = rmProInvoicePanel.down('#invoiceProcessedByFld').getValue() ;
        product_rmpro.date = rmProInvoicePanel.down('#invoiceRMProDateFld').getValue() ;

        product_rmpro.ammount_paying = rmProInvoicePanel.down('#invoiceAmmountFld').getValue() ;


        product_rmpro.payment_note = rmProInvoicePanel.down('#rmProPaymentNoteFld').getValue() ;

        product_rmpro.payment_period_start = rmProInvoicePanel.down('#rmProSubscrPaymentStartDateFld').getValue() ;

        product_rmpro.payment_period_end  =  rmProInvoicePanel.down('#rmProSubscrPaymentEndDateFld').getValue() ;

        product_rmpro.due_date  = rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').getValue() ;


        product_rmpro.payments= getArrayDataFromStore(Ext.getStore('InvoicePaymentsStore'));



        var printInvoicePaidStampImg = Ext.ComponentQuery.query('#printInvoicePaidStampImg')[0] ;

        if(printInvoicePaidStampImg.getHidden()){

            product_rmpro.payment_status = "unpaid" ;
        }else{

            product_rmpro.payment_status = "paid" ;
        }




        dataToUpdate.product_billng.product_rmpro = product_rmpro ;


        console.error(dataToUpdate) ;



        Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });

           RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);


                    function suc(){

                        that.config.product_billing_rec   =  dataToUpdate.product_billng ;

                        rtRecord.set('product_billng',dataToUpdate.product_billng);

                        if(isGenerateInvoice && that.config.isSalesCommissionForRmPro){

                           that.config.isSalesCommissionForRmPro = false ;
                           that.updateSalesPersonCommission("product_rmpro") ;
                        }
                      that.saveDatalinkInvoice(isGenerateInvoice,product_name) ;

                        //  Ext.Viewport.setMasked(false);
                       //  RMdatalink.app.getController('UINav').onBackTextTap() ;

                    }
                    function err(){
                            Ext.Viewport.setMasked(false);
                    }






        function getSalesPersons(){
            return getArrayDataFromStore(Ext.getStore('products.RtSalesPersonStore'));
        }



          function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }
    },

    saveDatalinkInvoice: function(isGenerateInvoice, product_name) {


        var that = this ;

        var masterStore = Ext.getStore('retailersMaster');
        var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;

        var rtRecord = this.config.selectedRetailer ;


        if(rtRecord.data.store_products.datalink_status && rtRecord.data.store_products.datalink_status == "ACTIVE" && rtRecord.data.product_billng.product_datalink){
            //Continue execution

        }else{

                        Ext.Viewport.setMasked(false);
                           if(isGenerateInvoice){
                                generateInvoice() ;
                           }
                        else{

                            var billSheet = Ext.ComponentQuery.query("#billingDetailSheet")[0];

                            billSheet.hide();


                        }



             return ;
        }


        var dataToUpdate = {

            product_billng : that.config.product_billing_rec // rtRecord.data.product_billng
        };

        var product_datalink = dataToUpdate.product_billng.product_datalink ;


        product_datalink.commission_percent = rmProInvoicePanel.down('#invoiceDatalinkCommissionPercentFld').getValue() ;
        product_datalink.commissionable_ammount = rmProInvoicePanel.down('#invoiceDatalinkCommissionableAmtFld').getValue() ;

        product_datalink.sales_persons = getSalesPersons() ;

        product_datalink.total_payble = rmProInvoicePanel.down('#invoiceDatalinkTotalPaybleFld').getValue() ;
        product_datalink.payment_period = rmProInvoicePanel.down('#invoiceDatalinkPaymentPrdSlFld').getValue() ;


        product_datalink.past_due = rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').getValue() ;
        product_datalink.balance_due = rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').getValue() ;

        product_datalink.pay_date = rmProInvoicePanel.down('#invoiceDatalinkPayDateFld').getValue() ;
        product_datalink.paid_by = rmProInvoicePanel.down('#invoiceDatalinkPaidByFld').getValue() ;
        product_datalink.payment_method_detail = rmProInvoicePanel.down('#invoiceDatalinkPaymentDetailFld').getValue() ;
        product_datalink.cc_approval = rmProInvoicePanel.down('#invoiceDatalinkCCApprovalFld').getValue() ;

        product_datalink.proccessed_by = rmProInvoicePanel.down('#invoiceDatalinkProcessedByFld').getValue() ;
        product_datalink.date = rmProInvoicePanel.down('#invoiceDatalinkDateFld').getValue() ;

        product_datalink.ammount_paying = rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').getValue() ;





        product_datalink.payment_note = rmProInvoicePanel.down('#datalinkPaymentNoteFld').getValue() ;

        product_datalink.payment_period_start = rmProInvoicePanel.down('#datalinkSubscrPaymentStartDateFld').getValue() ;

        product_datalink.payment_period_end  =  rmProInvoicePanel.down('#datalinkSubscrPaymentEndDateFld').getValue() ;

        product_datalink.due_date  = rmProInvoicePanel.down('#datalinkSubscrPaymentDueDateFld').getValue() ;






        dataToUpdate.product_billng.product_datalink = product_datalink ;


        console.error(dataToUpdate) ;



        Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });

           RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);


                    function suc(){

                        that.config.product_billing_rec   =  dataToUpdate.product_billng ;

                        rtRecord.set('product_billng',dataToUpdate.product_billng);

                        if(isGenerateInvoice  && that.config.isSalesCommissionForDatalink ){

                             that.config.isSalesCommissionForDatalink = false ;
                            that.updateSalesPersonCommission("product_datalink") ;
                        }

                        Ext.Viewport.setMasked(false);
                           if(isGenerateInvoice){
                                generateInvoice() ;
                           }
                        else{

                            var billSheet = Ext.ComponentQuery.query("#billingDetailSheet")[0];

                           // billSheet.hide();

                           // billSheet.destroy() ;

                                //RMdatalink.app.getController('UINav').onBackTextTap() ;
                        }


                    }
                    function err(){
                            Ext.Viewport.setMasked(false);
                    }






        function getSalesPersons(){
            return getArrayDataFromStore(Ext.getStore('invoice.RtDatalinkSalesPersonStore'));
        }



          function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }


            function generateInvoice(){

                if(isGenerateInvoice){


                      RMdatalink.app.getController('InvoiceHistoryController').validateInvoiceForGenerarion(product_name);

                }
            }
    },

    setRMProBillInVoice: function() {


        var that = this ;

        that.setRMproProductBilling() ;

        var masterStore = Ext.getStore('retailersMaster');
        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        var rtRecord = this.config.selectedRetailer ;
        var accNo = rtRecord.data.account_no ;
        var dataToUpdate = {

            product_billng :that.config.product_billing_rec  ///n
        };

        var product_rmpro = dataToUpdate.product_billng.product_rmpro ;


         rmProInvoicePanel.down('#invoiceCommissionPercentFld').setValue(product_rmpro.commission_percent) ;
         rmProInvoicePanel.down('#invoiceCommissionableAmtFld').setValue(product_rmpro.commissionable_ammount) ;



         rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').setValue(product_rmpro.payment_period) ;

        rmProInvoicePanel.down('#billingLiscencePrdLbl').setHtml("<b>Subscription License for " + product_rmpro.payment_period + " Month(s) From: "+ product_rmpro.payment_period_start + "   To: "+product_rmpro.payment_period_end +"</b>") ;



         rmProInvoicePanel.down('#invoicePastDueFld').setValue(product_rmpro.past_due) ;
         rmProInvoicePanel.down('#invoiceBalanceDueFld').setValue(product_rmpro.balance_due) ;


         rmProInvoicePanel.down('#invoicePaidByFld').setValue(product_rmpro.paid_by ) ;
         rmProInvoicePanel.down('#invoicePaymentDetailFld').setValue(product_rmpro.payment_method_detail) ;
         rmProInvoicePanel.down('#invoiceCCApprovalFld').setValue(product_rmpro.cc_approval ) ;

         rmProInvoicePanel.down('#invoiceProcessedByFld').setValue(product_rmpro.proccessed_by) ;
         rmProInvoicePanel.down('#invoiceRMProDateFld').setValue(product_rmpro.date ) ;

         rmProInvoicePanel.down('#invoiceAmmountFld').setValue(product_rmpro.ammount_paying ) ;

        //product_rmpro.monthly_membership printinvoiceDueDateFld
        var totalPayble = parseFloat(product_rmpro.monthly_membership) * (product_rmpro.payment_period ? parseInt(product_rmpro.payment_period) : 1) ;

        rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(formatNum(totalPayble)) ;

        var salesPersonsStore = Ext.getStore('products.RtSalesPersonStore') ;

        salesPersonsStore.removeAll();
        salesPersonsStore.sync();

        salesPersonsStore.setData(product_rmpro.sales_persons);
        salesPersonsStore.sync();


         console.log("********************************");
         console.log(product_rmpro);

         rmProInvoicePanel.down('#rmProPaymentNoteFld').setValue(product_rmpro.payment_note ) ;

         rmProInvoicePanel.down('#rmProSubscrPaymentStartDateFld').setValue(product_rmpro.payment_period_start ) ;

         rmProInvoicePanel.down('#rmProSubscrPaymentEndDateFld').setValue(product_rmpro.payment_period_end ) ;

         rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').setValue(product_rmpro.due_date ) ;


         rmProInvoicePanel.down('#InvoiceDueDateNoLbl').setHtml("Due Date:&nbsp;&nbsp;"+ product_rmpro.due_date );
         rmProInvoicePanel.down('#InvoiceNoLbl').setHtml("Invoice #:&nbsp;&nbsp;"+ accNo + "-" + product_rmpro.invoice_number );

        var pDt =  product_rmpro.due_date ; //product_rmpro.invoice_id ;
        /* if(product_rmpro.pay_date && product_rmpro.pay_date !=""){
            pDt = product_rmpro.pay_date ;
        } */
         rmProInvoicePanel.down('#invoiceTopDateNoLbl').setHtml("Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ pDt ) ;
        rmProInvoicePanel.down('#invoicePayDateFld').setValue(pDt) ;
         rmProInvoicePanel.down('#InvoicemonthlySubscriptionLbl').setHtml(" $ " + formatNum(product_rmpro.monthly_membership) ) ;

         var ddTime = product_rmpro.created_date_stamp  ;
         var user =  product_rmpro.created_by  ;
         if(ddTime && user)
         {
            rmProInvoicePanel.down('#rtInvoiceCreatedUserDtlsLbl').setHtml(user + " - " +ddTime ) ;
         }

         var lastUpdatedDdTime = product_rmpro.last_created_date_stamp  ;
         var lastUpdatedUser =  product_rmpro.last_created_by  ;
         if(lastUpdatedDdTime && lastUpdatedUser)
         {
            rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHtml(lastUpdatedUser + " - " +lastUpdatedDdTime ) ;
         }

        if(!product_rmpro.payments ||  product_rmpro.payments.length == 0){

            rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHidden(true)  ;

        }else{

            rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHidden(false)  ;

        }
    },

    setDatalinkBillInVoice: function() {

        var product_type = this.config.product_type ;
        var that = this ;

        that.setDatalinkProductBilling();



        var masterStore = Ext.getStore('retailersMaster');
        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        var rtRecord = this.config.selectedRetailer ;
        var accNo = rtRecord.data.account_no ;
        var dataToUpdate = {

            product_billng :that.config.product_billing_rec  ///n
        };

        var product_rmpro = dataToUpdate.product_billng[product_type] ;
        var totalPayble = parseFloat(product_rmpro.monthly_membership) * (product_rmpro.payment_period ? parseInt(product_rmpro.payment_period) : 1) ;

        var salesPersonsStore = Ext.getStore('products.RtSalesPersonStore') ;

        salesPersonsStore.removeAll();
        salesPersonsStore.sync();

        salesPersonsStore.setData(product_rmpro.sales_persons);
        salesPersonsStore.sync();


        var pDt =  product_rmpro.due_date ; //product_rmpro.invoice_id ;

        rmProInvoicePanel.down('#invoiceCommissionPercentFld').setValue(product_rmpro.commission_percent) ;
        rmProInvoicePanel.down('#invoiceCommissionableAmtFld').setValue(product_rmpro.commissionable_ammount) ;
        rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').setValue(product_rmpro.payment_period) ;
        rmProInvoicePanel.down('#billingLiscencePrdLbl').setHtml("<b>Subscription License for " + product_rmpro.payment_period + " Month(s) From: "+ product_rmpro.payment_period_start + "   To: "+product_rmpro.payment_period_end +"</b>") ;
        rmProInvoicePanel.down('#invoicePastDueFld').setValue(product_rmpro.past_due) ;
        rmProInvoicePanel.down('#invoiceBalanceDueFld').setValue(product_rmpro.balance_due) ;
        rmProInvoicePanel.down('#invoicePaidByFld').setValue(product_rmpro.paid_by ) ;
        rmProInvoicePanel.down('#invoicePaymentDetailFld').setValue(product_rmpro.payment_method_detail) ;
        rmProInvoicePanel.down('#invoiceCCApprovalFld').setValue(product_rmpro.cc_approval ) ;
        rmProInvoicePanel.down('#invoiceProcessedByFld').setValue(product_rmpro.proccessed_by) ;
        rmProInvoicePanel.down('#invoiceRMProDateFld').setValue(product_rmpro.date ) ;
        rmProInvoicePanel.down('#invoiceAmmountFld').setValue(product_rmpro.ammount_paying ) ;
        //product_rmpro.monthly_membership printinvoiceDueDateFld
        rmProInvoicePanel.down('#invoiceTotalPaybleFld').setValue(formatNum(totalPayble)) ;
        rmProInvoicePanel.down('#rmProPaymentNoteFld').setValue(product_rmpro.payment_note ) ;
        rmProInvoicePanel.down('#rmProSubscrPaymentStartDateFld').setValue(product_rmpro.payment_period_start ) ;
        rmProInvoicePanel.down('#rmProSubscrPaymentEndDateFld').setValue(product_rmpro.payment_period_end ) ;
        rmProInvoicePanel.down('#rmProSubscrPaymentDueDateFld').setValue(product_rmpro.due_date ) ;
        rmProInvoicePanel.down('#InvoiceDueDateNoLbl').setHtml("Due Date:&nbsp;&nbsp;"+ product_rmpro.due_date );
        rmProInvoicePanel.down('#InvoiceNoLbl').setHtml("Invoice #:&nbsp;&nbsp;"+ accNo + "-" + product_rmpro.invoice_number );
        rmProInvoicePanel.down('#invoiceTopDateNoLbl').setHtml("Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ pDt ) ;
        rmProInvoicePanel.down('#invoicePayDateFld').setValue(pDt) ;
        rmProInvoicePanel.down('#InvoicemonthlySubscriptionLbl').setHtml(" $ " + formatNum(product_rmpro.monthly_membership) ) ;



        console.log("********************************");
        console.log(product_rmpro);





        /* if(product_rmpro.pay_date && product_rmpro.pay_date !=""){
            pDt = product_rmpro.pay_date ;
        } */

        var ddTime = product_rmpro.created_date_stamp  ;
        var user =  product_rmpro.created_by  ;
        if(ddTime && user)
        {
            rmProInvoicePanel.down('#rtInvoiceCreatedUserDtlsLbl').setHtml(user + " - " +ddTime ) ;
        }

        var lastUpdatedDdTime = product_rmpro.last_created_date_stamp  ;
        var lastUpdatedUser =  product_rmpro.last_created_by  ;
        if(lastUpdatedDdTime && lastUpdatedUser)
        {
            rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHtml(lastUpdatedUser + " - " +lastUpdatedDdTime ) ;
        }

        if(!product_rmpro.payments ||  product_rmpro.payments.length == 0){

            rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHidden(true)  ;

        }else{

            rmProInvoicePanel.down('#rtInvoiceLastUpdatedUserDtlsLbl').setHidden(false)  ;

        }
    },

    setDatalinkBillInVoice_: function() {


        var that = this ;

        that.setDatalinkProductBilling();

        var masterStore = Ext.getStore('retailersMaster');
        var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;

        var rtRecord = this.config.selectedRetailer ;

        var dataToUpdate = {

            product_billng : that.config.product_billing_rec  //rtRecord.data.product_billng
        };

        var product_datalink = dataToUpdate.product_billng.product_datalink ;


         rmProInvoicePanel.down('#invoiceDatalinkCommissionPercentFld').setValue(product_datalink.commission_percent) ;
         rmProInvoicePanel.down('#invoiceDatalinkCommissionableAmtFld').setValue(product_datalink.commissionable_ammount) ;



         rmProInvoicePanel.down('#invoiceDatalinkPaymentPrdSlFld').setValue(product_datalink.payment_period) ;



         rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').setValue(product_datalink.past_due) ;
         rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').setValue(product_datalink.balance_due) ;

         rmProInvoicePanel.down('#invoiceDatalinkPayDateFld').setValue(product_datalink.pay_date ) ;
         rmProInvoicePanel.down('#invoiceDatalinkPaidByFld').setValue(product_datalink.paid_by ) ;
         rmProInvoicePanel.down('#invoiceDatalinkPaymentDetailFld').setValue(product_datalink.payment_method_detail) ;
         rmProInvoicePanel.down('#invoiceDatalinkCCApprovalFld').setValue(product_datalink.cc_approval ) ;

         rmProInvoicePanel.down('#invoiceDatalinkProcessedByFld').setValue(product_datalink.proccessed_by) ;
         rmProInvoicePanel.down('#invoiceDatalinkDateFld').setValue(product_datalink.date ) ;

        var salesPersonsStore = Ext.getStore('invoice.RtDatalinkSalesPersonStore') ;

        var totalPayble = parseFloat(product_datalink.monthly_membership) * (product_datalink.payment_period ? parseFloat(product_datalink.payment_period) : 1) ;

        rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').setValue(totalPayble) ;


         rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').setValue(product_datalink.ammount_paying ) ;

        salesPersonsStore.removeAll();
        salesPersonsStore.sync();

        salesPersonsStore.setData(product_datalink.sales_persons);
        salesPersonsStore.sync();


        rmProInvoicePanel.down('#datalinkPaymentNoteFld').setValue(product_datalink.payment_note ) ;

        rmProInvoicePanel.down('#datalinkSubscrPaymentStartDateFld').setValue(product_datalink.payment_period_start ) ;

        rmProInvoicePanel.down('#datalinkSubscrPaymentEndDateFld').setValue(product_datalink.payment_period_end ) ;

        rmProInvoicePanel.down('#datalinkSubscrPaymentDueDateFld').setValue(product_datalink.due_date ) ;



    },

    setRMProTotalPayble: function() {
        //monthly_membership
    },

    displayInvoice: function(button, type) {




            if(Ext.ComponentQuery.query('#InvoicePage')[0]){

                Ext.ComponentQuery.query('#InvoicePage')[0].destroy() ;
            }






            var printTimeout = setTimeout(function(){


                                           Ext.widget('InvoicePage').show();

                                            clearTimeout(printTimeout);


            },100);
    },

    setPrintInvoiceListHeight: function() {


        var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;


        var rtlr = this.config.selectedRetailer.data ;


        var addr = "";
        var cityZip = "" ;
        var strPhone = "" ;
        if(rtlr.locations && rtlr.locations.length > 0 && rtlr.locations[0].address){

               cityZip = rtlr.locations[0].city + ", "+rtlr.locations[0].state + " " + rtlr.locations[0].zip ;
            addr = rtlr.locations[0].address ;

            if(rtlr.locations[0].phone && rtlr.locations[0].phone !="")
            {
                 strPhone = "Phone :"+ rtlr.locations[0].phone  ;
            }else{
                 strPhone = "Phone :"+rtlr.store_phone ;
            }

        }else{
            cityZip = rtlr.store_city + ", "+rtlr.store_state + " " + rtlr.store_zip ;
            addr = rtlr.store_address_line1 ;
            strPhone = "Phone :"+rtlr.store_phone ;
        }

        invoiceForm.down('#printInvoiceToNameLbl').setHtml(rtlr.store_name);
        invoiceForm.down('#printInvoiceToAddr1Lbl').setHtml(addr);

        invoiceForm.down('#printInvoiceToCityStZipLbl').setHtml(cityZip);

        invoiceForm.down('#printInvoiceToPhoneLbl').setHtml(strPhone);


        return ;


        var  packListPanel =invoiceForm.down('#printInvoicePackageListPanel') ;
        var  addOnsListPanel = invoiceForm.down('#printInvoiceAddOnsListPanel') ;

        var subListPanel = invoiceForm.down('#printInvoiceSubscriptionListPanel') ;

          var packList = packListPanel.down('#mainList') ;
          var addOnsList = addOnsListPanel.down('#mainList') ;

        var subList = subListPanel.down('#mainList') ;
        //getItemHeight( )


        var packPanelHeight = ( packList.getStore().getData().all.length * (packList.getItemHeight() +  6 ) )+ 62 ;
        var addonsPanelHeight =  addOnsList.getStore().getData().all.length * (addOnsList.getItemHeight() + 5) + 32 ;


        var  packListSubPanel = invoiceForm.down('#printInvoicePackgsList') ;
        var  addOnsListSubPanel = invoiceForm.down('#printInvoiceAddonsList');

        packListSubPanel.setHeight(packPanelHeight);
        addOnsListSubPanel.setHeight(addonsPanelHeight);

        subListPanel.setHeight(packPanelHeight + addonsPanelHeight);

        var divs = Ext.DomQuery.select('div[class="x-list-item-first x-list-header-wrap x-list-item x-stretched x-list-item-tpl x-list-item-relative"]') ;


        for(var i=0; i< divs.length; i++)
        {
            divs[i].style["cssText"]= "min-height: 22px !important;";
        }

        divs = [] ;

        divs = Ext.DomQuery.select('div[class="x-list-item x-stretched x-list-item-tpl x-list-item-relative"]') ;


        for(var i=0; i< divs.length; i++)
        {
           divs[i].style["cssText"]= "min-height: 22px !important;";
        }


    },

    setRMproInvoiceToPrint: function() {

        var that = this ;


        /*
        var packModuleStore = Ext.getStore('printInvoice.packModulesStore');
        var addOnsModuleStore = Ext.getStore('printInvoice.addOnsModulesStore');

        var rmProPackModuleStore = Ext.getStore('products.BillingFromPackages');
        var rmProAddOnsModuleStore = Ext.getStore('products.BillingModuleAddons');

        var invoiceModulesStore = Ext.getStore('printInvoice.subscribedModulesStore');


        packModuleStore.removeAll();
        packModuleStore.sync();

        addOnsModuleStore.removeAll();
        addOnsModuleStore.sync();

        invoiceModulesStore.removeAll();
        invoiceModulesStore.sync();


        var modules = [] ;

        modules = modules.concat(getArrayDataFromStore(rmProPackModuleStore)) ;

        modules = modules.concat(getArrayDataFromStore(rmProAddOnsModuleStore)) ;

        console.error(modules);

        invoiceModulesStore.setData( modules );
        invoiceModulesStore.sync();



        packModuleStore.setData(getArrayDataFromStore(rmProPackModuleStore));
        packModuleStore.sync();



        addOnsModuleStore.setData(getArrayDataFromStore(rmProAddOnsModuleStore));
        addOnsModuleStore.sync();

        */
        var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;

        //invoiceForm.down('#productPackageNameLabel').setHtml(Ext.ComponentQuery.query('#invoiceRmProPackNameLbl')[0].getHtml()) ;

        //invoiceForm.down('#productPackageBundlePriceLbl').setMargin("0 100 0 0");
        //invoiceForm.down('#productPackageBundlePriceLbl').setHtml(Ext.ComponentQuery.query('#invoiceRmProBundelPriceLbl')[0].getHtml()) ;

        var product_key = this.config.product_type ;
        if(product_key == "product_rmpro")
        {
           this.setRmProPrintInvoiceDetails() ;
           invoiceForm.down('#printInvoiceProductModulesLbl').setHtml(Ext.ComponentQuery.query('#invoiceRmProPackNameLbl')[0].getHtml() + " + "+getArrayDataFromStore(rmProAddOnsModuleStore).length +" Add ons") ;

        }
        else{

            this.setDatalinkPrintInvoiceDetails() ;
          //  invoiceForm.down('#printInvoiceProductModulesLbl').setHtml(Ext.ComponentQuery.query('#invoiceRmProPackNameLbl')[0].getHtml() + " + "+ getArrayDataFromStore(rmProAddOnsModuleStore).length +" Add ons") ;

        }



         Ext.Function.defer(setHeight, 100, that);





        function setHeight(){

            that.setPrintInvoiceListHeight();
        }



          function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }
    },

    setDatalinkInvoiceToPrint: function() {
        var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;
        var that = this ;

        var packModuleStore = Ext.getStore('printInvoice.packModulesStore');
        var addOnsModuleStore = Ext.getStore('printInvoice.addOnsModulesStore');

        var invoiceModulesStore = Ext.getStore('printInvoice.subscribedModulesStore');

        var datalinkAddOnsModuleStore = Ext.getStore('invoice.DatalinkModuleAddons');

        packModuleStore.removeAll();
        packModuleStore.sync();

        addOnsModuleStore.removeAll();
        addOnsModuleStore.sync();

        invoiceModulesStore.removeAll();
        invoiceModulesStore.sync();

        var modules = [] ;

        modules.push(getArrayDataFromStore(datalinkAddOnsModuleStore)) ;

        addOnsModuleStore.setData(getArrayDataFromStore(datalinkAddOnsModuleStore));
        addOnsModuleStore.sync();


        //Ext.ComponentQuery.query('#printInvoicePackageListPanel')[0].setHidden(true);

        this.setDatalinkPrintInvoiceDetails() ;


        invoiceForm.down('#printInvoiceProductModulesLbl').setHtml(getArrayDataFromStore(datalinkAddOnsModuleStore).length +" Modules") ;


         Ext.Function.defer(setHeight, 100, that);




        function setHeight(){

            that.setPrintInvoiceListHeight();
             invoiceForm.down('#printInvoicePackgsList').setHeight(32) ;
        }





          function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }
    },

    setDatalinkPrintInvoiceDetails: function() {

        var product_type = this.config.product_type ;

        var rmProBilling = this.config.product_billing_rec[product_type] ; // this.config.selectedRetailer.data.product_billng.product_rmpro ;




        var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;



        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;


        var subTotal = parseInt(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue()) ;
         subTotal = subTotal + parseInt(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) ;




         invoiceForm.down('#printinvoiceIdTxtfld').setValue( this.getMMYYYY(rmProBilling.due_date) );

         invoiceForm.down('#printinvoiceDueDateFld').setValue( rmProBilling.due_date );

        //invoiceForm.down('#printinvoiceIdTxtfld').setValue( rmProBilling.invoice_id );

        invoiceForm.down('#printinvoiceNofld').setValue( rmProBilling.invoice_number );
        invoiceForm.down('#printinvoiceTopDateFld').setValue(  rmProInvoicePanel.down('#invoicePayDateFld').getValue() ) ;



         invoiceForm.down('#printInvoiceTotalAmtFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) );




        invoiceForm.down('#printInvoicePaymentMethodLbl').setHtml("Payment Method : " + rmProInvoicePanel.down('#invoicePaidByFld').getValue() );


        invoiceForm.down('#printInvoiceCCApprovalLbl').setHtml("CC Approval #: " +  rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue()  );


         invoiceForm.down('#printinvoiceBottomDateFld').setValue(rmProInvoicePanel.down('#invoicePayDateFld').getValue() );//rmProInvoicePanel.down('#invoiceRMProDateFld').getValue()) ;



        invoiceForm.down('#invoicePrintSavingFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue())) ;



        invoiceForm.down('#printInvoiceProductLbl').setHtml("<b>RM-PRO</b>") ; //invoiceTotalPaybleFld

        invoiceForm.down('#printInvoiceTotalPaybleLbl').setHtml('<center><b>Invoice Amount : $ '+ formatNum(rmProInvoicePanel.down('#invoiceAmmountFld').getValue()) +'</b><br/> Balance Due : $ '+

                                                                formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue()) +'<center>') ;


         //invoiceForm.down('#printInvoiceSubTotalAmtFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue()) );

        invoiceForm.down('#printInvoiceSubTotalAmtFld').setValue( formatNum(subTotal) );

        invoiceForm.down('#printInvoiceFromLbl').setValue( rmProBilling.payment_period_start ) ;
        invoiceForm.down('#printInvoiceToLbl').setValue(rmProBilling.payment_period_end) ;;

        //
        //invoiceForm.down('#printInvoiceProductDurationLbl').setHtml( rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() + ' Month ( ' + rmProBilling.payment_period_start + ' to '+ rmProBilling.payment_period_end + ' )') ;

        invoiceForm.down('#printInvoiceProductDurationLbl').setHtml( rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() + ' Month(s) ') ;

        if(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())
        {
         invoiceForm.down('#printInvoiceBalanceDueFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue()) );
        }else{
            invoiceForm.down('#printInvoiceBalanceDueFld').setValue("0.00");
        }

        invoiceForm.down('#printInvoiceAmtPaidFld').setValue(  formatNum(rmProInvoicePanel.down('#invoiceAmmountFld').getValue()) ) ;



         invoiceForm.down('#printIDueDateNoLbl').setHtml("Due Date:&nbsp;"+ rmProBilling.due_date );
          invoiceForm.down('#printInvoiceNoLbl').setHtml("Invoice #:&nbsp;&nbsp;"+rmProBilling.invoice_number );
        invoiceForm.down('#printITopDateNoLbl').setHtml("Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ rmProInvoicePanel.down('#invoicePayDateFld').getValue() ) ;


                                if(! rmProBilling.payment_status){

                                    invoiceForm.down('#printInvoicePaidStampImg').setHidden(false) ;
                               }

                               if( rmProBilling.payment_status == "paid"){
                                   invoiceForm.down('#printInvoicePaidStampImg').setHidden(false) ;
                               }else{
                                   invoiceForm.down('#printInvoicePaidStampImg').setHidden(true) ;
                               }



        var allRecrdsPanel = Ext.ComponentQuery.query('#printInvoiceSubscriptionListPanel')[0];
        var allReList = allRecrdsPanel.down('#mainList') ;


        var allRecPanelHeight =  allReList.getStore().getData().all.length * allReList.getItemHeight() + 50 ;
        allRecrdsPanel.setHeight(allRecPanelHeight);


        // invoiceForm.down('#printInvoiceSubTotalAmtFldLbl').setHtml("Total:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$" + formatNum(subTotal) );

        invoiceForm.down('#printInvoiceSubTotalAmtFldLbl').setHtml('Total:<div style="text-align:right;margin-top: -14px;"> $' + formatNum(subTotal) + '</div>' );


        invoiceForm.down('#invoicePrintSavingFldLbl').setHtml('Discount:<div style="text-align:right;margin-top: -14px;"> $'+ formatNum(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue()) + '</div>') ;
         invoiceForm.down('#printInvoiceTotalAmtFldLbl').setHtml('Amount Due:<div style="text-align:right;margin-top: -14px;"> $' + formatNum(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue())  + '</div>');

        if(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())
        {
            invoiceForm.down('#printInvoiceBalanceDueFldLbl').setHtml('Balance Due:<div style="text-align:right;margin-top: -14px;"> $'+ formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())  + '</div>');
        }else{
            invoiceForm.down('#printInvoiceBalanceDueFldLbl').setHtml('Balance Due:<div style="text-align:right;margin-top: -14px;"> $0.00' + '</div>');
        }

        var note = rmProInvoicePanel.down('#rmProPaymentNoteFld').getValue() ;

        if(note && note != ""){
            invoiceForm.down('#printInvoiceNoteFld').setHidden(false) ;
            invoiceForm.down('#printInvoiceNoteFld').setValue(note) ;
        }else{
            invoiceForm.down('#printInvoiceNoteFld').setHidden(true) ;
        }


    },

    setRmProPrintInvoiceDetails: function() {
        var rmProBilling = this.config.product_billing_rec.product_rmpro ; // this.config.selectedRetailer.data.product_billng.product_rmpro ;




        var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;



        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;


        var subTotal = parseInt(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue()) ;
         subTotal = subTotal + parseInt(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) ;




         invoiceForm.down('#printinvoiceIdTxtfld').setValue( this.getMMYYYY(rmProBilling.due_date) );

         invoiceForm.down('#printinvoiceDueDateFld').setValue( rmProBilling.due_date );

        //invoiceForm.down('#printinvoiceIdTxtfld').setValue( rmProBilling.invoice_id );

        invoiceForm.down('#printinvoiceNofld').setValue( rmProBilling.invoice_number );
        invoiceForm.down('#printinvoiceTopDateFld').setValue(  rmProInvoicePanel.down('#invoicePayDateFld').getValue() ) ;



         invoiceForm.down('#printInvoiceTotalAmtFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) );




        invoiceForm.down('#printInvoicePaymentMethodLbl').setHtml("Payment Method : " + rmProInvoicePanel.down('#invoicePaidByFld').getValue() );


        invoiceForm.down('#printInvoiceCCApprovalLbl').setHtml("CC Approval #: " +  rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue()  );


         invoiceForm.down('#printinvoiceBottomDateFld').setValue(rmProInvoicePanel.down('#invoicePayDateFld').getValue() );//rmProInvoicePanel.down('#invoiceRMProDateFld').getValue()) ;



        invoiceForm.down('#invoicePrintSavingFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue())) ;



        invoiceForm.down('#printInvoiceProductLbl').setHtml("<b>RM-PRO</b>") ; //invoiceTotalPaybleFld

        invoiceForm.down('#printInvoiceTotalPaybleLbl').setHtml('<center><b>Invoice Amount : $ '+ formatNum(rmProInvoicePanel.down('#invoiceAmmountFld').getValue()) +'</b><br/> Balance Due : $ '+

                                                                formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue()) +'<center>') ;


         //invoiceForm.down('#printInvoiceSubTotalAmtFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceRmproSubtotal').getValue()) );

        invoiceForm.down('#printInvoiceSubTotalAmtFld').setValue( formatNum(subTotal) );

        invoiceForm.down('#printInvoiceFromLbl').setValue( rmProBilling.payment_period_start ) ;
        invoiceForm.down('#printInvoiceToLbl').setValue(rmProBilling.payment_period_end) ;;

        //
        //invoiceForm.down('#printInvoiceProductDurationLbl').setHtml( rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() + ' Month ( ' + rmProBilling.payment_period_start + ' to '+ rmProBilling.payment_period_end + ' )') ;

        invoiceForm.down('#printInvoiceProductDurationLbl').setHtml( rmProInvoicePanel.down('#invoiceRmProPaymentPrdSlFld').getValue() + ' Month(s) ') ;

        if(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())
        {
         invoiceForm.down('#printInvoiceBalanceDueFld').setValue( formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue()) );
        }else{
            invoiceForm.down('#printInvoiceBalanceDueFld').setValue("0.00");
        }

        invoiceForm.down('#printInvoiceAmtPaidFld').setValue(  formatNum(rmProInvoicePanel.down('#invoiceAmmountFld').getValue()) ) ;



         invoiceForm.down('#printIDueDateNoLbl').setHtml("Due Date:&nbsp;"+ rmProBilling.due_date );
          invoiceForm.down('#printInvoiceNoLbl').setHtml("Invoice #:&nbsp;&nbsp;"+rmProBilling.invoice_number );
        invoiceForm.down('#printITopDateNoLbl').setHtml("Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+ rmProInvoicePanel.down('#invoicePayDateFld').getValue() ) ;


                                if(! rmProBilling.payment_status){

                                    invoiceForm.down('#printInvoicePaidStampImg').setHidden(false) ;
                               }

                               if( rmProBilling.payment_status == "paid"){
                                   invoiceForm.down('#printInvoicePaidStampImg').setHidden(false) ;
                               }else{
                                   invoiceForm.down('#printInvoicePaidStampImg').setHidden(true) ;
                               }



        var allRecrdsPanel = Ext.ComponentQuery.query('#printInvoiceSubscriptionListPanel')[0];
        var allReList = allRecrdsPanel.down('#mainList') ;


        var allRecPanelHeight =  allReList.getStore().getData().all.length * allReList.getItemHeight() + 50 ;
        allRecrdsPanel.setHeight(allRecPanelHeight);


        // invoiceForm.down('#printInvoiceSubTotalAmtFldLbl').setHtml("Total:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$" + formatNum(subTotal) );

        invoiceForm.down('#printInvoiceSubTotalAmtFldLbl').setHtml('Total:<div style="text-align:right;margin-top: -14px;"> $' + formatNum(subTotal) + '</div>' );


        invoiceForm.down('#invoicePrintSavingFldLbl').setHtml('Discount:<div style="text-align:right;margin-top: -14px;"> $'+ formatNum(rmProInvoicePanel.down('#invoiceTotalSavingFld').getValue()) + '</div>') ;
         invoiceForm.down('#printInvoiceTotalAmtFldLbl').setHtml('Amount Due:<div style="text-align:right;margin-top: -14px;"> $' + formatNum(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue())  + '</div>');

        if(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())
        {
            invoiceForm.down('#printInvoiceBalanceDueFldLbl').setHtml('Balance Due:<div style="text-align:right;margin-top: -14px;"> $'+ formatNum(rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue())  + '</div>');
        }else{
            invoiceForm.down('#printInvoiceBalanceDueFldLbl').setHtml('Balance Due:<div style="text-align:right;margin-top: -14px;"> $0.00' + '</div>');
        }

        var note = rmProInvoicePanel.down('#rmProPaymentNoteFld').getValue() ;

        if(note && note != ""){
            invoiceForm.down('#printInvoiceNoteFld').setHidden(false) ;
            invoiceForm.down('#printInvoiceNoteFld').setValue(note) ;
        }else{
            invoiceForm.down('#printInvoiceNoteFld').setHidden(true) ;
        }


    },

    hiedeAllProductsPanel: function() {
        return ;
          var component = Ext.ComponentQuery.query('#invoiceRMPROHideShowImg')[0] ;



            var rmProBillngPanel =  component.getParent().getParent().down('#invoiceRmproBillingFldsPanel');
          if(! rmProBillngPanel.getHidden())
          {
            var childs = component.getParent().getParent().getItems().items ;
            for(var i=0;i< childs.length; i++){

                if(childs[i].config.xtype =="panel" ){
                        var child = childs[i] ;
                        child.setHidden(! child.getHidden());
                        if( child.getHidden()){

                           component.setSrc('resources/images/labelHeader/rightArrow.png');
                        }else{
                            component.setSrc('resources/images/labelHeader/downArrow.png') ;
                        }

                }
            }




          }
         rmProBillngPanel.setHidden(true);
             if(rmProBillngPanel.getHidden())
            {
                Ext.ComponentQuery.query('#productRmproInvoicePanel')[0].setHeight(30);
            }else{

                Ext.ComponentQuery.query('#productRmproInvoicePanel')[0].setHeight(600);
            }


        this.hideDatalinkPanels() ;
    },

    hideDatalinkPanels: function() {
        return ;

          var component = Ext.ComponentQuery.query('#invoiceDatalinkHideShowImg')[0] ;


           var rmProBillngPanel =  component.getParent().getParent().down('#invoiceDatalinkBillingFldsPanel');

          if(! rmProBillngPanel.getHidden())
          {


            var childs = component.getParent().getParent().getItems().items ;
            for(var i=0;i< childs.length; i++){

                if(childs[i].config.xtype =="panel"){
                        var child = childs[i] ;
                       if(child.getItemId() != 'invoiceDatalinkPackageListPanel'){
                        child.setHidden(! child.getHidden());
                        if( child.getHidden()){

                           component.setSrc('resources/images/labelHeader/rightArrow.png');
                        }else{
                            component.setSrc('resources/images/labelHeader/downArrow.png') ;
                        }
                       }

                }
            }

            rmProBillngPanel.setHidden(! rmProBillngPanel.getHidden());
          //   rmProBillngPanel.setScrollable(! rmProBillngPanel.getHidden()) ;

            if(rmProBillngPanel.getHidden())
            {
                Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0].setHeight(30);
            }else{

                Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0].setHeight(750);
            }
          }
    },

    setRMProPanelHeight: function() {

        var mainPanel = Ext.ComponentQuery.query('#billingDetailsMainTabPanel')[0] ;

        var rmProPanel = mainPanel.down('#productRmproInvoicePanel');

        var height = 0 ;

        height += rmProPanel.down('#invoiceRMProHideShowFldSet').getHeight();
        height += rmProPanel.down('#invoiceRmProPackageListPanel').getHeight();
        height += rmProPanel.down('#invoiceRmProAddOnsListPanel').getHeight();
        height += rmProPanel.down('#invoiceRmproBillingFldsPanel').getHeight();

        rmProPanel.setHeight(height);
    },

    setDataLinkPanelHeight: function() {
        /*
        productDatalinkInvoicePanel

        invoiceDatalinkHideShowFldSet
        invoiceDatalinkPackageListPanel
        invoiceDatalinkAddOnsListPanel
        invoiceDatalinkBillingFldsPanel
        */


        var mainPanel = Ext.ComponentQuery.query('#billingDetailsMainTabPanel')[0] ;

        var datalinkPanel = mainPanel.down('#productDatalinkInvoicePanel');

        var height = 0 ;

        height += datalinkPanel.down('#invoiceDatalinkHideShowFldSet').getHeight();
        height += datalinkPanel.down('#invoiceDatalinkPackageListPanel').getHeight();
        height += datalinkPanel.down('#invoiceDatalinkAddOnsListPanel').getHeight();
        height += datalinkPanel.down('#invoiceDatalinkBillingFldsPanel').getHeight();

        datalinkPanel.setHeight(height);
    },

    calculateRMPROBalanceDue: function() {
        return ;

        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        var totalPayble = parseFloat(rmProInvoicePanel.down('#invoiceTotalPaybleFld').getValue()) ;

        var pastDue = rmProInvoicePanel.down('#invoicePastDueFld').getValue() ? parseFloat(rmProInvoicePanel.down('#invoicePastDueFld').getValue(),0) : 0 ;

        var ammountPaying = rmProInvoicePanel.down('#invoiceAmmountFld').getValue() ? parseFloat(rmProInvoicePanel.down('#invoiceAmmountFld').getValue(),0) : 0;

        var prevPaidAmt = 0 ;

        var payments =  this.config.product_billing_rec.product_rmpro.payments ;

        if(payments){

            for(var i =0 ; i < payments.length ; i ++){

                prevPaidAmt += parseFloat( payments[i].ammount_paying , 0 ) ;

            }
        }




        var balanceDue = ( totalPayble + pastDue) - (ammountPaying + prevPaidAmt );
        if(balanceDue)
        {
            balanceDue = balanceDue.toFixed(2) ;

            rmProInvoicePanel.down('#invoiceBalanceDueFld').setValue(balanceDue) ;
        }else{

            rmProInvoicePanel.down('#invoiceBalanceDueFld').setValue(null) ;
        }
    },

    calculateDatalinkBalanceDue: function() {

        var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;

        var totalPayble = parseFloat(rmProInvoicePanel.down('#invoiceDatalinkTotalPaybleFld').getValue()) ;

        var pastDue = rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').getValue() ? parseFloat(rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').getValue(),0) : 0;

        var ammountPaying = rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').getValue()? parseFloat(rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').getValue(),0) : 0 ;


        var prevPaidAmt = 0 ;

        var payments =  this.config.product_billing_rec.product_datalink.payments ;

        if(payments){

            for(var i =0 ; i < payments.length ; i ++){

                prevPaidAmt += parseFloat( payments[i].ammount_paying , 0 ) ;

            }
        }



        var balanceDue = ( totalPayble + pastDue) - ( ammountPaying + prevPaidAmt );

        if(balanceDue)
        {
            balanceDue = balanceDue.toFixed(2) ;

            rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').setValue(balanceDue) ;
        }else{
            rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').setValue(null) ;
        }
    },

    hideShowPrintPaymentInfo: function(flag) {




        var invoiceForm = Ext.ComponentQuery.query('#invoiceToPrint')[0] ;

        invoiceForm.down('#printInvoicePaidStampImg').setHidden(flag);
        invoiceForm.down('#printInoicePaymentDtlsPanel').setHidden(flag);
    },

    loadVendorBillingData: function() {
        //  RMdatalink.util.globalConfig.setDataToShowInSettingWindow(

        //      {

        //          record:this.config.selectedRetailer

        //      }
        //  );



        //RMdatalink.app.getController('RetailerDeatilsDataSet').loadActiveVendorsForRetailers() ;

        RMdatalink.app.getController('ProductBillingController').setDatalinkModules() ;
    },

    getMMYYYY: function(date) {
        if(date)
        {
            var dObj = new Date(date) ;

            return (dObj.getMonth()+1) + "/"+ dObj.getFullYear() ;
        }else{

            return "" ;
        }
    },

    saveRMPROPartialPayment: function() {



        var that = this ;



        var masterStore = Ext.getStore('retailersMaster');
        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;

        var rtRecord = this.config.selectedRetailer ;

        if(rtRecord.data.store_products.rmpro_status && rtRecord.data.store_products.rmpro_status == "ACTIVE" && rtRecord.data.product_billng.product_rmpro){
            //Continue execution

        }else{
            //check for datalink and break execution
             that.saveDatalinkInvoice(isGenerateInvoice,product_name) ;
             return ;
        }

        var dataToUpdate = {

            product_billng : that.config.product_billing_rec   //rtRecord.data.product_billng
        };

        var product_rmpro = dataToUpdate.product_billng.product_rmpro ;



        product_rmpro.past_due = rmProInvoicePanel.down('#invoicePastDueFld').getValue() ;
        product_rmpro.balance_due = rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue() ;

        product_rmpro.pay_date = rmProInvoicePanel.down('#invoicePayDateFld').getValue() ;
        product_rmpro.paid_by = rmProInvoicePanel.down('#invoicePaidByFld').getValue() ;
        product_rmpro.payment_method_detail = rmProInvoicePanel.down('#invoicePaymentDetailFld').getValue() ;
        product_rmpro.cc_approval = rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue() ;

        product_rmpro.proccessed_by = rmProInvoicePanel.down('#invoiceProcessedByFld').getValue() ;
        product_rmpro.date = rmProInvoicePanel.down('#invoiceRMProDateFld').getValue() ;

        product_rmpro.ammount_paying = rmProInvoicePanel.down('#invoiceAmmountFld').getValue() ;


        dataToUpdate.product_billng.product_rmpro = product_rmpro ;


        console.error(dataToUpdate) ;



        Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });

           RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);


                    function suc(){

                        rtRecord.set('product_billng',dataToUpdate.product_billng);


                    }
                    function err(){
                            Ext.Viewport.setMasked(false);
                    }








          function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }
    },

    addRmProPartialPayment: function() {

        var that = this ;

        var rmProInvoicePanel = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;




        var masterStore = Ext.getStore('retailersMaster');

        var rtRecord = this.config.selectedRetailer ;



        var dataToUpdate = {

            product_billng : that.config.product_billing_rec   //rtRecord.data.product_billng
        };


        var product_rmpro = dataToUpdate.product_billng.product_rmpro ;




        var temp = {} ;

        temp.past_due = rmProInvoicePanel.down('#invoicePastDueFld').getValue() ;
        temp.balance_due = rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue() ;

        temp.pay_date = rmProInvoicePanel.down('#invoicePayDateFld').getValue() ;
        temp.paid_by = rmProInvoicePanel.down('#invoicePaidByFld').getValue() ;
        temp.payment_method_detail = rmProInvoicePanel.down('#invoicePaymentDetailFld').getValue() ;
        temp.cc_approval = rmProInvoicePanel.down('#invoiceCCApprovalFld').getValue() ;

        temp.proccessed_by = rmProInvoicePanel.down('#invoiceProcessedByFld').getValue() ;
        temp.date = rmProInvoicePanel.down('#invoiceRMProDateFld').getValue() ;

        temp.ammount_paying = rmProInvoicePanel.down('#invoiceAmmountFld').getValue() ;


        var payments = dataToUpdate.product_billng.product_rmpro.payments ;

        if(payments && payments instanceof Array){

        }else{

            payments = [] ;
        }


        payments.push(temp);

        dataToUpdate.product_billng.product_rmpro.payments = payments ;

        /*
                var prevBalanceDue =  rmProInvoicePanel.down('#invoiceBalanceDueFld').getValue() ;

                if(prevBalanceDue && prevBalanceDue != ""){

                    prevBalanceDue = parseFloat(prevBalanceDue,0) ;
                }else{

                    prevBalanceDue = 0 ;
                }
                console.error(temp.ammount_paying) ;
                prevBalanceDue = prevBalanceDue - parseFloat(temp.ammount_paying,0) ;

                dataToUpdate.product_billng.product_rmpro.balance_due = prevBalanceDue ;

        */



        console.error(dataToUpdate) ;


        Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });

           RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);


                    function suc(){

                        rtRecord.set('product_billng',dataToUpdate.product_billng);


                        that.config.product_billing_rec = dataToUpdate.product_billng ;

                        that.setRMproProductBilling() ;

                        Ext.Viewport.setMasked(false);

                    }
                    function err(){
                            Ext.Viewport.setMasked(false);
                    }





    },

    setRMproProductBilling: function() {
        var that = this ;

        var paymentsStore = Ext.getStore('InvoicePaymentsStore') ;

        paymentsStore.removeAll();
        paymentsStore.sync() ;

        var payments =  that.config.product_billing_rec.product_rmpro.payments ;


        if(payments){

            paymentsStore.setData(payments);
            paymentsStore.sync() ;
        }


        this.handleAmountPaid() ;
    },

    addDatalinkProductBilling: function() {

        var that = this ;

        var rmProInvoicePanel = Ext.ComponentQuery.query('#productDatalinkInvoicePanel')[0] ;


        var masterStore = Ext.getStore('retailersMaster');

        var rtRecord = this.config.selectedRetailer ;



        var dataToUpdate = {

            product_billng : that.config.product_billing_rec   //rtRecord.data.product_billng
        };


        var product_datalink = dataToUpdate.product_billng.product_datalink ;




        var temp = {} ;


        temp.past_due = rmProInvoicePanel.down('#invoiceDatalinkPastDueFld').getValue() ;
        temp.balance_due = rmProInvoicePanel.down('#invoiceDatalinkBalanceDueFld').getValue() ;

        temp.pay_date = rmProInvoicePanel.down('#invoiceDatalinkPayDateFld').getValue() ;
        temp.paid_by = rmProInvoicePanel.down('#invoiceDatalinkPaidByFld').getValue() ;
        temp.payment_method_detail = rmProInvoicePanel.down('#invoiceDatalinkPaymentDetailFld').getValue() ;
        temp.cc_approval = rmProInvoicePanel.down('#invoiceDatalinkCCApprovalFld').getValue() ;

        temp.proccessed_by = rmProInvoicePanel.down('#invoiceDatalinkProcessedByFld').getValue() ;
        temp.date = rmProInvoicePanel.down('#invoiceDatalinkDateFld').getValue() ;

        temp.ammount_paying = rmProInvoicePanel.down('#invoiceDatalinkAmmountFld').getValue() ;




        var payments = dataToUpdate.product_billng.product_datalink.payments ;

        if(payments && payments instanceof Array){

        }else{

            payments = [] ;
        }


        payments.push(temp);

        dataToUpdate.product_billng.product_datalink.payments = payments ;




        console.error(dataToUpdate) ;


        Ext.Viewport.setMasked( {
                        xtype: 'loadmask'
                    });

           RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate , rtRecord.get('_id'), suc, err);


                    function suc(){

                        rtRecord.set('product_billng',dataToUpdate.product_billng);


                        that.config.product_billing_rec = dataToUpdate.product_billng ;

                        that.setDatalinkProductBilling() ;

                        Ext.Viewport.setMasked(false);

                    }
                    function err(){
                            Ext.Viewport.setMasked(false);
                    }





    },

    setDatalinkProductBilling: function() {

        var product_type =  this.config.product_type;

        var that = this ;

        var paymentsStore = Ext.getStore('InvoicePaymentsStore') ;

        paymentsStore.removeAll();
        paymentsStore.sync() ;

        var payments =  that.config.product_billing_rec[product_type].payments ;


        if(payments){

            paymentsStore.setData(payments);
            paymentsStore.sync() ;
        }


        this.handleAmountPaid() ;
    },

    updateSalesPersonCommission: function(product) {

        var that = this ;

        var productBilling = that.config.product_billing_rec ;

        var productRecord  =  productBilling[product] ;

        var salesPersons =  productRecord.sales_persons ;

        var rtRecord = this.config.selectedRetailer ;




        var totalCommission = 0 ;
        var commissionableAmt = productRecord.commissionable_ammount ;
        var commissionPercent = productRecord.commission_percent ;


        if(! commissionableAmt || ! commissionPercent  || commissionableAmt=="" ||  commissionPercent == "" ){

            return ;
        }



        totalCommission = (parseFloat(commissionableAmt,0) / 100 ) * parseFloat(commissionPercent,0) ;

        var inhouseMasterStore = Ext.getStore('inhouseMasterStore');
        var index = -1 ;

        doUpdateSalesCommission() ;

        function doUpdateSalesCommission(){

            index++ ;

            if(index < salesPersons.length){

                findInhouseUser() ;

            }else{

                console.log("update success.");
            }
        }


        function updateSalesPerson(prevCommissionData){


                  var finalCommission = (parseFloat(totalCommission,0) / 100 ) * parseFloat(salesPersons[index].salesperson_commission,0) ;

                  finalCommission = finalCommission.toFixed(2);

                  var dataToAdd =
                  {

                        commissionable_ammount	: commissionableAmt ,
                        pay_date				: productRecord.pay_date,
                        invoice_number			: productRecord.invoice_number,
                        store_name				: rtRecord.data.store_name,
                        store_id				: rtRecord.data._id,
                        salesperson_commission  : salesPersons[index].salesperson_commission,
                        commisson				: finalCommission,
                        product					: product

                  };

            if(! prevCommissionData || ! prevCommissionData.push ){

                prevCommissionData = [] ;

            }

                  prevCommissionData.push(dataToAdd) ;
                  var dataToUpdate =
                  {
                      commission_data :  prevCommissionData
                  };


                  RMdatalink.iwa.rdl.doUpdateCollection(inhouseMasterStore, dataToUpdate , salesPersons[index]._id , updateSuccess, updateError ) ;







        }

        function updateSuccess(){

            doUpdateSalesCommission() ;
        }


        function updateError(){

            doUpdateSalesCommission() ;
        }


        function findInhouseUser(){


            RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_inhouserecords",pageNo:1,pageSize: 50 ,sortBy:{},
                                        query:{
                                                _id:salesPersons[index]._id
                                        },
                                        fields:{username:1,commission_data:1}},findSuccess,finderror);



        }


        function findSuccess(){

            if(arguments[0].items.length > 0 ){


                if(arguments[0].items[0].commission_data){

                    updateSalesPerson(arguments[0].items[0].commission_data);

                }else{

                     updateSalesPerson([]);
                }

            }else{

                finderror();
            }
        }

        function finderror(){

            doUpdateSalesCommission() ;
        }
    },

    updateMultiplePaymentList: function(inputFld, record_key) {
        console.log(inputFld.attributes['data-id'].value) ;

        var _id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;

        value = value.replace(",","");
        var rmProBillingStore = Ext.getStore('InvoicePaymentsStore') ;
        var recIndex = rmProBillingStore.findExact('id',_id) ;

        if(recIndex == -1){
            return ;
        }


        var record = rmProBillingStore.getAt(recIndex) ;

        record.set(record_key,value) ;

        if(record_key == "ammount_paying")
        {
            this.handleAmountPaid() ;
        }
    },

    handleAmountPaid: function() {
        var paymentStr = Ext.getStore('InvoicePaymentsStore') ;





        var totalAmtPaid = 0 ;



        var i = 0 ;
        for( i = 0 ; i < paymentStr.getData().all.length ; i++ ){

            var tempAmt =  paymentStr.getAt(i).get('ammount_paying') ;

            if(tempAmt && tempAmt !=""){
                totalAmtPaid += parseFloat(tempAmt) ;
            }

             var re = paymentStr.getAt(i) ;
            if(re){
                re.set('commission',"0.00");
            }

        }


        Ext.ComponentQuery.query('#invoiceAmmountFld')[0].setValue(formatNum(totalAmtPaid)) ;
        var balance = Ext.ComponentQuery.query('#invoiceTotalPaybleFld')[0].getValue() - totalAmtPaid ;
        Ext.ComponentQuery.query('#invoiceBalanceDueFld')[0].setValue( formatNum(balance)) ;


        var printInvoicePaidStampImg = Ext.ComponentQuery.query('#printInvoicePaidStampImg')[0] ;

        if( balance <= 0){

            printInvoicePaidStampImg.setHidden(false);

            var re = paymentStr.getAt(i-1) ;
            if(re){
                re.set('commission',getCommisionableAmt());
            }

        }else{

             printInvoicePaidStampImg.setHidden(true);
        }


        function getCommisionableAmt(){

            var form = Ext.ComponentQuery.query('#productRmproInvoicePanel')[0] ;


                               var cAmt =  form.down('#invoiceCommissionableAmtFld').getValue()  ;
                               var cAmtPerc =  form.down('#invoiceCommissionPercentFld').getValue()  ;

                               if(cAmt && cAmtPerc && cAmt != "" && cAmtPerc != ""  ){

                                   cAmt = parseFloat(cAmt);
                                   cAmtPerc = parseFloat(cAmtPerc);

                                   var finalamt = cAmt * cAmtPerc ;

                                   finalamt = finalamt / 100 ;


                                   finalamt = finalamt.toFixed(2) ;

                                   return formatNum(finalamt) ;


                               }else{
                                   return "0.00";
                               }

        }
    },

    disableEnableInvoice: function(status) {
        var selectFlds = document.getElementsByClassName('billingDisable');

        for( var i = 0 ; i< selectFlds.length ; i++ ){

            selectFlds[i].disabled = status  ;

          /*  if(status){

                selectFlds[i].style.setProperty("background-color", "rgb(235, 235, 228)", "important");

            }else{
                selectFlds[i].style.setProperty("background-color", "white", "important");

            }
            */

        }

        Ext.ComponentQuery.query('#billingGotoLicenseBtn')[0].setDisabled(!status);

        Ext.ComponentQuery.query('#invoiceRmProPrintBtn')[0].setDisabled(!status);

        Ext.ComponentQuery.query('#invoiceRMPROProductSetupBtn')[0].setDisabled(!status);

        Ext.ComponentQuery.query('#billingInvoiceAddPaymentsBtn')[0].setDisabled(status);
        Ext.ComponentQuery.query('#invoiceTotalPaybleFld')[0].setDisabled(status);

        Ext.ComponentQuery.query('#invoiceCommissionableAmtFld')[0].setDisabled(status);
        Ext.ComponentQuery.query('#rtSalesPersonSearchFld')[0].setDisabled(status);

        Ext.ComponentQuery.query('#invoiceCommissionPercentFld')[0].setDisabled(status);
        Ext.ComponentQuery.query('#rmProPaymentNoteFld')[0].setDisabled(status);

        Ext.ComponentQuery.query('#rtBillingSheetCreateNewInvoiceBtn')[0].setDisabled(!status);
        Ext.ComponentQuery.query('#biilingInvoiceDeleteBtn')[0].setDisabled( status );

        Ext.ComponentQuery.query('#billingInvoiceEditingLbl')[0].setHidden(status);

          Ext.ComponentQuery.query('#invoiceRmProPaymentPrdSlFld')[0].setDisabled(status);


        var productList = Ext.ComponentQuery.query('#rmProInvoiceSalesPersonsPanel')[0].down('#mainList');
        productList.setDisableSelection(status) ;


        var prevPay  = Ext.ComponentQuery.query('#rtBillingRmproPrevPaymntsView')[0].getEl() ;
        var multiPayDtFlds = prevPay.query('div[multipleBillFld="pay_date"]') ;

        for( var i = 0 ; i< multiPayDtFlds.length ; i++ ){



          if(status){

                multiPayDtFlds[i].style.setProperty("background-color", "rgb(235, 235, 228)", "important");
                multiPayDtFlds[i].style.setProperty("border", "", "important");
            }else{
                multiPayDtFlds[i].style.setProperty("background-color", "white", "important");
                multiPayDtFlds[i].style.setProperty("border", "1px solid #9b9b9b", "important");

            }


        }

    },

    onSubscriptionMngProductSetup: function() {

    }

});