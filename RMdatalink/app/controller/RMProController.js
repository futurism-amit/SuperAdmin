/*
 * File: app/controller/RMProController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.RMProController', {
    extend: 'Ext.app.Controller',

    config: {
        isUpdateRequest: false,
        rmProSelectedRecord: {
            
        },
        isPricingPolicyUpdated: false,

        control: {
            "button[itemId=rmProAddModuleBtn]": {
                tap: 'onrmProAddModuleBtnTap'
            },
            "button[itemId=rmProNewResetBtn]": {
                tap: 'onrmProNewResetBtnTap'
            },
            "button[itemId=saveBundleBtn]": {
                tap: 'onSaveBundleBtnTap'
            },
            "button[itemId=rmProDiscountResetBtn]": {
                tap: 'onrmProDiscountResetBtnTap'
            },
            "button[itemId=rmProDiscountSaveBtn]": {
                tap: 'onrmProDiscountSaveBtnTap'
            }
        }
    },

    onrmProAddModuleBtnTap: function(button, e, eOpts) {
                var action = button.action ;

                this.addUpdateRMproModule(action);



    },

    onrmProNewResetBtnTap: function(button, e, eOpts) {
           this.resetRMPROFlds() ;

          // Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList').deselectAll() ;
    },

    onSaveBundleBtnTap: function(button, e, eOpts) {
        this.saveBundlePrice() ;
    },

    onrmProDiscountResetBtnTap: function(button, e, eOpts) {
            this.config.rmProDiscountRecord  = null ;

            Ext.ComponentQuery.query('#rmProDiscountNameFld')[0].setValue("") ;
            Ext.ComponentQuery.query('#rmProDiscountValueFld')[0].setValue("") ;

            Ext.ComponentQuery.query('#rmProDiscountListPanel')[0].down('#mainList').deselectAll();

            Ext.ComponentQuery.query('#rmProDiscountSaveBtn')[0].setText("Add New Discount");
    },

    onrmProDiscountSaveBtnTap: function(button, e, eOpts) {
        this.doAddUpdateDiscount() ;
    },

    initRMproStore: function() {

                    function loadStore(){
                              if(! RMdatalink.app.getController('PaginationController').config.storesLoadedFirstTime[RMdatalink.app.getController('PaginationController').getCurrentActiveStoreId()]){
                                     RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),false);
                          }
                    }

                   RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('products.RMProStore') ;
                   loadStore();

                    // RMdatalink.app.getController('RMProController').loadPricingStore();
    },

    addUpdateRMproModule: function(action) {


        var that = this ;
        var moduleName = Ext.ComponentQuery.query("#rmProModuleNameTxtFld")[0].getValue();
        var moduleDescription = Ext.ComponentQuery.query("#rmProModuleDescriptionTxtAreaFld")[0].getValue();



        var moduleSku =    Ext.ComponentQuery.query("#rmProSKUTxtFld")[0].getValue();
        var moduleListedOrder =    Ext.ComponentQuery.query("#rmProListedOrderTxtFld")[0].getValue();
        var moduleDetails =    Ext.ComponentQuery.query("#rmProDetailsTxtAreaFld")[0].getValue();


        var module_standard_price  =    Ext.ComponentQuery.query("#rmStandardPriceTxtFld")[0].getValue();
        var module_promotional_price =    Ext.ComponentQuery.query("#rmPromotionalPriceTxtFld")[0].getValue();

        var quantity =   Ext.ComponentQuery.query("#rmProModuleQuantityTxtFld")[0].getValue();

        var rmProStore = Ext.getStore('products.RMProStore') ;

        if(moduleName == "" ){

            Ext.Msg.alert("Alert","Module name required.",Ext.emptyFn);
            return ;
        }else{

            var rmProRec = {

                module_name : moduleName,
                module_description : moduleDescription,
                module_listed_order: moduleListedOrder,
                module_sku : moduleSku,
                module_details: moduleDetails,
                module_standard_price:module_standard_price,
                module_promotional_price:module_promotional_price,
                quantity:quantity
            } ;

              Ext.ComponentQuery.query('#productRMproMainPanel')[0].setMasked( {
                        xtype: 'loadmask'
                    });

            if(action == "addNew")
            {
             RMdatalink.util.DataLoader.sendNewRecordForRetailerToServer(rmProRec,rmProStore,success,error) ;
            }
            else{

             RMdatalink.iwa.rdl.doUpdateCollection(rmProStore, rmProRec , this.config.rmProSelectedRecord.get('_id'), success, error);
            }

        }



        function success(){

            that.resetRMPROFlds() ;

            that.config.isPricingPolicyUpdated = true ;

           // Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList').deselectAll() ;

            if(action == "addNew")
            {

                RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('products.RMProStore') ;

                RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),false);
            }else{
                        updateRMPROREC() ;
                        RMdatalink.app.getController('RMProController').config.isPricingPolicyUpdated = false ;

                        RMdatalink.app.getController('BillingDetailsController').updateRMProPricing() ;
                        Ext.ComponentQuery.query('#productRMproMainPanel')[0].setMasked(false);

                        that.onRmProSelectUnselect();

                       RMdatalink.app.getController('BillingDetailsController').updateRMProPricing() ;

            }


        }

        function error(){
            Ext.ComponentQuery.query('#productRMproMainPanel')[0].setMasked(false);

             Ext.Msg.alert("Failuer","Fail to add/update record.",Ext.emptyFn);
        }

        function updateRMPROREC(){
             that.config.rmProSelectedRecord.set("module_name",moduleName) ;
             that.config.rmProSelectedRecord.set("module_description",moduleDescription) ;
             that.config.rmProSelectedRecord.set("module_listed_order",moduleListedOrder) ;
             that.config.rmProSelectedRecord.set("module_sku",moduleSku) ;
             that.config.rmProSelectedRecord.set("module_details",moduleDetails) ;
             that.config.rmProSelectedRecord.set("module_standard_price",module_standard_price) ;
             that.config.rmProSelectedRecord.set("module_promotional_price",module_promotional_price) ;
            that.config.rmProSelectedRecord.set("quantity",quantity) ;


        }
    },

    onProductRMProListSelect: function(list, record, eOpts) {


            this.config.rmProSelectedRecord = record ;

            Ext.ComponentQuery.query("#rmProModuleNameTxtFld")[0].setValue( record.get("module_name"));
            Ext.ComponentQuery.query("#rmProModuleDescriptionTxtAreaFld")[0].setValue(record.get("module_description"));

            Ext.ComponentQuery.query("#rmProSKUTxtFld")[0].setValue(record.get("module_sku"));
            Ext.ComponentQuery.query("#rmProListedOrderTxtFld")[0].setValue(record.get("module_listed_order"));
            Ext.ComponentQuery.query("#rmProDetailsTxtAreaFld")[0].setValue(record.get("module_details"));

            Ext.ComponentQuery.query("#rmStandardPriceTxtFld")[0].setValue(record.get("module_standard_price"));
            Ext.ComponentQuery.query("#rmPromotionalPriceTxtFld")[0].setValue(record.get("module_promotional_price"));

            Ext.ComponentQuery.query("#rmProModuleQuantityTxtFld")[0].setValue(record.get("quantity"));

          Ext.ComponentQuery.query('#rmProAddModuleBtn')[0].action = "update";

          Ext.ComponentQuery.query('#rmProAddModuleBtn')[0].setText("Update Module");







    },

    resetRMPROFlds: function() {


            Ext.ComponentQuery.query('#rmProAddModuleBtn')[0].action = "addNew" ;
            Ext.ComponentQuery.query('#rmProAddModuleBtn')[0].setText("Add New Module");



            Ext.ComponentQuery.query("#rmProModuleNameTxtFld")[0].setValue("");
            Ext.ComponentQuery.query("#rmProModuleDescriptionTxtAreaFld")[0].setValue("");

            Ext.ComponentQuery.query("#rmProSKUTxtFld")[0].setValue("");
            Ext.ComponentQuery.query("#rmProListedOrderTxtFld")[0].setValue("");
            Ext.ComponentQuery.query("#rmProDetailsTxtAreaFld")[0].setValue("");

            Ext.ComponentQuery.query("#rmStandardPriceTxtFld")[0].setValue("");
            Ext.ComponentQuery.query("#rmPromotionalPriceTxtFld")[0].setValue("");

           Ext.ComponentQuery.query("#rmProModuleQuantityTxtFld")[0].setValue("");

    },

    loadPricingStore: function() {
                    function loadStore(){
                              if(! RMdatalink.app.getController('PaginationController').config.storesLoadedFirstTime[RMdatalink.app.getController('PaginationController').getCurrentActiveStoreId()]){

                                  RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),false);
                              }else{
                                  Ext.ComponentQuery.query('#productRMproMainPanel')[0].setMasked(false);
                              }
                    }

                   RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('productDetailsRecordsStore') ;

                    loadStore() ;
    },

    onRmProSelectUnselect: function() {
         var timeout = setTimeout(function(){

                                             var selectedRec =  Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList').getSelection() ;

                                            var standardPrice = 0 ;
                                            var promotionalPrice = 0;

                                            Ext.ComponentQuery.query('#rmProSumOfPromoPriceLbl')[0].setHtml("Total Promotional Price : " + promotionalPrice);
                                            Ext.ComponentQuery.query('#rmProSumOfStdPriceLbl')[0].setHtml("Total Standard Price : " + standardPrice);

                                            for( var i=0 ; i < selectedRec.length ; i++ ){

                                                var quantity = selectedRec[i].get('quantity') ? parseInt(selectedRec[i].get('quantity')) : 1;

                                                standardPrice += (parseInt(selectedRec[i].get('module_standard_price')) * quantity);
                                                promotionalPrice += ( parseInt(selectedRec[i].get('module_promotional_price'))*quantity );

                                            }

                                            Ext.ComponentQuery.query('#rmProSumOfPromoPriceLbl')[0].setHtml("" + promotionalPrice+"$");
                                            Ext.ComponentQuery.query('#rmProSumOfStdPriceLbl')[0].setHtml("" + standardPrice+"$");



                                            clearTimeout(timeout);
                            },100);





        /*

                                            Ext.ComponentQuery.query('#rmProSumOfPromoPriceLbl')[0].setHtml("Total Promotional Price : " + promotionalPrice);
                                            Ext.ComponentQuery.query('#rmProSumOfStdPriceLbl')[0].setHtml("Total Standard Price : " + standardPrice);

        */
    },

    saveBundlePrice: function() {

         RMdatalink.app.getController('BillingDetailsController').updateRMProPricing() ;

          Ext.Msg.alert("Success","Bundle price for selected modules saved successfully.",Ext.emptyFn);
    },

    doAddUpdateDiscount: function() {
        //discount_policy

        var that = this ;
            var discountStore = Ext.getStore('products.RMProDiscountStore');

            var name = Ext.ComponentQuery.query('#rmProDiscountNameFld')[0].getValue() ;
            var value = Ext.ComponentQuery.query('#rmProDiscountValueFld')[0].getValue() ;

            var duration =Ext.ComponentQuery.query('#rmProDiscountDurationFld')[0].getValue() ;

            if(name == "" || value == ""){
                Ext.Msg.alert("Alert","Discount Name and Value both required.",Ext.emptyFn);
                return;
            }

            var recToAddUpdate = {

                discount_name : name,
                discount_value:value,
                discount_duration:duration

            };

            if(that.config.rmProDiscountRecord){

                 that.config.rmProDiscountRecord.set(recToAddUpdate);

            }else{

                discountStore.add(recToAddUpdate);

            }


            discountStore.sync() ;

            doUpdateBillingForDiscount() ;


            that.config.rmProDiscountRecord  = null ;

            Ext.ComponentQuery.query('#rmProDiscountNameFld')[0].setValue("") ;
            Ext.ComponentQuery.query('#rmProDiscountValueFld')[0].setValue("") ;
            Ext.ComponentQuery.query('#rmProDiscountDurationFld')[0].setValue("") ;

            Ext.ComponentQuery.query('#rmProDiscountListPanel')[0].down('#mainList').deselectAll();


            function doUpdateBillingForDiscount(){
                    var billingController =  RMdatalink.app.getController('BillingDetailsController') ;
                    var pricingMainStore = Ext.getStore('pricing.MainStore') ;


                    billingController.config.pricingData[3].discount_policy = getArrayDataFromStore(discountStore) ;
                    var rmPRORec = pricingMainStore.getAt(billingController.config.pricingData[3].searchIndex);

                    rmPRORec.set( billingController.config.pricingData[3] );
                    rmPRORec.dirty= true;
                    pricingMainStore.sync() ;


                      Ext.Msg.alert("Success","Discount Updated Successfully.",Ext.emptyFn);
            }

            function getArrayDataFromStore(store){

                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }


    },

    onRM_PRODiscountSelect: function(list, record) {
        this.config.rmProDiscountRecord = record ;

        Ext.ComponentQuery.query('#rmProDiscountNameFld')[0].setValue(record.get('discount_name')) ;
        Ext.ComponentQuery.query('#rmProDiscountValueFld')[0].setValue(record.get('discount_value')) ;
        Ext.ComponentQuery.query('#rmProDiscountDurationFld')[0].setValue(record.get('discount_duration')) ;

        Ext.ComponentQuery.query('#rmProDiscountSaveBtn')[0].setText("Update Discount");
    },

    setRMPRODiscountStore: function() {
                var discountStore = Ext.getStore('products.RMProDiscountStore');

                var billingController =  RMdatalink.app.getController('BillingDetailsController') ;


                discountStore.removeAll();
                discountStore.sync() ;

                discountStore.setData(billingController.config.pricingData[3].discount_policy) ;
                discountStore.sync() ;


    }

});