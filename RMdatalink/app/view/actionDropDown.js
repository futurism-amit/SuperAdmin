/*
 * File: app/view/actionDropDown.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.view.actionDropDown', {
    extend: 'Ext.Sheet',
    alias: 'widget.actionDropDown',

    requires: [
        'Ext.Label',
        'Ext.dataview.DataView',
        'Ext.XTemplate',
        'Ext.Button'
    ],

    config: {
        cls: 'x-rm-action-dropdown',
        height: 170,
        hideAnimation: false,
        id: 'actionDropDown',
        showAnimation: false,
        width: 250,
        hideOnMaskTap: true,
        scrollable: false,
        layout: {
            type: 'vbox',
            align: 'center'
        },
        items: [
            {
                xtype: 'label',
                cls: 'x-rm-action-move-lable',
                html: 'Move selection to the folder:',
                itemId: 'actionDDMoveLabel',
                width: '100%'
            },
            {
                xtype: 'container',
                flex: 3,
                margin: '5% 0 0 0',
                width: '80%',
                layout: 'fit',
                items: [
                    {
                        xtype: 'dataview',
                        cls: 'x-rm-action-checklist',
                        itemId: 'actionDDCheckList',
                        scrollable: false,
                        itemTpl: [
                            '<div class="x-rm-action-listtpl">',
                            '    <input type="radio" name="action-radio" data-storename="{storeName}"',
                            '    <tpl if="checkStatus">',
                            '           checked',
                            '    </tpl>',
                            '    />',
                            '    <label>{folderName}</label>',
                            '</div>'
                        ]
                    }
                ]
            },
            {
                xtype: 'container',
                flex: 2,
                width: '100%',
                layout: {
                    type: 'hbox',
                    align: 'end',
                    pack: 'center'
                },
                items: [
                    {
                        xtype: 'button',
                        flex: 1,
                        cls: 'x-rm-action-innerbtns',
                        itemId: 'actionDDSaveBtn',
                        pressedCls: 'x-rm-action-innerbtns-pressing',
                        text: 'SAVE'
                    },
                    {
                        xtype: 'button',
                        flex: 1,
                        cls: 'x-rm-action-innerbtns',
                        itemId: 'actionDDCancelBtn',
                        pressedCls: 'x-rm-action-innerbtns-pressing',
                        text: 'CANCEL'
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onActionDDSaveBtnTap',
                event: 'tap',
                delegate: '#actionDDSaveBtn'
            },
            {
                fn: 'onActionDDCancelBtnTap',
                event: 'tap',
                delegate: '#actionDDCancelBtn'
            }
        ]
    },

    onActionDDSaveBtnTap: function(button, e, eOpts) {
        //console.log("save btn tapped");
        var dataview = button.up('actionDropDown').down('#actionDDCheckList');
        var dataViewItems = dataview.getViewItems();
        var targetStoreName;
        for(var i=0 ; i<dataViewItems.length ; i++) {
            var radioBtn = dataViewItems[i].querySelector('input[type="radio"]');
            if(radioBtn.checked)
                targetStoreName = radioBtn.getAttribute('data-storename');
        }
        this.fireEvent('actionsave', this, targetStoreName);
        this.destroy();
    },

    onActionDDCancelBtnTap: function(button, e, eOpts) {
        this.destroy();
    }

});