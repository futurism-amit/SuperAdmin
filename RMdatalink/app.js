/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({
    disableCaching: false,
    paths: {
        Ext: 'touch/src',
        RMdatalink: 'app',
        'Ext.ux.touch.grid': 'Ext.ux.touch.grid'
    }
});


Ext.application({

    requires: [
        'Ext.Loader',
        'RMdatalink.util.DataManager',
        'RMdatalink.util.globalConfig',
        'RMdatalink.util.messagingVariable',
        'RMdatalink.util.globalMethods',
        'RMdatalink.util.Calendar',
        'RMdatalink.util.WebSocket',
        'Ext.data.reader.Json',
        'RMdatalink.util.DataHandler',
        'RMdatalink.util.NetworkManager',
        'RMdatalink.util.DataLoader',
        'RMdatalink.util.ServerAPI'
    ],
    models: [
        'retailers.DetailsCRM',
        'retailers.StoreVendors',
        'retailers.DetailsPhotos',
        'retailers.DetailsAttachments',
        'retailers.DetailsNotes',
        'retailers.Master',
        'notifications.new',
        'billingMasterModel',
        'ihouse.MasterModel',
        'discounts.MasterModel',
        'product.DetailsRecordsModel',
        'vendor.DetailsRecodsModel',
        'pricingPolicyModel',
        'pricingDiscountPolicyModel',
        'pricingFunctionalityModel',
        'vendors.Master',
        'vendor.REPsDetails',
        'vendor.CompanyContacts',
        'TechSupportLogsModel',
        'AutoCompleteModel',
        'TempTechSupportLog',
        'pricing.MainDataModel',
        'PermisstionsModel',
        'SearchDropDownModel',
        'inhouse.CustomersModel',
        'TestModel',
        'products.RM_Pro',
        'DiscountBasicModel',
        'products.BillingRmproModules',
        'products.BillingDiscount',
        'products.DatalinkMain',
        'products.RtSalesPersonModel',
        'billing.MasterModel',
        'InvoiceHistoryModel',
        'billing.MonthlyReportModel',
        'InvoicePaymentsModule',
        'inhouse.CommissionModel',
        'Grid',
        'DlVdPricingSkuImgs',
        'DlVdPricingVdrDiscount',
        'DatalinkProductBundle',
        'DatalinkVendors',
        'ecomPricingVendors',
        'interMediateCollectionTableModel'
    ],
    stores: [
        'retailers.Users',
        'retailers.Prospects',
        'retailers.Inactive',
        'retailers.Pending',
        'retailers.DetailsCRM',
        'retailers.StoreVendors',
        'retailers.DetailsPhotos',
        'retailers.DetailsAttachments',
        'retailers.DetailsNotes',
        'retailers.Master',
        'notifications.new',
        'notifications.tipsdodonts',
        'notifications.tipsfollowsup',
        'retailers.StoreOnlineVendors',
        'billingMasterStore',
        'inhouse.MasterStore',
        'discounts.MasterStore',
        'productDetailsRecordsStore',
        'vendorDetailsRecodsStore',
        'inhouse.DoDontsStore',
        'inhouse.followUpsStore',
        'inhouse.DetailsNotesAttachments',
        'pricingFunctionalityStore',
        'pricingPolicyStore',
        'pricingDiscountPolicyStore',
        'vendors.Master',
        'vendor.REPsDetails',
        'notifications.managerTipsdodonts',
        'notifications.repsTipsdodonts',
        'notifications.managerTipsfollowsup',
        'notifications.repsTipsfollowsup',
        'vendor.CompanyContactStore',
        'TechSupportLogsStore',
        'TempTechSupportLogStore',
        'AutoCompleteStore',
        'pricing.datalink_discount',
        'pricing.datalink_pricing',
        'pricing.datalink_functionality',
        'pricing.ecatlog_discount',
        'pricing.smart_cart_discount',
        'pricing.ecatalog_pricing',
        'pricing.smart_cart_pricing',
        'pricing.ecatalog_functionality',
        'pricing.smart_cart_functionality',
        'pricing.MainStore',
        'vendorTempRecordStore',
        'PermisstionsStore',
        'SearchDropDownStore',
        'inhouse.CustomersStore',
        'CompanySpecificTechSupportStore',
        'TestStore',
        'products.RMProStore',
        'pricing.RM_proDiscount',
        'pricing.RM_proPricing',
        'retailers.HotProspects',
        'retailers.prospectRTForVendor',
        'products.RMProDiscountStore',
        'products.BillingRmproModules',
        'products.BillingDiscount',
        'products.BillingFromPackages',
        'products.BillingModuleAddons',
        'products.DatalinkMain',
        'products.RtSalesPersonStore',
        'products.DatalinkDiscountStore',
        'invoice.DatalinkModuleAddons',
        'invoice.RtDatalinkSalesPersonStore',
        'printInvoice.packModulesStore',
        'printInvoice.addOnsModulesStore',
        'InvoiceHistoryStore',
        'billing.MonthlyReportStore',
        'billing.ListHeaderStore',
        'billing.YearlyReportStore',
        'InvoicePaymentsStore',
        'DatalinkInvoicePaymentsStore',
        'InhouseCommissionStore',
        'printInvoice.subscribedModulesStore',
        'Grid',
        'products.AllBillingModulesStore',
        'products.AllBillingModules',
        'CurrentInvoiceStore',
        'License.ProductsStore',
        'LicenseHistoryStore',
        'DlVdPricingSkuImgs',
        'DlVdPricingSkuImgsAddlImages',
        'DlVdPricingVdrDiscount',
        'DatalinkProductBundle',
        'DatalinkVendors',
        'DlVdPricingSKUDiscount',
        'products.ecomMain',
        'products.ecomDiscountStore',
        'ecomProductBundle',
        'ecomVdPricingSkuImgs',
        'ecomVdPricingSkuImgsAddlImages',
        'ecomVdPricingVdrDiscount',
        'ecomVendors',
        'ecomVdPricingSKUDiscount',
        'ecomPricingVendors',
        'DlPricingVendors',
        'interMediateCollectionTable'
    ],
    views: [
        'Main',
        'RMNavigationPanel',
        'CardHeaderPanel',
        'retailers.MainContentPanel',
        'billing.MainContentPanel',
        'retailers.ListContainer',
        'common.searchView',
        'actionDropDown',
        'filterDropDown',
        'retailers.Details',
        'detailsHeader',
        'listWithHeader',
        'alertPopUp',
        'billing.ListContainer',
        'inhouse.MainContentPanel',
        'inhouse.ListContainer',
        'discounts.MainContentPanel',
        'discounts.ListContainer',
        'inhouse.DetailsPage',
        'PermissionsSelector',
        'vendors.MainContentPanel',
        'vendors.ListContainer',
        'billing.DetailPage',
        'billing.detailedListContainer',
        'BlueBookListContainer',
        'TechLogTimer',
        'TechLogButtons',
        'AutoSuggetionsDataView',
        'LoginScreen',
        'inhouse.customersList',
        'inhouse.CustomersSearchView',
        'products.EcomMain',
        'SearchDropDown',
        'LoginUserOptions',
        'addNewField',
        'products.RM_PROMain',
        'retailers.CustomFilterView',
        'products.RM_PRO_ForRetailer',
        'products.retailerBillingSheet',
        'listWithHeaderForRtProductBullig',
        'products.DatalinkMain',
        'products.BillingSheetDatalink',
        'productDatalinkInvoice',
        'InvoicePage',
        'billing.DetailSheet',
        'billing.ReportScreen',
        'retailer.NavigationPanel',
        'retailer.MainPanel',
        'retailer.PaymentHistoryPanel',
        'retailer.ManagePayment',
        'RetailerLoginUserOptions',
        'retailer.GeneralSetting',
        'retailer.ProductDatalink',
        'retailer.UserProductRMPRO',
        'ResizableNote',
        'DeleteUserRoleScreen',
        'login.ResetPassword',
        'RMdatalink.view.Grid',
        'listHeaderForRMpro',
        'LicenseScreen',
        'DlVendorPricingSetUp',
        'ecomVendorPricingSetUp',
        'pricing.ListContainer',
        'MyPanel31'
    ],
    controllers: [
        'Main',
        'ActionDropDown',
        'FilterDropDown',
        'UINav',
        'alertPopUp',
        'RetailerDeatilsDataSet',
        'BillingDetailsController',
        'discount.DiscountTabHandler',
        'inhouse.DetailScreenController',
        'PaginationController',
        'TechSupportLog',
        'AutoSuggestionsController',
        'LoginHandler',
        'PermissionsConroller',
        'SearchDropDownController',
        'RecentActivityController',
        'VendorStatsController',
        'ImportCSV',
        'VendorRetailerRelations',
        'RMProController',
        'DatalinkController',
        'SearchController',
        'DeleteRecords',
        'GMapController',
        'ProductBillingController',
        'InvoiceController',
        'InvoiceHistoryController',
        'BillingReportController',
        'RetailerPaymentController',
        'LicenseController',
        'DlPricingController',
        'ecomController',
        'ecomPricingController'
    ],
    name: 'RMdatalink',

    launch: function() {


                window.dbEnv = getParameterByName('dev') ?  "dev_" :"" ;
                document.body.style.backgroundColor = "white" ;

                window.lAicon = "resources/images/larr.png" ;
                window.rAicon = "resources/images/rarr.png";

        //window.dbEnv = "" ;

                        RMdatalink.app.getController('PaginationController').setScopeRequiredToLoadStores(this);

                        // RMdatalink.app.getController('Main').initialiseApp() ;
                        RMdatalink.app.getController('TechSupportLog').startTimer() ;

                        Ext.Msg.defaultAllowedConfig.showAnimation = false;
                        Ext.Msg.defaultAllowedConfig.hideAnimation = false;


                        RMdatalink.iwa.rdl.collections["retailersMaster"] = dbEnv + "rdl_masterretailerrecords" ;
                        RMdatalink.iwa.rdl.collections["products.RMProStore"]=dbEnv + "rdl_product_rm_pro" ;
                        RMdatalink.iwa.rdl.collections["TechSupportLogsStore"]= dbEnv + "rdl_tech_support_logs" ;
                        RMdatalink.iwa.rdl.collections["PermisstionsStore"]=  dbEnv + "rdl_vendordetailrecords" ;
        RMdatalink.iwa.rdl.collections["notificationsNew"]= dbEnv + "rdl_new_notifications" ;
                        RMdatalink.iwa.rdl.collections["billingMasterStore"]=   dbEnv + "rdl_billingdetailrecords" ;
                        RMdatalink.iwa.rdl.collections["pricing.MainStore"]=  dbEnv + "rdl_productdetailrecords" ;
                        RMdatalink.iwa.rdl.collections["vendorDetailsRecodsStore"]=   dbEnv + "rdl_vendordetailrecords" ;


                        RMdatalink.iwa.rdl.collections["inhouseMasterStore"]=  dbEnv + "rdl_inhouserecords" ;

                        RMdatalink.iwa.rdl.collections["discountsMasterStore"]=  dbEnv + "rdl_discounts" ;


                        RMdatalink.iwa.rdl.collections["vendors.Master"]=  dbEnv + "rdl_vendor_masters" ;

                        RMdatalink.iwa.rdl.collections["products.DatalinkMain"]=  dbEnv + "rdl_product_datalink" ;

                        RMdatalink.iwa.rdl.collections["InvoiceHistoryStore"]=  dbEnv + "rdl_invoice_history" ;

                        RMdatalink.iwa.rdl.collections["products.ecomMain"]=  dbEnv + "rdl_product_ecom" ;

                        RMdatalink.iwa.rdl.collections["interMediateCollectionTable"]=  "rdl_int_e_commerce_infos" ;

            function getParameterByName(name) {

                name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(location.search);
            return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
            }

           formatNum = function(Amount){

                               if(isNaN(Amount)){
                                   return 0.00; //Amount;
                               }
                                if(value === 0)
                                  return "0.00";

                                var value =parseFloat(Amount) ;
                                value = value.toFixed(2) ;



                                   var sumStr = ""+ value;
                                   var sumStrSplit0 = sumStr.split('.')[0];

                                   var len = sumStrSplit0.length;
                                   if(len > 3)
                                   {
                                       sumStr1 = sumStrSplit0.substr(0,(len-3));
                                       sumStr2 = sumStrSplit0.substr((len-3),(len-1));
                                       sumStrSplit0 =  sumStr1 + ',' + sumStr2 ;
                                   }

                                   if(sumStr.split('.')[1])
                                      return sumStrSplit0 + '.' +sumStr.split('.')[1];
                                   else
                                   {
                                    return sumStrSplit0;
                                   }



            };

         formatNormalNum = function(Amount){

                               if(isNaN(Amount)){
                                   return 0.00;//Amount;
                               }
                                if(value === 0)
                                  return "0.00";

                                var value =parseFloat(Amount) ;
                                value = value.toFixed(0) ;



                                   var sumStr = ""+ value;
                                   var sumStrSplit0 = sumStr.split('.')[0];

                                   var len = sumStrSplit0.length;
                                   if(len > 3)
                                   {
                                       sumStr1 = sumStrSplit0.substr(0,(len-3));
                                       sumStr2 = sumStrSplit0.substr((len-3),(len-1));
                                       sumStrSplit0 =  sumStr1 + ',' + sumStr2 ;
                                   }

                                   if(sumStr.split('.')[1])
                                      return sumStrSplit0 + '.' +sumStr.split('.')[1];
                                   else
                                   {
                                    return sumStrSplit0;
                                   }



            };



        Ext.field.Text.prototype.getValue = function () {
                var me = this;

                me._value = me.getComponent().getValue();

                me.syncEmptyCls();

                if(me.isCurrency)
                {
                    me._value = ""+me._value ;
                    me._value = me._value.replace(",","");
                }
                return me._value;
            } ;



        document.addEventListener("keypress",  function (event) {

            if(event.keyCode == 13 ){
                Ext.Msg.hide() ;
            }


            });
        DOMTokenList.prototype.indexOf = DOMTokenList.prototype.indexOf || function(value){

            var counterToReturn = -1;
            for(var i=0;i<this.length; i++){

                if(this[i] == value){
                    return i;
                }
            }
            return counterToReturn;
        };
        window.vendorIdAccountValue = window.vendorIdAccountValue || {};
        window.onKeyDownOfAccountNo = function(e){

                    var event = e;
                    var element = e.target;
                    var vendorid = element.getAttribute("vendorid");
                    window.vendorIdAccountValue = window.vendorIdAccountValue || {};

                    vendorIdAccountValue[vendorid] = element.value;

        };

        window.vendorIdAccountValueEComm = window.vendorIdAccountValueEComm || {};
        window.onKeyDownOfAccountNoECommerce = function(e){

                    var event = e;
                    var element = e.target;
                    var vendorid = element.getAttribute("vendorid");
                    window.vendorIdAccountValueEComm = window.vendorIdAccountValueEComm || {};

                    vendorIdAccountValueEComm[vendorid] = element.value;

        };

        window.vendorIdAccountValueVIP = window.vendorIdAccountValueVIP || {};

        window.onKeyDownOfAccountNoVIP = function(e){

                    var event = e;
                    var element = e.target;
                    var vendorid = element.getAttribute("_id");
                    window.vendorIdAccountValueVIP = window.vendorIdAccountValueVIP || {};

                    vendorIdAccountValueVIP[vendorid] = element.value;

        };


        window.clearAccountValues = window.clearAccountValues || function(){

            vendorIdAccountValueEComm = {};
            vendorIdAccountValue = {};
            vendorIdAccountValueVIP = {};
        };

        window.getArrayFromStore =  window.getArrayFromStore || function (store){

            try{
                var data = new Array();
                data = store.getData().items;

                var dataToReturn = new Array();

                for(var i=0; i < data.length ; i++){

                    dataToReturn.push(data[i].data);
                }

                return dataToReturn ;

            }catch(e){

                console.log("ERROR WAS THROWN" , e);
                return [];
            }

        };
        window.findVendorBy_id = function (v_id){

            var vendorMaster = Ext.getStore('vendors.Master') ;
            var vendors = vendorMaster.data.all ;
            var venRec = null ;
            for(var j=0;j<vendors.length ; j++){

                if(v_id == vendors[j].data._id){

                    venRec = vendors[j] ;
                    break;
                }
            }

            return venRec;

        };
        window.findVendorBy_name = function(v_name){
            var vendorMaster = Ext.getStore('vendors.Master') ;
            var vendors = vendorMaster.data.all ;
            var venRec = null ;
            for(var j=0;j<vendors.length ; j++){

                if(v_name == vendors[j].data.vendor_name){

                    venRec = vendors[j] ;
                    break;
                }
            }

            return venRec;

        };

        window.findProgramBy_name = function(v_name){
            var vendorMaster = Ext.getStore('products.ecomMain') ;
            var vendors = vendorMaster.data.all ;
            var venRec = null ;
            for(var j=0;j<vendors.length ; j++){

                if(v_name == vendors[j].data.module_name){

                    venRec = vendors[j] ;
                    break;
                }
            }

            return venRec;

        };

        window.findProgramBy_id = function (v_id){

            var vendorMaster =  Ext.getStore('products.ecomMain') ;
            var vendors = vendorMaster.data.all ;
            var venRec = null ;
            for(var j=0;j<vendors.length ; j++){

                if(v_id == vendors[j].data._id){

                    venRec = vendors[j] ;
                    break;
                }
            }

            return venRec;

        };
        //findVendorBy_name(module_name);
        window.isVendorPreventedForVip = function(v_id , someotherKey){
            var vendor = findVendorBy_id(v_id);
                someotherKey = someotherKey || 'prevent_be_vip';
            if( vendor.data[someotherKey] ){

        //        alert("THIS VENDOR CANNOT BE ADDDE TI VIP LIST");
                return true;

            }
            return false;

        };

        window.isVendorInVipByPromoCode = function(v_id , someotherKey){
            var vendor = findVendorBy_id(v_id);
                someotherKey = someotherKey || 'prevent_be_vip';
            if( vendor.data[someotherKey] ){


                return true;

            }
            return false;

        };
        window.getRawFromList= function(itemid){

            var list = Ext.ComponentQuery.query("#" + itemid)[0];
            var arrayToReturn = [];
            if( list){

                var store = list.getStore();
                if(store){

                    var data = store.getData();

                    for(   var i =0; i<data.all.length; i++){

                        var raw = data.all[i].raw;
                        arrayToReturn.push(raw);
                    }
                    return arrayToReturn;
                }else{

                    return arrayToReturn;
                }

            }else{

                return arrayToReturn;
            }

        };

        window.eCommerceListSetupSelecteDRecord = null;

        window.handleListOfDEletedVipVendor = function(itemId , key){





            itemId  = itemId || 'deletedVendorFromVIPlist';
            key = key || 'prevent_be_vip';
            var deletedVendorFromVIPlist = Ext.ComponentQuery.query("#" +itemId)[0];
           // deletedVendorFromVIPlist.deselectAll();
            var vendor = Ext.getStore('vendors.Master');

            var data = getArrayFromStore(vendor);
            var arrayToPush = [];

            for(var i = 0;i < data.length; i++){

                if(data[i][key]){
                    arrayToPush.push(data[i]);
                }
            }




            var store = deletedVendorFromVIPlist.getStore();
            if(store){

                store.setData(arrayToPush);
            }else{
                deletedVendorFromVIPlist.setData(arrayToPush);
            }




        };


        DOMTokenList.prototype.indexOf = DOMTokenList.prototype.indexOf || function(value){

            var valueToReturn = -1;
            for(var i=0;i<this.length;i++){
                if(this[i] == value){
                    return i;
                }
            }
            return valueToReturn ;

        };

        window.updateVendorIdAccountValueVIP = window.updateVendorIdAccountValueVIP || function(){
            var component = Ext.ComponentQuery.query('#RDForVIP')[0];
            var InStoreList = component.down("#RDInStoreVendorsTab").down('#mainList');
            var store = InStoreList.getStore();
            var data = store.getData();
            for(var i=0;i<data.all.length ; i++){

                var rec = data.all[i];
                var vendor_id = rec.data._id;
                var Account_No = rec.data.Account_No;
                vendorIdAccountValueVIP[vendor_id] = Account_No;
            }

        };
        window.getAccountNoAndNameOfVIPVendors = window.getAccountNoAndNameOfVIPVendors || function (){
            var component = Ext.ComponentQuery.query('#RDForVIP')[0];
            var InStoreList = component.down("#RDInStoreVendorsTab").down('#mainList');
            var store = InStoreList.getStore();
            var arrayToReturn =[];
            if(store)
            {
            }
            else
            {
                return arrayToReturn;
            }
            var data = store.getData();
            for(var i =1 ;i <data.all.length ; i++){


                var vendor_id = data.all[i].data._id;
                var vendor_name = data.all[i].data.vendor_name;

                var accountValue = vendorIdAccountValueVIP[vendor_id] || '';

                var objectToPush = {
                    account_no: accountValue  ,
                    vendor_name: vendor_name
                };
                arrayToReturn .push(objectToPush );
            }
            return arrayToReturn ;
        };
        Ext.create('RMdatalink.view.LoginScreen', {fullscreen: true});
    }

});
