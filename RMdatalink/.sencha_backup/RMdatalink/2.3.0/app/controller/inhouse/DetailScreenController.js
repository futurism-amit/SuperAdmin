/*
 * File: app/controller/inhouse/DetailScreenController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.inhouse.DetailScreenController', {
    extend: 'Ext.app.Controller',

    config: {
        selectedInhouseUser: {
            
        },
        isNewRecordBtnTapped: true,
        userType: 'usersTab',
        permissionsForNewUser: [
            
        ],
        isUpdatingInhouse: false,

        control: {
            "titlebar[itemId=inhouseUserPermissionsTtlBar]": {
                initialize: 'onTitlebarPermissionsByAdminInitialize'
            },
            "button[itemId=permissionSelectorCancelBtn]": {
                tap: 'onPermissionCancelButtonTap'
            },
            "button[itemId=permissionSelectorSaveBtn]": {
                tap: 'onPermissionsSaveBtnTap'
            },
            "selectfield[action=permissionSelectFld]": {
                change: 'onpermissionSelectFldChange'
            },
            "list[itemId=inhouseProfileActivityList]": {
                itemtap: 'oninhouseProfileActivityListItemTap'
            }
        }
    },

    onTitlebarPermissionsByAdminInitialize: function(component, eOpts) {
        var that = this;

        component.element.on("tap",function(){

            RMdatalink.app.getController('PermissionsConroller').showPermissions() ;


        });

    },

    onPermissionCancelButtonTap: function(button, e, eOpts) {
         permissionsPanel = Ext.ComponentQuery.query('#PermissionsSelectorPage')[0] ;
            permissionsPanel.hide();
    },

    onPermissionsSaveBtnTap: function(button, e, eOpts) {
        var permissions = [
            {

                "name":"Dashboard",
                "type":"Dashboard",
                value:"-1"
            },
           {

                name:"Retailers",
                type:"Retailers",
                value:"-1"
            },


           {

                name:"Billing",
                type:"Billing",
               value:"-1"
            },



           {

                name:"Vendors",
                type:"Vendors",
                value:"-1"
            },

           {

                name:"In house",
                type:"Inhouse",
               value:"-1"
            },
                      {

                "name":"Notification",
                "type":"Notification",
                value:"-1"
            },

              {

                "name":"Notepad",
                "type":"Notepad",
               value:"-1"
            },
                {

                "name":"Products",
                "type":"Products",
                value:"-1"
            },


               {

                name:"Products-Datalink",
                type:"Products_Datalink",
                value:"-1"
            },
        {

                name:"Products-Ecatalog",
                type:"Products_Ecatalog",
                value:"-1"
            },
        {

                name:"Products-SMART CART",
                type:"Products_SMART_CART",
               value:"-1"
            },
        {

                name:"Products-RM PLC",
                type:"Products_RM_PLC",
               value:"-1"
            },
        {

                name:"Products-IRUGZ",
                type:"Products_IRUGZ",
               value:"-1"
            },


            {

                "name":"Pricing",
                "type":"Pricing",
                value:"-1"
            },


               {

                name:"Pricing-Datalink",
                type:"Pricing_Datalink",
               value:"-1"
            },
        {

                name:"Pricing-Ecatalog",
                type:"Pricing_Ecatalog",
               value:"-1"
            },
        {

                name:"Pricing-SMART CART",
                type:"Pricing_SMART_CART",
               value:"-1"

            },
        {

                name:"Pricing-RM PLC",
                type:"Pricing_RM_PLC",
               value:"-1"
            },
        {

                name:"Pricing-IRUGZ",
                type:"Pricing_IRUGZ",
               value:"-1"
            },



            {

                "name":"Discounts",
                "type":"Discounts",
                 value:"-1"
            },


               {

                name:"Discounts-Datalink",
                type:"Discounts_Datalink",
                value:"-1"
            },
        {

                name:"Discounts-Ecatalog",
                type:"Discounts_Ecatalog",
                value:"-1"
            },
        {

                name:"Discounts-SMART CART",
                type:"Discounts_SMART_CART",
                value:"-1"
            },
        {

                name:"Discounts-RM PLC",
                type:"Discounts_RM_PLC",
                value:"-1"
            },
        {

                name:"Discounts-IRUGZ",
                type:"Discounts_IRUGZ",
                value:"-1"
            }







        ];




                 var permissionsPanel = Ext.ComponentQuery.query('#PermissionsSelectorPage')[0] ;

                  var slectFields = permissionsPanel.query('[xtype=selectfield]');

                       for(var i =0 ; i< permissions.length ; i++){

                             val = permissionsPanel.down("#permistions"+permissions[i].type).getValue();
                           if(val != null){
                               permissions[i].value = val ;
                           }

                        }

        var userRole = Ext.ComponentQuery.query('#selectUserRoleSelectFld')[0].getValue() ;

        RMdatalink.app.getController('PermissionsConroller').updateUserRole(userRole,permissions);






        /*
                 if(!  this.isNewRecordBtnTapped){
                        this.selectedInhouseUser.data.permissions  = permissions ;
                 }else{

                     this.setPermissionsForNewUser(permissions) ;
                 }

            permissionsPanel.hide();
        */
    },

    onpermissionSelectFldChange: function(selectfield, newValue, oldValue, eOpts) {
         var selectFldItemId = selectfield.getItemId();

        switch(selectFldItemId){

            case "permistionsProducts":


                if(selectfield.getValue() == 'none' || selectfield.getValue()== null )
                {
                    Ext.ComponentQuery.query('#permistionsProducts_Datalink')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsProducts_Ecatalog')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsProducts_SMART_CART')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsProducts_RM_PLC')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsProducts_IRUGZ')[0].setDisabled(true);
                }else{
                     Ext.ComponentQuery.query('#permistionsProducts_Datalink')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsProducts_Ecatalog')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsProducts_SMART_CART')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsProducts_RM_PLC')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsProducts_IRUGZ')[0].setDisabled(false);
                }

                break;

                    case "permistionsPricing":


                if(selectfield.getValue() == 'none' || selectfield.getValue()== null )
                {
                    Ext.ComponentQuery.query('#permistionsPricing_Datalink')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsPricing_Ecatalog')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsPricing_SMART_CART')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsPricing_RM_PLC')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsPricing_IRUGZ')[0].setDisabled(true);
                }else{
                     Ext.ComponentQuery.query('#permistionsPricing_Datalink')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsPricing_Ecatalog')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsPricing_SMART_CART')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsPricing_RM_PLC')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsPricing_IRUGZ')[0].setDisabled(false);
                }

                break;


                    case "permistionsDiscounts":


                if(selectfield.getValue() == 'none' || selectfield.getValue()== null )
                {
                    Ext.ComponentQuery.query('#permistionsDiscounts_Datalink')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsDiscounts_Ecatalog')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsDiscounts_SMART_CART')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsDiscounts_RM_PLC')[0].setDisabled(true);
                     Ext.ComponentQuery.query('#permistionsDiscounts_IRUGZ')[0].setDisabled(true);
                }else{
                     Ext.ComponentQuery.query('#permistionsDiscounts_Datalink')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsDiscounts_Ecatalog')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsDiscounts_SMART_CART')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsDiscounts_RM_PLC')[0].setDisabled(false);
                     Ext.ComponentQuery.query('#permistionsDiscounts_IRUGZ')[0].setDisabled(false);
                 }

                break;

        }
    },

    oninhouseProfileActivityListItemTap: function(dataview, index, target, record, e, eOpts) {
        console.log(record);

        /*
        activity_date: "2014-04-29 16:27:50"
        activity_description: "TechLog :HomeFires::test"
        company: "HomeFires"
        id: "ext-record-467"
        searchvalue: "2014-04-29 16:27:50"
        type: "tech_support_log"

        */


        if(record.data.type == "tech_support_log")
        {
                var vendorStore = Ext.getStore('vendors.Master');

                /*
                    customer_name: "Karastan"
                    customer_type: "vendor"

                */
                var recIndex = vendorStore.findExact("vendor_name",record.data.company) ;


                var vendorRecord = vendorStore.getAt(recIndex);

                if(vendorRecord){

                    var vendorList = Ext.ComponentQuery.query('#allVendorTab')[0].down('#vendorList');



                                        var varibleToSet = setVariable();
                                        var vendorsMainContentPanel = Ext.ComponentQuery.query('#vendorsMainContentPanel')[0];

                                        RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);
                                                        Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDCRMTab');
                                        RMdatalink.app.getController('UINav').onPanelAddretailertapped(vendorsMainContentPanel);

                                        var searchFld = Ext.ComponentQuery.query('#vendorTechLogSearchContentPanel')[0].down('#RMSearchField');
                                        searchFld.setValue(record.data.searchvalue);
                                       // searchFld.fireEvent("keyup") ;//keyup( this, e, eOpts )

                                        Ext.getStore('CompanySpecificTechSupportStore').filter("time_start",record.data.searchvalue);
                                       // store.filter("email", /\.com$/);


                }



                function setVariable(){

                    return {

                        placeClicked:  "",
                        record:vendorRecord,
                        index:recIndex
                    };
                }
        }
    },

    setDataForInHouseDetailedScreen: function() {
           var userData = this.selectedInhouseUser.data ;

        var that =this ;
        this.resetInhouseDetailedPage();

        setVlauesForRetailersDetailCard() ;





        function setVlauesForRetailersDetailCard(){



            fillUserData();
            fillUserRelationData( );
            fillTipsSideBar();
            fillInhouseNotes();
            fillBlueNote();
            fillCommissionStructure() ;
            fillCommissionData() ;

        }

        function fillCommissionData(){

            var InhouseCommissionStore = Ext.getStore('InhouseCommissionStore') ;
            var commissionData = [] ;

            if(userData.commission_data){

                commissionData = userData.commission_data ;
            }

            InhouseCommissionStore.setData(commissionData) ;
            InhouseCommissionStore.sync() ;

            var totalCommission = 0 ;

            for(var i =0 ; i < commissionData.length ; i++ ){

                totalCommission += parseFloat(commissionData[i].commisson,0) ;

            }

            var html = "Total : $ " + totalCommission ;

            Ext.ComponentQuery.query('#inhouseTotalCommistionAmtLbl')[0].setHtml(html) ;

            //inhouseTotalCommistionAmtLbl
        }



        function fillCommissionStructure(){


            if(!userData.commission_structure){

                userData.commission_structure = RMdatalink.util.ServerAPI.getDefaultCommissionStructure().commission_structure ;
            }

            var monthlyStructureList = Ext.ComponentQuery.query('#inhouseDtlCommStruMontlyPanel')[0].down('#mainList');
            var yearlyStructureList = Ext.ComponentQuery.query('#inhouseDtlCommStruYearlyPanel')[0].down('#mainList');

            RMdatalink.util.globalMethods.fillListDataByListObject(monthlyStructureList,userData.commission_structure.monthly);
            RMdatalink.util.globalMethods.fillListDataByListObject(yearlyStructureList,userData.commission_structure.yearly);
        }

        function fillUserData(){


            var mangerForm = Ext.ComponentQuery.query('#inhouseUserProfileFormPanel')[0];
            mangerForm.setDisabled(true) ;
            Ext.ComponentQuery.query('#inhouseProfileSideRelationDetailsForm')[0].setDisabled(true);

            var profilePicView = Ext.ComponentQuery.query('#inhouseProfileAddPhotoImage')[0];
            profilePicView.setSrc(userData.image_url).setHidden(false) ;

            Ext.ComponentQuery.query('#inhouseProfileAddPhoto')[0].setHidden(true);
            Ext.ComponentQuery.query('#inhouseProfileStoreName')[0].setValue(userData.username);
            Ext.ComponentQuery.query('#inhouseProfileFirstName')[0].setValue(userData.firstname);
            Ext.ComponentQuery.query('#inhouseProfileLastName')[0].setValue(userData.lastname);
            Ext.ComponentQuery.query('#inhouseProfileEmail')[0].setValue(userData.email);
            Ext.ComponentQuery.query('#inhouseProfilePhone')[0].setValue(userData.phone);
            Ext.ComponentQuery.query('#inhouseProfileLinkedInField')[0].setValue(userData.linkedin);
            Ext.ComponentQuery.query('#inhouseProfileFacebookField')[0].setValue(userData.facebook);
            Ext.ComponentQuery.query('#inhouseProfileTwitterField')[0].setValue(userData.twitter);

            RMdatalink.util.globalMethods.fillListData('#inhouseProfileActivityList',userData.recent_activity);


            var recentActivityListStore = Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore() ;
            if(recentActivityListStore)
            {
                recentActivityListStore.sort('activity_date',"DESC");
            }

            Ext.ComponentQuery.query('#inhouseProfileMobile')[0].setValue(userData.cell_phone);

            Ext.ComponentQuery.query('#inhouseProfilePosition')[0].setValue(userData.position);



              Ext.ComponentQuery.query('#inhouseProfilePersonalEmail')[0].setValue(userData.personal_email);
              Ext.ComponentQuery.query('#inhouseProfilePcNumberFld')[0].setValue(userData.pc_number);
              Ext.ComponentQuery.query('#inhouseProfilePhoneExt')[0].setValue(userData.phone_ext);

              Ext.ComponentQuery.query('#InhouseUserAddress')[0].setValue(userData.address);
              Ext.ComponentQuery.query('#InhouseUserSuite')[0].setValue(userData.suite);
              Ext.ComponentQuery.query('#InhouseUserCity')[0].setValue(userData.city);
              Ext.ComponentQuery.query('#InhouseUserState')[0].setValue(userData.state);
              Ext.ComponentQuery.query('#InhouseUserZip')[0].setValue(userData.zip);


           if(userData.user_role ){
                    Ext.ComponentQuery.query('#inhouseUserProfileDirectPermissionFld')[0].setValue(userData.user_role);
            }





            if( userData.type == "users"){
                Ext.ComponentQuery.query('#inhouseProfilePosition')[0].setLabel("Position");
                Ext.DomQuery.select('input[name=division-checkbox]')[0].checked =true ;
            }else{
                Ext.ComponentQuery.query('#inhouseProfilePosition')[0].setLabel("Territory");
                Ext.DomQuery.select('input[name=division-checkbox]')[1].checked =true ;
            }

        }




        function fillListData(itemId,data){
            var list = Ext.ComponentQuery.query('#'+itemId)[0] ;
            var listStore = list.getStore();
            if(listStore){
                listStore.removeAll();
                listStore.sync();
            }

            list.setData(data);
            list.refresh();
        }








        // inhouseProfileSideUserAniversaryMonth
        // inhouseProfileSideUserAniversaryDay
        // inhouseProfileSideUserDOBMonth









        function fillUserRelationData(){


            Ext.ComponentQuery.query('#inhouseProfileSideMRDYrsAtStore')[0].setValue(userData.years_at_store);
            Ext.ComponentQuery.query('#inhouseProfileSideUserWife')[0].setValue(userData.relationalDetails.wife);
            Ext.ComponentQuery.query('#inhouseProfileSideUserRelatives')[0].setValue(userData.relationalDetails.relatives);
            Ext.ComponentQuery.query('#inhouseProfileSideUserHobbies')[0].setValue(userData.relationalDetails.hobbies);
            Ext.ComponentQuery.query('#inhouseProfileSideUserCarOfChoice')[0].setValue(userData.relationalDetails.car_of_choice);
            Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone')[0].setValue(userData.relationalDetails.alt_phone);
            Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0].setValue(userData.relationalDetails.alt_email);

            Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0].setValue(userData.website);


            Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Name')[0].setValue(userData.relationalDetails.childs[0].child_name);
            Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Name')[0].setValue(userData.relationalDetails.childs[1].child_name);

            Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Age')[0].setValue(userData.relationalDetails.childs[0].child_age);
            Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Age')[0].setValue(userData.relationalDetails.childs[1].child_age);
            if(userData.relationalDetails.childs[2]){

                Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Name')[0].setValue(userData.relationalDetails.childs[2].child_name);

                Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Age')[0].setValue(userData.relationalDetails.childs[2].child_age);

            }

            Ext.ComponentQuery.query('#inhouseProfileSideUserPartner1')[0].setValue(userData.relationalDetails.partners[0].partner_name);
            Ext.ComponentQuery.query('#inhouseProfileSideUserPartner2')[0].setValue(userData.relationalDetails.partners[1].partner_name);


            Ext.ComponentQuery.query('#inhouseProfileSideUserDOBMonth')[0].setValue(userData.relationalDetails.dob);



            if(userData.emergency_contacts){

                     Ext.ComponentQuery.query('#inhouseEmergencyNameFld')[0].setValue(userData.emergency_contacts.name);
                     Ext.ComponentQuery.query('#inhouseEmergencyPhoneFld')[0].setValue(userData.emergency_contacts.phone);
                     Ext.ComponentQuery.query('#inhouseEmergencyEmailFld')[0].setValue(userData.emergency_contacts.email);
            }


            if(userData.other_relational_data){
                that.addNewFldsForExistingData(userData.other_relational_data);
            }


        }



        function fillTipsSideBar(){


          //  RMdatalink.util.globalMethods.fillListDataByListObject(dataLinkList,discountsData.datalink);
         //dos_and_donts
            var dos_and_donts = Ext.getStore('inhouseDoDontsStore') ;


            if(userData.dos_and_donts && userData.dos_and_donts.length > 1)
            {
                dos_and_donts.setData(userData.dos_and_donts);
                dos_and_donts.sync() ;
            }

            //follow_ups

                var follow_ups = Ext.getStore('inhousefollowUpsStore') ;


            if(userData.follow_ups && userData.follow_ups.length > 1)
            {
                follow_ups.setData(userData.follow_ups);
                follow_ups.sync() ;
            }


        }



        function fillInhouseNotes(){

          var inhouseNotesList = Ext.ComponentQuery.query('#inhouseNotesTab')[0].down('#mainList');


            RMdatalink.util.globalMethods.fillListDataByListObject(inhouseNotesList,userData.notes);

          var inhouseProfileNotesPhotosView = Ext.ComponentQuery.query('#inhouseProfileNotesPhotosView')[0];
             RMdatalink.util.globalMethods.fillListDataByListObject(inhouseProfileNotesPhotosView,userData.photos);

            var inhouseDetailsNotesAttachments  =  Ext.getStore('inhouseDetailsNotesAttachments');
            inhouseDetailsNotesAttachments.removeAll();
            inhouseDetailsNotesAttachments.sync();

            inhouseDetailsNotesAttachments.setData(userData.attachments);
            inhouseDetailsNotesAttachments.sync();


        }


        function fillBlueNote(){

            if(userData.customers){
                var customersStore = Ext.getStore('inhouse.CustomersStore') ;

                customersStore.setData(userData.customers);
                customersStore.sync() ;
            }


           Ext.ComponentQuery.query('#inhouseProfileSideBlueStickyTextArea')[0].setValue(userData.blue_note);
           Ext.ComponentQuery.query('#inhouseProfileNotesBlueStickyTextArea')[0].setValue(userData.blue_note);

        }

    },

    onInhouseUsersListSelect: function(list, record, eOpts) {
        console.log(record);
        //list.deselect(record,false);
        this.isNewRecordBtnTapped = false ;
        this.selectedInhouseUser = record ;
        Ext.ComponentQuery.query('#inhouseMainContentPanel')[0].fireEvent('inhouseAddNewTap',  Ext.ComponentQuery.query('#inhouseMainContentPanel')[0]);
        this.setDataForInHouseDetailedScreen();




        if(Ext.ComponentQuery.query('#inhouseTabPanel')[0].getActiveItem().getItemId() == 'inHouseUsersTab'){
            Ext.DomQuery.select('input[name=division-checkbox]')[0].checked = true ;
        }
        else{
            Ext.DomQuery.select('input[name=division-checkbox]')[0].checked =false;
        }


    },

    resetInhouseDetailedPage: function() {
        this.removeErrorCls();
        this.removeNewlyAddedRelFlds() ;

        resetVlauesForRetailersDetailCard();


        function resetVlauesForRetailersDetailCard(){
            unfillUserData();
            unfillUserRelationData();
            unfillTipsSideBar();
            unfillInhouseNotes();
            umfillBlueNote();
            unFillCommissionData() ;
        }

        function unFillCommissionData(){

            var InhouseCommissionStore = Ext.getStore('InhouseCommissionStore') ;
            InhouseCommissionStore.removeAll();
            InhouseCommissionStore.sync() ;
        }


        function unfillUserData(){

            var mangerForm = Ext.ComponentQuery.query('#inhouseUserProfileFormPanel ')[0];
            mangerForm.setDisabled(false) ;
            Ext.ComponentQuery.query('#inhouseProfileSideRelationDetailsForm')[0].setDisabled(false);

            var profilePicView = Ext.ComponentQuery.query('#inhouseProfileAddPhotoImage')[0];
            profilePicView.setSrc('').setHidden(true) ;

            Ext.ComponentQuery.query('#inhouseProfileAddPhoto')[0].setHidden(false);
            Ext.ComponentQuery.query('#inhouseProfileStoreName')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileFirstName')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileLastName')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileEmail')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfilePhone')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileMobile')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfilePosition')[0].setValue('');


              Ext.ComponentQuery.query('#inhouseProfilePersonalEmail')[0].setValue('');
              Ext.ComponentQuery.query('#inhouseProfilePcNumberFld')[0].setValue('');
              Ext.ComponentQuery.query('#inhouseProfilePhoneExt')[0].setValue('');

              Ext.ComponentQuery.query('#InhouseUserAddress')[0].setValue('');
              Ext.ComponentQuery.query('#InhouseUserSuite')[0].setValue('');
              Ext.ComponentQuery.query('#InhouseUserCity')[0].setValue('');
              Ext.ComponentQuery.query('#InhouseUserState')[0].setValue('');
              Ext.ComponentQuery.query('#InhouseUserZip')[0].setValue('');






            if(Ext.ComponentQuery.query('#selectUserRoleSelectFld')[0]){
                    Ext.ComponentQuery.query('#selectUserRoleSelectFld')[0].setValue(null);
            }



            if(Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore()){

                Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore().removeAll() ;
                Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore().sync() ;
            }





        }


        function unfillUserRelationData(){

            Ext.ComponentQuery.query('#inhouseProfileSideMRDYrsAtStore')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserWife')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserRelatives ')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserHobbies')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserCarOfChoice')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone ')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Name')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Name')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Age')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Age')[0].setValue('');

              Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Name')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Age')[0].setValue('');

            Ext.ComponentQuery.query('#inhouseProfileSideUserPartner1')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileSideUserPartner2')[0].setValue('');

            Ext.ComponentQuery.query('#inhouseProfileSideUserDOBMonth')[0].setValue('');


             Ext.ComponentQuery.query('#inhouseEmergencyNameFld')[0].setValue('');
             Ext.ComponentQuery.query('#inhouseEmergencyPhoneFld')[0].setValue('');
             Ext.ComponentQuery.query('#inhouseEmergencyEmailFld')[0].setValue('');


        }


        function unfillTipsSideBar(){

            var dos_and_donts = Ext.getStore('inhouseDoDontsStore') ;

            dos_and_donts.removeAll();
            dos_and_donts.sync();

            dos_and_donts.setData([
                {"notification":""},
                {"notification":""},
                {"notification":""},
                {"notification":""}
            ]);
            dos_and_donts.sync();

            //follow_ups

            var follow_ups = Ext.getStore('inhousefollowUpsStore') ;

            follow_ups.removeAll();
            follow_ups.sync();

            follow_ups.setData([
                {"notification":""},
                {"notification":""},
                {"notification":""},
                {"notification":""}
            ]);
            follow_ups.sync();


        }



        function unfillInhouseNotes(){

            var inhouseNotesList = Ext.ComponentQuery.query('#inhouseNotesTab')[0].down('#mainList');

            RMdatalink.util.globalMethods.fillListDataByListObject(inhouseNotesList,[]);

            var inhouseProfileNotesPhotosView = Ext.ComponentQuery.query('#inhouseProfileNotesPhotosView')[0];
            RMdatalink.util.globalMethods.fillListDataByListObject(inhouseProfileNotesPhotosView,[]);

            var inhouseDetailsNotesAttachments  =  Ext.getStore('inhouseDetailsNotesAttachments');
            inhouseDetailsNotesAttachments.removeAll();
            inhouseDetailsNotesAttachments.sync();
        }


        function umfillBlueNote(){

            Ext.getStore('inhouse.CustomersStore').removeAll();
            Ext.getStore('inhouse.CustomersStore').sync();

            Ext.ComponentQuery.query('#inhouseProfileSideBlueStickyTextArea')[0].setValue('');
            Ext.ComponentQuery.query('#inhouseProfileNotesBlueStickyTextArea')[0].setValue('');

        }

    },

    exportToCSV: function(data) {
        function JSON2CSV(objArray) {
            var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;

            var str = '';
            var line = '';


                var head = array[0];

                    for (var index in array[0]) {
                        var value = index + "";
                        line += '"' + value.replace(/"/g, '""') + '",';
                    }



                line = line.slice(0, -1);
                str += line + '\r\n';


            for (var i = 0; i < array.length; i++) {
                var line = '';


                    for (var index in array[i]) {
                        if(Array.isArray(array[i][index])){
                           line += '"' + JSON2CSV(array[i][index]).replace(/"/g, '""')  + '",';
                        }
                        else{
                            var value = array[i][index] + "";
                            line += '"' + value.replace(/"/g, '""') + '",';
                        }
                    }

                line = line.slice(0, -1);
                str += line + '\r\n';
            }
            return str;

        }


            var json = data;
            var csv = JSON2CSV(json);
            window.open("data:text/csv;charset=utf-8," + escape(csv));

    },

    getArrayDataFromStore: function(store) {
        var data = new Array();
        data = store.getData().items;

        var dataToReturn = new Array();

        for(var i=0; i < data.length ; i++){

            dataToReturn.push(data[i].data);
        }

        return dataToReturn ;
    },

    saveDoDonts: function(field) {

                var id = field.getAttribute('data-id') ;
                var notification = field.value ;

                var store = Ext.getStore('inhouseDoDontsStore');
                var record = store.findRecord('id',id);
                record.set('notification',notification);
                store.sync();

    },

    saveFollowUps: function(field) {

                var id = field.getAttribute('data-id') ;
                var notification = field.value ;

                var store = Ext.getStore('inhousefollowUpsStore');
                var record = store.findRecord('id',id);
                record.set('notification',notification);
                store.sync();

    },

    saveUpdateInhouseStore: function() {
        // ***  FIRST  CHECK MANDATORY FIELDS  *******
        if(!this.validationForNewRecord())
        {
            Ext.Msg.alert('Error', 'Marked Fields Are Mandatory.', Ext.emptyFn);
            return ;
        }

        else if(!this.validationOfInputFields())
        {
            Ext.Msg.alert('Error', 'Invalid Inputs For Marked Fields.', Ext.emptyFn);
            return;

        }
        // AFTER CHAECKED ALL VALIDATION




        if(! this.isNewRecordBtnTapped ){
           var userData = this.selectedInhouseUser.data ;

        }   else{

            var userData ={

                'access': "",
                'attachments': new Array(),
                'blue_note': '',
                'city': "",
                'comments': "Comment Here.",
                "permissions":new Array(),
                'dos_and_donts': new Array(),
                'email': "",
                'facebook': "",
                'firstname': "",
                'follow_ups':new Array(),
                'id': '',
                'image_url': "resources/images/logos/1.jpg",
                'lastname': "",
                'linkedin': "",
                'notes': new Array(),
                'phone': "",
                'photos':new Array(),
                'position': "",
                'recent_activity': new Array(),
                'relationalDetails': new Object(),
                'twitter': "",
                'username': "",
                'website': "",
                'years_at_store': "",
                'zip': ""
            };

            userData.permissions = new Array() ;
             //  userData.permissions = this.getPermissionsForNewUser() ;
            this.setPermissionsForNewUser(new Array()) ;
        }

                  userData.emergency_contacts = new Object() ;
                  userData.emergency_contacts.name =   Ext.ComponentQuery.query('#inhouseEmergencyNameFld')[0].getValue();
                  userData.emergency_contacts.phone =   Ext.ComponentQuery.query('#inhouseEmergencyPhoneFld')[0].getValue();
                  userData.emergency_contacts.email =   Ext.ComponentQuery.query('#inhouseEmergencyEmailFld')[0].getValue();


        userData.other_relational_data = this.getOtherInhoseUserDetails() ;

        var profilePicView = Ext.ComponentQuery.query('#inhouseProfileAddPhotoImage')[0];
        userData.image_url = profilePicView.getSrc();

                 var customersStore = Ext.getStore('inhouse.CustomersStore') ;

                    userData.customers = this.getArrayDataFromStore(customersStore) ;


        userData.username =  Ext.ComponentQuery.query('#inhouseProfileStoreName')[0].getValue();
        userData.firstname = Ext.ComponentQuery.query('#inhouseProfileFirstName')[0].getValue();
        userData.lastname = Ext.ComponentQuery.query('#inhouseProfileLastName')[0].getValue();
        userData.email = Ext.ComponentQuery.query('#inhouseProfileEmail')[0].getValue();
        userData.phone =  Ext.ComponentQuery.query('#inhouseProfilePhone')[0].getValue();
            userData.linkedin = Ext.ComponentQuery.query('#inhouseProfileLinkedInField')[0].getValue();
            userData.facebook = Ext.ComponentQuery.query('#inhouseProfileFacebookField')[0].getValue();
            userData.twitter = Ext.ComponentQuery.query('#inhouseProfileTwitterField')[0].getValue();






        var permissionsStore =  Ext.getStore('PermisstionsStore') ;

        var newUserRole  = Ext.ComponentQuery.query('#inhouseUserProfileDirectPermissionFld')[0].getValue() ;


                    var recIndex = permissionsStore.findExact("user_role",newUserRole);

                    var permissionRecord = permissionsStore.getAt(recIndex);

          userData.permissions = permissionRecord.data.permissions ;
           userData.user_role =newUserRole ;


        ///////////////////////////////////////////////


              userData.personal_email =Ext.ComponentQuery.query('#inhouseProfilePersonalEmail')[0].getValue();
             userData.pc_number= Ext.ComponentQuery.query('#inhouseProfilePcNumberFld')[0].getValue();
             userData.phone_ext= Ext.ComponentQuery.query('#inhouseProfilePhoneExt')[0].getValue();

              userData.address =Ext.ComponentQuery.query('#InhouseUserAddress')[0].getValue();
             userData.suite= Ext.ComponentQuery.query('#InhouseUserSuite')[0].getValue();
             userData.city= Ext.ComponentQuery.query('#InhouseUserCity')[0].getValue();
            userData.state=  Ext.ComponentQuery.query('#InhouseUserState')[0].getValue();
             userData.zip= Ext.ComponentQuery.query('#InhouseUserZip')[0].getValue();

        //////////////////////////////////////


        console.log(RMdatalink.app.getController('discount.DiscountTabHandler').getDivisionSelection() + "  this.getUserType() ",this.getUserType());

        userData.cell_phone =  Ext.ComponentQuery.query('#inhouseProfileMobile')[0].getValue();

        userData.position =Ext.ComponentQuery.query('#inhouseProfilePosition')[0].getValue();

        userData.recent_activity = Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore() ? this.getArrayDataFromStore(Ext.ComponentQuery.query('#inhouseProfileActivityList')[0].getStore()): new Array() ;


        userData.years_at_store = Ext.ComponentQuery.query('#inhouseProfileSideMRDYrsAtStore')[0].getValue();
        userData.relationalDetails.wife =   Ext.ComponentQuery.query('#inhouseProfileSideUserWife')[0].getValue();
        userData.relationalDetails.relatives = Ext.ComponentQuery.query('#inhouseProfileSideUserRelatives ')[0].getValue();
        userData.relationalDetails.hobbies = Ext.ComponentQuery.query('#inhouseProfileSideUserHobbies')[0].getValue();
        userData.relationalDetails.car_of_choice = Ext.ComponentQuery.query('#inhouseProfileSideUserCarOfChoice')[0].getValue();
        userData.relationalDetails.alt_phone= Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone ')[0].getValue();
        userData.relationalDetails.alt_email= Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0].getValue();

        userData.relationalDetails.dob= Ext.ComponentQuery.query('#inhouseProfileSideUserDOBMonth')[0].getValue();



        userData.website = Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0].getValue();


        userData.relationalDetails.childs = new Array() ;
        userData.relationalDetails.childs.push(
            {
                'child_name' : Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Name')[0].getValue(),
                'child_age' :Ext.ComponentQuery.query('#inhouseProfileSideUserChild1Age')[0].getValue()
            }
        );
        userData.relationalDetails.childs.push(
            {
                'child_name' : Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Name')[0].getValue(),
                'child_age' :Ext.ComponentQuery.query('#inhouseProfileSideUserChild2Age')[0].getValue()
            }
        );


        userData.relationalDetails.childs.push(
            {
                'child_name' : Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Name')[0].getValue(),
                'child_age' :Ext.ComponentQuery.query('#inhouseProfileSideUserChild3Age')[0].getValue()
            }
        );

        userData.relationalDetails.partners = new Array();
        userData.relationalDetails.partners.push({

            'partner_name':Ext.ComponentQuery.query('#inhouseProfileSideUserPartner1')[0].getValue()
        });
        userData.relationalDetails.partners.push({

            'partner_name':Ext.ComponentQuery.query('#inhouseProfileSideUserPartner2')[0].getValue()
        });

        userData.blue_note = Ext.ComponentQuery.query('#inhouseProfileSideBlueStickyTextArea')[0].getValue();

        var dos_and_donts = Ext.getStore('inhouseDoDontsStore') ;
        userData.dos_and_donts = this.getArrayDataFromStore(dos_and_donts) ;


        //follow_ups

        var follow_ups = Ext.getStore('inhousefollowUpsStore') ;

        userData.follow_ups = this.getArrayDataFromStore(follow_ups) ;

        var inhouseNotesList = Ext.ComponentQuery.query('#inhouseNotesTab')[0].down('#mainList');

        userData.notes = inhouseNotesList.getStore() ? this.getArrayDataFromStore(inhouseNotesList.getStore()):new Array() ;


        var inhouseProfileNotesPhotosView = Ext.ComponentQuery.query('#inhouseProfileNotesPhotosView')[0];

        userData.photos = inhouseProfileNotesPhotosView.getStore() ? this.getArrayDataFromStore(inhouseProfileNotesPhotosView.getStore()) : new Array();

        var inhouseDetailsNotesAttachments  =  Ext.getStore('inhouseDetailsNotesAttachments');

        userData.attachments =this.getArrayDataFromStore(inhouseDetailsNotesAttachments) ;



        var userType  =  RMdatalink.app.getController('discount.DiscountTabHandler').getDivisionSelection();

         var inhouseMasterStore = Ext.getStore('inhouseMasterStore');

        if(this.isNewRecordBtnTapped ){
            userData.id = inhouseMasterStore.getAllCount()+1 ;
        }

        // inhouseMasterStore.load();
        if(Ext.DomQuery.select('input[name=division-checkbox]')[0].checked ){
            userType = 'users' ;
            var listToRefresh = Ext.ComponentQuery.query('#inHouseUsersTab')[0].down('#inhouseList') ;
            var storeForList = Ext.ComponentQuery.query('#inHouseUsersTab')[0].down('#inhouseList').getStore();

        }else{

            userType = 'reps' ;
            var listToRefresh = Ext.ComponentQuery.query('#inHouseRepsTab')[0].down('#inhouseList') ;
            var storeForList = Ext.ComponentQuery.query('#inHouseRepsTab')[0].down('#inhouseList').getStore();

        }

         userData.type = userType ;

        var msg ="";

        if(! this.isNewRecordBtnTapped ){


            this.selectedInhouseUser.setData( userData ) ;
           var recordToUpdate = inhouseMasterStore.find("id",userData.id) ;
            if(recordToUpdate != -1){

                this.config.isUpdatingInhouse = true ;
            var inhouseRec =  inhouseMasterStore.getAt(recordToUpdate)  ;
               inhouseRec.set(userData);
                inhouseRec.dirty= true;

                inhouseMasterStore.sync();
            }

            /*
            var inhouseRecord = inhouseMasterStore.findRecord(userType,{});
            var records = new Array() ;
            for(var i=0; i < storeForList.getData().all.length; i++){
                records.push(storeForList.getData().all[i].data);
            }
            inhouseRecord.set(userType,records);
            */
            msg = "Record Updated Successfully";
            listToRefresh.refresh();

            RMdatalink.app.getController('UINav').onBackTextTap() ;

            Ext.Msg.alert('Success.', msg, Ext.emptyFn);


        }else{

            RMdatalink.util.DataLoader.sendNewRecordForInHouseToServer(userData, inhouseMasterStore, successCall, errorCall) ;

                  Ext.ComponentQuery.query('#inhouseDetailPageScreenPanel')[0].setMasked( {
                        xtype: 'loadmask'
                    });
        //successCall() ;
             function errorCall(){


                 console.error("Error") ;
                  console.error(arguments) ;
             }

            function successCall(){
               console.error("Success") ;
                console.error(arguments) ;
                      Ext.ComponentQuery.query('#inhouseDetailPageScreenPanel')[0].setMasked( false );


               /* //For Static JSON
                if(storeForList){
                    storeForList.add(userData) ;
                    storeForList.sync();
                }
                else{
                    Ext.ComponentQuery.query('#inHouseRepsTab')[0].down('#inhouseList').setData([userData]) ;
                    storeForList = Ext.ComponentQuery.query('#inHouseRepsTab')[0].down('#inhouseList').getStore();
                }

                inhouseMasterStore.add(userData);
                inhouseMasterStore.sync();


                listToRefresh.refresh();
                */
                 msg = "Record Added Successfully. Please Wait to update the List";
                RMdatalink.app.getController('UINav').onBackTextTap() ;

             //   Ext.Msg.alert('Success.', msg, Ext.emptyFn);

                 RMdatalink.app.getController('PaginationController').setCurrentActiveStoreId('inhouseMasterStore') ;
                 RMdatalink.app.getController('PaginationController').loadStore(1,RMdatalink.util.DataLoader.getPageSize(),RMdatalink.util.DataLoader.getEnableCachig());

            }

        }



    },

    validationForNewRecord: function() {
        this.removeErrorCls();
        var inhouseDetailsMainTabPanel = Ext.ComponentQuery.query('#inhouseDetailsMainTabPanel')[0];
        var validationForProfile = true;


        var inhouseProfileFirstName = Ext.ComponentQuery.query('#inhouseProfileFirstName')[0];
        var inhouseProfileLastName = Ext.ComponentQuery.query('#inhouseProfileLastName')[0];
        var inhouseProfilePosition = Ext.ComponentQuery.query('#inhouseProfilePosition')[0];

        var inhouseUsernameFld =  Ext.ComponentQuery.query('#inhouseProfileStoreName')[0];
        var inhouseUsername = inhouseUsernameFld.getValue() ;

        var inhouseProfileFirstNameText = inhouseProfileFirstName.getValue();
        var inhouseProfileLastNameText = inhouseProfileLastName.getValue();
        var inhouseProfilePositionText = inhouseProfilePosition.getValue();


        var inhouseEmailFld =  Ext.ComponentQuery.query('#inhouseProfileEmail')[0];
        var inhouseEmail = inhouseUsernameFld.getValue() ;

        if(inhouseEmail.length === 0)
        {
            inhouseEmailFld.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
        }





        if(inhouseUsername.length === 0)
        {
            inhouseUsernameFld.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
        }



        if(inhouseProfileFirstNameText.length === 0)
        {
            inhouseProfileFirstName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
        }
        if(inhouseProfileLastNameText.length === 0)
        {
            inhouseProfileLastName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
        }
        if(inhouseProfilePositionText.length === 0)
        {
            inhouseProfilePosition.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
        }



        if(!validationForProfile)
        {
            inhouseDetailsMainTabPanel.setActiveItem(0);
            return false;
        }

        return true;

    },

    validationOfInputFields: function() {
        this.removeErrorCls();

        var phoneRegex = /^\(?\d{3}\)?-? *\d{3}-? *-?\d{4}$/;

        var inhouseDetailsMainTabPanel = Ext.ComponentQuery.query('#inhouseDetailsMainTabPanel')[0];
        var validationForProfile = true;
        var validationForProfileDetails = true;

        var inhouseProfileEmail = Ext.ComponentQuery.query('#inhouseProfileEmail')[0];
        var inhouseProfilePhone = Ext.ComponentQuery.query('#inhouseProfilePhone')[0];
        var inhouseProfileMobile = Ext.ComponentQuery.query('#inhouseProfileMobile')[0];

        var inhouseProfileSideUserAltPhone = Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone')[0];
        var inhouseProfileSideUserAltEmail = Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0];
        var inhouseProfileSideUserWebsite = Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0];


        var inhouseProfileEmailText = inhouseProfileEmail.getValue();
        var inhouseProfilePhoneText = inhouseProfilePhone.getValue();
        var inhouseProfileMobileText = inhouseProfileMobile.getValue();

        var inhouseProfileSideUserAltPhoneText = inhouseProfileSideUserAltPhone.getValue();
        var inhouseProfileSideUserAltEmailText = inhouseProfileSideUserAltEmail.getValue();
        var inhouseProfileSideUserWebsiteText = inhouseProfileSideUserWebsite.getValue();

        if(inhouseProfileSideUserWebsiteText.substr(0,3) === 'www')
        {
            inhouseProfileSideUserWebsiteText   = inhouseProfileSideUserWebsiteText.replace('www.' ,'https://');
        }


        inhouseProfilePhoneText = inhouseProfilePhoneText.trim() ;
        inhouseProfileMobileText = inhouseProfilePhoneText.trim() ;
        inhouseProfileSideUserAltPhoneText = inhouseProfilePhoneText.trim() ;

        //  *****  VALIDATION  FOR  PHONE  NUMBER  *****
        //if(  inhouseProfilePhoneText.length !== 0  && (!Ext.isNumeric(inhouseProfilePhoneText) || inhouseProfilePhoneText.length < 10))

        if( inhouseProfilePhoneText.length !== 0 && !phoneRegex.test(inhouseProfilePhoneText))

        {
            //console.log(phoneText);
            inhouseProfilePhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
        }
        //if(  inhouseProfileMobileText.length !== 0  && (!Ext.isNumeric(inhouseProfileMobileText) || inhouseProfileMobileText.length < 10))
        if( inhouseProfileMobileText.length !== 0 && !phoneRegex.test(inhouseProfileMobileText))
        {
            //console.log(phoneText);
            inhouseProfileMobile.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
        }


        //if(  inhouseProfileSideUserAltPhoneText.length !== 0  && (!Ext.isNumeric(inhouseProfileSideUserAltPhoneText) || inhouseProfileSideUserAltPhoneText.length < 10))

        if( inhouseProfileSideUserAltPhoneText.length !== 0 && !phoneRegex.test(inhouseProfileSideUserAltPhoneText))
        {
            //console.log(phoneText);
            inhouseProfileSideUserAltPhone.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
            validationForProfileDetails = false;
        }


        //  ***   VALIDATION  FPOR EMAIL  *****

        if( inhouseProfileEmailText.length == 0 || !Ext.data.Validations.email(inhouseProfileEmail, inhouseProfileEmailText))
        {
            inhouseProfileEmail.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
        }

        if( inhouseProfileSideUserAltEmailText.length !== 0 && !Ext.data.Validations.email(inhouseProfileSideUserAltEmail, inhouseProfileSideUserAltEmailText))
        {
            inhouseProfileSideUserAltEmail.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
            validationForProfileDetails = false;
        }




        if( inhouseProfileSideUserWebsiteText.length !== 0 && !RMdatalink.util.globalMethods.isValidWebsite(inhouseProfileSideUserWebsiteText))
        {
            //console.log(websiteText);
            inhouseProfileSideUserWebsite.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
            validationForProfile = false;
            validationForProfileDetails = false;
        }

        if(!validationForProfile || ! validationForProfileDetails)
        {
            inhouseDetailsMainTabPanel.setActiveItem(0);

            //FOR SIDE PANEL
            if(!validationForProfileDetails)
            {
                var inhouseProfileSideTabPanel = Ext.ComponentQuery.query('#inhouseProfileSideTabPanel')[0];
                inhouseProfileSideTabPanel.setActiveItem(1);
            }
            return false;
        }

        return true;



    },

    removeErrorCls: function() {
        var inhouseProfileEmail = Ext.ComponentQuery.query('#inhouseProfileEmail')[0];
        var inhouseProfilePhone = Ext.ComponentQuery.query('#inhouseProfilePhone')[0];
        var inhouseProfileMobile = Ext.ComponentQuery.query('#inhouseProfileMobile')[0];

        var inhouseProfileSideUserAltPhone = Ext.ComponentQuery.query('#inhouseProfileSideUserAltPhone')[0];
        var inhouseProfileSideUserAltEmail = Ext.ComponentQuery.query('#inhouseProfileSideUserAltEmail')[0];
        var inhouseProfileSideUserWebsite = Ext.ComponentQuery.query('#inhouseProfileSideUserWebsite')[0];

        inhouseProfileEmail.removeCls('x-rm-rdformErrorPanel');
        inhouseProfileEmail.addCls('x-rm-rdformpanel');
        inhouseProfilePhone.removeCls('x-rm-rdformErrorPanel');
        inhouseProfilePhone.addCls('x-rm-rdformpanel');
        inhouseProfileMobile.removeCls('x-rm-rdformErrorPanel');
        inhouseProfileMobile.addCls('x-rm-rdformpanel');

        inhouseProfileSideUserAltPhone.removeCls('x-rm-rdformErrorPanel');
        inhouseProfileSideUserAltPhone.addCls('x-rm-rdformpanel');
        inhouseProfileSideUserAltEmail.removeCls('x-rm-rdformErrorPanel');
        inhouseProfileSideUserAltEmail.addCls('x-rm-rdformpanel');
        inhouseProfileSideUserWebsite.removeCls('x-rm-rdformErrorPanel');
        inhouseProfileSideUserWebsite.addCls('x-rm-rdformpanel');


        var inhouseProfileFirstName = Ext.ComponentQuery.query('#inhouseProfileFirstName')[0];
        var inhouseProfileLastName = Ext.ComponentQuery.query('#inhouseProfileLastName')[0];
        var inhouseProfilePosition = Ext.ComponentQuery.query('#inhouseProfilePosition')[0];

        var inhouseUsernameFld =  Ext.ComponentQuery.query('#inhouseProfileStoreName')[0];

        inhouseUsernameFld.removeCls('x-rm-rdformErrorPanel');
        inhouseUsernameFld.addCls('x-rm-rdformpanel');


        inhouseProfileFirstName.removeCls('x-rm-rdformErrorPanel');
        inhouseProfileFirstName.addCls('x-rm-rdformpanel');

        inhouseProfileLastName.removeCls('x-rm-rdformErrorPanel');
        inhouseProfileLastName.addCls('x-rm-rdformpanel');

        inhouseProfilePosition.removeCls('x-rm-rdformErrorPanel');
        inhouseProfilePosition.addCls('x-rm-rdformpanel');
    },

    onInhouseCustomerSelect: function(customerlist,  record,  eOpts) {
        console.log(record) ;

        var vendorStore = Ext.getStore('vendors.Master');

        /*
            customer_name: "Karastan"
            customer_type: "vendor"

        */
        var recIndex = vendorStore.findExact("vendor_name",record.data.customer_name) ;


        var vendorRecord = vendorStore.getAt(recIndex);

        if(vendorRecord){

            var vendorList = Ext.ComponentQuery.query('#allVendorTab')[0].down('#vendorList');



                                var varibleToSet = setVariable();
                                var vendorsMainContentPanel = Ext.ComponentQuery.query('#vendorsMainContentPanel')[0];
                                Ext.ComponentQuery.query('#retailerDetailsMainTabPanel')[0].setActiveItem('#RDStoresTab');
                                RMdatalink.util.globalConfig.setDataToShowInSettingWindow(varibleToSet);

                                RMdatalink.app.getController('UINav').onPanelAddretailertapped(vendorsMainContentPanel);

        }



        function setVariable(){

            return {

                placeClicked:  "",
                record:vendorRecord,
                index:recIndex
            };
        }
    },

    validationForRelationNewField: function() {
                var newFieldName = Ext.ComponentQuery.query('#newFieldName')[0];
                var newFieldKey = Ext.ComponentQuery.query('#newFieldKey')[0];

                var FieldLabel = newFieldName.getValue()+"";
                var newFieldKeyText = newFieldKey.getValue()+"";


                newFieldName.removeCls('x-rm-rdformErrorPanel');
                newFieldName.addCls('x-rm-rdformpanel');

                newFieldKey.removeCls('x-rm-rdformErrorPanel');
                newFieldKey.addCls('x-rm-rdformpanel');


                //  ***   VALIDATION  FPOR EMAIL  *****

                if( FieldLabel.length === 0)
                {
                    newFieldName.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
                   return false;
                }

                if( newFieldKeyText.length === 0)
                {
                    newFieldKey.replaceCls( 'x-rm-rdformpanel' , 'x-rm-rdformErrorPanel');
                   return false;
                }





                return true;


    },

    getOtherInhoseUserDetails: function() {

        var isrtdAddfld = RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap ;



        var otherRelData = [] ;

        if(isrtdAddfld){

            var otheRelFlds = Ext.ComponentQuery.query('#addRtdOtherFlds');

        }else{

            var otheRelFlds = Ext.ComponentQuery.query('#inhouseRelOtherFlds');
        }


        for(var i=0; i< otheRelFlds.length; i++){

            var key =  otheRelFlds[i].fieldKey ;

            var objectTOPush = {};
            objectTOPush.value = otheRelFlds[i].getValue() ;
            objectTOPush.key = key;
            objectTOPush.label  = otheRelFlds[i].getLabel();

            otherRelData.push(objectTOPush);


        }


        console.log(otherRelData);


        return otherRelData;

        /*


                label: FieldLabel,
                labelWidth: "100px",
                fieldKey:"",
                itemId:"inhouseRelOtherFlds"



        */
    },

    addNewRelFldBtnTaped: function() {

        var isrtdAddfld = RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap ;


        if(isrtdAddfld){

            var inhouseProfileSideRelationDetailsForm = Ext.ComponentQuery.query('#rtAdditionalInfoForm')[0];


        }else{

                var inhouseProfileSideRelationDetailsForm = Ext.ComponentQuery.query('#inhouseProfileSideRelationDetailsForm')[0];
        }


        var flag  = RMdatalink.app.getController('inhouse.DetailScreenController').validationForRelationNewField();

        if(flag)
        {
            var FieldLabel = Ext.ComponentQuery.query('#newFieldName')[0].getValue()+"";
            var newFieldKey = Ext.ComponentQuery.query('#newFieldKey')[0].getValue()+"";

            newFieldKey = newFieldKey.replace(/\s+/g,"").toLowerCase();


            if(this.checkForAvailableFields(FieldLabel,newFieldKey)){


                var newLabelTextField = new Ext.field.Text( {
                    label: FieldLabel,
                    labelWidth: isrtdAddfld ? "110px" : "100px",
                    fieldKey:newFieldKey,
                    itemId: isrtdAddfld ? "addRtdOtherFlds" :"inhouseRelOtherFlds"

                });

                inhouseProfileSideRelationDetailsForm.add(newLabelTextField);

                Ext.getCmp("addNewField").hide() ;

            }else{

                Ext.Msg.alert("Alert","Please enter another key and value.",Ext.emptyFn);
            }

        }



        RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap = false ;

    },

    checkForAvailableFields: function(fldLabel, fldKey) {
        var flds = this.getOtherInhoseUserDetails() ;

        var fldValidation = true ;

        for(var i =0; i <flds.length ; i++){

            if(flds[i].key == fldKey || flds[i].label == fldLabel || fldKey == "key"){



                fldValidation = false ;

                break ;
            }
        }



        return fldValidation ;
    },

    removeNewlyAddedRelFlds: function() {

        var isrtdAddfld = RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap ;

        if(isrtdAddfld){
             var otheRelFlds = Ext.ComponentQuery.query('#addRtdOtherFlds');

        }else{
           var otheRelFlds = Ext.ComponentQuery.query('#inhouseRelOtherFlds');
        }
            for(var i=0; i< otheRelFlds.length; i++){

                otheRelFlds[i].destroy() ;

            }
    },

    addNewFldsForExistingData: function(otheRelFlds) {
        /*
          objectTOPush.value = otheRelFlds[i].getValue() ;
            objectTOPush.key = key;
            objectTOPush.label  = otheRelFlds[i].getLabel();

        */


        var isrtdAddfld = RMdatalink.app.getController('RetailerDeatilsDataSet').config.isAdditionalInfoMoreFldsTap ;


        if(isrtdAddfld){

            var inhouseProfileSideRelationDetailsForm = Ext.ComponentQuery.query('#rtAdditionalInfoForm')[0];


        }else{

                var inhouseProfileSideRelationDetailsForm = Ext.ComponentQuery.query('#inhouseProfileSideRelationDetailsForm')[0];
        }




            for(var i=0 ; i<otheRelFlds.length ; i++)
            {
                    var FieldLabel = otheRelFlds[i].label ;
                    var newFieldKey = otheRelFlds[i].key ;
                    var fldValue = otheRelFlds[i].value ;


                    var newLabelTextField = new Ext.field.Text( {
                        label: FieldLabel,
                        labelWidth: isrtdAddfld ? "110px" : "100px",
                        fieldKey:newFieldKey,
                        itemId: isrtdAddfld ? "addRtdOtherFlds" :"inhouseRelOtherFlds",
                        value:fldValue

                    });

                    inhouseProfileSideRelationDetailsForm.add(newLabelTextField);

            }
    },

    onMontlyCommTxtFldLostFocus: function(inputFld, record_key) {

        var id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;

        var monthlyStructureList = Ext.ComponentQuery.query('#inhouseDtlCommStruMontlyPanel')[0].down('#mainList');
        var store = monthlyStructureList.getStore() ;
        var recIndex = store.findExact('id',id) ;

        if(recIndex == -1){
            return ;
        }


        var record = store.getAt(recIndex) ;

        record.set(record_key,value) ;



    },

    onYearlyCommTxtFldLostFocus: function(inputFld, record_key) {

        var id = inputFld.attributes['data-id'].value ;
        var value = inputFld.value ;

        var yearlyStructureList = Ext.ComponentQuery.query('#inhouseDtlCommStruYearlyPanel')[0].down('#mainList');


        var store = yearlyStructureList.getStore() ;
        var recIndex = store.findExact('id',id) ;

        if(recIndex == -1){
            return ;
        }


        var record = store.getAt(recIndex) ;

        record.set(record_key,value) ;
    }

});