/*
 * File: app/controller/alertPopUp.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.alertPopUp', {
    extend: 'Ext.app.Controller',
    alias: 'controller.alertPopUp',

    config: {
        control: {
            "alertPopUp": {
                alertconfirm: 'onAlertPopUpAlertConfirm',
                alertdecline: 'onAlertPopUpAlertDecline'
            }
        }
    },

    onAlertPopUpAlertConfirm: function(sheet) {
        var activeCard = Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem();
        var tabPanel = activeCard.down('tabpanel');

        if(activeCard.getItemId() === "card-retailer-details") {

            if(tabPanel) {
                var activeTab = tabPanel.getActiveItem();

                if(activeTab.title === "CRM" || activeTab.title === "NOTES") {
                    if(sheet.getItemId() === "alertForNotes") {
                        var notesList = activeTab.down("#mainList");
                        var notesStore = notesList.getStore();
                        var selectedNote = notesList.getSelection();
                        if(!Ext.isEmpty(selectedNote)) {
                            notesStore.remove(selectedNote);
                            notesList.refresh();
                            var note = activeTab.down("#RDNotepadNote");
                            var adminBtn = activeTab.down("#RDNotepadAdminBtn");
                            var byLabel = activeTab.down("#RDNotesNameLabel");

                            note.setValue('');
                            byLabel.setHtml("by Me on "+Ext.Date.format(new Date(), 'Y/m/d'));
                            adminBtn.selected = false;
                            adminBtn.setCls('');
                            adminBtn.addCls('x-rm-rdnotesadminbtn-unselected');

                            RMdatalink.app.getController('RetailerDeatilsDataSet').updateRTVDNotes() ;
                        }
                        else
                            Ext.Msg.alert('Alert', 'Please select a note to Delete', Ext.emptyFn);

                        return;
                    }
                    var sideTab = Ext.ComponentQuery.query('#RDCRMNotesSideTabPanel')[0].getActiveItem();
                    if(sideTab.title === "PHOTOS") {
                        var photoList = Ext.ComponentQuery.query("#RDCRMNotesPhotosView")[0];
                        var photoStore = photoList.getStore();

                        if(!Ext.isEmpty(photoList.getSelection())) {
                            photoStore.remove(photoList.getSelection());
                        }
                    }
                    else if(sideTab.title === "ATTACHMENTS") {
                        var attList = Ext.ComponentQuery.query("#RDCRMNotesAttList")[0];
                        var attStore = attList.getStore();
                        if(!Ext.isEmpty(attList.getSelection())) {
                            attStore.remove(attList.getSelection());
                        }
                    }
                }
            }
        }



         if(sheet.getItemId() === "alertForNotesInhouseList") {

                         var noteTab = Ext.ComponentQuery.query('#inhouseNotesTab')[0];
                        var notesList = noteTab.down("#mainList");
                        var notesStore = notesList.getStore();
                        var selectedNote = notesList.getSelection();
                        if(!Ext.isEmpty(selectedNote)) {
                            notesStore.remove(selectedNote);
                            notesList.refresh();
                            var note = noteTab.down("#inhouseNotepadNote");
                            var adminBtn = noteTab.down("#inhouseNotepadAdminBtn");
                            var byLabel = noteTab.down("#inhouseNotesNameLabel");

                            note.setValue('');
                            byLabel.setHtml("by Me on "+Ext.Date.format(new Date(), 'Y/m/d'));
                            adminBtn.selected = false;
                            adminBtn.setCls('');
                            adminBtn.addCls('x-rm-rdnotesadminbtn-unselected');
                        }
                        else
                            Ext.Msg.alert('Alert', 'Please select a note to Delete', Ext.emptyFn);

                        return;
           }

         if(sheet.getItemId() === "alertForPhotosInhouseListSide") {

                          var photoList = Ext.ComponentQuery.query("#inhouseProfileNotesPhotosView")[0];
                        var photoStore = photoList.getStore();
                        if(!Ext.isEmpty(photoList.getSelection())) {
                            photoStore.remove(photoList.getSelection());
                        }

                        return;
           }

         if(sheet.getItemId() === "alertForAttachmentsInhouseListSide") {


                        var attList = Ext.ComponentQuery.query("#inhouseProfileNotesAttList")[0];
                        var attStore = attList.getStore();

                        if(!Ext.isEmpty(attList.getSelection())) {
                            attStore.remove(attList.getSelection());
                        }
                        return;
           }

         if(sheet.getItemId() === "alertForDiscountDelete") {

                  id =  sheet.discountId  ;
                 type = sheet.discountType ;

             var discountsMasterStore = Ext.getStore('discountsMasterStore');

        switch(type){

            case "discountsDataLink":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsDataLinkTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                store.sync();
                updateDiscountsDataLink(store);

                break;

             case "discountsEcatlogTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsEcatlogTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                store.sync();

                updateDiscountsEcatalog(store);

                break;

             case "discountsSmartCartTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsSmartCartTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                store.sync();

                updateDiscountsSmartcart(store);

                break;

             case "discountsRMPLCTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsRMPLCTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
               store.remove(record);
                store.sync();

                updateDiscountsRmplc(store);

                break;


             case "discountsIrugzTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsIrugzTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                store.sync();

                updateDiscountsIrugz(store);

                break;


             case "discountsSidePreviousTab":
                var discountsDataLinkTab  = Ext.ComponentQuery.query('#discountsSidePreviousTab')[0];
                var list = discountsDataLinkTab.down('#discountList');
                var store = list.getStore();
                var record = store.findRecord('id',id);
                store.remove(record);
                //record.set('comment',comment);
                store.sync();

                updateDiscountsPreviousDiscounts(store);

                break;
        }



        function updateDiscountsDataLink(store){
                    var discountRecord = discountsMasterStore.findRecord("datalink",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("datalink",records);
        }

        function updateDiscountsEcatalog(store){
                    var discountRecord = discountsMasterStore.findRecord("ecatalog",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("ecatalog",records);
        }

        function updateDiscountsSmartcart(store){
                    var discountRecord = discountsMasterStore.findRecord("smartcart",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("smartcart",records);
        }

        function updateDiscountsRmplc(store){
                    var discountRecord = discountsMasterStore.findRecord("rmplc",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("rmplc",records);
        }
        function updateDiscountsIrugz(store){
                    var discountRecord = discountsMasterStore.findRecord("irugz",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("irugz",records);
        }

        function updateDiscountsPreviousDiscounts(store){
                    var discountRecord = discountsMasterStore.findRecord("previousDiscounts",{});
                    var records = [] ;
                    for(var i=0; i < store.getData().all.length; i++){
                        records.push(store.getData().all[i].data);
                    }
                    discountRecord.set("previousDiscounts",records);
        }

                        return;
           }
        //alertForDiscountDelete
    },

    onAlertPopUpAlertDecline: function(sheet) {

    }

});