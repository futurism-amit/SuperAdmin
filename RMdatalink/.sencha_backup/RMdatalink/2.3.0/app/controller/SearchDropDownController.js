/*
 * File: app/controller/SearchDropDownController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.SearchDropDownController', {
    extend: 'Ext.app.Controller',

    config: {
        SearchDropDownView: null,
        searchField: null,

        control: {
            "searchfield[action=fillSearchDropDown]": {
                keyup: 'onfillSearchDropDownSearchfieldKeyup'
            },
            "list[itemId=SearchDropDownList]": {
                itemtap: 'onSearchDropDownListItemTap'
            },
            "list[itemId=inHouseCustomersList]": {
                disclose: 'oninHouseCustomersListDisclose'
            }
        }
    },

    onfillSearchDropDownSearchfieldKeyup: function(textfield, e, eOpts) {
        this.config.searchField = textfield ;
        this.searchForCustomersList(textfield) ;
        //this.config.searchField = textfield ;
    },

    onSearchDropDownListItemTap: function(dataview, index, target, record, e, eOpts) {
        console.log(record);
        console.log("select");

        if(this.config.searchField.getItemId() == "techSupportCompanyNameText"){

            RMdatalink.app.getController('TechSupportLog').config.tempCompanyId = record.data._id ;
            this.config.searchField.setValue(record.data.text);
        }
        else if(this.config.searchField.getItemId() == "rtSalesPersonSearchFld")
        {
            var data = new Object();

            var customerName = record.data.text ;
            var customersStore = Ext.getStore('products.RtSalesPersonStore') ;

            if(customersStore.findExact("_id",record.data._id) != -1 ){
                this.config.SearchDropDownView.hide();
                return ;
            }

            customersStore.add({
                salesperson_name:customerName,
                _id: record.data._id

            });

            customersStore.sync() ;


            var cStoreLength = customersStore.getData().all.length ;
            var maxCommission = 100 ;
            var equalDivision = (maxCommission / cStoreLength).toFixed(2) ;

            equalDivision = parseFloat(equalDivision , 0 ) ;

            for(var i= (cStoreLength  - 1) ; i >= 0; i-- ){

                if(i == 0)
                {
                    customersStore.getAt(i).set('salesperson_commission',(maxCommission - (equalDivision * (cStoreLength - 1 )) )) ;
                }else
                {
                    customersStore.getAt(i).set('salesperson_commission',( equalDivision )) ;
                }

            }

        }
        else if(this.config.searchField.getItemId() == "rtDatalinkSalesPersonSearchFld")
        {

             var data = new Object();

            var customerName = record.data.text ;
            var customersStore = Ext.getStore('invoice.RtDatalinkSalesPersonStore') ;

            if(customersStore.findExact("_id",record.data._id) != -1 ){
                this.config.SearchDropDownView.hide();
                return ;
            }



            customersStore.add({
                salesperson_name:customerName,
                _id: record.data._id

            });

            customersStore.sync() ;


            var cStoreLength = customersStore.getData().all.length ;
            var maxCommission = 100 ;
            var equalDivision = (maxCommission / cStoreLength).toFixed(2) ;

            equalDivision = parseFloat(equalDivision , 0 ) ;

            for(var i= (cStoreLength  - 1) ; i >= 0; i-- ){

                if(i == 0)
                {
                    customersStore.getAt(i).set('salesperson_commission',(maxCommission - (equalDivision * (cStoreLength - 1 )) )) ;
                }else
                {
                    customersStore.getAt(i).set('salesperson_commission',( equalDivision )) ;
                }

            }


        }
        else{
            console.log(record);

            var data = new Object();

            var customerName = record.data.text ;
            var customersStore = Ext.getStore('inhouse.CustomersStore') ;

            if(customersStore.findExact("customer_name",customerName) != -1 ){
                this.config.SearchDropDownView.hide();
                return ;
            }

            var custType = Ext.ComponentQuery.query('#customersContainer')[0].down('#searchForRetailerRadioFld').getChecked() ? "retailer" : "vendor";

            customersStore.add({
                customer_name:customerName,
                customer_id: record.data._id ,
                customer_type:custType
            });

            customersStore.sync() ;


        }

         this.config.SearchDropDownView.hide();
    },

    oninHouseCustomersListDisclose: function(list, record, target, index, e, eOpts) {

        list.getStore().removeAt(index);
        list.getStore().sync() ;
    },

    searchForCustomersList: function(searchField) {

            var _this = this ;
            var searchText = searchField.getValue();
             var SearchDropDownStore = Ext.getStore('SearchDropDownStore') ;


            SearchDropDownStore.clearFilter();

            if(!  this.config.SearchDropDownView )
            {
                this.createSearchDropDownView() ;
            }

          if(this.config.searchField.getItemId() == "rtSalesPersonSearchFld"  ||  this.config.searchField.getItemId() == "rtDatalinkSalesPersonSearchFld"){
                this.loadInouseSalesDropDown(searchText);
               _this.config.SearchDropDownView.showBy(searchField) ;

              return ;
            }


        var isSearchForRetailer = searchField.getParent().down('#searchForRetailerRadioFld') ? searchField.getParent().down('#searchForRetailerRadioFld').getChecked() : false;

        //var isSearchForRetailer = Ext.ComponentQuery.query('#searchForRetailerRadioFld')[0].getChecked();

        if(isSearchForRetailer){

            searchForRetailers() ;
        }else{


                    this.loadDropDownStore();



            var searchregx =  new RegExp(searchText ,"i" ) ;

            console.log(searchregx) ;


            SearchDropDownStore.filter("text", searchregx );



        }

         _this.config.SearchDropDownView.showBy(searchField) ;


        function searchForRetailers(){



            RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_masterretailerrecords",pageNo:1,pageSize: 50 ,sortBy:{},
             query:{'$or':[
                { "store_name": { $regex: searchText , $options: 'i' } },
                { "store_state": { $regex: searchText , $options: 'i' } }
             ]},fields:{store_name:1}},success,error);







            function success(){
            console.log(arguments[0].count) ;

               if(parseInt(arguments[0].count) > 0 )
               {

                        var tempArray = arguments[0].items;

                        SearchDropDownStore.removeAll();
                        SearchDropDownStore.sync() ;


                        var tdata = new Array() ;

                       for(var i=0; i < tempArray.length ; i++){

                           tdata.push({text: tempArray[i].store_name, _id : tempArray[i]._id });
                       }


                    SearchDropDownStore.setData(tdata);
                    SearchDropDownStore.sync() ;


               }



            }

            function error(){


            }


        }


        /*

            var searchText = searchField.getValue();


            var searchregx =  new RegExp(searchText ) ;
            console.log(searchregx) ;
            var SearchDropDownStore = Ext.getStore('SearchDropDownStore') ;



            if(searchText.length == 0){
                return ;
            }

            RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_vendor_masters",pageNo:1,pageSize:10,sortBy:{},query:{"vendor_name":searchregx},fields:{"vendor_name":1}},suc,err);

            function suc(){

                 _this.config.SearchDropDownView.showBy(searchField) ;
                console.log(arguments);

                SearchDropDownStore.removeAll();
                SearchDropDownStore.sync() ;

                var data = new Array();

                for(var i=0 ; i< arguments[0].items.length;i++){


                    var temp = {

                        text:arguments[0].items[i].vendor_name ,
                        _id : arguments[0].items[i]._id
                    };

                    data.push( temp );
                }

                SearchDropDownStore.setData(data);
                SearchDropDownStore.sync();

            }

            function err(){
                failuer() ;
            }

        */
    },

    createSearchDropDownView: function() {
        if(Ext.getCmp("SearchDropDownView"))
        {

         return ;

        }else{

          this.config.SearchDropDownView  = Ext.widget('SearchDropDownView');
        }

    },

    loadDropDownStore: function() {

        var vendorStore  = Ext.getStore('SearchDropDownStore') ;


                var tempArray = new Array();
                tempArray = getArrayDataFromStore(Ext.getStore('vendors.Master'));

               var SearchDropDownStore = Ext.getStore('SearchDropDownStore') ;






                SearchDropDownStore.removeAll();
                SearchDropDownStore.sync() ;


                var tdata = new Array() ;

               for(var i=0; i < tempArray.length ; i++){

                   tdata.push({text: tempArray[i].vendor_name});
               }


            SearchDropDownStore.setData(tdata);
            SearchDropDownStore.sync() ;




        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(data[i].data);
            }

            return dataToReturn ;
         }



    },

    loadInouseSalesDropDown: function(searchText) {
              var _this = this ;

              var SearchDropDownStore = Ext.getStore('SearchDropDownStore') ;


            RMdatalink.iwa.rdl.queryDB({collection: dbEnv + "rdl_inhouserecords",pageNo:1,pageSize: 50 ,sortBy:{},
             query:{'$or':[

                 { "username": { $regex: searchText , $options: 'i' } }

             ]},fields:{username:1}},success,error);







            function success(){
            console.log(arguments[0].count) ;

               if(parseInt(arguments[0].count) > 0 )
               {

                        var tempArray = arguments[0].items;

                        SearchDropDownStore.removeAll();
                        SearchDropDownStore.sync() ;


                        var tdata = new Array() ;

                       for(var i=0; i < tempArray.length ; i++){

                           tdata.push({text: tempArray[i].username, _id : tempArray[i]._id });
                       }


                    SearchDropDownStore.setData(tdata);
                    SearchDropDownStore.sync() ;


               }



            }

            function error(){


            }
        /*
                var vendorStore  = Ext.getStore('SearchDropDownStore') ;


                var tempArray = new Array();
                tempArray = getArrayDataFromStore(Ext.getStore('inhouseMasterStore'));

                var SearchDropDownStore = Ext.getStore('SearchDropDownStore') ;






                SearchDropDownStore.removeAll();
                SearchDropDownStore.sync() ;


                var tdata = new Array() ;

               for(var i=0; i < tempArray.length ; i++){

                   tdata.push(
                               {
                                   text: tempArray[i].username,
                                   _id: tempArray[i]._id
                               }
                           );
               }


            SearchDropDownStore.setData(tdata);
            SearchDropDownStore.sync() ;




        function getArrayDataFromStore(store){

            var data = new Array();
            data = store.getData().all;

            var dataToReturn = new Array();

            for(var i=0; i < data.length ; i++){

                dataToReturn.push(data[i].data);
            }

            return dataToReturn ;
         }


        */
    }

});