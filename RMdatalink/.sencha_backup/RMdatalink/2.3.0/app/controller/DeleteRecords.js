/*
 * File: app/controller/DeleteRecords.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.controller.DeleteRecords', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "button[itemId=deleteUserRoleCacelBtn]": {
                tap: 'deleteUserRoleCacelBtnTap'
            },
            "button[itemId=permissionSelectorDeleteRoleBtn]": {
                tap: 'onpermissionSelectorDeleteRoleBtnTap'
            },
            "button[itemId=deleteUserRoleDeleteBtn]": {
                tap: 'ondeleteUserRoleDeleteBtnTap'
            }
        }
    },

    deleteUserRoleCacelBtnTap: function(button, e, eOpts) {
        Ext.ComponentQuery.query("#DeleteUserRoleScreen")[0].hide();

        Ext.ComponentQuery.query("#DeleteUserRoleScreen")[0].destroy() ;
    },

    onpermissionSelectorDeleteRoleBtnTap: function(button, e, eOpts) {


        getDeleteUserRoleScreen().show();

        function getDeleteUserRoleScreen(){

            if(Ext.ComponentQuery.query("#DeleteUserRoleScreen")[0])
            {

             return Ext.ComponentQuery.query("#DeleteUserRoleScreen")[0];

            }else{

             return Ext.widget('DeleteUserRoleScreen');
            }

        }
    },

    ondeleteUserRoleDeleteBtnTap: function(button, e, eOpts) {
        this.deleteUserRoles() ;
    },

    deleteRetailers: function() {




        var retailers = Ext.ComponentQuery.query('#allRetailerTab')[0].down('#retailerList').getSelection();
        var that = this ;




        var masterStore = Ext.getStore('retailersMaster');
        if(retailers.length == 0 ){
            Ext.Msg.alert("Alert","Select at least one record to delete",Ext.emptyFn);
            return ;
        }


        Ext.Msg.confirm("Confirm","Are you sure you want to delete records.",onMessageAns ,this);


        function onMessageAns(action,opt,confirmBox){


            if(action == "yes"){


                 Ext.Viewport.setMasked({
                                            xtype: 'loadmask'
                                        });

                deleteVendors() ;

            }else{


                return ;
            }


        }


        var index = 0 ;
        function deleteVendors(){


            if(index < retailers.length )
            {
            var dataToUpdate = {

                delete_status:true
            };
              RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,retailers[index].data._id , success, error );

            }else{

                RMdatalink.app.getController('PaginationController').loadDependentStoresonMaster('retailersMaster');


                Ext.Viewport.setMasked(false);

                console.log("Records Deleted Successfully.");
            }

        }





        function success(){

           // masterStore.remove( retailers[index] ) ;

            updateRespectiveRetailer(retailers[index].get('_id'));

            index ++;
            deleteVendors() ;
        }

        function error(){

             index ++;
            deleteVendors() ;

        }


        function updateRespectiveRetailer(_id){

            var tempStore = null;
            var recIn = -1;
            var tRec = null;
            tempStore = Ext.getStore('retailerUsers') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tRec = tempStore.getAt(recIn) ;
                tempStore.remove(tRec) ;
            }

                tempStore = Ext.getStore('retailerPending') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tRec = tempStore.getAt(recIn) ;
                tempStore.remove(tRec) ;
            }


                tempStore = Ext.getStore('retailerHotProspects') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

               tRec = tempStore.getAt(recIn) ;
                tempStore.remove(tRec) ;
            }


                tempStore = Ext.getStore('retailerProspects') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tRec = tempStore.getAt(recIn) ;
                tempStore.remove(tRec) ;
            }


                tempStore = Ext.getStore('retailerInactive') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tRec = tempStore.getAt(recIn) ;
                tempStore.remove(tRec) ;
            }


                tempStore = Ext.getStore('retailersMaster') ;

            recIn = tempStore.findExact('_id',_id) ;

            if(recIn != -1){

                tRec = tempStore.getAt(recIn) ;
                tempStore.remove(tRec) ;
            }



        }
    },

    deleteVendors: function() {
        var vendors = Ext.ComponentQuery.query('#allVendorTab')[0].down('#vendorList').getSelection();
        var that = this ;



        var masterStore = Ext.getStore('vendors.Master');
        if(vendors.length == 0 ){
            Ext.Msg.alert("Alert","Select at least one record to delete",Ext.emptyFn);
            return ;
        }


        Ext.Msg.confirm("Confirm","Are you sure you want to delete records.",onMessageAns ,this);


        function onMessageAns(action,opt,confirmBox){


            if(action == "yes"){


                 Ext.Viewport.setMasked({
                                            xtype: 'loadmask'
                                        });


                deleteVendors() ;

            }else{


                return ;
            }


        }


        var index = 0 ;
        function deleteVendors(){


            if(index < vendors.length )
            {
            var dataToUpdate = {

                delete_status:true
            };
              RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,vendors[index].data._id , success, error );

            }else{

                Ext.Viewport.setMasked(false);

                console.log("Records Deleted Successfully.");
            }

        }





        function success(){

            masterStore.remove( vendors[index] ) ;

            index ++;
            deleteVendors() ;
        }

        function error(){

             index ++;
            deleteVendors() ;

        }
    },

    deleteRMPRO: function() {

        var rmProCntrlr = RMdatalink.app.getController('RMProController') ;

        var vendors =   [] ;// Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList').getSelection();

        if(rmProCntrlr.config.rmProSelectedRecord){

            vendors.push(rmProCntrlr.config.rmProSelectedRecord) ;
        }
        var that = this ;


        console.log(vendors) ;


        var masterStore = Ext.getStore('products.RMProStore');
        if(vendors.length == 0 ){
            Ext.Msg.alert("Alert","Select at least one record to delete",Ext.emptyFn);
            return ;
        }


        Ext.Msg.confirm("Confirm","Are you sure you want to delete records.",onMessageAns ,this);


        function onMessageAns(action,opt,confirmBox){


            if(action == "yes"){


                 Ext.Viewport.setMasked({
                                            xtype: 'loadmask'
                                        });


                deleteVendors() ;

            }else{


                return ;
            }


        }


        var index = 0 ;
        function deleteVendors(){


            if(index < vendors.length )
            {
            var dataToUpdate = {

                delete_status:true
            };
              RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,vendors[index].data._id , success, error );

            }else{

                Ext.Viewport.setMasked(false);


                RMdatalink.app.getController('BillingDetailsController').updateRMProPricing() ;
                console.log("Records Deleted Successfully.");
            }

        }





        function success(){

            masterStore.remove( vendors[index] ) ;
            resetRMPROFields() ;
            index ++;
            deleteVendors() ;
        }

        function error(){

             index ++;
            deleteVendors() ;

        }

        function resetRMPROFields(){

            RMdatalink.app.getController('RMProController').resetRMPROFlds() ;

        }
    },

    deleteDatalink: function() {

        var rmProCntrlr = RMdatalink.app.getController('DatalinkController') ;

        var vendors =   [] ;// Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList').getSelection();

        if(rmProCntrlr.config.rmProSelectedRecord){

            vendors.push(rmProCntrlr.config.rmProSelectedRecord) ;
        }
        var that = this ;


        console.log(vendors) ;


        var masterStore = Ext.getStore('products.DatalinkMain');
        if(vendors.length == 0 ){
            Ext.Msg.alert("Alert","Select at least one record to delete",Ext.emptyFn);
            return ;
        }


        Ext.Msg.confirm("Confirm","Are you sure you want to delete records.",onMessageAns ,this);


        function onMessageAns(action,opt,confirmBox){


            if(action == "yes"){


                 Ext.Viewport.setMasked({
                                            xtype: 'loadmask'
                                        });


                deleteVendors() ;

            }else{


                return ;
            }


        }


        var index = 0 ;
        function deleteVendors(){


            if(index < vendors.length )
            {
            var dataToUpdate = {

                delete_status:true
            };
              RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,vendors[index].data._id , success, error );

            }else{

                Ext.Viewport.setMasked(false);


              //  RMdatalink.app.getController('BillingDetailsController').updateRMProPricing() ;
                console.log("Records Deleted Successfully.");
            }

        }





        function success(){

            masterStore.remove( vendors[index] ) ;
            resetRMPROFields() ;
            index ++;
            deleteVendors() ;
        }

        function error(){

             index ++;
            deleteVendors() ;

        }

        function resetRMPROFields(){

            RMdatalink.app.getController('DatalinkController').resetRMPROFlds() ;

        }
    },

    deleteecom: function() {

        var rmProCntrlr = RMdatalink.app.getController('ecomController') ;

        var vendors =   [] ;// Ext.ComponentQuery.query('#rmProMainListContainer')[0].down('#mainList').getSelection();

        if(rmProCntrlr.config.rmProSelectedRecord){

            vendors.push(rmProCntrlr.config.rmProSelectedRecord) ;
        }
        var that = this ;


        console.log(vendors) ;


        var masterStore = Ext.getStore('products.ecomMain');
        if(vendors.length == 0 ){
            Ext.Msg.alert("Alert","Select at least one record to delete",Ext.emptyFn);
            return ;
        }


        Ext.Msg.confirm("Confirm","Are you sure you want to delete records.",onMessageAns ,this);


        function onMessageAns(action,opt,confirmBox){


            if(action == "yes"){


                 Ext.Viewport.setMasked({
                                            xtype: 'loadmask'
                                        });


                deleteVendors() ;

            }else{


                return ;
            }


        }


        var index = 0 ;
        function deleteVendors(){


            if(index < vendors.length )
            {
            var dataToUpdate = {

                delete_status:true
            };
              RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,vendors[index].data._id , success, error );

            }else{

                Ext.Viewport.setMasked(false);


                RMdatalink.app.getController('BillingDetailsController').updateRMProPricing() ;
                console.log("Records Deleted Successfully.");
            }

        }





        function success(){

            masterStore.remove( vendors[index] ) ;
            resetRMPROFields() ;
            index ++;
            deleteVendors() ;
        }

        function error(){

             index ++;
            deleteVendors() ;

        }

        function resetRMPROFields(){

            RMdatalink.app.getController('ecomController').resetRMPROFlds() ;

        }
    },

    deleteInhoue: function() {
        var vendors = Ext.ComponentQuery.query('#inhouseTabPanel')[0].getActiveItem().down('#inhouseList').getSelection();




        var that = this ;



        var masterStore = Ext.getStore('inhouseMasterStore');
        if(vendors.length == 0 ){
            Ext.Msg.alert("Alert","Select at least one record to delete",Ext.emptyFn);
            return ;
        }


        Ext.Msg.confirm("Confirm","Are you sure you want to delete records.",onMessageAns ,this);


        function onMessageAns(action,opt,confirmBox){


            if(action == "yes"){


                 Ext.Viewport.setMasked({
                                            xtype: 'loadmask'
                                        });


                deleteVendors() ;

            }else{


                return ;
            }


        }


        var index = 0 ;
         var rec = null ;
        function deleteVendors(){


            if(index < vendors.length )
            {
            var dataToUpdate = {

                delete_status:true
            };


                var id=  Ext.ComponentQuery.query('#inhouseTabPanel')[0].getActiveItem().down('#inhouseList').getSelection()[0].data.id;

                var recI =  masterStore.find("id",id) ;

               rec = masterStore.getAt(recI);

                var _id = rec.raw._id ;
              RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,_id , success, error );

            }else{

                Ext.Viewport.setMasked(false);


                    RMdatalink.app.getController('RetailerDeatilsDataSet').setInhouseData();

                console.log("Records Deleted Successfully.");
            }

        }





        function success(){

            masterStore.remove( rec ) ;

            index ++;
            deleteVendors() ;
        }

        function error(){

             index ++;
            deleteVendors() ;

        }
    },

    deleteTechSupportLogs: function() {
        var vendors = Ext.ComponentQuery.query('#browseLatestLogTab')[0].down('#mainList').getSelection();




        var that = this ;



        var masterStore = Ext.getStore('TechSupportLogsStore');
        if(vendors.length == 0 ){
            Ext.Msg.alert("Alert","Select at least one record to delete",Ext.emptyFn);
            return ;
        }


        Ext.Msg.confirm("Confirm","Are you sure you want to delete records.",onMessageAns ,this);


        function onMessageAns(action,opt,confirmBox){


            if(action == "yes"){


                 Ext.Viewport.setMasked({
                                            xtype: 'loadmask'
                                        });


                deleteVendors() ;

            }else{


                return ;
            }


        }


        var index = 0 ;

        function deleteVendors(){


            if(index < vendors.length )
            {
            var dataToUpdate = {

                delete_status:true
            };


                var _id = vendors[index].raw._id ;



              RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,_id , success, error );

            }else{

                Ext.Viewport.setMasked(false);


                    RMdatalink.app.getController('RetailerDeatilsDataSet').setInhouseData();

                console.log("Records Deleted Successfully.");
            }

        }





        function success(){

            masterStore.remove( vendors[index] ) ;
            resetTechSupportLogView() ;
            index ++;
            deleteVendors() ;
        }

        function error(){

             index ++;
            deleteVendors() ;

        }

        function resetTechSupportLogView(){

                Ext.ComponentQuery.query('#latestLogsProblem')[0].setValue('');

                Ext.ComponentQuery.query('#latestLogsSolution')[0].setValue('');

                Ext.ComponentQuery.query('#borwseLatestLogStatusSelectFld')[0].setValue(null);
        }
    },

    deleteUserRoles: function() {
        /*


        deleteUserRoleSelectFld
        deleteUserRolePlcaeHolderSelectFld
        */

        var roleToDelete = Ext.ComponentQuery.query('#deleteUserRoleSelectFld')[0].getValue() ;
        var placeHolderRole = Ext.ComponentQuery.query('#deleteUserRolePlcaeHolderSelectFld')[0].getValue() ;

        if(! roleToDelete || ! placeHolderRole){

            return;
        }


        var recordToDelete ;

        var that = this ;





        var masterStore = Ext.getStore('PermisstionsStore');

        var recIndex = masterStore.findExact("user_role",roleToDelete);

        if(recIndex == -1 ){

            return ;
        }

        recordToDelete = masterStore.getAt(recIndex);


        Ext.Msg.confirm("Confirm","Are you sure you want to delete records.",onMessageAns ,this);


        function onMessageAns(action,opt,confirmBox){


            if(action == "yes"){


                 Ext.Viewport.setMasked({
                                            xtype: 'loadmask'
                                        });


                deleteVendors() ;

            }else{


                return ;
            }


        }


        function deleteVendors(){


            var dataToUpdate = {

                delete_status:true
            };
              RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,recordToDelete.raw._id , success, error );



        }





        function success(){

            masterStore.remove( recordToDelete ) ;
           applyPlaceHolderRole() ;

        }

        function error(){

        Ext.Viewport.setMasked(false);
        }


        var inhouseRec ;


        function applyPlaceHolderRole(){

            var searchQuery = {

                user_role:roleToDelete
            };

            var changedRole = {
                "user_role": placeHolderRole
            };

            var inhouseMasterStore = Ext.getStore('inhouseMasterStore') ;

            inhouseRec = inhouseMasterStore.findRecord("user_role",roleToDelete);

             if(inhouseRec)
             {
                 RMdatalink.iwa.rdl.doUpdateCollection(inhouseMasterStore, changedRole ,inhouseRec.raw._id  ,onUserUpdateSuccess , onUserUpdateFails );
             }else{

                  RMdatalink.app.getController('RetailerDeatilsDataSet').setInhouseData();
                 Ext.Viewport.setMasked(false);
             }

        }


        function onUserUpdateSuccess(){





                inhouseRec.set("user_role",placeHolderRole);
                inhouseRec.dirty = true ;

            applyPlaceHolderRole() ;


        }


        function onUserUpdateFails(){

            Ext.Viewport.setMasked(false);
        }


    },

    deleteInvoiceFromHistory: function() {
        var vendors = Ext.ComponentQuery.query('#billingDtHistoryListPanel')[0].down('#mainList').getSelection();




        var that = this ;



        var masterStore = Ext.getStore('InvoiceHistoryStore');
        if(vendors.length == 0 ){
            Ext.Msg.alert("Alert","Select at least one record to delete",Ext.emptyFn);
            return ;
        }


        var isPayments = Ext.getStore('InvoicePaymentsStore').getData().all.length > 0 ;

        // if(vendors[0].data.payments && vendors[0].data.payments.length !=  0){
        if(isPayments){

            Ext.Msg.alert("Alert","Can not delete paid invoice, Delete payments and try again.",Ext.emptyFn);
            return ;
        }


        Ext.Msg.confirm("Confirm","Are you sure you want to delete records.",onMessageAns ,this);


        function onMessageAns(action,opt,confirmBox){


            if(action == "yes"){


                 Ext.Viewport.setMasked({
                                            xtype: 'loadmask'
                                        });


                deleteVendors() ;

            }else{


                return ;
            }


        }


        var index = 0 ;
         var rec = null ;
        function deleteVendors(){


            if(index < vendors.length )
            {
            var dataToUpdate = {

                delete_status:true
            };



              rec = vendors[index];

                if(!rec.raw){

                     Ext.Viewport.setMasked(false);
                     return ;
                }

              var _id = rec.raw._id ;
              RMdatalink.iwa.rdl.doUpdateCollection(masterStore, dataToUpdate ,_id , success, error );

            }else{

                Ext.Viewport.setMasked(false);

               // Ext.ComponentQuery.query('#billingDtlsViewCurrentSubBtn')[0].fireEvent('tap');
            }

        }





        function success(){

            RMdatalink.app.getController('InvoiceHistoryController').setUpPrevInvoice(rec.data);

            masterStore.remove( rec ) ;

            index ++;
            deleteVendors() ;
        }

        function error(){

             index ++;
            deleteVendors() ;

        }
    }

});