/*
 * File: app/view/ResizableNote.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.view.ResizableNote', {
    extend: 'Ext.form.FieldSet',
    alias: 'widget.resizablenote',

    requires: [
        'Ext.field.TextArea'
    ],

    config: {
        itemId: 'ResizableNote',
        cls: [
            'x-rm-resizeTxtArea',
            'x-rm-rdnotes-sticky '
        ],
        items: [
            {
                xtype: 'textareafield',
                cls: 'x-rm-rdnotes-sticky ',
                itemId: 'resizableNoteTextArea',
                minHeight: '50px',
                padding: '5 5 5 5',
                style: 'resize:both !important;'
            }
        ],
        listeners: [
            {
                fn: 'onResizableNoteTextAreaChange',
                event: 'change',
                delegate: '#resizableNoteTextArea'
            }
        ]
    },

    onResizableNoteTextAreaChange: function(textfield, newValue, oldValue, eOpts) {
                                  var height =  textfield.getEl().dom.scrollHeight + 50 ;
                                  var numOfRows=textfield.getValue().split("\n").length;


                                  numOfRows= numOfRows++;
                                  textfield.setMaxRows( numOfRows );


    },

    setValue: function(val) {
        this.down('#resizableNoteTextArea').setValue(val);
    },

    getValue: function() {
        return this.down('#resizableNoteTextArea').getValue();
    }

});