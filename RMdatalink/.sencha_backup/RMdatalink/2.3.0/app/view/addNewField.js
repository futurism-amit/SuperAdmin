/*
 * File: app/view/addNewField.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RMdatalink.view.addNewField', {
    extend: 'Ext.Sheet',
    alias: 'widget.addNewField',

    requires: [
        'Ext.form.Panel',
        'Ext.field.Text',
        'Ext.Button'
    ],

    config: {
        cls: 'x-rm-alertpopup',
        height: '130px',
        hideAnimation: false,
        id: 'addNewField',
        showAnimation: false,
        width: '250px',
        hideOnMaskTap: true,
        scrollable: false,
        items: [
            {
                xtype: 'container',
                height: '96%',
                items: [
                    {
                        xtype: 'formpanel',
                        action: 'setScrollBarVisible',
                        cls: [
                            'x-rm-rdformpanel',
                            'x-rm-rdmanagerform'
                        ],
                        height: '98%',
                        margin: '2%',
                        scrollable: true,
                        items: [
                            {
                                xtype: 'textfield',
                                itemId: 'newFieldName',
                                label: 'Field Name',
                                labelWidth: '100px',
                                maxLength: 20
                            },
                            {
                                xtype: 'textfield',
                                itemId: 'newFieldKey',
                                label: 'Field Key',
                                labelWidth: '100px',
                                maxLength: 40
                            }
                        ]
                    }
                ]
            },
            {
                xtype: 'container',
                docked: 'bottom',
                height: '30px',
                margin: '5 0 5 0',
                layout: {
                    type: 'hbox',
                    pack: 'center'
                },
                items: [
                    {
                        xtype: 'button',
                        cls: 'x-rm-alertpopupbtns',
                        itemId: 'createNewLabelAddBtn',
                        margin: '0 1%',
                        ui: 'plain',
                        width: '100px',
                        pressedCls: 'x-rm-alertpopupbtns-pressing',
                        text: 'ADD'
                    },
                    {
                        xtype: 'button',
                        cls: 'x-rm-alertpopupbtns',
                        itemId: 'alertCreateNewLabelNoBtn',
                        margin: '0 1%',
                        ui: 'plain',
                        width: '100px',
                        pressedCls: 'x-rm-alertpopupbtns-pressing',
                        text: 'CANCEL'
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onAlertPopUpYesBtnTap',
                event: 'tap',
                delegate: '#createNewLabelAddBtn'
            },
            {
                fn: 'onAlertPopUpNoBtnTap',
                event: 'tap',
                delegate: '#alertCreateNewLabelNoBtn'
            }
        ]
    },

    onAlertPopUpYesBtnTap: function(button, e, eOpts) {
        RMdatalink.app.getController('inhouse.DetailScreenController').addNewRelFldBtnTaped() ;




    },

    onAlertPopUpNoBtnTap: function(button, e, eOpts) {
        //this.fireEvent("alertdecline",this);
        this.destroy();
    }

});