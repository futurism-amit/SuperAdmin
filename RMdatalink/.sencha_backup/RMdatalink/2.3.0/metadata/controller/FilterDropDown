{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "FilterDropDown",
        "designer|userClassName": "FilterDropDown"
    },
    "designerId": "f9c252b2-2c54-4b3e-b61b-33f38cb1dc73",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "filterDropDown",
                "designer|params": [
                    "sheet",
                    "filterData"
                ],
                "designer|targetType": "filterDropDown",
                "fn": "onFilterWithData",
                "implHandler": [
                    "console.error(filterData);\r",
                    "console.error(sheet);\r",
                    "\r",
                    "var activeCard = Ext.ComponentQuery.query('#RMContentPanel')[0].getActiveItem();\r",
                    "var activeTab = activeCard.down('tabpanel').getActiveItem();\r",
                    "\r",
                    "var currentList = activeTab.down('list');\r",
                    "var currentStore = currentList.getStore();\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "// ****  IF  LIST IS  EMPTY  ********\r",
                    "if(!currentStore)\r",
                    "{\r",
                    "    return;\r",
                    "}\r",
                    "\r",
                    "currentStore.clearFilter();                   //remove all existing filters, if any\r",
                    "\r",
                    "var checkedItems = filterData.productSubscriptions;\r",
                    "var storeKeys = currentStore.getModel().getFields().keys;\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(filterData.due_in) {\r",
                    "\r",
                    "    filterData.due_in = parseInt(filterData.due_in) ;\r",
                    "    if(filterData.due_in>0) {\r",
                    "\r",
                    "        var currentDate = new Date();\r",
                    "        var createdInPastFilter = new Ext.util.Filter({\r",
                    "            filterFn: function(item) {\r",
                    "                var lastCreatedDate = new Date( getDueDate(item.data));\r",
                    "                var differenceInDays = Ext.Date.diff(currentDate,lastCreatedDate, Ext.Date.DAY);\r",
                    "\r",
                    "                if(differenceInDays <= filterData.due_in)\r",
                    "                    return true;\r",
                    "                return false;\r",
                    "            }\r",
                    "        });\r",
                    "        currentStore.filter([createdInPastFilter]);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "for(var i=0;i<checkedItems.length;i++) {\r",
                    "    if(storeKeys.indexOf(checkedItems[i].filterKey) !== -1) {\r",
                    "        if(checkedItems[i].filterValue)\r",
                    "            currentStore.filter(checkedItems[i].filterKey, checkedItems[i].filterValue);\r",
                    "        else {\r",
                    "            //console.log(\"remove \"+checkedItems[i].filterKey+\" filter\");\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "var monthlyRange = filterData.monthlyRange;\r",
                    "var owedRange = filterData.owedRange;\r",
                    "\r",
                    "var minMonthly=0, maxMonthly=0;\r",
                    "var minOwed=0, maxOwed=0;\r",
                    "\r",
                    "for(var i=0;i<monthlyRange.length;i++) {\r",
                    "    if(monthlyRange[i].filterKey === 'from')\r",
                    "        minMonthly = monthlyRange[i].filterValue;\r",
                    "    else\r",
                    "        maxMonthly = monthlyRange[i].filterValue;\r",
                    "}\r",
                    "\r",
                    "if(storeKeys.indexOf('store_monthly_subscription') !== -1) {\r",
                    "    if(minMonthly >= 0 && maxMonthly > 0 && minMonthly < maxMonthly) {\r",
                    "\r",
                    "        var monthlyRangeFilter = new Ext.util.Filter({\r",
                    "            filterFn: function(item) {\r",
                    "\r",
                    "                var data = parseFloat(item.data.store_monthly_subscription.replace(\"$\",'').replace(\",\",\"\"));\r",
                    "                if(minMonthly<data && data<=maxMonthly)\r",
                    "                    return true;\r",
                    "                return false;\r",
                    "            }\r",
                    "        });\r",
                    "        currentStore.filter([monthlyRangeFilter]);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "for(var i=0;i<owedRange.length;i++) {\r",
                    "    if(owedRange[i].filterKey === 'from')\r",
                    "        minOwed = owedRange[i].filterValue;\r",
                    "    else\r",
                    "        maxOwed = owedRange[i].filterValue;\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(storeKeys.indexOf('owed') !== -1) {\r",
                    "\r",
                    "    if(minOwed >= 0 && maxOwed > 0 && minOwed < maxOwed) {\r",
                    "\r",
                    "        var owedRangeFilter = new Ext.util.Filter({\r",
                    "            filterFn: function(item) {\r",
                    "\r",
                    "                var data = parseFloat(item.data.owed.replace(\"$\",'').replace(\",\",\"\"));\r",
                    "                if(minOwed<data && data<=maxOwed)\r",
                    "                    return true;\r",
                    "                return false;\r",
                    "            }\r",
                    "        });\r",
                    "        currentStore.filter([owedRangeFilter]);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(storeKeys.indexOf('store_modified_in_past') !== -1) {\r",
                    "\r",
                    "    if(filterData.modifiedInPastDays>0) {\r",
                    "\r",
                    "        var currentDate = new Date();\r",
                    "        var modifiedInPastFilter = new Ext.util.Filter({\r",
                    "            filterFn: function(item) {\r",
                    "                var lastModifiedDate = new Date(item.data.store_modified_in_past);\r",
                    "                var differenceInDays = Ext.Date.diff(lastModifiedDate,currentDate,Ext.Date.DAY);\r",
                    "\r",
                    "                if(differenceInDays<=filterData.modifiedInPastDays)\r",
                    "                    return true;\r",
                    "                return false;\r",
                    "            }\r",
                    "        });\r",
                    "        currentStore.filter([modifiedInPastFilter]);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(storeKeys.indexOf('store_created_in_past') !== -1) {\r",
                    "\r",
                    "    if(filterData.createdInPastDays>0) {\r",
                    "\r",
                    "        var currentDate = new Date();\r",
                    "        var createdInPastFilter = new Ext.util.Filter({\r",
                    "            filterFn: function(item) {\r",
                    "                var lastCreatedDate = new Date(item.data.store_created_in_past);\r",
                    "                var differenceInDays = Ext.Date.diff(lastCreatedDate,currentDate,Ext.Date.DAY);\r",
                    "\r",
                    "                if(differenceInDays<=filterData.createdInPastDays)\r",
                    "                    return true;\r",
                    "                return false;\r",
                    "            }\r",
                    "        });\r",
                    "        currentStore.filter([createdInPastFilter]);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if(storeKeys.indexOf('overDue') !== -1) {\r",
                    "    if(filterData.pastDueFor>0) {\r",
                    "        var createdPastDueForFilter = new Ext.util.Filter({\r",
                    "            filterFn: function(item) {\r",
                    "                if(item.data.overDue === filterData.pastDueFor)\r",
                    "                    return true;\r",
                    "                return false;\r",
                    "            }\r",
                    "        });\r",
                    "        currentStore.filter([createdPastDueForFilter]);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "//*********  FOR VENDOR FILTER  *********\r",
                    "\r",
                    "if(storeKeys.indexOf('vendor_modified_in_past') !== -1) {\r",
                    "\r",
                    "    if(filterData.modifiedInPastDays>0) {\r",
                    "\r",
                    "        var currentDate = new Date();\r",
                    "        var modifiedInPastFilter = new Ext.util.Filter({\r",
                    "            filterFn: function(item) {\r",
                    "                var lastModifiedDate = new Date(item.data.vendor_modified_in_past);\r",
                    "                var differenceInDays = Ext.Date.diff(lastModifiedDate,currentDate,Ext.Date.DAY);\r",
                    "\r",
                    "                if(differenceInDays<=filterData.modifiedInPastDays)\r",
                    "                    return true;\r",
                    "                return false;\r",
                    "            }\r",
                    "        });\r",
                    "        currentStore.filter([modifiedInPastFilter]);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "if(storeKeys.indexOf('vendor_created_in_past') !== -1) {\r",
                    "    if(filterData.createdInPastDays>0) {\r",
                    "        var currentDate = new Date();\r",
                    "        var createdInPastFilter = new Ext.util.Filter({\r",
                    "            filterFn: function(item) {\r",
                    "                var lastCreatedDate = new Date(item.data.vendor_created_in_past);\r",
                    "                var differenceInDays = Ext.Date.diff(lastCreatedDate,currentDate,Ext.Date.DAY);\r",
                    "\r",
                    "                if(differenceInDays<=filterData.createdInPastDays)\r",
                    "                    return true;\r",
                    "                return false;\r",
                    "            }\r",
                    "        });\r",
                    "        currentStore.filter([createdInPastFilter]);\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    "\r",
                    "function getDueDate(value){\r",
                    "                       if(value.product_billng){\r",
                    "\r",
                    "                           var d1 = null;\r",
                    "                           var d2 = null ;\r",
                    "\r",
                    "                           if(value.product_billng.product_datalink){\r",
                    "\r",
                    "                               d1 = value.product_billng.product_datalink.due_date;\r",
                    "                           }\r",
                    "                           if(value.product_billng.product_rmpro){\r",
                    "\r",
                    "                               d2 = value.product_billng.product_rmpro.due_date;\r",
                    "                           }\r",
                    "\r",
                    "                           if( d1 && d2){\r",
                    "                               var d3 = new Date(d1);\r",
                    "                               var d4 = new Date(d2);\r",
                    "                               return (d3 < d4 ? d1 : d2) ;\r",
                    "                           }else{\r",
                    "\r",
                    "                               return (d1 ? d1 : d2 ? d2 : \"\") ;\r",
                    "                           }\r",
                    "\r",
                    "                       }\r",
                    "\r",
                    "                        return \"\";\r",
                    "\r",
                    "                   }"
                ],
                "name": "filterwithdata"
            },
            "designerId": "14d18377-4fb7-41f8-9daa-a6fb4bdf48c1"
        }
    ]
}